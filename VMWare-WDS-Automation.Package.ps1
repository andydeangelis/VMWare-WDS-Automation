#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 9e329b64-f4ea-482a-8786-64b2151c8568
# Source File: C:\Users\dalthakar\OneDrive\Script_Projects\VMWare-WDS-Automation\VMWare-WDS-Automation.psproj
#------------------------------------------------------------------------
#region Project Recovery Data (DO NOT MODIFY)
<#RecoveryData:
bQgAAB+LCAAAAAAABACtVt9v2jAQfq/U/wHlcVKgMMqoBpEoiI6ptIgweKk0meQAF8fObKfA/vpd
cBJoGCpS+pLk7uzvfn0+pzUGT7yB3PWIJs71VanUGknxCp4uuTvuraTg9C/4batPmAJrr+xTpkG2
rS/lUFW/x8/AvHzzqm4Dtv9Y7J8Kn0azAhaW9VZbe0foagpSUcGdWvmmVUmFxIZeYNBz7uBr7W7e
qNuLOhC73qwRu/mt2bAb9Xmtelv1mreNZquSLE62JhlMdiE4CHwspuCC+eguETOF04+4pzEIhZBG
k18xFH7E4LydBmR5Yk5FdZzcsXcUS/cRZVjoG8txNZE6CuPamdTOrSy5KyLj7kxkhM0ZwwIkcA/S
NNrWgL+JNdgPTMwJ+429sRzzreJGfYD+Hzx3JTb2kFDeFzJAvIXlpFLc8AvDTch0Pt4BV5owNpIw
hj/KxJ315uW9tUAiHd+fDg+ZZOIFqZyDdIEh1+LTpLSQYIBzys+s1ANo25DrfjciepWvVd5eoFoz
yn2xUWOB3DV5HWsK1Axj7PgB5SOi1EZI34DntQUcJHH2gehI5oJPlQXgkTePwiPsl8IjnlHpoCoS
uZDrpRRR2BMBnrOfgvIk+lPDR25qVjKdXsgr2dpMEGRFeUk/jYsTUNqedEehkDrPw2PbBRy82Gc3
wiMV4B317OZdHpkKzgiK45iwHlXrw6A46Iox54l6XZJy/iAXGkH6h1CakyAbP5niBNYI5i7Krkoj
PUu6pJyweMET7nWmwxl2xZ71XLsTYWlJ7BQRQ9zVqpwsv75qVd79XvwDmYe8xG0IAAA=#>
#endregion
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2018 v5.5.150
     Generated on:       9/12/2019 1:24 PM
     Generated by:       dalthakar
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2018
#>



#region Source: Startup.pss
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
6wMAACODCAAAAAAABAC9k0trg0AQx++FfgfJWdRlXU1AhdCQS+mDWtJeRx1l6T7C7prgt69NS1Jo
SUsOMpd5MPPjz8xkT1jrHZphBQ680bFcq3xGAzIrrq88L3swvOMKxJoLvAeJRenAuH4bbK3Nwh/V
Q8/SWpSV4GgP8SkzFOVgHUrf23yR4iD6MN+76YXrDeYKe2dA+N5jP06ob3F41m+o8ipNgdUsIQsa
YzRfZOFx5u+M4A4UdChRuWDZOy3BjcATmfyXTEnV0jlLoKFJjJT9TX7hqtF7G6y1kXYSrSsDe666
S1gRbVmbtoQ0LAIKZ1jS1toIXk2jaLzHSUCvUkwjiBusnTZDiWbHa7zoMM4v6xh+fl4Wfn/u4h27
t81y6wMAAA==#>
#endregion
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
<#
    .SYNOPSIS
        The Main function starts the project application.
    
    .PARAMETER Commandline
        $Commandline contains the complete argument string passed to the script packager executable.
    
    .NOTES
        Use this function to initialize your script and to call GUI forms.
		
    .NOTES
        To get the console output in the Packager (Forms Engine) use: 
		$ConsoleOutput (Type: System.Collections.ArrayList)
#>
	Param ([String]$Commandline)
		
	#--------------------------------------------------------------------------
	#TODO: Add initialization script here (Load modules and check requirements)
	
	
	#--------------------------------------------------------------------------
	
	if((Show-MainForm_psf) -eq 'OK')
	{
		if (-not(Get-InstalledModule -Name "VMWare.PowerCLI"))
		{
			try
			{
				Set-ExecutionPolicy Unrestricted -Force
				Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force
				Set-PSRepository -Name "PSGallery" -InstallationPolicy Trusted
				Install-Module -Name "VMWare.PowerCLI" -Force -Scope AllUsers
				Install-Module -Name "PSParallel" -Force -Scope AllUsers
				Write-Host "All required modules successfully installed on" $computer -ForegroundColor Green
				Import-Module "VMWare.PowerCLI"
				Import-Module "PSParallel"
			}
			catch
			{
				
				Write-Host "Unable to install one or more modules on" $computer "Please install manually or resolve connectivity issues." -ForegroundColor Red
			}
		}
		else
		{
			Write-Host "All required modules are already installed. Checking for module updates on $computer." -ForegroundColor Green
			try
			{
				Set-ExecutionPolicy Unrestricted -Force
				Update-Module -Name "VMWare.PowerCLI" -Force -Confirm:$false -ErrorAction SilentlyContinue
				Update-Module -Name "PSParallel" -Force -Confirm:$false -ErrorAction SilentlyContinue
				Import-Module "VMware.PowerCLI"
				Import-Module "PSParallel"
				Write-Host "All required modules are up to date on" $computer -ForegroundColor Green
			}
			catch
			{
				Write-Host "Unable to update one or more modules on $computer. Please install manually or resolve connectivity issues." -ForegroundColor Red
			}
		}
	}
	
	$script:ExitCode = 0 #Set the exit code for the Packager
}







#endregion Source: Startup.pss

#region Source: Globals.ps1
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	
	
	#Sample function that provides the location of the script
	function Get-ScriptDirectory
	{
	<#
		.SYNOPSIS
			Get-ScriptDirectory returns the proper location of the script.
	
		.OUTPUTS
			System.String
		
		.NOTES
			Returns the correct path within a packaged executable.
	#>
		[OutputType([string])]
		param ()
		if ($null -ne $hostinvocation)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	
	#Sample variable that provides the location of the script
	[string]$ScriptDirectory = Get-ScriptDirectory
	
	#Credential object for vCenter authentication.
	$vcCredential = $null
	
	#vCenter connection object.
	$vcenterConnection = $null
	
	#VM build queue
	$vmbuilds = [System.Collections.ArrayList]@()
	
	#VM feature config queue
	$vmFeatures = [System.Collections.ArrayList]@()
	
	#VM role config queue
	$vmRoles = [System.Collections.ArrayList]@()
	
	#VM domain info queue
	$vmDomainInfo = [System.Collections.ArrayList]@()
	
	#VM Operating System
	$vmOS = [System.Collections.ArrayList]@()
	
	#VM Local Admin Passwords
	$vmAdminPasswords = [System.Collections.ArrayList]@()
	
	#VM Additional User Accounts
	$vmLocalUsers = [System.Collections.ArrayList]@()
	
	#VM Additional User Accounts
	$vmWorkgroupDomain = [System.Collections.ArrayList]@()
	
	#VM full OS config
	$vmFullOSConfig = [System.Collections.ArrayList]@()
	
	#VM full OS config
	$vmTimeZones = [System.Collections.ArrayList]@()
	
	#Step 3 Selected VM
	[string]$vmSelectedStep3
	
	#Step 4 Selected VM
	[string]$vmSelectedStep4
	
	#VM Additional Disks
	$vmAdditionalDisks = [System.Collections.ArrayList]@()
	
	#VM Additional NICs
	$vmAdditionalNICs = [System.Collections.ArrayList]@()
	
	#VM Additional NICs
	$vmOSKeys = [System.Collections.ArrayList]@()
	
	# Import all functions.
	
	foreach ($item in (Get-ChildItem -Path "$ScriptDirectory\Functions\"))
	{
		. "$($item.FullName)"
	}
	
	if (-not (Get-Item "$ScriptDirectory\logs\" -ErrorAction SilentlyContinue))
	{
		New-Item -Path $ScriptDirectory -Name logs -ItemType Directory
	}
	else
	{
		foreach ($item in (Get-ChildItem -Path "$ScriptDirectory\logs\"))
		{
			$item | Remove-Item -Force -Recurse
		}
	}
#endregion Source: Globals.ps1

#region Source: MainForm.psf
function Show-MainForm_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Define SAPIEN Types
	#----------------------------------------------
	try{
		[ProgressBarOverlay] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms', 'System.Drawing') -TypeDefinition  @" 
		using System;
		using System.Windows.Forms;
		using System.Drawing;
        namespace SAPIENTypes
        {
		    public class ProgressBarOverlay : System.Windows.Forms.ProgressBar
	        {
                public ProgressBarOverlay() : base() { SetStyle(ControlStyles.OptimizedDoubleBuffer | ControlStyles.AllPaintingInWmPaint, true); }
	            protected override void WndProc(ref Message m)
	            { 
	                base.WndProc(ref m);
	                if (m.Msg == 0x000F)// WM_PAINT
	                {
	                    if (Style != System.Windows.Forms.ProgressBarStyle.Marquee || !string.IsNullOrEmpty(this.Text))
                        {
                            using (Graphics g = this.CreateGraphics())
                            {
                                using (StringFormat stringFormat = new StringFormat(StringFormatFlags.NoWrap))
                                {
                                    stringFormat.Alignment = StringAlignment.Center;
                                    stringFormat.LineAlignment = StringAlignment.Center;
                                    if (!string.IsNullOrEmpty(this.Text))
                                        g.DrawString(this.Text, this.Font, Brushes.Black, this.ClientRectangle, stringFormat);
                                    else
                                    {
                                        int percent = (int)(((double)Value / (double)Maximum) * 100);
                                        g.DrawString(percent.ToString() + "%", this.Font, Brushes.Black, this.ClientRectangle, stringFormat);
                                    }
                                }
                            }
                        }
	                }
	            }
              
                public string TextOverlay
                {
                    get
                    {
                        return base.Text;
                    }
                    set
                    {
                        base.Text = value;
                        Invalidate();
                    }
                }
	        }
        }
"@ -IgnoreWarnings | Out-Null
	}
	#endregion Define SAPIEN Types

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formVMAutomationTool = New-Object 'System.Windows.Forms.Form'
	$buttonCancel = New-Object 'System.Windows.Forms.Button'
	$buttonBack = New-Object 'System.Windows.Forms.Button'
	$buttonFinish = New-Object 'System.Windows.Forms.Button'
	$tabcontrolWizard = New-Object 'System.Windows.Forms.TabControl'
	$tabpageStep1 = New-Object 'System.Windows.Forms.TabPage'
	$pictureboxLoading = New-Object 'System.Windows.Forms.PictureBox'
	$labelStep1 = New-Object 'System.Windows.Forms.Label'
	$panel1 = New-Object 'System.Windows.Forms.Panel'
	$labelOKStep1 = New-Object 'System.Windows.Forms.Label'
	$labelConnectionStatusNotC = New-Object 'System.Windows.Forms.Label'
	$labelUsernameNotConnected = New-Object 'System.Windows.Forms.Label'
	$labelVCenterServerNotConn = New-Object 'System.Windows.Forms.Label'
	$labelSetVSphereCredential = New-Object 'System.Windows.Forms.Label'
	$buttonEnterCredentials = New-Object 'System.Windows.Forms.Button'
	$vcenterTextbox = New-Object 'System.Windows.Forms.TextBox'
	$labelVCenterFQDNOrIPAddre = New-Object 'System.Windows.Forms.Label'
	$tabpageStep2 = New-Object 'System.Windows.Forms.TabPage'
	$labelStep2Network = New-Object 'System.Windows.Forms.Label'
	$labelStep2Memory = New-Object 'System.Windows.Forms.Label'
	$labelStep2CPU = New-Object 'System.Windows.Forms.Label'
	$labelStep2VMName = New-Object 'System.Windows.Forms.Label'
	$listviewVMsStep2 = New-Object 'System.Windows.Forms.ListView'
	$buttonDeleteVMFromQueue = New-Object 'System.Windows.Forms.Button'
	$buttonAddVirtualMachine = New-Object 'System.Windows.Forms.Button'
	$labelStep2 = New-Object 'System.Windows.Forms.Label'
	$tabpageStep3 = New-Object 'System.Windows.Forms.TabPage'
	$treeviewVMListStep3 = New-Object 'System.Windows.Forms.TreeView'
	$panel6 = New-Object 'System.Windows.Forms.Panel'
	$labelVMStep3 = New-Object 'System.Windows.Forms.Label'
	$buttonVNICAdd = New-Object 'System.Windows.Forms.Button'
	$labelVNICConfig = New-Object 'System.Windows.Forms.Label'
	$buttonVDiskAdd = New-Object 'System.Windows.Forms.Button'
	$labelVDiskConfig = New-Object 'System.Windows.Forms.Label'
	$labelOptionalConfig = New-Object 'System.Windows.Forms.Label'
	$tabpageStep4 = New-Object 'System.Windows.Forms.TabPage'
	$treeviewVMListStep4 = New-Object 'System.Windows.Forms.TreeView'
	$panel7 = New-Object 'System.Windows.Forms.Panel'
	$labelOK1 = New-Object 'System.Windows.Forms.Label'
	$buttonSetHostname = New-Object 'System.Windows.Forms.Button'
	$labelVMNameStep4 = New-Object 'System.Windows.Forms.Label'
	$labelOSConfig = New-Object 'System.Windows.Forms.Label'
	$comboboxTimezone = New-Object 'System.Windows.Forms.ComboBox'
	$labelTimezone = New-Object 'System.Windows.Forms.Label'
	$buttonOpenFeatureSelection = New-Object 'System.Windows.Forms.Button'
	$labelSelectRoles = New-Object 'System.Windows.Forms.Label'
	$labelSelectFeatures = New-Object 'System.Windows.Forms.Label'
	$buttonOpenRolesSelection = New-Object 'System.Windows.Forms.Button'
	$tabpageStep5 = New-Object 'System.Windows.Forms.TabPage'
	$labelAddLocalUsers = New-Object 'System.Windows.Forms.Label'
	$buttonAddLocalUsers = New-Object 'System.Windows.Forms.Button'
	$labelDomainWorkgroupRequi = New-Object 'System.Windows.Forms.Label'
	$labelOK3 = New-Object 'System.Windows.Forms.Label'
	$labelOK2 = New-Object 'System.Windows.Forms.Label'
	$buttonSet = New-Object 'System.Windows.Forms.Button'
	$labelAdministratorPasswor = New-Object 'System.Windows.Forms.Label'
	$button2 = New-Object 'System.Windows.Forms.Button'
	$tabpageStep6 = New-Object 'System.Windows.Forms.TabPage'
	$labelProgress = New-Object 'System.Windows.Forms.Label'
	$progressbarVMBuild = New-Object 'SAPIENTypes.ProgressBarOverlay'
	$webbrowserVMBuildSummary = New-Object 'System.Windows.Forms.WebBrowser'
	$buttonBuildAndConfigureVMs = New-Object 'System.Windows.Forms.Button'
	$buttonNext = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	#-------------------------------------------------------
	# NOTE: When new TabPage added place the validation code
	# 		in the Test-WizardPage function.
	#-------------------------------------------------------
	function Test-WizardPage
	{
	<#
		Add TabPages and place the validation code in this function
	#>
		[OutputType([boolean])]
		param([System.Windows.Forms.TabPage]$tabPage)
		
		if($tabPage -eq $tabpageStep1)
		{
			#TODO: Enter Validation Code here for Step 1
			if(-not $global:vcenterConnection.IsConnected)
			{
				return $false
			}
			else
			{
				return $true
			}
			
		}
		elseif ($tabPage -eq $tabpageStep2)
		{
			#TODO: Enter Validation Code here for Step 2
			if($global:vmbuilds -ne $null)
			{
				return $true
			}
			
			return $false
		}
		elseif ($tabPage -eq $tabpageStep3)
		{
			#TODO: Enter Validation Code here for Step 2
			if ($global:vmbuilds -ne $null)
			{
				return $true
			}
			
			return $false
		}
		elseif ($tabPage -eq $tabpageStep4)
		{
			$hostnameComplete = $true
			
			foreach ($node in $treeviewVMListStep4.Nodes)
			{
				if ($node.Text -notin $global:vmWorkgroupDomain.VMName)
				{
					$hostnameComplete = $false
				}
			}
			
			if ($hostnameComplete)
			{
				return $true
			}
			
			return $false
			
		}
		elseif ($tabPage -eq $tabpageStep5)
		{
			if (($global:vmAdminPasswords -ne $null) -and ($global:vmWorkgroupDomain -ne $null))
			{
				return $true
			}
			
			return $false
		}
		elseif ($tabPage -eq $tabpageStep6)
		{
			$string = ""
			if (Get-ChildItem -Path "$ScriptDirectory\logs\test.html" -ErrorAction Ignore) { Remove-Item "$ScriptDirectory\logs\test.html" -Force}		
			foreach ($vm in $global:vmBuilds)
			{
				#$string = "<b>This is my test page.</b>"
				$string = "
						<p>
							<font size=3><b>VMName: <font color=red>$($vm.VMName)</font></b></font><br>
							<font size=2>
							&nbsp;&nbsp;&nbsp;<b>VM Host:</b> $($vm."VM Host")<br>
							&nbsp;&nbsp;&nbsp;<b>Datacenter:</b> $($vm.Datacenter)<br>
							&nbsp;&nbsp;&nbsp;<b>Datastore:</b> $($vm.Datastore)<br>
							&nbsp;&nbsp;&nbsp;<b>CPU Count:</b> $($vm.NumCPU)<br>
							&nbsp;&nbsp;&nbsp;<b>Memory:</b> $($vm.Memory)<br>
							&nbsp;&nbsp;&nbsp;<b>Network:</b> $($vm.Network)<br>
							&nbsp;&nbsp;&nbsp;<b>Template:</b> $($vm.Template)<br>
							&nbsp;&nbsp;&nbsp;<b>Location:</b> $($vm.Location)<br>
							&nbsp;&nbsp;&nbsp;<b>IP Type:</b> $($vm."IP Type")<br>
					"
				if ($vm."IP Type" -eq "Static")
				{
					$string = $string + "
										&nbsp;&nbsp;&nbsp;<b>IP Address:</b> $($vm."IP Address")<br>
										&nbsp;&nbsp;&nbsp;<b>Subnet Mask:</b> $($vm."Subnet Mask")<br>
										&nbsp;&nbsp;&nbsp;<b>Default Gateway:</b> $($vm."Default Gateway")<br>
										&nbsp;&nbsp;&nbsp;<b>Primary DNS Server:</b> $($vm."Primary DNS Server")<br>
										</font>
									</p>
								"
				}
				else
				{
					$string = $string + "</font></p>"
				}
				
				ConvertTo-Html -Body $string | Out-File "$ScriptDirectory\logs\test.html" -Append
			}
				
			$webbrowserVMBuildSummary.Url = "$ScriptDirectory\logs\test.html"
			
			return $true
		}
		#Add more pages here
		
		return $false
	}
	
	
	
	$buttonFinish_Click={
		#-------------------------------------------------------
		# TODO: Place finalization script here
		#-------------------------------------------------------
		
	}
	
	#region Events and Functions
	$formVMAutomationTool_Load = {
		
		Update-NavButtons
		
		$timeZones = Get-TimeZone -ListAvailable | select DisplayName
		
		foreach ($timeZone in $timeZones)
		{
			$comboboxTimezone.Items.Add($timeZone.DisplayName)
		}
		
		$Path = $env:TEMP
		
		$autoCompleteArray = (Import-Csv "$Path\VcenterHistory\vcenterhistory.log").vcenter
		
		$vcenterTextbox.AutoCompleteCustomSource.AddRange($autoCompleteArray)
		
	}
	
	function Update-NavButtons
	{
		<# 
			.DESCRIPTION
			Validates the current tab and Updates the Next, Prev and Finish buttons.
		#>
		$enabled = Test-WizardPage $tabcontrolWizard.SelectedTab
		$buttonNext.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
		$buttonBack.Enabled = $tabcontrolWizard.SelectedIndex -gt 0
		$buttonFinish.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)	
		#Uncomment to Hide Buttons
		#$buttonNext.Visible = ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
		#$buttonFinish.Visible = ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)
	}
	
	$script:DeselectedIndex = -1
	$tabcontrolWizard_Deselecting=[System.Windows.Forms.TabControlCancelEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
		# Store the previous tab index
		$script:DeselectedIndex = $_.TabPageIndex
	}
	
	$tabcontrolWizard_Selecting=[System.Windows.Forms.TabControlCancelEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
		# We only validate if we are moving to the Next TabPage. 
		# Users can move back without validating
		if($script:DeselectedIndex -ne -1 -and $script:DeselectedIndex -lt $_.TabPageIndex)
		{
			#Validate each page until we reach the one we want
			for($index = $script:DeselectedIndex; $index -lt $_.TabPageIndex; $index++)
			{
				$_.Cancel = -not (Test-WizardPage $tabcontrolWizard.TabPages[$index])
				
				if($_.Cancel) 
				{
					# Cancel and Return if validation failed.
					return;
				}
			}
		}
		
		Update-NavButtons
	}
	
	$buttonBack_Click={
		#Go to the previous tab page
		if($tabcontrolWizard.SelectedIndex -gt 0)
		{
			$tabcontrolWizard.SelectedIndex--
		}
	}
	
	$buttonNext_Click={	
		#Go to the next tab page
		if($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
		{
			$tabcontrolWizard.SelectedIndex++
		}	
	}
	
	#endregion
	
	#------------------------------------------------------
	# NOTE: When a Control State changes you should call
	# 		Update-NavButtons to trigger validation
	#------------------------------------------------------
	
	$radiobuttonOption_CheckedChanged={
		
		if($this.Checked)
		{
			Update-NavButtons
		}
	}
	
	$buttonEnterCredentials_Click={
		
		try
		{
			$pictureboxLoading.Visible = $true
			if ($global:vcenterConnection.IsConnected)
			{
				Disconnect-VIServer -Server * -Force -Confirm:$false
				$labelVCenterServerNotConn.Text = "vCenter Server: Not Connected"
				$labelUsernameNotConnected.Text = "Username: Not Connected"
				$labelConnectionStatusNotC.Text = "Connection Status: Not Connected"
			}
			$global:vcCredential = $null
			$global:vcenterConnection = $null
			$global:vcCredential = Get-Credential -ErrorAction Stop
			Connect-VIServer -Server $vcenterTextbox.Text -Credential $global:vcCredential -ErrorAction Stop
			$global:vcenterConnection = Get-VIServer -Server $vcenterTextbox.Text -ErrorAction Stop
			$buttonEnterCredentials.Enabled = $false
			$pictureboxLoading.Visible = $false
		}
		catch
		{
			"Unable to connect."
		}
		
		If ($global:vcenterConnection.IsConnected)
		{
			$labelVCenterServerNotConn.Text = "vCenter Server: $($vcenterTextbox.Text)"
			$labelUsernameNotConnected.Text = "Username: $($global:vcenterConnection.User)"
			$labelConnectionStatusNotC.Text = "Connection Status: Connected"
			$labelOKStep1.Visible = $true
			
			$Path = $env:TEMP
			
			if (-not (Get-Item "$Path\VcenterHistory" -ErrorAction SilentlyContinue))
			{
				New-Item -Name VcenterHistory -Path $Path -ItemType Directory
			}
			
			if (Get-Item "$Path\VcenterHistory\vcenterhistory.log" -ErrorAction SilentlyContinue)
			{
				$vcHistoryArray = Import-Csv "$Path\VcenterHistory\vcenterhistory.log"
				
				$vcHistoryArray = $vcHistoryArray | ?{ $_.vcenter -ne "$($vcenterTextbox.Text)" }
				
				$object = New-Object PSObject
				
				$object | Add-Member -MemberType NoteProperty -Name vcenter -Value $vcenterTextbox.Text
				
				$vcHistoryArray = [System.Array]$vcHistoryArray + $object
				
				$vcHistoryArray | Export-CSV "$Path\VcenterHistory\vcenterhistory.log" -NoTypeInformation
			}
			else
			{
				$vcHistoryArray = @()
				
				$object = New-Object PSObject
				
				$object | Add-Member -MemberType NoteProperty -Name vcenter -Value $vcenterTextbox.Text
				
				$vcHistoryArray = [System.Array]$vcHistoryArray + $object
				
				$vcHistoryArray | Export-CSV "$Path\VcenterHistory\vcenterhistory.log" -NoTypeInformation
			}
			
			Update-NavButtons
			
		}
		else
		{
			[System.Windows.Forms.MessageBox]::Show("Unable to connect to $($vcenterTextbox.Text). Please try logging on again.")
			$labelOKStep1.Visible = $false
			Update-NavButtons
		}
	}
	
	#region Control Helper Functions
	function Update-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
		
		.PARAMETER ComboBox
			The ComboBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ComboBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red" -Append
			Update-ComboBox $combobox1 "White" -Append
			Update-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Update-ComboBox $combobox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ComboBox]
			$ComboBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]
			$DisplayMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	function Update-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The DataGridView control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the DataGridView's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		.PARAMETER AutoSizeColumns
		    Resizes DataGridView control's columns after loading the items.
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Item,
		    [Parameter(Mandatory=$false)]
			[string]$DataMember,
			[System.Windows.Forms.DataGridViewAutoSizeColumnMode]$AutoSizeColumns = 'None'
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
		{
			$DataGridView.DataSource = $Item.Tables[0]
		}
		elseif ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{
				$array.Add($Item)
			}
			$DataGridView.DataSource = $array
		}
		
		if ($AutoSizeColumns -ne 'None')
		{
			$DataGridView.AutoResizeColumns($AutoSizeColumns)
		}
		
		$DataGridView.ResumeLayout()
	}
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterWMIProperties
				This switch removes WMI properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param(
		[ValidateNotNull()]
		$InputObject, 
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
		
		if($null -eq $Table)
		{
			$Table = New-Object System.Data.DataTable
		}
		
		if ($InputObject -is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
		{
			$Table = $InputObject.Tables[0]
		}
		else
		{
			if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
				
				if ($null -eq $InputObject) { return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach ($item in $InputObject)
				{
					if ($null -ne $item)
					{
						$object = $item
						break
					}
				}
				
				if ($null -eq $object) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if ($null -ne $prop.Value)
						{
							try { $type = $prop.Value.GetType() }
							catch { Out-Null }
						}
						
						if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
							[void]$table.Columns.Add($prop.Name, $type)
						}
						else #Type info not found
						{
							[void]$table.Columns.Add($prop.Name)
						}
					}
				}
				
				if ($object -is [System.Data.DataRow])
				{
					foreach ($item in $InputObject)
					{
						$Table.Rows.Add($item)
					}
					return @( ,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()
			}
			
			foreach ($item in $InputObject)
			{
				$row = $table.NewRow()
				
				if ($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if ($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
		
		return @(,$Table)	
	}
	
	function Update-ListViewColumnSort
	{
	<#
		.SYNOPSIS
			Sort the ListView's item using the specified column.
		
		.DESCRIPTION
			Sort the ListView's item using the specified column.
			This function uses Add-Type to define a class that sort the items.
			The ListView's Tag property is used to keep track of the sorting.
		
		.PARAMETER ListView
			The ListView control to sort.
		
		.PARAMETER ColumnIndex
			The index of the column to use for sorting.
		
		.PARAMETER SortOrder
			The direction to sort the items. If not specified or set to None, it will toggle.
		
		.EXAMPLE
			Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListView]
			$ListView,
			[Parameter(Mandatory = $true)]
			[int]
			$ColumnIndex,
			[System.Windows.Forms.SortOrder]
			$SortOrder = 'None'
		)
		
		if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
		{
			return;
		}
		
		#region Define ListViewItemComparer
		try
		{
			[ListViewItemComparer] | Out-Null
		}
		catch
		{
			Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
		}
		#endregion
		
		if ($ListView.Tag -is [ListViewItemComparer])
		{
			#Toggle the Sort Order
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
				{
					$ListView.Tag.sortOrder = 'Descending'
				}
				else
				{
					$ListView.Tag.sortOrder = 'Ascending'
				}
			}
			else
			{
				$ListView.Tag.sortOrder = $SortOrder
			}
			
			$ListView.Tag.column = $ColumnIndex
			$ListView.Sort() #Sort the items
		}
		else
		{
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
			}
			
			#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
			$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
			$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
		}
	}
	
	
	function Add-ListViewItem
	{
	<#
		.SYNOPSIS
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.DESCRIPTION
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.PARAMETER ListView
			The ListView control to add the items to.
	
		.PARAMETER Items
			The object or objects you wish to load into the ListView's Items collection.
			
		.PARAMETER  ImageIndex
			The index of a predefined image in the ListView's ImageList.
		
		.PARAMETER  SubItems
			List of strings to add as Subitems.
		
		.PARAMETER Group
			The group to place the item(s) in.
		
		.PARAMETER Clear
			This switch clears the ListView's Items before adding the new item(s).
		
		.EXAMPLE
			Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
	#>
		
		Param( 
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.ListView]$ListView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Items,
		[int]$ImageIndex = -1,
		[string[]]$SubItems,
		$Group,
		[switch]$Clear)
		
		if($Clear)
		{
			$ListView.Items.Clear();
	    }
	    
	    $lvGroup = $null
	    if ($Group -is [System.Windows.Forms.ListViewGroup])
	    {
	        $lvGroup = $Group
	    }
	    elseif ($Group -is [string])
	    {
	        #$lvGroup = $ListView.Group[$Group] # Case sensitive
	        foreach ($groupItem in $ListView.Groups)
	        {
	            if ($groupItem.Name -eq $Group)
	            {
	                $lvGroup = $groupItem
	                break
	            }
	        }
	        
	        if ($null -eq $lvGroup)
	        {
	            $lvGroup = $ListView.Groups.Add($Group, $Group)
	        }
	    }
	    
		if($Items -is [Array])
		{
			$ListView.BeginUpdate()
			foreach ($item in $Items)
			{		
				$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
				#Store the object in the Tag
				$listitem.Tag = $item
				
				if($null -ne $SubItems)
				{
					$listitem.SubItems.AddRange($SubItems)
				}
				
				if($null -ne $lvGroup)
				{
					$listitem.Group = $lvGroup
				}
			}
			$ListView.EndUpdate()
		}
		else
		{
			#Add a new item to the ListView
			$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $Items
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
	}
	
	
	function Get-CheckedNode
	{
	<#
		.SYNOPSIS
			This function collects a list of checked nodes in a TreeView
	
		.DESCRIPTION
			This function collects a list of checked nodes in a TreeView
	
		.PARAMETER  $NodeCollection
			The collection of nodes to search
	
		.PARAMETER  $CheckedNodes
			The ArrayList that will contain the all the checked items
		
		.EXAMPLE
			$CheckedNodes = New-Object System.Collections.ArrayList
			Get-CheckedNode $treeview1.Nodes $CheckedNodes
			foreach($node in $CheckedNodes)
			{	
				Write-Host $node.Text
			}
	#>
		param (
				[ValidateNotNull()]
				[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
				[ValidateNotNull()]
				[System.Collections.ArrayList]$CheckedNodes
		)
		
		foreach ($Node in $NodeCollection)
		{
			if ($Node.Checked)
			{
				[void]$CheckedNodes.Add($Node)
			}
			Get-CheckedNode $Node.Nodes $CheckedNodes
		}
	}
	
	#endregion
	
	
	$vcenterTextbox_TextChanged={
		#TODO: Place custom script here
		if ($vcenterTextbox.Text -ne "")
		{
			$buttonEnterCredentials.Enabled = $true
		}
		else
		{
			$buttonEnterCredentials.Enabled = $false
		}
	}
	
	$buttonAddVirtualMachine_Click={
		#TODO: Place custom script here
		if (Show-AddVMForm_psf -eq 'OK')
		{
		}
	}
	
	
	$buttonOpenRolesSelection_Click={
		
		$global:vmSelectedStep4 | Out-File "$ScriptDirectory\logs\vmselectedstep4.log" -Append
		
		if ((Show-WindowsRoles_psf -VMName $global:vmSelectedStep4) -eq 'OK')
		{
			#$selectedRoles = $global:vmRoles | ?{ $_.VMName -eq $vm.VMName } | Select -ExpandProperty Roles		
		}
		
	}
	
	$buttonBuildAndConfigureVMs_Click={
		
		#$progressbarVMBuild.Visible = $true
		
		try
		{
			#$progressbarVMBuild.Maximum = ($global:vmBuilds).Count
			#$progressbarVMBuild.Value = 0
			#$progressbarVMBuild.Step = 1
			
			foreach ($vm in $global:vmbuilds)
			{
				while (@(Get-Job | ?{ $_.State -eq "Running" }).Count -ge 5)
				{
					Write-Host "Waiting for open thread...($NumJobs Maximum)"
					Start-Sleep -Seconds 3
				}
				
				# Let's combine all the OS specific data we gathered for the VM into one variable.
				$osConfigObject = New-Object PSObject
				
				$osConfigObject | Add-Member -MemberType NoteProperty -Name "VMName" -Value $vm.VMName
				
				# Add the data for the domain/workgroup
				$osConfigObject | Add-Member -MemberType NoteProperty -Name "Hostname" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).Hostname
				$osConfigObject | Add-Member -MemberType NoteProperty -Name "DomainName" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).DomainName
				$osConfigObject | Add-Member -MemberType NoteProperty -Name "DomainUser" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).DomainUser
				$osConfigObject | Add-Member -MemberType NoteProperty -Name "DomainPassword" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).DomainPassword
				$osConfigObject | Add-Member -MemberType NoteProperty -Name "IsWorkgroup" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).IsWorkgroup
				$osConfigObject | Add-Member -MemberType NoteProperty -Name "LocalAdminPassword" -Value ($global:vmAdminPasswords | ?{ $_.VMName -eq $vm.VMName }).Password
				$osConfigObject | Add-Member -MemberType NoteProperty -Name "Roles" -Value ($global:vmRoles | ?{ $_.VMName -eq $vm.VMName }).Roles
				$osConfigObject | Add-Member -MemberType NoteProperty -Name "Features" -Value ($global:vmFeatures | ?{ $_.VMName -eq $vm.VMName }).Features
				$osConfigObject | Add-Member -MemberType NoteProperty -Name "Timezone" -Value ($global:vmTimeZones | ?{$_.VMName -eq $vm.VMName}).Timezone
				
				$global:vmFullOSConfig = [System.Array]$global:vmFullOSConfig + $osConfigObject
				
				$osConfigObject | Out-File "$ScriptDirectory\logs\osobject.log" -Append
				
				Start-Job -Name $vm.VMName -ArgumentList $vcenterTextbox.Text, $global:vcCredential, $vm, $ScriptDirectory, $osConfigObject -ScriptBlock {
					
					. "$($args[3])\Functions\Get-FolderbyPath.ps1"
					
					Import-Module VMware.PowerCLI
					
					Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -ParticipateInCeip $false -DisplayDeprecationWarnings $false -Confirm:$false
					
					Connect-VIServer -Server $args[0] -Credential $args[1]
					
					$password = ConvertTo-SecureString "$($args[4].DomainPassword)" -AsPlainText -Force
					$domainCredential = New-Object System.Management.Automation.PSCredential ("$($args[4].DomainUser)", $password)
					
					if ($args[4].IsWorkgroup -eq 'No')
					{
						$osSpec = New-OSCustomizationSpec -OSType "Windows" -Name $args[2].VMName -Type NonPersistent `
														  -FullName "Administrator" `
														  -AdminPassword "$($args[4].LocalAdminPassword)" `
														  -AutoLogonCount 1 `
														  -OrgName "Org1" `
														  -Description "Temporary Spec for $($args[2].VMName)" `
														  -ChangeSid `
														  -DeleteAccounts `
														  -Domain "$($args[4].DomainName)" `
														  -DomainCredentials $domainCredential `
														  -NamingScheme fixed `
														  -NamingPrefix $args[4].Hostname `
														  -ErrorAction Stop
					}
					else
					{
						$osSpec = New-OSCustomizationSpec -OSType "Windows" -Name $args[2].VMName -Type NonPersistent `
														  -FullName "Administrator" `
														  -AdminPassword "$($args[4].LocalAdminPassword)" `
														  -AutoLogonCount 1 `
														  -OrgName "Org1" `
														  -Description "Temporary Spec for $($args[2].VMName)" `
														  -ChangeSid `
														  -DeleteAccounts `
														  -Workgroup "$($args[4].DomainName)" `
														  -NamingScheme fixed `
														  -NamingPrefix $args[4].Hostname `
														  -ErrorAction Stop
					}
					
					if ($args[2].("IP Type") -eq "DHCP")
					{
						Get-OSCustomizationNicMapping -OSCustomizationSpec $osSpec | Set-OSCustomizationNicMapping -IpMode UseDHCP
					}
					else
					{
						Get-OSCustomizationNicMapping -OSCustomizationSpec $osSpec | Set-OSCustomizationNicMapping -IpMode UseStaticIP `
																												   -IpAddress $args[2].("IP Address") `
																												   -SubnetMask $args[2].("Subnet Mask") `
																												   -DefaultGateway $args[2].("Default Gateway") `
																												   -Dns $args[2].("Primary DNS Server")
					}
					
					$vmTemplate = Get-Template -Name $args[2].Template
					
					$destFolder = Get-FolderbyPath -Path "$($args[2].Location)" -Separator "\"
					
					$invoke = New-VM -VMHost $args[2].("VM Host") -Name $args[2].VMName -Datastore $args[2].Datastore -Template $vmTemplate -Location $destFolder -OSCustomizationSpec $osSpec -ErrorAction Stop
					$invoke | Out-File "$ScriptDirectory\logs\invoke.log"
					
					Disconnect-VIServer -Server $args[0]
					
				}
				
			}
			
			do
			{
				Start-Sleep -Milliseconds 5000
			}
			while ((Get-Job -State Running).Count -gt 0)
			
			foreach ($item in $global:vmbuilds)
			{
				Get-VM -Name $item.VMName | Set-VM -MemoryGB $item.Memory -NumCpu $item.NumCPU -Confirm:$false -ErrorAction Stop
				
				Get-NetworkAdapter -VM $item.VMName | Set-NetworkAdapter -NetworkName $item.Network -StartConnected $true -Confirm:$false -ErrorAction Stop
				
				Start-VM -VM $item.VMName -RunAsync
				
				Start-Sleep -Seconds 10
			}
			
			#Start-Sleep -Seconds 90
			
			foreach ($item in $global:vmbuilds)
			{
				$vm = Get-VM -Name $item.VMName
				
				do
				{
					Start-Sleep -Seconds 5
					$vmStatus = (Get-VM -Name "$($item.VMName)").extensionData.Guest.InteractiveGuestOperationsReady
					Write-Host $vmStatus -ForegroundColor Red
				}
				while ($vmStatus -ne $True)
				
				Write-Host $vmStatus -ForegroundColor Green
			}
			
			foreach ($admin in $global:vmAdminPasswords)
			{
				# First, let's create the PSCredential object
				
				$password = ConvertTo-SecureString $admin.Password -AsPlainText -Force
				$localAdminCred = New-Object System.Management.Automation.PSCredential ("Administrator", $password)
				
				# Declare the array that will house each command to run.
				
				$customizeOSScripts = [System.Collections.ArrayList]@()
				
				# Now, let's build the scripts.
				# We'll start with creating the users.
				
				foreach ($user in $global:vmLocalUsers)
				{
					#if ($user.VMName -eq $admin.VMName)
					#{
					if ($user.Administrator -eq "Yes")
					{
						$userCreate = New-Object PSObject
						$userCreate | Add-Member -MemberType NoteProperty -Name "Command" -Value "NET USER $($user.Username) $($user.Password) /add"
						
						$userAdmin = New-Object PSObject
						$userAdmin | Add-Member -MemberType NoteProperty -Name "Command" -Value "NET LOCALGROUP Administrators $($user.Username) /add"
						
						$date = Get-Date -Format "M-d-yyyy"
						$desc = "Admin user created on $date."
						$userTmp = $user.Username
						$userDescription = New-Object PSObject
						$userDescription | Add-Member -MemberType NoteProperty -Name "Command" -Value "Set-LocalUser -Name $userTmp -Description ""$desc"""
						
						$customizeOSScripts = [System.Array]$customizeOSScripts + $userCreate
						$customizeOSScripts = [System.Array]$customizeOSScripts + $userAdmin
						$customizeOSScripts = [System.Array]$customizeOSScripts + $userDescription
					}
					else
					{
						$userCreate = New-Object PSObject
						$userCreate | Add-Member -MemberType NoteProperty -Name "Command" -Value "NET USER $($user.Username) $($user.Password) /add"
						
						$date = Get-Date -Format "M-d-yyyy"
						$desc = "Standard user created on $date."
						$userTmp = $user.Username
						$userDescription = New-Object PSObject
						$userDescription | Add-Member -MemberType NoteProperty -Name "Command" -Value "Set-LocalUser -Name $userTmp -Description ""$desc"""
						
						$customizeOSScripts = [System.Array]$customizeOSScripts + $userCreate
						$customizeOSScripts = [System.Array]$customizeOSScripts + $userDescription
					}
					
					#}
					
				}
				
				# Let's install all selected roles.
				
				foreach ($vm in ($global:vmRoles | ?{ $_.VMName -eq $admin.VMName }))
				{
					foreach ($role in $vm.Roles)
					{
						$object = New-Object PSObject
						$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Install-WindowsFeature -Name $role -IncludeManagementTools"
						$customizeOSScripts = [System.Array]$customizeOSScripts + $object
					}
				}
				
				# Let's customize additional disks.
				
				foreach ($disk in ($global:vmAdditionalDisks | ?{ $_.VMName -eq $admin.VMName }))
				{
					$driveLetter = $disk.DriveLetter
					$driveLabel = "Drive-$($disk.DriveLetter)"
					$driveSize = [int]($disk.DriveSize)
					$confirm = '$false'
					New-HardDisk -VM $admin.VMName -CapacityGB $driveSize -Persistence persistent -Confirm:$false
					$object = New-Object PSObject
					$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-Disk | Where-Object PartitionStyle -eq ""RAW"" | Initialize-Disk -PartitionStyle GPT -PassThru | New-Partition -DriveLetter $driveLetter -UseMaximumSize | Format-Volume -FileSystem NTFS -NewFileSystemLabel $driveLabel -Confirm:$confirm"
					#$customizeOSScripts = [System.Array]$customizeOSScripts + $object
					Invoke-VMScript -VM $admin.VMName -GuestCredential $localAdminCred -ScriptText "$($object.Command)" | Out-File "$ScriptDirectory\logs\$($admin.VMName)_scriptcommand.log" -Append
				}
				
				# Let's customize additional network adapters.
				
				foreach ($nic in ($global:vmAdditionalNICs | ?{ $_.VMName -eq $admin.VMName }))
				{
					$newNic = New-NetworkAdapter -VM $nic.VMName -NetworkName $nic.VLAN -StartConnected -Type Vmxnet3
					
					$newNic | Out-File "$ScriptDirectory\logs\newnic.log" -Append
					$macAddress = "$($newNic.MacAddress)" -replace ":", "-"
					
					if ($nic.("IP Type") -eq "Static")
					{
						$newIP = $nic.("IP Address")
						$newMask = $nic.("Subnet Mask")
						$newGateway = $nic.("Default Gateway")
						$newDNSServer = $nic.("Primary DNS Server")
						
						# Determine the CIDR notation for subnet mask
						$subnetMasks = Import-Csv "$ScriptDirectory\reference\cidrlist.csv"
						
						$cidrNotation = ($subnetMasks | ?{ $_.SubnetMask -eq $newMask }).CIDR
						
						if ($newGateway -ne '')
						{
							$object = New-Object PSObject
							$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$macAddress"" | New-NetIPAddress -IPAddress $newIP -DefaultGateway $newGateway -PrefixLength $cidrNotation | Set-DNSClientServerAddress -ServerAddresses $newDNSServer"
							$customizeOSScripts = [System.Array]$customizeOSScripts + $object
						}
						else
						{
							$object = New-Object PSObject
							$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$macAddress"" | New-NetIPAddress -IPAddress $newIP -DefaultGateway $newGateway -PrefixLength $cidrNotation | Set-DNSClientServerAddress -ServerAddresses $newDNSServer"
							$customizeOSScripts = [System.Array]$customizeOSScripts + $object
						}
						
					}
				}
				
				$customizeOSScripts | Out-File "$ScriptDirectory\logs\scriptsarray_$($admin.VMName).log"
				#Customize-OS -VMName $admin.VMName -GuestCredential $localAdminCred -Scripts $customizeOSScripts
				
				foreach ($script in $customizeOSScripts)
				{
					$script.Command | Out-File "$ScriptDirectory\logs\$($admin.VMName)_scriptcommand.log" -Append
					Invoke-VMScript -VM $admin.VMName -GuestCredential $localAdminCred -ScriptText "$($script.Command)" | Out-File "$ScriptDirectory\logs\$($admin.VMName)_scriptcommand.log" -Append
					
					sleep -Seconds 3
				}
				
			}
			
			Start-Sleep -Seconds 10
			
			foreach ($vm in $global:vmbuilds)
			{
				Get-VM $vm.VMName | Restart-VMGuest -Confirm:$false
			}
			
			[System.Windows.Forms.MessageBox]::Show("All requested virtual machines are available.")
			
		}
		catch
		{
			[System.Windows.Forms.MessageBox]::Show("Unable to build virtual machines.")
		}
	}
	
	$datagridviewVMQueue_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
		$buttonDeleteVMFromQueue.Enabled = $true	
		
	}
	
	$buttonDeleteVMFromQueue_Click={
		
		$global:vmBuilds = $global:vmBuilds | ?{ $_.VMName -ne $listviewVMsStep2.SelectedItems.Text }
		
		$listviewVMsStep2.Clear()
		
		foreach ($item in $global:vmBuilds)
		{
			$listviewVMsStep2.Items.Add($item.VMName)
		}
		
		# Update the treeview control for Step 3
		
		$treeviewVMListStep3.BeginUpdate()
		$treeviewVMListStep3.Nodes.Clear()
		
		foreach ($vm in $global:vmbuilds)
		{
			$newNode = $treeviewVMListStep3.Nodes.Add($vm.VMName)
		}
		
		$treeviewVMListStep3.EndUpdate()
		
		# Update the treeview control for step 4.
		
		$treeviewVMListStep4.BeginUpdate()
		$treeviewVMListStep4.Nodes.Clear()
		
		foreach ($vm in $global:vmbuilds)
		{
			$newNode = $treeviewVMListStep4.Nodes.Add($vm.VMName)
		}
		
		# Determine if we should be resetting all the variables.
		if ($global:vmBuilds -eq $null)
		{
			$vmFeatures = [System.Collections.ArrayList]@()
			$vmRoles = [System.Collections.ArrayList]@()
			$vmDomainInfo = [System.Collections.ArrayList]@()
			$vmOS = [System.Collections.ArrayList]@()
			$vmAdminPasswords = [System.Collections.ArrayList]@()
			$vmLocalUsers = [System.Collections.ArrayList]@()
			$vmWorkgroupDomain = [System.Collections.ArrayList]@()
			$vmFullOSConfig = [System.Collections.ArrayList]@()
			$vmTimeZones = [System.Collections.ArrayList]@()
			$vmAdditionalDisks = [System.Collections.ArrayList]@()
			$vmAdditionalNICs = [System.Collections.ArrayList]@()
			$vmOSKeys = [System.Collections.ArrayList]@()
			
			foreach ($item in (Get-ChildItem -Path "$ScriptDirectory\logs\"))
			{
				$item | Remove-Item -Force -Recurse
			}
		}
		
		$treeviewVMListStep4.EndUpdate()
		
		Update-NavButtons
		
		
	}
	
	$treeviewVMListStep4_AfterSelect=[System.Windows.Forms.TreeViewEventHandler]{
		#Event Argument: $_ = [System.Windows.Forms.TreeViewEventArgs]
		
		$global:vmSelectedStep4 = $treeviewVMListStep4.SelectedNode.Text
		
		$labelVMNameStep4.Text = "VM: $($global:vmSelectedStep4)"
		
		if ($treeviewVMListStep4.SelectedNode.Text -in $global:vmWorkgroupDomain.VMName)
		{
			$labelOK1.Visible = $true		
		}
		else
		{
			$labelOK1.Visible = $false		
		}
		
	}
	
	$radiobuttonDomain_CheckedChanged={
		
		if ($radiobuttonDomain.Checked) { $buttonDomainWorkgroup.Enabled = $true; $buttonSetWorkgroup.Enabled = $false }
		elseif ($radiobuttonWorkgroup.Checked) { $buttonDomainWorkgroup.Enabled = $false; $buttonSetWorkgroup.Enabled = $true }
		
	}
	
	$buttonOpenFeatureSelection_Click={
		
		if ((Show-WindowsFeatures_psf -VMName $global:vmSelectedStep4) -eq 'OK')
		{
		}
	}
	
	$buttonAddLocalUsers_Click={
		
		if ((Show-AddLocalUsers_psf -VMName $global:vmSelectedStep4) -eq 'OK'){}
		
	}
	
	$comboboxTimezone_SelectedIndexChanged={
		
		if ($global:vmSelectedStep4 -in $global:vmTimeZones.VMName)
		{
			$global:vmTimeZones = $global:vmTimeZones | ?{ $_.VMName -ne $global:vmTimeZones.VMName }
			$tzobject = New-Object PSOBject
			
			$tzobject | Add-Member -MemberType NoteProperty -Name "VMName" -Value $treeviewVMListStep4.SelectedNode.Text
			$tzobject | Add-Member -MemberType NoteProperty -Name "Timezone" -Value $comboboxTimezone.Text
		}
		else
		{
			$tzobject = New-Object PSOBject
			
			$tzobject | Add-Member -MemberType NoteProperty -Name "VMName" -Value $treeviewVMListStep4.SelectedNode.Text
			$tzobject | Add-Member -MemberType NoteProperty -Name "Timezone" -Value $comboboxTimezone.Text
		}
	}
	
	$treeviewVMListStep3_AfterSelect=[System.Windows.Forms.TreeViewEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.TreeViewEventArgs]
					
		$global:vmSelectedStep3 = $treeviewVMListStep3.SelectedNode.Text
		
		$labelVMStep3.Text = "VM: $($global:vmSelectedStep3)"
	}
	
	$listviewVMsStep2_SelectedIndexChanged={
					
		$rowTmp = $global:vmBuilds | ?{ $_.VMName -eq $listviewVMsStep2.SelectedItems.Text }
		
		$labelStep2CPU.Text = "CPU: $($rowTmp.NumCPU)"
		$labelStep2Memory.Text = "Memory: $($rowTmp.Memory)"
		$labelStep2Network.Text = "Network: $($rowTmp.Network)"
		$labelStep2VMName.Text = "VM Name: $($rowTmp.VMName)"
		
	}
	$buttonVDiskAdd_Click={
		
		if ((Show-AddVirtualDisk_psf -VMName $treeviewVMListStep3.SelectedNode.Text) -eq 'OK')
		{}
		
	}
	
	$buttonVNICAdd_Click={
		
		if ((Show-AddNicCard_psf -VMName $treeviewVMListStep3.SelectedNode.Text) -eq 'OK')
		{}
	}
	
	
	
	$maskedtextboxHostname_Enter={
		#TODO: Place custom script here
		$maskedtextboxHostname.Select(0,0)
	}
	
	$buttonSetHostname_Click={
		
		if ((Show-SetHostname_psf -VMName $treeviewVMListStep4.SelectedNode.Text) -eq 'OK')
		{ }
	}
	
	$button2_Click={
		
		if ((Show-WorkgroupDomainJoin_psf) -eq 'OK')
		{ }	
	}
	
	$buttonSet_Click={
		
		if ((Show-GetAdminPassword_psf) -eq 'OK')
		{ }
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formVMAutomationTool.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_vcenterTextbox = $vcenterTextbox.Text
		$script:MainForm_listviewVMsStep2 = $listviewVMsStep2.SelectedItems
		if($treeviewVMListStep3.SelectedNode -ne $null)
		{
			$script:MainForm_treeviewVMListStep3 = $treeviewVMListStep3.SelectedNode.Text
		}
		else
		{
			$script:MainForm_treeviewVMListStep3 = $null
		}
		if($treeviewVMListStep4.SelectedNode -ne $null)
		{
			$script:MainForm_treeviewVMListStep4 = $treeviewVMListStep4.SelectedNode.Text
		}
		else
		{
			$script:MainForm_treeviewVMListStep4 = $null
		}
		$script:MainForm_comboboxTimezone = $comboboxTimezone.Text
		$script:MainForm_comboboxTimezone_SelectedItem = $comboboxTimezone.SelectedItem
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonBack.remove_Click($buttonBack_Click)
			$buttonEnterCredentials.remove_Click($buttonEnterCredentials_Click)
			$vcenterTextbox.remove_TextChanged($vcenterTextbox_TextChanged)
			$listviewVMsStep2.remove_SelectedIndexChanged($listviewVMsStep2_SelectedIndexChanged)
			$buttonDeleteVMFromQueue.remove_Click($buttonDeleteVMFromQueue_Click)
			$buttonAddVirtualMachine.remove_Click($buttonAddVirtualMachine_Click)
			$treeviewVMListStep3.remove_AfterSelect($treeviewVMListStep3_AfterSelect)
			$buttonVNICAdd.remove_Click($buttonVNICAdd_Click)
			$buttonVDiskAdd.remove_Click($buttonVDiskAdd_Click)
			$treeviewVMListStep4.remove_AfterSelect($treeviewVMListStep4_AfterSelect)
			$buttonSetHostname.remove_Click($buttonSetHostname_Click)
			$buttonOpenRolesSelection.remove_Click($buttonOpenRolesSelection_Click)
			$buttonAddLocalUsers.remove_Click($buttonAddLocalUsers_Click)
			$buttonSet.remove_Click($buttonSet_Click)
			$button2.remove_Click($button2_Click)
			$buttonBuildAndConfigureVMs.remove_Click($buttonBuildAndConfigureVMs_Click)
			$tabcontrolWizard.remove_Selecting($tabcontrolWizard_Selecting)
			$tabcontrolWizard.remove_Deselecting($tabcontrolWizard_Deselecting)
			$buttonNext.remove_Click($buttonNext_Click)
			$formVMAutomationTool.remove_Load($formVMAutomationTool_Load)
			$formVMAutomationTool.remove_Load($Form_StateCorrection_Load)
			$formVMAutomationTool.remove_Closing($Form_StoreValues_Closing)
			$formVMAutomationTool.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formVMAutomationTool.SuspendLayout()
	$tabcontrolWizard.SuspendLayout()
	$tabpageStep1.SuspendLayout()
	$panel1.SuspendLayout()
	$tabpageStep2.SuspendLayout()
	$tabpageStep3.SuspendLayout()
	$panel6.SuspendLayout()
	$tabpageStep4.SuspendLayout()
	$panel7.SuspendLayout()
	$tabpageStep5.SuspendLayout()
	$tabpageStep6.SuspendLayout()
	#
	# formVMAutomationTool
	#
	$formVMAutomationTool.Controls.Add($buttonCancel)
	$formVMAutomationTool.Controls.Add($buttonBack)
	$formVMAutomationTool.Controls.Add($buttonFinish)
	$formVMAutomationTool.Controls.Add($tabcontrolWizard)
	$formVMAutomationTool.Controls.Add($buttonNext)
	$formVMAutomationTool.AcceptButton = $buttonFinish
	$formVMAutomationTool.AutoScaleDimensions = '6, 13'
	$formVMAutomationTool.AutoScaleMode = 'Font'
	$formVMAutomationTool.CancelButton = $buttonCancel
	$formVMAutomationTool.ClientSize = '537, 329'
	$formVMAutomationTool.FormBorderStyle = 'FixedDialog'
	$formVMAutomationTool.Margin = '6, 6, 6, 6'
	$formVMAutomationTool.MaximizeBox = $False
	$formVMAutomationTool.Name = 'formVMAutomationTool'
	$formVMAutomationTool.StartPosition = 'CenterScreen'
	$formVMAutomationTool.Text = 'VM Automation Tool'
	$formVMAutomationTool.add_Load($formVMAutomationTool_Load)
	#
	# buttonCancel
	#
	$buttonCancel.Anchor = 'Bottom, Right'
	$buttonCancel.DialogResult = 'Cancel'
	$buttonCancel.Location = '369, 294'
	$buttonCancel.Name = 'buttonCancel'
	$buttonCancel.Size = '75, 23'
	$buttonCancel.TabIndex = 4
	$buttonCancel.Text = '&Cancel'
	$buttonCancel.UseCompatibleTextRendering = $True
	$buttonCancel.UseVisualStyleBackColor = $True
	#
	# buttonBack
	#
	$buttonBack.Anchor = 'Bottom, Left'
	$buttonBack.Location = '13, 294'
	$buttonBack.Name = 'buttonBack'
	$buttonBack.Size = '75, 23'
	$buttonBack.TabIndex = 1
	$buttonBack.Text = '< &Back'
	$buttonBack.UseCompatibleTextRendering = $True
	$buttonBack.UseVisualStyleBackColor = $True
	$buttonBack.add_Click($buttonBack_Click)
	#
	# buttonFinish
	#
	$buttonFinish.Anchor = 'Bottom, Right'
	$buttonFinish.DialogResult = 'OK'
	$buttonFinish.Location = '450, 294'
	$buttonFinish.Name = 'buttonFinish'
	$buttonFinish.Size = '75, 23'
	$buttonFinish.TabIndex = 3
	$buttonFinish.Text = '&Finish'
	$buttonFinish.UseCompatibleTextRendering = $True
	$buttonFinish.UseVisualStyleBackColor = $True
	#
	# tabcontrolWizard
	#
	$tabcontrolWizard.Controls.Add($tabpageStep1)
	$tabcontrolWizard.Controls.Add($tabpageStep2)
	$tabcontrolWizard.Controls.Add($tabpageStep3)
	$tabcontrolWizard.Controls.Add($tabpageStep4)
	$tabcontrolWizard.Controls.Add($tabpageStep5)
	$tabcontrolWizard.Controls.Add($tabpageStep6)
	$tabcontrolWizard.AccessibleRole = 'Clock'
	$tabcontrolWizard.Anchor = 'Top, Bottom, Left, Right'
	$tabcontrolWizard.Location = '13, 12'
	$tabcontrolWizard.Name = 'tabcontrolWizard'
	$tabcontrolWizard.SelectedIndex = 0
	$tabcontrolWizard.Size = '512, 276'
	$tabcontrolWizard.TabIndex = 0
	$tabcontrolWizard.add_Selecting($tabcontrolWizard_Selecting)
	$tabcontrolWizard.add_Deselecting($tabcontrolWizard_Deselecting)
	#
	# tabpageStep1
	#
	$tabpageStep1.Controls.Add($pictureboxLoading)
	$tabpageStep1.Controls.Add($labelStep1)
	$tabpageStep1.Controls.Add($panel1)
	$tabpageStep1.Controls.Add($vcenterTextbox)
	$tabpageStep1.Controls.Add($labelVCenterFQDNOrIPAddre)
	$tabpageStep1.Location = '4, 22'
	$tabpageStep1.Name = 'tabpageStep1'
	$tabpageStep1.Padding = '3, 3, 3, 3'
	$tabpageStep1.Size = '504, 250'
	$tabpageStep1.TabIndex = 0
	$tabpageStep1.Text = 'Step 1 - vCenter Connection'
	$tabpageStep1.UseVisualStyleBackColor = $True
	#
	# pictureboxLoading
	#
	$pictureboxLoading.Anchor = 'Bottom, Right'
	#region Binary Data
	$pictureboxLoading.Image = [System.Convert]::FromBase64String('
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
Cwg1RAAAOwAAAAAAAAAAAA==')
	#endregion
	$pictureboxLoading.Location = '441, 206'
	$pictureboxLoading.Name = 'pictureboxLoading'
	$pictureboxLoading.Size = '68, 68'
	$pictureboxLoading.TabIndex = 4
	$pictureboxLoading.TabStop = $False
	$pictureboxLoading.Visible = $False
	#
	# labelStep1
	#
	$labelStep1.AutoSize = $True
	$labelStep1.Font = 'Microsoft Sans Serif, 12pt, style=Bold'
	$labelStep1.Location = '9, 12'
	$labelStep1.Name = 'labelStep1'
	$labelStep1.Size = '470, 24'
	$labelStep1.TabIndex = 3
	$labelStep1.Text = 'Step 1: Enter your vCenter server and credentials to proceed.'
	$labelStep1.UseCompatibleTextRendering = $True
	#
	# panel1
	#
	$panel1.Controls.Add($labelOKStep1)
	$panel1.Controls.Add($labelConnectionStatusNotC)
	$panel1.Controls.Add($labelUsernameNotConnected)
	$panel1.Controls.Add($labelVCenterServerNotConn)
	$panel1.Controls.Add($labelSetVSphereCredential)
	$panel1.Controls.Add($buttonEnterCredentials)
	$panel1.Location = '9, 85'
	$panel1.Name = 'panel1'
	$panel1.Size = '276, 159'
	$panel1.TabIndex = 2
	#
	# labelOKStep1
	#
	$labelOKStep1.AutoSize = $True
	$labelOKStep1.Font = 'Comic Sans MS, 10.125pt, style=Bold'
	$labelOKStep1.ForeColor = 'Green'
	$labelOKStep1.Location = '197, 96'
	$labelOKStep1.Name = 'labelOKStep1'
	$labelOKStep1.Size = '28, 24'
	$labelOKStep1.TabIndex = 38
	$labelOKStep1.Text = 'OK!'
	$labelOKStep1.UseCompatibleTextRendering = $True
	$labelOKStep1.Visible = $False
	#
	# labelConnectionStatusNotC
	#
	$labelConnectionStatusNotC.AutoSize = $True
	$labelConnectionStatusNotC.Location = '13, 99'
	$labelConnectionStatusNotC.Name = 'labelConnectionStatusNotC'
	$labelConnectionStatusNotC.Size = '178, 17'
	$labelConnectionStatusNotC.TabIndex = 4
	$labelConnectionStatusNotC.Text = 'Connection Status: Not Connected'
	$labelConnectionStatusNotC.UseCompatibleTextRendering = $True
	#
	# labelUsernameNotConnected
	#
	$labelUsernameNotConnected.AutoSize = $True
	$labelUsernameNotConnected.Location = '13, 62'
	$labelUsernameNotConnected.Name = 'labelUsernameNotConnected'
	$labelUsernameNotConnected.Size = '138, 17'
	$labelUsernameNotConnected.TabIndex = 3
	$labelUsernameNotConnected.Text = 'Username: Not Connected'
	$labelUsernameNotConnected.UseCompatibleTextRendering = $True
	#
	# labelVCenterServerNotConn
	#
	$labelVCenterServerNotConn.AutoSize = $True
	$labelVCenterServerNotConn.Location = '13, 30'
	$labelVCenterServerNotConn.Name = 'labelVCenterServerNotConn'
	$labelVCenterServerNotConn.Size = '162, 17'
	$labelVCenterServerNotConn.TabIndex = 2
	$labelVCenterServerNotConn.Text = 'vCenter Server: Not Connected'
	$labelVCenterServerNotConn.UseCompatibleTextRendering = $True
	#
	# labelSetVSphereCredential
	#
	$labelSetVSphereCredential.AutoSize = $True
	$labelSetVSphereCredential.Dock = 'Fill'
	$labelSetVSphereCredential.Location = '0, 0'
	$labelSetVSphereCredential.Name = 'labelSetVSphereCredential'
	$labelSetVSphereCredential.Size = '127, 17'
	$labelSetVSphereCredential.TabIndex = 1
	$labelSetVSphereCredential.Text = 'Set vSphere Credentials'
	$labelSetVSphereCredential.UseCompatibleTextRendering = $True
	#
	# buttonEnterCredentials
	#
	$buttonEnterCredentials.Enabled = $False
	$buttonEnterCredentials.Location = '13, 130'
	$buttonEnterCredentials.Name = 'buttonEnterCredentials'
	$buttonEnterCredentials.Size = '114, 23'
	$buttonEnterCredentials.TabIndex = 0
	$buttonEnterCredentials.Text = 'Enter Credentials'
	$buttonEnterCredentials.UseCompatibleTextRendering = $True
	$buttonEnterCredentials.UseVisualStyleBackColor = $True
	$buttonEnterCredentials.add_Click($buttonEnterCredentials_Click)
	#
	# vcenterTextbox
	#
	$vcenterTextbox.AutoCompleteMode = 'Append'
	$vcenterTextbox.AutoCompleteSource = 'CustomSource'
	$vcenterTextbox.Location = '169, 52'
	$vcenterTextbox.Name = 'vcenterTextbox'
	$vcenterTextbox.Size = '161, 20'
	$vcenterTextbox.TabIndex = 1
	$vcenterTextbox.add_TextChanged($vcenterTextbox_TextChanged)
	#
	# labelVCenterFQDNOrIPAddre
	#
	$labelVCenterFQDNOrIPAddre.AutoSize = $True
	$labelVCenterFQDNOrIPAddre.Location = '9, 55'
	$labelVCenterFQDNOrIPAddre.Name = 'labelVCenterFQDNOrIPAddre'
	$labelVCenterFQDNOrIPAddre.Size = '153, 17'
	$labelVCenterFQDNOrIPAddre.TabIndex = 0
	$labelVCenterFQDNOrIPAddre.Text = 'vCenter FQDN or IP Address:'
	$labelVCenterFQDNOrIPAddre.UseCompatibleTextRendering = $True
	#
	# tabpageStep2
	#
	$tabpageStep2.Controls.Add($labelStep2Network)
	$tabpageStep2.Controls.Add($labelStep2Memory)
	$tabpageStep2.Controls.Add($labelStep2CPU)
	$tabpageStep2.Controls.Add($labelStep2VMName)
	$tabpageStep2.Controls.Add($listviewVMsStep2)
	$tabpageStep2.Controls.Add($buttonDeleteVMFromQueue)
	$tabpageStep2.Controls.Add($buttonAddVirtualMachine)
	$tabpageStep2.Controls.Add($labelStep2)
	$tabpageStep2.Location = '4, 22'
	$tabpageStep2.Name = 'tabpageStep2'
	$tabpageStep2.Padding = '3, 3, 3, 3'
	$tabpageStep2.Size = '504, 250'
	$tabpageStep2.TabIndex = 1
	$tabpageStep2.Text = 'Step 2 - Congifure VMs'
	$tabpageStep2.UseVisualStyleBackColor = $True
	#
	# labelStep2Network
	#
	$labelStep2Network.AutoSize = $True
	$labelStep2Network.Location = '320, 118'
	$labelStep2Network.Name = 'labelStep2Network'
	$labelStep2Network.Size = '49, 17'
	$labelStep2Network.TabIndex = 15
	$labelStep2Network.Text = 'Network:'
	$labelStep2Network.UseCompatibleTextRendering = $True
	#
	# labelStep2Memory
	#
	$labelStep2Memory.AutoSize = $True
	$labelStep2Memory.Location = '320, 97'
	$labelStep2Memory.Name = 'labelStep2Memory'
	$labelStep2Memory.Size = '48, 17'
	$labelStep2Memory.TabIndex = 14
	$labelStep2Memory.Text = 'Memory:'
	$labelStep2Memory.UseCompatibleTextRendering = $True
	#
	# labelStep2CPU
	#
	$labelStep2CPU.AutoSize = $True
	$labelStep2CPU.Location = '320, 76'
	$labelStep2CPU.Name = 'labelStep2CPU'
	$labelStep2CPU.Size = '64, 17'
	$labelStep2CPU.TabIndex = 13
	$labelStep2CPU.Text = 'CPU Count:'
	$labelStep2CPU.UseCompatibleTextRendering = $True
	#
	# labelStep2VMName
	#
	$labelStep2VMName.AutoSize = $True
	$labelStep2VMName.Location = '320, 55'
	$labelStep2VMName.Name = 'labelStep2VMName'
	$labelStep2VMName.Size = '58, 17'
	$labelStep2VMName.TabIndex = 12
	$labelStep2VMName.Text = 'VM Name:'
	$labelStep2VMName.UseCompatibleTextRendering = $True
	#
	# listviewVMsStep2
	#
	$listviewVMsStep2.FullRowSelect = $True
	$listviewVMsStep2.Location = '156, 40'
	$listviewVMsStep2.MultiSelect = $False
	$listviewVMsStep2.Name = 'listviewVMsStep2'
	$listviewVMsStep2.Size = '145, 210'
	$listviewVMsStep2.TabIndex = 11
	$listviewVMsStep2.UseCompatibleStateImageBehavior = $False
	$listviewVMsStep2.View = 'List'
	$listviewVMsStep2.add_SelectedIndexChanged($listviewVMsStep2_SelectedIndexChanged)
	#
	# buttonDeleteVMFromQueue
	#
	$buttonDeleteVMFromQueue.Enabled = $False
	$buttonDeleteVMFromQueue.Location = '18, 122'
	$buttonDeleteVMFromQueue.Name = 'buttonDeleteVMFromQueue'
	$buttonDeleteVMFromQueue.Size = '123, 23'
	$buttonDeleteVMFromQueue.TabIndex = 10
	$buttonDeleteVMFromQueue.Text = 'Delete VM from Queue'
	$buttonDeleteVMFromQueue.UseCompatibleTextRendering = $True
	$buttonDeleteVMFromQueue.UseVisualStyleBackColor = $True
	$buttonDeleteVMFromQueue.add_Click($buttonDeleteVMFromQueue_Click)
	#
	# buttonAddVirtualMachine
	#
	$buttonAddVirtualMachine.Location = '18, 78'
	$buttonAddVirtualMachine.Name = 'buttonAddVirtualMachine'
	$buttonAddVirtualMachine.Size = '123, 23'
	$buttonAddVirtualMachine.TabIndex = 8
	$buttonAddVirtualMachine.Text = 'Add Virtual Machine'
	$buttonAddVirtualMachine.UseCompatibleTextRendering = $True
	$buttonAddVirtualMachine.UseVisualStyleBackColor = $True
	$buttonAddVirtualMachine.add_Click($buttonAddVirtualMachine_Click)
	#
	# labelStep2
	#
	$labelStep2.AutoSize = $True
	$labelStep2.Font = 'Microsoft Sans Serif, 12pt, style=Bold'
	$labelStep2.Location = '18, 13'
	$labelStep2.Name = 'labelStep2'
	$labelStep2.Size = '358, 24'
	$labelStep2.TabIndex = 4
	$labelStep2.Text = 'Step 2: Press the ''Add Virtual Machine'' button.'
	$labelStep2.UseCompatibleTextRendering = $True
	#
	# tabpageStep3
	#
	$tabpageStep3.Controls.Add($treeviewVMListStep3)
	$tabpageStep3.Controls.Add($panel6)
	$tabpageStep3.Location = '4, 22'
	$tabpageStep3.Name = 'tabpageStep3'
	$tabpageStep3.Size = '504, 250'
	$tabpageStep3.TabIndex = 4
	$tabpageStep3.Text = 'Step 3 - Optional VM Config'
	$tabpageStep3.UseVisualStyleBackColor = $True
	#
	# treeviewVMListStep3
	#
	$treeviewVMListStep3.Location = '3, 0'
	$treeviewVMListStep3.Name = 'treeviewVMListStep3'
	$treeviewVMListStep3.Size = '164, 247'
	$treeviewVMListStep3.TabIndex = 26
	$treeviewVMListStep3.add_AfterSelect($treeviewVMListStep3_AfterSelect)
	#
	# panel6
	#
	$panel6.Controls.Add($labelVMStep3)
	$panel6.Controls.Add($buttonVNICAdd)
	$panel6.Controls.Add($labelVNICConfig)
	$panel6.Controls.Add($buttonVDiskAdd)
	$panel6.Controls.Add($labelVDiskConfig)
	$panel6.Controls.Add($labelOptionalConfig)
	$panel6.BorderStyle = 'Fixed3D'
	$panel6.Location = '187, 3'
	$panel6.Name = 'panel6'
	$panel6.Size = '314, 244'
	$panel6.TabIndex = 25
	#
	# labelVMStep3
	#
	$labelVMStep3.AutoSize = $True
	$labelVMStep3.Font = 'Microsoft Sans Serif, 10pt, style=Bold'
	$labelVMStep3.Location = '10, 2'
	$labelVMStep3.Name = 'labelVMStep3'
	$labelVMStep3.Size = '30, 20'
	$labelVMStep3.TabIndex = 35
	$labelVMStep3.Text = 'VM:'
	$labelVMStep3.UseCompatibleTextRendering = $True
	#
	# buttonVNICAdd
	#
	$buttonVNICAdd.Location = '188, 102'
	$buttonVNICAdd.Name = 'buttonVNICAdd'
	$buttonVNICAdd.Size = '121, 23'
	$buttonVNICAdd.TabIndex = 4
	$buttonVNICAdd.Text = 'Network &Adapters'
	$buttonVNICAdd.UseCompatibleTextRendering = $True
	$buttonVNICAdd.UseVisualStyleBackColor = $True
	$buttonVNICAdd.add_Click($buttonVNICAdd_Click)
	#
	# labelVNICConfig
	#
	$labelVNICConfig.AutoSize = $True
	$labelVNICConfig.Location = '10, 108'
	$labelVNICConfig.Name = 'labelVNICConfig'
	$labelVNICConfig.Size = '166, 17'
	$labelVNICConfig.TabIndex = 3
	$labelVNICConfig.Text = 'Add/Remove Network Adapters:'
	$labelVNICConfig.UseCompatibleTextRendering = $True
	#
	# buttonVDiskAdd
	#
	$buttonVDiskAdd.Location = '188, 69'
	$buttonVDiskAdd.Name = 'buttonVDiskAdd'
	$buttonVDiskAdd.Size = '121, 23'
	$buttonVDiskAdd.TabIndex = 2
	$buttonVDiskAdd.Text = '&Virtual Disks'
	$buttonVDiskAdd.UseCompatibleTextRendering = $True
	$buttonVDiskAdd.UseVisualStyleBackColor = $True
	$buttonVDiskAdd.add_Click($buttonVDiskAdd_Click)
	#
	# labelVDiskConfig
	#
	$labelVDiskConfig.AutoSize = $True
	$labelVDiskConfig.Location = '10, 74'
	$labelVDiskConfig.Name = 'labelVDiskConfig'
	$labelVDiskConfig.Size = '133, 17'
	$labelVDiskConfig.TabIndex = 1
	$labelVDiskConfig.Text = 'Add/Remove Virtual Disk:'
	$labelVDiskConfig.UseCompatibleTextRendering = $True
	#
	# labelOptionalConfig
	#
	$labelOptionalConfig.AutoSize = $True
	$labelOptionalConfig.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelOptionalConfig.Location = '10, 40'
	$labelOptionalConfig.Name = 'labelOptionalConfig'
	$labelOptionalConfig.Size = '142, 17'
	$labelOptionalConfig.TabIndex = 0
	$labelOptionalConfig.Text = 'Optional VM Configuration'
	$labelOptionalConfig.UseCompatibleTextRendering = $True
	#
	# tabpageStep4
	#
	$tabpageStep4.Controls.Add($treeviewVMListStep4)
	$tabpageStep4.Controls.Add($panel7)
	$tabpageStep4.Location = '4, 22'
	$tabpageStep4.Name = 'tabpageStep4'
	$tabpageStep4.Size = '504, 250'
	$tabpageStep4.TabIndex = 2
	$tabpageStep4.Text = 'Step 4 - Customize OS'
	$tabpageStep4.UseVisualStyleBackColor = $True
	#
	# treeviewVMListStep4
	#
	$treeviewVMListStep4.Location = '0, 0'
	$treeviewVMListStep4.Name = 'treeviewVMListStep4'
	$treeviewVMListStep4.Size = '164, 250'
	$treeviewVMListStep4.TabIndex = 27
	$treeviewVMListStep4.add_AfterSelect($treeviewVMListStep4_AfterSelect)
	#
	# panel7
	#
	$panel7.Controls.Add($labelOK1)
	$panel7.Controls.Add($buttonSetHostname)
	$panel7.Controls.Add($labelVMNameStep4)
	$panel7.Controls.Add($labelOSConfig)
	$panel7.Controls.Add($comboboxTimezone)
	$panel7.Controls.Add($labelTimezone)
	$panel7.Controls.Add($buttonOpenFeatureSelection)
	$panel7.Controls.Add($labelSelectRoles)
	$panel7.Controls.Add($labelSelectFeatures)
	$panel7.Controls.Add($buttonOpenRolesSelection)
	$panel7.BorderStyle = 'Fixed3D'
	$panel7.Location = '185, 0'
	$panel7.Name = 'panel7'
	$panel7.Size = '319, 250'
	$panel7.TabIndex = 0
	#
	# labelOK1
	#
	$labelOK1.AutoSize = $True
	$labelOK1.Font = 'Comic Sans MS, 10.125pt, style=Bold'
	$labelOK1.ForeColor = 'Green'
	$labelOK1.Location = '118, 71'
	$labelOK1.Name = 'labelOK1'
	$labelOK1.Size = '28, 24'
	$labelOK1.TabIndex = 37
	$labelOK1.Text = 'OK!'
	$labelOK1.UseCompatibleTextRendering = $True
	$labelOK1.Visible = $False
	#
	# buttonSetHostname
	#
	$buttonSetHostname.Location = '16, 70'
	$buttonSetHostname.Name = 'buttonSetHostname'
	$buttonSetHostname.Size = '87, 23'
	$buttonSetHostname.TabIndex = 35
	$buttonSetHostname.Text = 'Set Hostname'
	$buttonSetHostname.UseCompatibleTextRendering = $True
	$buttonSetHostname.UseVisualStyleBackColor = $True
	$buttonSetHostname.add_Click($buttonSetHostname_Click)
	#
	# labelVMNameStep4
	#
	$labelVMNameStep4.AutoSize = $True
	$labelVMNameStep4.Font = 'Microsoft Sans Serif, 10pt, style=Bold'
	$labelVMNameStep4.Location = '12, 4'
	$labelVMNameStep4.Name = 'labelVMNameStep4'
	$labelVMNameStep4.Size = '30, 20'
	$labelVMNameStep4.TabIndex = 34
	$labelVMNameStep4.Text = 'VM:'
	$labelVMNameStep4.UseCompatibleTextRendering = $True
	#
	# labelOSConfig
	#
	$labelOSConfig.AutoSize = $True
	$labelOSConfig.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelOSConfig.Location = '12, 34'
	$labelOSConfig.Name = 'labelOSConfig'
	$labelOSConfig.Size = '172, 17'
	$labelOSConfig.TabIndex = 33
	$labelOSConfig.Text = 'Operating System Configuration'
	$labelOSConfig.UseCompatibleTextRendering = $True
	#
	# comboboxTimezone
	#
	$comboboxTimezone.DropDownStyle = 'DropDownList'
	$comboboxTimezone.FormattingEnabled = $True
	$comboboxTimezone.Location = '83, 171'
	$comboboxTimezone.Name = 'comboboxTimezone'
	$comboboxTimezone.Size = '208, 21'
	$comboboxTimezone.TabIndex = 31
	#
	# labelTimezone
	#
	$labelTimezone.AutoSize = $True
	$labelTimezone.Location = '16, 176'
	$labelTimezone.Name = 'labelTimezone'
	$labelTimezone.Size = '61, 17'
	$labelTimezone.TabIndex = 30
	$labelTimezone.Text = 'Time Zone:'
	$labelTimezone.UseCompatibleTextRendering = $True
	#
	# buttonOpenFeatureSelection
	#
	$buttonOpenFeatureSelection.Enabled = $False
	$buttonOpenFeatureSelection.Location = '202, 122'
	$buttonOpenFeatureSelection.Name = 'buttonOpenFeatureSelection'
	$buttonOpenFeatureSelection.Size = '57, 23'
	$buttonOpenFeatureSelection.TabIndex = 24
	$buttonOpenFeatureSelection.Text = 'Open...'
	$buttonOpenFeatureSelection.UseCompatibleTextRendering = $True
	$buttonOpenFeatureSelection.UseVisualStyleBackColor = $True
	#
	# labelSelectRoles
	#
	$labelSelectRoles.AutoSize = $True
	$labelSelectRoles.Location = '144, 126'
	$labelSelectRoles.Name = 'labelSelectRoles'
	$labelSelectRoles.Size = '52, 17'
	$labelSelectRoles.TabIndex = 23
	$labelSelectRoles.Text = 'Features:'
	$labelSelectRoles.UseCompatibleTextRendering = $True
	#
	# labelSelectFeatures
	#
	$labelSelectFeatures.AutoSize = $True
	$labelSelectFeatures.Location = '16, 128'
	$labelSelectFeatures.Name = 'labelSelectFeatures'
	$labelSelectFeatures.Size = '36, 17'
	$labelSelectFeatures.TabIndex = 21
	$labelSelectFeatures.Text = 'Roles:'
	$labelSelectFeatures.UseCompatibleTextRendering = $True
	#
	# buttonOpenRolesSelection
	#
	$buttonOpenRolesSelection.Location = '62, 123'
	$buttonOpenRolesSelection.Name = 'buttonOpenRolesSelection'
	$buttonOpenRolesSelection.Size = '57, 23'
	$buttonOpenRolesSelection.TabIndex = 22
	$buttonOpenRolesSelection.Text = 'Open...'
	$buttonOpenRolesSelection.UseCompatibleTextRendering = $True
	$buttonOpenRolesSelection.UseVisualStyleBackColor = $True
	$buttonOpenRolesSelection.add_Click($buttonOpenRolesSelection_Click)
	#
	# tabpageStep5
	#
	$tabpageStep5.Controls.Add($labelAddLocalUsers)
	$tabpageStep5.Controls.Add($buttonAddLocalUsers)
	$tabpageStep5.Controls.Add($labelDomainWorkgroupRequi)
	$tabpageStep5.Controls.Add($labelOK3)
	$tabpageStep5.Controls.Add($labelOK2)
	$tabpageStep5.Controls.Add($buttonSet)
	$tabpageStep5.Controls.Add($labelAdministratorPasswor)
	$tabpageStep5.Controls.Add($button2)
	$tabpageStep5.Location = '4, 22'
	$tabpageStep5.Name = 'tabpageStep5'
	$tabpageStep5.Padding = '3, 3, 3, 3'
	$tabpageStep5.Size = '504, 250'
	$tabpageStep5.TabIndex = 5
	$tabpageStep5.Text = 'Step 5 - Global Settings'
	$tabpageStep5.UseVisualStyleBackColor = $True
	#
	# labelAddLocalUsers
	#
	$labelAddLocalUsers.AutoSize = $True
	$labelAddLocalUsers.Location = '95, 148'
	$labelAddLocalUsers.Name = 'labelAddLocalUsers'
	$labelAddLocalUsers.Size = '90, 17'
	$labelAddLocalUsers.TabIndex = 40
	$labelAddLocalUsers.Text = 'Add Local Users:'
	$labelAddLocalUsers.UseCompatibleTextRendering = $True
	#
	# buttonAddLocalUsers
	#
	$buttonAddLocalUsers.Location = '280, 148'
	$buttonAddLocalUsers.Name = 'buttonAddLocalUsers'
	$buttonAddLocalUsers.Size = '119, 23'
	$buttonAddLocalUsers.TabIndex = 39
	$buttonAddLocalUsers.Text = 'Add Local Users'
	$buttonAddLocalUsers.UseCompatibleTextRendering = $True
	$buttonAddLocalUsers.UseVisualStyleBackColor = $True
	$buttonAddLocalUsers.add_Click($buttonAddLocalUsers_Click)
	#
	# labelDomainWorkgroupRequi
	#
	$labelDomainWorkgroupRequi.AutoSize = $True
	$labelDomainWorkgroupRequi.Location = '95, 111'
	$labelDomainWorkgroupRequi.Name = 'labelDomainWorkgroupRequi'
	$labelDomainWorkgroupRequi.Size = '162, 17'
	$labelDomainWorkgroupRequi.TabIndex = 38
	$labelDomainWorkgroupRequi.Text = 'Domain/Workgroup (Required):'
	$labelDomainWorkgroupRequi.UseCompatibleTextRendering = $True
	#
	# labelOK3
	#
	$labelOK3.AutoSize = $True
	$labelOK3.Font = 'Comic Sans MS, 10.125pt, style=Bold'
	$labelOK3.ForeColor = 'Green'
	$labelOK3.Location = '361, 105'
	$labelOK3.Name = 'labelOK3'
	$labelOK3.Size = '28, 24'
	$labelOK3.TabIndex = 37
	$labelOK3.Text = 'OK!'
	$labelOK3.UseCompatibleTextRendering = $True
	$labelOK3.Visible = $False
	#
	# labelOK2
	#
	$labelOK2.AutoSize = $True
	$labelOK2.Font = 'Comic Sans MS, 10.125pt, style=Bold'
	$labelOK2.ForeColor = 'Green'
	$labelOK2.Location = '361, 69'
	$labelOK2.Name = 'labelOK2'
	$labelOK2.Size = '28, 24'
	$labelOK2.TabIndex = 36
	$labelOK2.Text = 'OK!'
	$labelOK2.UseCompatibleTextRendering = $True
	$labelOK2.Visible = $False
	#
	# buttonSet
	#
	$buttonSet.Location = '280, 69'
	$buttonSet.Name = 'buttonSet'
	$buttonSet.Size = '75, 23'
	$buttonSet.TabIndex = 35
	$buttonSet.Text = 'Set'
	$buttonSet.UseCompatibleTextRendering = $True
	$buttonSet.UseVisualStyleBackColor = $True
	$buttonSet.add_Click($buttonSet_Click)
	#
	# labelAdministratorPasswor
	#
	$labelAdministratorPasswor.AutoSize = $True
	$labelAdministratorPasswor.Location = '95, 76'
	$labelAdministratorPasswor.Name = 'labelAdministratorPasswor'
	$labelAdministratorPasswor.Size = '184, 17'
	$labelAdministratorPasswor.TabIndex = 34
	$labelAdministratorPasswor.Text = 'Administrator Password (Required):'
	$labelAdministratorPasswor.UseCompatibleTextRendering = $True
	#
	# button2
	#
	$button2.Location = '280, 106'
	$button2.Name = 'button2'
	$button2.Size = '75, 23'
	$button2.TabIndex = 33
	$button2.Text = 'Set'
	$button2.UseCompatibleTextRendering = $True
	$button2.UseVisualStyleBackColor = $True
	$button2.add_Click($button2_Click)
	#
	# tabpageStep6
	#
	$tabpageStep6.Controls.Add($labelProgress)
	$tabpageStep6.Controls.Add($progressbarVMBuild)
	$tabpageStep6.Controls.Add($webbrowserVMBuildSummary)
	$tabpageStep6.Controls.Add($buttonBuildAndConfigureVMs)
	$tabpageStep6.Location = '4, 22'
	$tabpageStep6.Name = 'tabpageStep6'
	$tabpageStep6.Padding = '3, 3, 3, 3'
	$tabpageStep6.Size = '504, 250'
	$tabpageStep6.TabIndex = 3
	$tabpageStep6.Text = 'Step 6 - Execute'
	$tabpageStep6.UseVisualStyleBackColor = $True
	#
	# labelProgress
	#
	$labelProgress.AutoSize = $True
	$labelProgress.Location = '342, 69'
	$labelProgress.Name = 'labelProgress'
	$labelProgress.Size = '27, 17'
	$labelProgress.TabIndex = 9
	$labelProgress.Text = 'Step'
	$labelProgress.UseCompatibleTextRendering = $True
	$labelProgress.Visible = $False
	#
	# progressbarVMBuild
	#
	$progressbarVMBuild.Location = '342, 29'
	$progressbarVMBuild.Name = 'progressbarVMBuild'
	$progressbarVMBuild.Size = '147, 23'
	$progressbarVMBuild.TabIndex = 8
	$progressbarVMBuild.Visible = $False
	#
	# webbrowserVMBuildSummary
	#
	$webbrowserVMBuildSummary.Location = '0, 0'
	$webbrowserVMBuildSummary.MinimumSize = '20, 20'
	$webbrowserVMBuildSummary.Name = 'webbrowserVMBuildSummary'
	$webbrowserVMBuildSummary.Size = '327, 250'
	$webbrowserVMBuildSummary.TabIndex = 7
	#
	# buttonBuildAndConfigureVMs
	#
	$buttonBuildAndConfigureVMs.Location = '342, 151'
	$buttonBuildAndConfigureVMs.Name = 'buttonBuildAndConfigureVMs'
	$buttonBuildAndConfigureVMs.Size = '147, 93'
	$buttonBuildAndConfigureVMs.TabIndex = 5
	$buttonBuildAndConfigureVMs.Text = 'Build and Configure VMs'
	$buttonBuildAndConfigureVMs.UseCompatibleTextRendering = $True
	$buttonBuildAndConfigureVMs.UseVisualStyleBackColor = $True
	$buttonBuildAndConfigureVMs.add_Click($buttonBuildAndConfigureVMs_Click)
	#
	# buttonNext
	#
	$buttonNext.Anchor = 'Bottom, Right'
	$buttonNext.Enabled = $False
	$buttonNext.Location = '288, 294'
	$buttonNext.Name = 'buttonNext'
	$buttonNext.Size = '75, 23'
	$buttonNext.TabIndex = 2
	$buttonNext.Text = '&Next >'
	$buttonNext.UseCompatibleTextRendering = $True
	$buttonNext.UseVisualStyleBackColor = $True
	$buttonNext.add_Click($buttonNext_Click)
	$tabpageStep6.ResumeLayout()
	$tabpageStep5.ResumeLayout()
	$panel7.ResumeLayout()
	$tabpageStep4.ResumeLayout()
	$panel6.ResumeLayout()
	$tabpageStep3.ResumeLayout()
	$tabpageStep2.ResumeLayout()
	$panel1.ResumeLayout()
	$tabpageStep1.ResumeLayout()
	$tabcontrolWizard.ResumeLayout()
	$formVMAutomationTool.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formVMAutomationTool.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formVMAutomationTool.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formVMAutomationTool.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formVMAutomationTool.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formVMAutomationTool.ShowDialog()

}
#endregion Source: MainForm.psf

#region Source: Functions\InstallPreReqs.ps1
function Invoke-InstallPreReqs_ps1
{
	<#	
		.NOTES
		===========================================================================
		 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2018 v5.5.150
		 Created on:   	4/9/2019 5:13 PM
		 Created by:   	andy-user
		 Organization: 	
		 Filename:     	
		===========================================================================
		.DESCRIPTION
			A description of the file.
	#>
	
	function Install-PreReqs
	{
		try
		{
			# Check if the PSWindowsUpdate PoSH module is installed. If it is not, install it.
			
			if (-not (Get-InstalledModule -Name "VMware.PowerCLI" -ErrorAction SilentlyContinue))
			{
				try
				{
					Set-ExecutionPolicy Unrestricted -Force
					Write-Host "Installing PSWindowsUpdate and PendingReboot modules on" $computer -ForegroundColor Yellow
					Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force
					Set-PSRepository -Name "PSGallery" -InstallationPolicy Trusted
					Install-Module -Name "VMWare.PowerCLI" -Force -Scope AllUsers
					Install-Module -Name "PendingReboot" -Force -Scope AllUsers
					Write-Host "All required modules successfully installed." -ForegroundColor Green
					Import-Module VMware.PowerCLI
					Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -Confirm:$false
					Set-PowerCLIConfiguration -ParticipateInCeip $false -Scope AllUsers -Confirm:$false
					Import-Module PendingReboot
				}
				catch
				{
					
					Write-Host "Unable to install one or more modules. Please install manually or resolve connectivity issues." -ForegroundColor Red
				}
			}
			else
			{
				Write-Host "All required modules are already installed. Checking for module updates." -ForegroundColor Green
				try
				{
					Set-ExecutionPolicy Unrestricted -Force
					Update-Module -Name "VMware.PowerCLI" -Force -Confirm:$false -ErrorAction SilentlyContinue
					Update-Module -Name "PendingReboot" -Force -Confirm:$false -ErrorAction SilentlyContinue
					Write-Host "All required modules are up to date." -ForegroundColor Green
					Import-Module VMWare.PowerCLI
					Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -Confirm:$false
					Set-PowerCLIConfiguration -ParticipateInCeip $false -Scope AllUsers -Confirm:$false
					Import-Module PendingReboot
				}
				catch
				{
					Write-Host "Unable to update one or more modules. Please install manually or resolve connectivity issues." -ForegroundColor Red
				}
			}
			
		} # End try statement.
		catch
		{
			"Unable to execute."
		} # End catch statement.
		
	}
}
#endregion Source: InstallPreReqs.ps1

#region Source: AddVMForm.psf
function Show-AddVMForm_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
tAwAACODCAAAAAAABABlV8cO60qO3RvwPzz0VkArWxZw+wGSlXO0wk7Zyjl+/ajfbAaYWhEkSLCK
hzzFP1aW9Fs2nUy0RH/dwlz23X/+hf4b/tffz8dff/3Rp7Iou6jhyibTojb7m0rTr8r1U/vvYc7/
gP/P/o/Xf+1/f22qhz0/nNqaoj4686H+99AUs/g8vCFXYIIVXoCYcA07tLvrxsWQVvYC7ylNmfCc
P+bmUZduC5282Lpu+34+/Iu069YIh/LMBLU5vcncoyZxBVDM0B+6VdUJdNuLUaxezTdM6jMD+7yU
S0IvW9UD+oj1ajtQQypB+vmAnO4IQa5jsQ4YsbpFqHeCDWhvnSgwYC3fuwsj4CSmyzbwcmJLl85X
tbl+twCmBZypoyzpjCCwDg35HQ3lJxh5Fxd+Ht0KBsBFxGTruKYWMRjZAxkRHBJNwKU1Q+JYqIRW
dA5Zdu+XY+E4Ze+XlOZ6rM5qduc2swnhRFZ/4G+vAgJYsNhY2+NukvNEqw1/tzC4M8igQKMOhaxl
Cbe4ZEFXzrmFoBeImGRvUiA8zVnt+RA97N3G7cZLHbBlGidCG4BXER4MgLana41X+OZqehccItaw
cBlcdI29HQDhLfuUAI8HD5nfDY/Be+z5MApY4zBYlWrViIn4jeEtqfINYrs7Qee8l18gwDHIkTFn
3r6S35CYUxeizkhvADy+sV0wY+vKOxyXgucjrM7Fa8hJnNAYxctAofiVtDdLacNuIWG2rXdUA2Jo
n4wjQvQiHl+hwnGCR9OClAq1h32E0IjZsP84z0c3+WDZtMK2Gqm2B2g+/SR2ZSepJqiS9paeM5zs
t9sNWIVEqkIBtnnZfP2QKAsiQ4Z4fM7SeulQy9iej8GEKgQbR91PszlCUtu9jnrUxt9ZB/nXYEKO
heiy0xzFN0hfiwufc0jBBhq62obVdjcpWGVxQbWPd0czr7QG84pOB26pNlvNHahSYKxcZt+3z8RU
/PaoHHYIvW1kMDDmquWKvNPJlTy2OMTi5sIG83Efwol/PjTug0mNxSlaxVM4x3vwttJdEMoElS5W
AbQaRnYYDA9KVh5w9N37MKplJRmcdjEZHtukXJLpWmt4xHo+Xocm9SYtcfRXrBtvpsSprz6CPHQA
3NnssmZJpeIhBTTIaFvs9W1BAGTrz7n+Tpw8hby8knfXsWh23bkFuhUYRScKrse/TF8MNA2DIZsU
CZ+0pLnH2GnHJRtLC278VBco8MPqUBpbEr5bV50M2Sy2iaAAV/pd0xu36yBI8PCeJUX1BulbUK0z
NK9r1c9+MGF3ar7Zq3Hc8P21kLV6RZCl4Xg3qF5FDBAHoVIg2+/qCJjnQ0lgZsSP9US+6Co5Dm44
trzqHnUCaRrDqR3nLFDxCF27EKq+eLdtmlj7ILF5Ut7YLg2/N9JpsOL329ydtfLHsA94qr6SN3PC
tBdbK/CWklYKo+YNtJIbLb7FjiSqBB9brfBmbsSAkUo9ya4EOH6qsOGWviHJ9HwIVbxNfAkZoQwM
808xSGjQZEoSMYbaVZ5zvW7FLqsWlzLrogWKsiXd3GKUrJZfBIsw/KK0rHLhRmJ9PmQ+QczBLuQk
48ACPkrhjXeyI5/DlVnVO3P5kBuv8tobqB4GrWgtL5y4sywZExG9Xhn6kr2nlaS/qf75+L7drJwk
YBVSILR/ZgyGy4lq61oISUt6uJsmNNHusjx/UsLXdFsZOz3qoqwlpbL/7csOS59zojX8NJ8PwpsS
5r8k0d4kYTv8VqkX6DTlqVRLLuMxoGO0hwHfg9MwCzk5PjS1M+4Dk2whu0eQkx06q3K89VY9H5a+
npyNCztsuo6HVYKlsx/rvovGcC3H1uVWiZKnKglvoQ6ipA3wcUoAbmw+XOaW9AW0NNwb1Hix3ZO8
zXbNh07Zf1+4UJyhMqbbt0DDz1rZTjiZUfTC7XSRJmWONZx26aD4qSVkp5Yha4yKc67GfOIwauNS
fj7gwLWcClYtJN5XKv32lmVy7kYN0SwFKRxs6ZdNfGGdSomCmoP54HSzQNXoNTFW+6MY2Lz+QheP
sfLq+biuuHL2z6pqR6qCZtE4/pSwm/95yyJQcvXvzG/86MvvNTj77mNvhghxtnzXjPNDaotemtfo
jjZlhpbyfExTK8nR7qVTsBtuMZzl5OnDl599+CrGwYNHX657AXux2BHH5lU5Nv4N+1Vgq+oXF2MX
KxONi5fL8OddU/yrf/ESYA3Aqjw63ISpJ5Nv8gk4xXRdhzKhvJknX0o+JEx3vl7rPbEac5OO9s0U
jdubJ5CF7hQod01DPr1sy35NQ7auTjAu32Rs3xpizcLPGw1u/6LtD1RS3VjZsScnipDgcxxYalsJ
L5nKdoPrdwlT4vKL7prGuUwiGJoZcd3+zDxskK3fJGavfR04UZ65p60Qo6JfnsxlSPBmrr3w4sf0
4r3sU35f12EycUGpsiM+HwuMnBChUd9yIxczGYV4UIQB5hV3UKgP913sgRcX/YLiMbRyVh4nzfc7
tsgZWaa5cVebygJ+DY2P6O9+N+XnRB4ZQ44j+Y3oEQc6FuNq8KWPbgnNURU211Lws0UzTHSPG3NH
UQwt35y79byiRAjnskcQTofZeD6kZL/slcybcaOJa5FqShoTsPMcWlgHk3/1PKH40FCQeVICas9z
2NC6J0UIsIewOFcAHfej9KX58Tl78yn6xiffzo8PDAjHVXvuhxuYmxcaWf3k6AvPbdRrEVsuwPOg
VTq8wdxXXG8Y2LS6I+Zn4otD9vX7+xx3n4K/bUTVkELG0vMoC719iYvLUZY4ui22F2ISts0lyQWN
AxJ8W7qf6UuOyLmgD3P5o8w1u3b160TXeM/eoJRedCSu1GQUpB9DHMDNZ4dMwLvdQR6NiqVY9AJx
UJrXRQQl9F2XaTWhXKNmKviKNABFvORy1at9PsCLyWlkBUrgd27ph2szbav5Q6yt5ZDElwhXvdcI
WrBIZl9/5DciSArPVi23LBw1CgbBYHP+KVj33G7O0o+WdLIP/cMYSCrEvPmWuvAzWXlavdSRPiAT
TQUt5uLd8NWRsNmwivYGf/wmoQ20BApqPBje9Wfidf8Gx8G9PMM/0EiskbUznSDPDUrFB+Wlf8dp
+CJXBOMYQYPUG/K0V+2rL2h+xw1zNBc8W1BjvTxYTibyfSMkyQuJf3evQyowcy5MuSzVcRYJOw7b
5XQ2SywNEPKLpouXl172iujWudro5LHWBDRELeJbndvFYO58bz4l3HNplpQskfULA8l5S/L+/bK1
1EarOH9cEyzzui9NSbyZbubAt0pvbyZEjh8g48O9FPznD/jP0vDP+kDNc9bGTZnNf4G35g/4f7eU
v/8HqGRcp7QMAAA=#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formAddVM = New-Object 'System.Windows.Forms.Form'
	$buttonFormReset = New-Object 'System.Windows.Forms.Button'
	$panel5 = New-Object 'System.Windows.Forms.Panel'
	$comboboxClusters = New-Object 'System.Windows.Forms.ComboBox'
	$labelVMCluster = New-Object 'System.Windows.Forms.Label'
	$labelHostConfiguration = New-Object 'System.Windows.Forms.Label'
	$labelDataCenter = New-Object 'System.Windows.Forms.Label'
	$comboboxVMHost = New-Object 'System.Windows.Forms.ComboBox'
	$comboboxDatacenter = New-Object 'System.Windows.Forms.ComboBox'
	$labelVMHost = New-Object 'System.Windows.Forms.Label'
	$labelFolder = New-Object 'System.Windows.Forms.Label'
	$vcFolderView = New-Object 'System.Windows.Forms.TreeView'
	$buttonBuildVM = New-Object 'System.Windows.Forms.Button'
	$panel3 = New-Object 'System.Windows.Forms.Panel'
	$textboxDNS1 = New-Object 'System.Windows.Forms.TextBox'
	$labelDNS1 = New-Object 'System.Windows.Forms.Label'
	$checkboxStaticIP = New-Object 'System.Windows.Forms.CheckBox'
	$textboxDefaultGateway = New-Object 'System.Windows.Forms.TextBox'
	$labelDefaultGateway = New-Object 'System.Windows.Forms.Label'
	$textboxSubnetMask = New-Object 'System.Windows.Forms.TextBox'
	$labelSubnetMask = New-Object 'System.Windows.Forms.Label'
	$textboxIPAddress = New-Object 'System.Windows.Forms.TextBox'
	$comboboxVSwitch = New-Object 'System.Windows.Forms.ComboBox'
	$labelIPAddress = New-Object 'System.Windows.Forms.Label'
	$labelVirtualSwitch = New-Object 'System.Windows.Forms.Label'
	$labelNetworkingConfigurat = New-Object 'System.Windows.Forms.Label'
	$panel2 = New-Object 'System.Windows.Forms.Panel'
	$labelOS = New-Object 'System.Windows.Forms.Label'
	$comboboxTemplate = New-Object 'System.Windows.Forms.ComboBox'
	$labelTemplateSelect = New-Object 'System.Windows.Forms.Label'
	$labelTemplate = New-Object 'System.Windows.Forms.Label'
	$textboxVMName = New-Object 'System.Windows.Forms.TextBox'
	$labelVirtualMachineName = New-Object 'System.Windows.Forms.Label'
	$panelCompute = New-Object 'System.Windows.Forms.Panel'
	$labelCompute = New-Object 'System.Windows.Forms.Label'
	$labelMemoryGB = New-Object 'System.Windows.Forms.Label'
	$comboboxMemory = New-Object 'System.Windows.Forms.ComboBox'
	$labelNumberOfVCPUs = New-Object 'System.Windows.Forms.Label'
	$comboboxCPU = New-Object 'System.Windows.Forms.ComboBox'
	$panel1 = New-Object 'System.Windows.Forms.Panel'
	$labelVMLocation = New-Object 'System.Windows.Forms.Label'
	$labelDatastore = New-Object 'System.Windows.Forms.Label'
	$textboxDatastore = New-Object 'System.Windows.Forms.TextBox'
	$buttonSelectDatastore = New-Object 'System.Windows.Forms.Button'
	$label1 = New-Object 'System.Windows.Forms.Label'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formAddVM_Load={
		
		# Retrieve all virtual datacenters from vSphere.
		
		$datacenters = Get-Datacenter -Server $global:vcenterConnection.Name
		
		foreach ($datacenter in $datacenters)
		{
			try
			{
				$hosts = Get-VMHost -Location $datacenter.Text
				
				if ($hosts -ne $null)
				{
					Update-ComboBox -Combobox $comboboxDatacenter -items $datacenter.Name
				}
			}
			catch
			{
				[System.Windows.Forms.MessageBox]::Show("Unable to retrieve datacenters.")
			}
		}
		
		# Define the VM build queue variable.
		#$vmBuildQueue = @()
		
	}
	
	#region Control Helper Functions
	function Get-CheckedNode
	{
	<#
		.SYNOPSIS
			This function collects a list of checked nodes in a TreeView
	
		.DESCRIPTION
			This function collects a list of checked nodes in a TreeView
	
		.PARAMETER  $NodeCollection
			The collection of nodes to search
	
		.PARAMETER  $CheckedNodes
			The ArrayList that will contain the all the checked items
		
		.EXAMPLE
			$CheckedNodes = New-Object System.Collections.ArrayList
			Get-CheckedNode $treeview1.Nodes $CheckedNodes
			foreach($node in $CheckedNodes)
			{	
				Write-Host $node.Text
			}
	#>
		param (
				[ValidateNotNull()]
				[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
				[ValidateNotNull()]
				[System.Collections.ArrayList]$CheckedNodes
		)
		
		foreach ($Node in $NodeCollection)
		{
			if ($Node.Checked)
			{
				[void]$CheckedNodes.Add($Node)
			}
			Get-CheckedNode $Node.Nodes $CheckedNodes
		}
	}
	
	
	function Update-ListViewColumnSort
	{
	<#
		.SYNOPSIS
			Sort the ListView's item using the specified column.
		
		.DESCRIPTION
			Sort the ListView's item using the specified column.
			This function uses Add-Type to define a class that sort the items.
			The ListView's Tag property is used to keep track of the sorting.
		
		.PARAMETER ListView
			The ListView control to sort.
		
		.PARAMETER ColumnIndex
			The index of the column to use for sorting.
		
		.PARAMETER SortOrder
			The direction to sort the items. If not specified or set to None, it will toggle.
		
		.EXAMPLE
			Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListView]
			$ListView,
			[Parameter(Mandatory = $true)]
			[int]
			$ColumnIndex,
			[System.Windows.Forms.SortOrder]
			$SortOrder = 'None'
		)
		
		if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
		{
			return;
		}
		
		#region Define ListViewItemComparer
		try
		{
			[ListViewItemComparer] | Out-Null
		}
		catch
		{
			Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
		}
		#endregion
		
		if ($ListView.Tag -is [ListViewItemComparer])
		{
			#Toggle the Sort Order
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
				{
					$ListView.Tag.sortOrder = 'Descending'
				}
				else
				{
					$ListView.Tag.sortOrder = 'Ascending'
				}
			}
			else
			{
				$ListView.Tag.sortOrder = $SortOrder
			}
			
			$ListView.Tag.column = $ColumnIndex
			$ListView.Sort() #Sort the items
		}
		else
		{
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
			}
			
			#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
			$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
			$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
		}
	}
	
	
	function Add-ListViewItem
	{
	<#
		.SYNOPSIS
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.DESCRIPTION
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.PARAMETER ListView
			The ListView control to add the items to.
	
		.PARAMETER Items
			The object or objects you wish to load into the ListView's Items collection.
			
		.PARAMETER  ImageIndex
			The index of a predefined image in the ListView's ImageList.
		
		.PARAMETER  SubItems
			List of strings to add as Subitems.
		
		.PARAMETER Group
			The group to place the item(s) in.
		
		.PARAMETER Clear
			This switch clears the ListView's Items before adding the new item(s).
		
		.EXAMPLE
			Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
	#>
		
		Param( 
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.ListView]$ListView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Items,
		[int]$ImageIndex = -1,
		[string[]]$SubItems,
		$Group,
		[switch]$Clear)
		
		if($Clear)
		{
			$ListView.Items.Clear();
	    }
	    
	    $lvGroup = $null
	    if ($Group -is [System.Windows.Forms.ListViewGroup])
	    {
	        $lvGroup = $Group
	    }
	    elseif ($Group -is [string])
	    {
	        #$lvGroup = $ListView.Group[$Group] # Case sensitive
	        foreach ($groupItem in $ListView.Groups)
	        {
	            if ($groupItem.Name -eq $Group)
	            {
	                $lvGroup = $groupItem
	                break
	            }
	        }
	        
	        if ($null -eq $lvGroup)
	        {
	            $lvGroup = $ListView.Groups.Add($Group, $Group)
	        }
	    }
	    
		if($Items -is [Array])
		{
			$ListView.BeginUpdate()
			foreach ($item in $Items)
			{		
				$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
				#Store the object in the Tag
				$listitem.Tag = $item
				
				if($null -ne $SubItems)
				{
					$listitem.SubItems.AddRange($SubItems)
				}
				
				if($null -ne $lvGroup)
				{
					$listitem.Group = $lvGroup
				}
			}
			$ListView.EndUpdate()
		}
		else
		{
			#Add a new item to the ListView
			$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $Items
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
	}
	
	function Update-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
		
		.PARAMETER ComboBox
			The ComboBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ComboBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red" -Append
			Update-ComboBox $combobox1 "White" -Append
			Update-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Update-ComboBox $combobox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ComboBox]
			$ComboBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]
			$DisplayMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
	}
	#endregion
	
	$buttonSelectDatastore_Click={
		#TODO: Place custom script here
		if (Show-SelectDatastore_psf -eq 'OK')
		{
		}
	}
	
	$buttonBuildVM_Click = {
		
		# Here we build our paramters from the data provided.
		
		try
		{
			$object = New-Object PSObject
			
			$object | Add-Member -MemberType NoteProperty -Name "VMName" -Value $textboxVMName.Text
			$object | Add-Member -MemberType NoteProperty -Name "VM Host" -Value $comboboxVMHost.Text
			$object | Add-Member -MemberType NoteProperty -Name "Datacenter" -Value $comboboxDatacenter.Text
			$object | Add-Member -MemberType NoteProperty -Name "Datastore" -Value $textboxDatastore.Text
			$object | Add-Member -MemberType NoteProperty -Name "NumCPU" -Value $comboboxCPU.Text
			$object | Add-Member -MemberType NoteProperty -Name "Memory" -Value $comboboxMemory.Text
			$object | Add-Member -MemberType NoteProperty -Name "Network" -Value $comboboxVSwitch.Text
			$object | Add-Member -MemberType NoteProperty -Name "Template" -Value $comboboxTemplate.Text
			$object | Add-Member -MemberType NoteProperty -Name "Location" -Value $vcFolderView.SelectedNode.FullPath
			
			if ($checkboxStaticIP.Checked)
			{
				$object | Add-Member -MemberType NoteProperty -Name "IP Type" -Value "Static"
				$object | Add-Member -MemberType NoteProperty -Name "IP Address" -Value $textboxIPAddress.Text
				$object | Add-Member -MemberType NoteProperty -Name "Subnet Mask" -Value $textboxSubnetMask.Text
				$object | Add-Member -MemberType NoteProperty -Name "Default Gateway" -Value $textboxDefaultGateway.Text
				$object | Add-Member -MemberType NoteProperty -Name "Primary DNS Server" -Value $textboxDNS1.Text
			}
			else
			{
				$object | Add-Member -MemberType NoteProperty -Name "IP Type" -Value "DHCP"
				$object | Add-Member -MemberType NoteProperty -Name "IP Address" -Value ''
				$object | Add-Member -MemberType NoteProperty -Name "Subnet Mask" -Value ''
				$object | Add-Member -MemberType NoteProperty -Name "Default Gateway" -Value ''
				$object | Add-Member -MemberType NoteProperty -Name "Primary DNS Server" -Value ''
			}
			
			$allValuesSet = $true
			
			if ($object.("IP Type") -eq "Static")
			{
				# Let's check to make sure we have values in all required fields.
				
				$props = Get-Member -InputObject $object -MemberType NoteProperty
				
				foreach ($prop in $props)
				{
					$propValue = $object | Select-Object -ExpandProperty $prop.Name
					
					if (-not $propValue)
					{
						$allValuesSet = $false
					}
				}
			}
			else
			{
				$props = Get-Member -InputObject $object -MemberType NoteProperty | ?{($_.Name -ne "IP Address") -and ($_.Name -ne "Subnet Mask") -and ($_.Name -ne "Default Gateway") -and ($_.Name -ne "Primary DNS Server")}
				
				foreach ($prop in $props)
				{
					$propValue = $object | Select-Object -ExpandProperty $prop.Name
					
					if (-not $propValue)
					{
						$allValuesSet = $false
					}
				}
			}
			
			if ($allValuesSet)
			{
				$global:vmbuilds += @($object)
				
				$global:vmbuilds | Out-File "$ScriptDirectory\logs\addvm.log"
				
				If ($comboboxTemplate.Text -like "*2012*R2*")
				{
					$vmOSObject = New-Object PSObject
					$vmOSObject | Add-Member -MemberType NoteProperty -Name "VMName" -Value $textboxVMName.Text
					$vmOSObject | Add-Member -MemberType NoteProperty -Name "OS" -Value "Server2012R2"
					
					$global:vmOS = [System.Array]$global:vmOS + $vmOSObject
				}
				elseif ($comboboxTemplate.Text -like "*2016*")
				{
					$vmOSObject = New-Object PSObject
					$vmOSObject | Add-Member -MemberType NoteProperty -Name "VMName" -Value $textboxVMName.Text
					$vmOSObject | Add-Member -MemberType NoteProperty -Name "OS" -Value "Server2016"
					
					$global:vmOS = [System.Array]$global:vmOS + $vmOSObject
				}
				elseif ($comboboxTemplate.Text -like "*2019*")
				{
					$vmOSObject = New-Object PSObject
					$vmOSObject | Add-Member -MemberType NoteProperty -Name "VMName" -Value $textboxVMName.Text
					$vmOSObject | Add-Member -MemberType NoteProperty -Name "OS" -Value "Server2019"
					
					$global:vmOS = [System.Array]$global:vmOS + $vmOSObject
				}
				
				try
				{
					#$table = ConvertTo-DataTable -InputObject $global:vmbuilds
					#Update-DataGridView -DataGridView $datagridviewVMQueue -Item $table -AutoSizeColumns DisplayedCells
					
					$listviewVMsStep2.Items.Add($vmOSObject.VMName)
					
					Update-NavButtons		
					
				}
				catch
				{
					"Unable to load VM build queue."
				}
				
				# Update the treeview control for Step 3
				
				$treeviewVMListStep3.BeginUpdate()
				$treeviewVMListStep3.Nodes.Clear()
				
				foreach ($vm in $global:vmbuilds)
				{
					$newNode = $treeviewVMListStep3.Nodes.Add($vm.VMName)
				}
				
				$treeviewVMListStep3.EndUpdate()
				
				# Update the treeview control for step 4.
				
				$treeviewVMListStep4.BeginUpdate()
				$treeviewVMListStep4.Nodes.Clear()
				
				foreach ($vm in $global:vmbuilds)
				{
					$newNode = $treeviewVMListStep4.Nodes.Add($vm.VMName)
				}
				
				$treeviewVMListStep4.EndUpdate()
				
				$buttonDeleteVMFromQueue.Enabled = $true
				$formAddVM.Close()
			}
			else
			{
				#$formAddVM.Close()
				[System.Windows.Forms.MessageBox]::Show("All fields must be completed to continue.")
			}
			
		}
		catch
		{
			[System.Windows.Forms.MessageBox]::Show("Unable to add VM to queue.")
		}
	}
	
	$comboboxDatacenter_SelectedIndexChanged={
		
		if ($comboboxDatacenter.Text -ne '')
		{
			$clusters = Get-Cluster -Location $comboboxDatacenter.Text
			
			if ($clusters.Name -ne $null)
			{
				Update-ComboBox -combobox $comboboxClusters -Items $clusters.Name
			}
			
		}
	}
	
	$comboboxVMHost_SelectedIndexChanged={
		
		#Update the Template list
		
		$templates = Get-Template -Server $global:vcenterConnection.Name
		
		try
		{
			Update-ComboBox -Combobox $comboboxTemplate -items $templates.Name
		}
		catch
		{
			[System.Windows.Forms.MessageBox]::Show("Unable to retrieve templates.")
		}
		
		# Clear the datastore selection on change.
		$textboxDatastore.Clear()
		
		# Populate the vSwitch Combobox.
		
		$vSwitches = Get-VirtualPortGroup -Server $global:vcenterConnection.Name -Host $comboboxVMHost.SelectedItem | select Name | Sort-Object -Property Name
		Update-ComboBox -ComboBox $comboboxVSwitch -Items $vSwitches.Name
		
		$buttonSelectDatastore.Enabled = $true
		
		# Populate the folder view.
		
		$vcFolderView.Nodes.Clear()
		
		$vcFolderView.BeginUpdate()
		
		$rootNode = $vcFolderView.Nodes.Add("$($comboboxDatacenter.Text)")
		
		$folders = (Get-Folder -Location $comboboxDatacenter.Text | ?{ ($_.Type -eq "VM") -and ($_.Parent -like "VM") } | Sort-Object)
		
		#$folders | Out-File "$ScriptDirectory\folders.log"
		
		foreach ($folder in $folders)
		{
			$folderNode = $rootNode.Nodes.Add($folder.Name)
			$folderNode.Checked = $false
		}
		
		$vcFolderView.ExpandAll()
		$vcFolderView.EndUpdate()
	}
	
	$comboboxTemplate_SelectedIndexChanged={
		
		If ($comboboxTemplate.Text -like "*2008*R2*")
		{
			$labelOS.Text = "Operating System: Windows Server 2008 R2"
			$comboboxVSwitch.Enabled = $true
		}
		elseif ($comboboxTemplate.Text -like "*2012*R2*")
		{
			$labelOS.Text = "Operating System: Windows Server 2012 R2"
			$comboboxVSwitch.Enabled = $true		
		}
		elseif ($comboboxTemplate.Text -like "*2016*")
		{
			$labelOS.Text = "Operating System: Windows Server 2016"
			$comboboxVSwitch.Enabled = $true
		}
		elseif ($comboboxTemplate.Text -like "*2019*")
		{
			$labelOS.Text = "Operating System: Windows Server 2019"
			$comboboxVSwitch.Enabled = $true
		}
		
	}
	
	
	$checkboxStaticIP_CheckedChanged={
		
		if ($checkboxStaticIP.Checked)
		{
			$textboxIPAddress.Enabled = $true
			$textboxSubnetMask.Enabled = $true
			$textboxDefaultGateway.Enabled = $true
			$textboxDNS1.Enabled = $true
		}
		else
		{
			$textboxIPAddress.Enabled = $false
			$textboxSubnetMask.Enabled = $false
			$textboxDefaultGateway.Enabled = $false
			$textboxDNS1.Enabled = $false
		}
	}
	
	
	$comboboxClusters_SelectedIndexChanged={
		
		$hosts = Get-VMHost -Location $comboboxClusters.Text
		
		if ($hosts.Name -ne $null)
		{
			Update-ComboBox -combobox $comboboxVMHost -Items $hosts.Name
		}
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formAddVM.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:AddVMForm_comboboxClusters = $comboboxClusters.Text
		$script:AddVMForm_comboboxClusters_SelectedItem = $comboboxClusters.SelectedItem
		$script:AddVMForm_comboboxVMHost = $comboboxVMHost.Text
		$script:AddVMForm_comboboxVMHost_SelectedItem = $comboboxVMHost.SelectedItem
		$script:AddVMForm_comboboxDatacenter = $comboboxDatacenter.Text
		$script:AddVMForm_comboboxDatacenter_SelectedItem = $comboboxDatacenter.SelectedItem
		if($vcFolderView.SelectedNode -ne $null)
		{
			$script:AddVMForm_vcFolderView = $vcFolderView.SelectedNode.Text
		}
		else
		{
			$script:AddVMForm_vcFolderView = $null
		}
		$script:AddVMForm_textboxDNS1 = $textboxDNS1.Text
		$script:AddVMForm_checkboxStaticIP = $checkboxStaticIP.Checked
		$script:AddVMForm_textboxDefaultGateway = $textboxDefaultGateway.Text
		$script:AddVMForm_textboxSubnetMask = $textboxSubnetMask.Text
		$script:AddVMForm_textboxIPAddress = $textboxIPAddress.Text
		$script:AddVMForm_comboboxVSwitch = $comboboxVSwitch.Text
		$script:AddVMForm_comboboxVSwitch_SelectedItem = $comboboxVSwitch.SelectedItem
		$script:AddVMForm_comboboxTemplate = $comboboxTemplate.Text
		$script:AddVMForm_comboboxTemplate_SelectedItem = $comboboxTemplate.SelectedItem
		$script:AddVMForm_textboxVMName = $textboxVMName.Text
		$script:AddVMForm_comboboxMemory = $comboboxMemory.Text
		$script:AddVMForm_comboboxMemory_SelectedItem = $comboboxMemory.SelectedItem
		$script:AddVMForm_comboboxCPU = $comboboxCPU.Text
		$script:AddVMForm_comboboxCPU_SelectedItem = $comboboxCPU.SelectedItem
		$script:AddVMForm_textboxDatastore = $textboxDatastore.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonFormReset.remove_Click($formAddVM_Load)
			$comboboxClusters.remove_SelectedIndexChanged($comboboxClusters_SelectedIndexChanged)
			$comboboxVMHost.remove_SelectedIndexChanged($comboboxVMHost_SelectedIndexChanged)
			$comboboxDatacenter.remove_SelectedIndexChanged($comboboxDatacenter_SelectedIndexChanged)
			$buttonBuildVM.remove_Click($buttonBuildVM_Click)
			$checkboxStaticIP.remove_CheckedChanged($checkboxStaticIP_CheckedChanged)
			$comboboxTemplate.remove_SelectedIndexChanged($comboboxTemplate_SelectedIndexChanged)
			$buttonSelectDatastore.remove_Click($buttonSelectDatastore_Click)
			$formAddVM.remove_Load($formAddVM_Load)
			$formAddVM.remove_Load($Form_StateCorrection_Load)
			$formAddVM.remove_Closing($Form_StoreValues_Closing)
			$formAddVM.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formAddVM.SuspendLayout()
	$panel5.SuspendLayout()
	$panel3.SuspendLayout()
	$panel2.SuspendLayout()
	$panelCompute.SuspendLayout()
	$panel1.SuspendLayout()
	#
	# formAddVM
	#
	$formAddVM.Controls.Add($buttonFormReset)
	$formAddVM.Controls.Add($panel5)
	$formAddVM.Controls.Add($labelFolder)
	$formAddVM.Controls.Add($vcFolderView)
	$formAddVM.Controls.Add($buttonBuildVM)
	$formAddVM.Controls.Add($panel3)
	$formAddVM.Controls.Add($panel2)
	$formAddVM.Controls.Add($textboxVMName)
	$formAddVM.Controls.Add($labelVirtualMachineName)
	$formAddVM.Controls.Add($panelCompute)
	$formAddVM.Controls.Add($panel1)
	$formAddVM.AutoScaleDimensions = '6, 13'
	$formAddVM.AutoScaleMode = 'Font'
	$formAddVM.ClientSize = '569, 527'
	$formAddVM.FormBorderStyle = 'SizableToolWindow'
	$formAddVM.Margin = '6, 6, 6, 6'
	$formAddVM.Name = 'formAddVM'
	$formAddVM.StartPosition = 'CenterParent'
	$formAddVM.Text = 'Add Virtual Machine'
	$formAddVM.add_Load($formAddVM_Load)
	#
	# buttonFormReset
	#
	$buttonFormReset.Location = '393, 479'
	$buttonFormReset.Name = 'buttonFormReset'
	$buttonFormReset.Size = '75, 39'
	$buttonFormReset.TabIndex = 23
	$buttonFormReset.Text = 'Reset Form'
	$buttonFormReset.UseCompatibleTextRendering = $True
	$buttonFormReset.UseVisualStyleBackColor = $True
	$buttonFormReset.add_Click($formAddVM_Load)
	#
	# panel5
	#
	$panel5.Controls.Add($comboboxClusters)
	$panel5.Controls.Add($labelVMCluster)
	$panel5.Controls.Add($labelHostConfiguration)
	$panel5.Controls.Add($labelDataCenter)
	$panel5.Controls.Add($comboboxVMHost)
	$panel5.Controls.Add($comboboxDatacenter)
	$panel5.Controls.Add($labelVMHost)
	$panel5.BorderStyle = 'Fixed3D'
	$panel5.Location = '266, 46'
	$panel5.Name = 'panel5'
	$panel5.Size = '296, 151'
	$panel5.TabIndex = 2
	#
	# comboboxClusters
	#
	$comboboxClusters.DropDownStyle = 'DropDownList'
	$comboboxClusters.FormattingEnabled = $True
	$comboboxClusters.Location = '77, 73'
	$comboboxClusters.Name = 'comboboxClusters'
	$comboboxClusters.Size = '193, 21'
	$comboboxClusters.TabIndex = 9
	$comboboxClusters.add_SelectedIndexChanged($comboboxClusters_SelectedIndexChanged)
	#
	# labelVMCluster
	#
	$labelVMCluster.AutoSize = $True
	$labelVMCluster.Location = '12, 73'
	$labelVMCluster.Name = 'labelVMCluster'
	$labelVMCluster.Size = '43, 17'
	$labelVMCluster.TabIndex = 0
	$labelVMCluster.Text = 'Cluster:'
	$labelVMCluster.UseCompatibleTextRendering = $True
	#
	# labelHostConfiguration
	#
	$labelHostConfiguration.AutoSize = $True
	$labelHostConfiguration.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelHostConfiguration.Location = '12, 13'
	$labelHostConfiguration.Name = 'labelHostConfiguration'
	$labelHostConfiguration.Size = '102, 17'
	$labelHostConfiguration.TabIndex = 0
	$labelHostConfiguration.Text = 'Host Configuration'
	$labelHostConfiguration.UseCompatibleTextRendering = $True
	#
	# labelDataCenter
	#
	$labelDataCenter.AutoSize = $True
	$labelDataCenter.Location = '12, 40'
	$labelDataCenter.Name = 'labelDataCenter'
	$labelDataCenter.Size = '63, 17'
	$labelDataCenter.TabIndex = 0
	$labelDataCenter.Text = 'Datacenter:'
	$labelDataCenter.UseCompatibleTextRendering = $True
	#
	# comboboxVMHost
	#
	$comboboxVMHost.DropDownStyle = 'DropDownList'
	$comboboxVMHost.FormattingEnabled = $True
	$comboboxVMHost.Location = '77, 106'
	$comboboxVMHost.Name = 'comboboxVMHost'
	$comboboxVMHost.Size = '193, 21'
	$comboboxVMHost.TabIndex = 10
	$comboboxVMHost.add_SelectedIndexChanged($comboboxVMHost_SelectedIndexChanged)
	#
	# comboboxDatacenter
	#
	$comboboxDatacenter.DropDownStyle = 'DropDownList'
	$comboboxDatacenter.FormattingEnabled = $True
	$comboboxDatacenter.Location = '77, 37'
	$comboboxDatacenter.Name = 'comboboxDatacenter'
	$comboboxDatacenter.Size = '193, 21'
	$comboboxDatacenter.TabIndex = 8
	$comboboxDatacenter.add_SelectedIndexChanged($comboboxDatacenter_SelectedIndexChanged)
	#
	# labelVMHost
	#
	$labelVMHost.AutoSize = $True
	$labelVMHost.Location = '12, 109'
	$labelVMHost.Name = 'labelVMHost'
	$labelVMHost.Size = '51, 17'
	$labelVMHost.TabIndex = 0
	$labelVMHost.Text = 'VM Host:'
	$labelVMHost.UseCompatibleTextRendering = $True
	#
	# labelFolder
	#
	$labelFolder.AutoSize = $True
	$labelFolder.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelFolder.Location = '266, 296'
	$labelFolder.Name = 'labelFolder'
	$labelFolder.Size = '58, 17'
	$labelFolder.TabIndex = 0
	$labelFolder.Text = 'VM Folder'
	$labelFolder.UseCompatibleTextRendering = $True
	#
	# vcFolderView
	#
	$vcFolderView.Location = '266, 316'
	$vcFolderView.Name = 'vcFolderView'
	$vcFolderView.Size = '296, 157'
	$vcFolderView.TabIndex = 21
	#
	# buttonBuildVM
	#
	$buttonBuildVM.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$buttonBuildVM.Location = '474, 479'
	$buttonBuildVM.Name = 'buttonBuildVM'
	$buttonBuildVM.Size = '88, 39'
	$buttonBuildVM.TabIndex = 22
	$buttonBuildVM.Text = 'Add VM to build queue!'
	$buttonBuildVM.UseCompatibleTextRendering = $True
	$buttonBuildVM.UseVisualStyleBackColor = $True
	$buttonBuildVM.add_Click($buttonBuildVM_Click)
	#
	# panel3
	#
	$panel3.Controls.Add($textboxDNS1)
	$panel3.Controls.Add($labelDNS1)
	$panel3.Controls.Add($checkboxStaticIP)
	$panel3.Controls.Add($textboxDefaultGateway)
	$panel3.Controls.Add($labelDefaultGateway)
	$panel3.Controls.Add($textboxSubnetMask)
	$panel3.Controls.Add($labelSubnetMask)
	$panel3.Controls.Add($textboxIPAddress)
	$panel3.Controls.Add($comboboxVSwitch)
	$panel3.Controls.Add($labelIPAddress)
	$panel3.Controls.Add($labelVirtualSwitch)
	$panel3.Controls.Add($labelNetworkingConfigurat)
	$panel3.BorderStyle = 'Fixed3D'
	$panel3.Location = '12, 266'
	$panel3.Name = 'panel3'
	$panel3.Size = '230, 207'
	$panel3.TabIndex = 5
	#
	# textboxDNS1
	#
	$textboxDNS1.Enabled = $False
	$textboxDNS1.Location = '124, 174'
	$textboxDNS1.Name = 'textboxDNS1'
	$textboxDNS1.Size = '92, 20'
	$textboxDNS1.TabIndex = 23
	#
	# labelDNS1
	#
	$labelDNS1.AutoSize = $True
	$labelDNS1.Location = '10, 174'
	$labelDNS1.Name = 'labelDNS1'
	$labelDNS1.Size = '110, 17'
	$labelDNS1.TabIndex = 25
	$labelDNS1.Text = 'Primary DNS Server:'
	$labelDNS1.UseCompatibleTextRendering = $True
	#
	# checkboxStaticIP
	#
	$checkboxStaticIP.Location = '10, 52'
	$checkboxStaticIP.Name = 'checkboxStaticIP'
	$checkboxStaticIP.Size = '137, 24'
	$checkboxStaticIP.TabIndex = 19
	$checkboxStaticIP.Text = 'Use Static IP Settings'
	$checkboxStaticIP.UseCompatibleTextRendering = $True
	$checkboxStaticIP.UseVisualStyleBackColor = $True
	$checkboxStaticIP.add_CheckedChanged($checkboxStaticIP_CheckedChanged)
	#
	# textboxDefaultGateway
	#
	$textboxDefaultGateway.Enabled = $False
	$textboxDefaultGateway.Location = '124, 145'
	$textboxDefaultGateway.Name = 'textboxDefaultGateway'
	$textboxDefaultGateway.Size = '92, 20'
	$textboxDefaultGateway.TabIndex = 22
	#
	# labelDefaultGateway
	#
	$labelDefaultGateway.AutoSize = $True
	$labelDefaultGateway.Location = '10, 145'
	$labelDefaultGateway.Name = 'labelDefaultGateway'
	$labelDefaultGateway.Size = '91, 17'
	$labelDefaultGateway.TabIndex = 22
	$labelDefaultGateway.Text = 'Default Gateway:'
	$labelDefaultGateway.UseCompatibleTextRendering = $True
	#
	# textboxSubnetMask
	#
	$textboxSubnetMask.Enabled = $False
	$textboxSubnetMask.Location = '124, 115'
	$textboxSubnetMask.Name = 'textboxSubnetMask'
	$textboxSubnetMask.Size = '92, 20'
	$textboxSubnetMask.TabIndex = 21
	#
	# labelSubnetMask
	#
	$labelSubnetMask.AutoSize = $True
	$labelSubnetMask.Location = '10, 115'
	$labelSubnetMask.Name = 'labelSubnetMask'
	$labelSubnetMask.Size = '73, 17'
	$labelSubnetMask.TabIndex = 20
	$labelSubnetMask.Text = 'Subnet Mask:'
	$labelSubnetMask.UseCompatibleTextRendering = $True
	#
	# textboxIPAddress
	#
	$textboxIPAddress.Enabled = $False
	$textboxIPAddress.Location = '124, 83'
	$textboxIPAddress.Name = 'textboxIPAddress'
	$textboxIPAddress.Size = '92, 20'
	$textboxIPAddress.TabIndex = 20
	#
	# comboboxVSwitch
	#
	$comboboxVSwitch.DropDownStyle = 'DropDownList'
	$comboboxVSwitch.Enabled = $False
	$comboboxVSwitch.FormattingEnabled = $True
	$comboboxVSwitch.Location = '92, 29'
	$comboboxVSwitch.Name = 'comboboxVSwitch'
	$comboboxVSwitch.Size = '121, 21'
	$comboboxVSwitch.TabIndex = 18
	#
	# labelIPAddress
	#
	$labelIPAddress.AutoSize = $True
	$labelIPAddress.Location = '10, 86'
	$labelIPAddress.Name = 'labelIPAddress'
	$labelIPAddress.Size = '63, 17'
	$labelIPAddress.TabIndex = 0
	$labelIPAddress.Text = 'IP Address:'
	$labelIPAddress.UseCompatibleTextRendering = $True
	#
	# labelVirtualSwitch
	#
	$labelVirtualSwitch.AutoSize = $True
	$labelVirtualSwitch.Location = '10, 31'
	$labelVirtualSwitch.Name = 'labelVirtualSwitch'
	$labelVirtualSwitch.Size = '76, 17'
	$labelVirtualSwitch.TabIndex = 0
	$labelVirtualSwitch.Text = 'Virtual Switch:'
	$labelVirtualSwitch.UseCompatibleTextRendering = $True
	#
	# labelNetworkingConfigurat
	#
	$labelNetworkingConfigurat.AutoSize = $True
	$labelNetworkingConfigurat.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelNetworkingConfigurat.Location = '3, 10'
	$labelNetworkingConfigurat.Name = 'labelNetworkingConfigurat'
	$labelNetworkingConfigurat.Size = '137, 17'
	$labelNetworkingConfigurat.TabIndex = 0
	$labelNetworkingConfigurat.Text = 'Networking Configuration'
	$labelNetworkingConfigurat.UseCompatibleTextRendering = $True
	#
	# panel2
	#
	$panel2.Controls.Add($labelOS)
	$panel2.Controls.Add($comboboxTemplate)
	$panel2.Controls.Add($labelTemplateSelect)
	$panel2.Controls.Add($labelTemplate)
	$panel2.BorderStyle = 'Fixed3D'
	$panel2.Location = '266, 203'
	$panel2.Name = 'panel2'
	$panel2.Size = '296, 86'
	$panel2.TabIndex = 4
	#
	# labelOS
	#
	$labelOS.AutoSize = $True
	$labelOS.Location = '26, 58'
	$labelOS.Margin = '1, 0, 1, 0'
	$labelOS.Name = 'labelOS'
	$labelOS.Size = '98, 17'
	$labelOS.TabIndex = 18
	$labelOS.Text = 'Operating System:'
	$labelOS.UseCompatibleTextRendering = $True
	#
	# comboboxTemplate
	#
	$comboboxTemplate.DropDownStyle = 'DropDownList'
	$comboboxTemplate.FormattingEnabled = $True
	$comboboxTemplate.Location = '125, 33'
	$comboboxTemplate.Name = 'comboboxTemplate'
	$comboboxTemplate.Size = '164, 21'
	$comboboxTemplate.TabIndex = 17
	$comboboxTemplate.add_SelectedIndexChanged($comboboxTemplate_SelectedIndexChanged)
	#
	# labelTemplateSelect
	#
	$labelTemplateSelect.AutoSize = $True
	$labelTemplateSelect.Location = '26, 37'
	$labelTemplateSelect.Name = 'labelTemplateSelect'
	$labelTemplateSelect.Size = '55, 17'
	$labelTemplateSelect.TabIndex = 0
	$labelTemplateSelect.Text = 'Template:'
	$labelTemplateSelect.UseCompatibleTextRendering = $True
	#
	# labelTemplate
	#
	$labelTemplate.AutoSize = $True
	$labelTemplate.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelTemplate.Location = '12, 7'
	$labelTemplate.Name = 'labelTemplate'
	$labelTemplate.Size = '225, 17'
	$labelTemplate.TabIndex = 0
	$labelTemplate.Text = 'Template and Operating System Selection'
	$labelTemplate.UseCompatibleTextRendering = $True
	#
	# textboxVMName
	#
	$textboxVMName.Location = '139, 20'
	$textboxVMName.Name = 'textboxVMName'
	$textboxVMName.Size = '133, 20'
	$textboxVMName.TabIndex = 1
	#
	# labelVirtualMachineName
	#
	$labelVirtualMachineName.AutoSize = $True
	$labelVirtualMachineName.Location = '13, 20'
	$labelVirtualMachineName.Name = 'labelVirtualMachineName'
	$labelVirtualMachineName.Size = '119, 17'
	$labelVirtualMachineName.TabIndex = 0
	$labelVirtualMachineName.Text = 'Virtual Machine Name:'
	$labelVirtualMachineName.UseCompatibleTextRendering = $True
	#
	# panelCompute
	#
	$panelCompute.Controls.Add($labelCompute)
	$panelCompute.Controls.Add($labelMemoryGB)
	$panelCompute.Controls.Add($comboboxMemory)
	$panelCompute.Controls.Add($labelNumberOfVCPUs)
	$panelCompute.Controls.Add($comboboxCPU)
	$panelCompute.BorderStyle = 'Fixed3D'
	$panelCompute.Location = '13, 46'
	$panelCompute.Name = 'panelCompute'
	$panelCompute.Size = '238, 114'
	$panelCompute.TabIndex = 1
	#
	# labelCompute
	#
	$labelCompute.AutoSize = $True
	$labelCompute.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelCompute.Location = '9, 14'
	$labelCompute.Name = 'labelCompute'
	$labelCompute.Size = '125, 17'
	$labelCompute.TabIndex = 0
	$labelCompute.Text = 'Compute Configuration'
	$labelCompute.UseCompatibleTextRendering = $True
	#
	# labelMemoryGB
	#
	$labelMemoryGB.AutoSize = $True
	$labelMemoryGB.Location = '33, 90'
	$labelMemoryGB.Name = 'labelMemoryGB'
	$labelMemoryGB.Size = '75, 17'
	$labelMemoryGB.TabIndex = 0
	$labelMemoryGB.Text = 'Memory (GB):'
	$labelMemoryGB.UseCompatibleTextRendering = $True
	#
	# comboboxMemory
	#
	$comboboxMemory.FormatString = 'N2'
	$comboboxMemory.FormattingEnabled = $True
	[void]$comboboxMemory.Items.Add('1')
	[void]$comboboxMemory.Items.Add('2')
	[void]$comboboxMemory.Items.Add('4')
	[void]$comboboxMemory.Items.Add('8')
	[void]$comboboxMemory.Items.Add('16')
	[void]$comboboxMemory.Items.Add('32')
	[void]$comboboxMemory.Items.Add('64')
	$comboboxMemory.Location = '137, 86'
	$comboboxMemory.Name = 'comboboxMemory'
	$comboboxMemory.Size = '77, 21'
	$comboboxMemory.TabIndex = 5
	#
	# labelNumberOfVCPUs
	#
	$labelNumberOfVCPUs.AutoSize = $True
	$labelNumberOfVCPUs.Location = '33, 47'
	$labelNumberOfVCPUs.Name = 'labelNumberOfVCPUs'
	$labelNumberOfVCPUs.Size = '98, 17'
	$labelNumberOfVCPUs.TabIndex = 0
	$labelNumberOfVCPUs.Text = 'Number of vCPUs:'
	$labelNumberOfVCPUs.UseCompatibleTextRendering = $True
	#
	# comboboxCPU
	#
	$comboboxCPU.FormattingEnabled = $True
	[void]$comboboxCPU.Items.Add('1')
	[void]$comboboxCPU.Items.Add('2')
	[void]$comboboxCPU.Items.Add('4')
	$comboboxCPU.Location = '137, 43'
	$comboboxCPU.Name = 'comboboxCPU'
	$comboboxCPU.Size = '53, 21'
	$comboboxCPU.TabIndex = 3
	#
	# panel1
	#
	$panel1.Controls.Add($labelVMLocation)
	$panel1.Controls.Add($labelDatastore)
	$panel1.Controls.Add($textboxDatastore)
	$panel1.Controls.Add($buttonSelectDatastore)
	$panel1.BorderStyle = 'Fixed3D'
	$panel1.Location = '13, 173'
	$panel1.Name = 'panel1'
	$panel1.Size = '229, 87'
	$panel1.TabIndex = 3
	#
	# labelVMLocation
	#
	$labelVMLocation.AutoSize = $True
	$labelVMLocation.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelVMLocation.Location = '4, 5'
	$labelVMLocation.Name = 'labelVMLocation'
	$labelVMLocation.Size = '123, 17'
	$labelVMLocation.TabIndex = 0
	$labelVMLocation.Text = 'VM Datastore Location'
	$labelVMLocation.UseCompatibleTextRendering = $True
	#
	# labelDatastore
	#
	$labelDatastore.AutoSize = $True
	$labelDatastore.Location = '5, 34'
	$labelDatastore.Name = 'labelDatastore'
	$labelDatastore.Size = '56, 17'
	$labelDatastore.TabIndex = 0
	$labelDatastore.Text = 'Datastore:'
	$labelDatastore.UseCompatibleTextRendering = $True
	#
	# textboxDatastore
	#
	$textboxDatastore.Enabled = $False
	$textboxDatastore.Location = '68, 32'
	$textboxDatastore.Name = 'textboxDatastore'
	$textboxDatastore.ReadOnly = $True
	$textboxDatastore.Size = '142, 20'
	$textboxDatastore.TabIndex = 0
	$textboxDatastore.TabStop = $False
	#
	# buttonSelectDatastore
	#
	$buttonSelectDatastore.Enabled = $False
	$buttonSelectDatastore.Location = '92, 58'
	$buttonSelectDatastore.Name = 'buttonSelectDatastore'
	$buttonSelectDatastore.Size = '118, 23'
	$buttonSelectDatastore.TabIndex = 14
	$buttonSelectDatastore.Text = 'Select Datastore...'
	$buttonSelectDatastore.UseCompatibleTextRendering = $True
	$buttonSelectDatastore.UseVisualStyleBackColor = $True
	$buttonSelectDatastore.add_Click($buttonSelectDatastore_Click)
	#
	# label1
	#
	$label1.Location = '493, 20'
	$label1.Name = 'label1'
	$label1.Size = '35, 17'
	$label1.TabIndex = 0
	$label1.Text = 'label1'
	$label1.UseCompatibleTextRendering = $True
	$panel1.ResumeLayout()
	$panelCompute.ResumeLayout()
	$panel2.ResumeLayout()
	$panel3.ResumeLayout()
	$panel5.ResumeLayout()
	$formAddVM.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formAddVM.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formAddVM.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formAddVM.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formAddVM.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formAddVM.ShowDialog()

}
#endregion Source: AddVMForm.psf

#region Source: SelectDatastore.psf
function Show-SelectDatastore_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
GgQAACODCAAAAAAABABllEmPo1gQhO9I/g+lviI1YGMDUnVJYIzB7Mtju7E8NrPY8DCGXz/VNZeR
Jk+hVMQp84tPB2bDC46rmKDk41tM9dD/+XX4Tf362mEfH5/mWJd1n7RS3UIj6eCXC1uYob/2CQ0j
/P2Yik/if66frDSM3ZeWOTKlqlls33n+bIpn/t8R+DPl52je33m7SAhQUM1xAGzAkchefJV+qHdV
tNXQempSP50DzmWS0C4G6gCXHTa47nuBUcW392g7tls+p/ps7UmcNyGZMb1HuyT9RjVXvYbAMDmj
4kHRWNV6ImfrUvpvCaYPcb+u9gp2WNzeyGQIXTowvXCqjKfKN4roqtlj1pfF7w8lEc0HxRhGYzC6
Pn9uhToGg+H2GaqXMlEsfTs+prOzttwOS57lHgyS9BLC5nVXARVbZ1XvKClqr/tAb42TqBNlTYj0
PoMPR+wXUIoPZUHXq5eNfm4pfmeDwhVYdNxhthrrnsJul2uqErVaFi3c3NR3Vts1ntKwXrL7qWj0
yiKkp+l21AocU/T9ThPBFvAv7ZRIGbia6jtb8B3W2xMTbfe3wrRnM2yE9FLoQFIIH/Ysqzp5c71Z
y3WzZCgWkmX0ohYVTEMWaxwr3HC7E4dwTIj471H7HZa9kFYetPYFOQuc46QO1VwzkJ8KuBbjwnW2
hAC0nalu2f4EHs1NYcbL7WR4bjzNYNybx7ZWRTK5nvxshy2JdINNL21+NUmv7PTivGjDe2orrwVv
BYVgEE3gB1G1sNoJqAude/wchrfpktGU3q7PqUVlJseGfIl32CQzsuTc1mba3q9DX7LO8TEowfjw
I7O8TOGBBpbJohuTe+MMF+G46nEyV5rMp/wbBkg7+GVfpWzee8X3hxwzVtTtBpU+EPRN6d8jnjZ3
QON7u6By0mZcFrd4NEXVIDSoS9Giv4kL68EU6VQ7GvklboN05j2k7bAN7vEYkV3re0xIONAEHMmd
h7hQZeHYTbiZljLctIg2ZKe0C1q4CaaeyrpVBFE0xaRr9YARW/KZ5tcdRpMgZUsNbxK/EY6cZurs
ekrmlCQJRPCGvwUa+qGP//Pnk/iB8gdPfppgl7Y1nD6I780n8d8u+PoH6hPTGRoEAAA=#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formSelectDatastore = New-Object 'System.Windows.Forms.Form'
	$datagridviewDatastores = New-Object 'System.Windows.Forms.DataGridView'
	$buttonExit = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	#region Control Helper Functions
	function Update-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The DataGridView control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the DataGridView's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		.PARAMETER AutoSizeColumns
		    Resizes DataGridView control's columns after loading the items.
		#>
		Param (
				[ValidateNotNull()]
				[Parameter(Mandatory = $true)]
				[System.Windows.Forms.DataGridView]$DataGridView,
				[ValidateNotNull()]
				[Parameter(Mandatory = $true)]
				$Item,
				[Parameter(Mandatory = $false)]
				[string]$DataMember,
				[System.Windows.Forms.DataGridViewAutoSizeColumnMode]$AutoSizeColumns = 'None'
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
		{
			$DataGridView.DataSource = $Item.Tables[0]
		}
		elseif ($Item -is [System.ComponentModel.IListSource]`
				-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView])
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{
				$array.Add($Item)
			}
			$DataGridView.DataSource = $array
		}
		
		if ($AutoSizeColumns -ne 'None')
		{
			$DataGridView.AutoResizeColumns($AutoSizeColumns)
		}
		
		$DataGridView.ResumeLayout()
	}
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterWMIProperties
				This switch removes WMI properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param (
				[ValidateNotNull()]
				$InputObject,
				[ValidateNotNull()]
				[System.Data.DataTable]$Table,
				[switch]$RetainColumns,
				[switch]$FilterWMIProperties)
		
		if ($null -eq $Table)
		{
			$Table = New-Object System.Data.DataTable
		}
		
		if ($InputObject -is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
		{
			$Table = $InputObject.Tables[0]
		}
		else
		{
			if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
				
				if ($null -eq $InputObject) { return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach ($item in $InputObject)
				{
					if ($null -ne $item)
					{
						$object = $item
						break
					}
				}
				
				if ($null -eq $object) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if ($null -ne $prop.Value)
						{
							try { $type = $prop.Value.GetType() }
							catch { Out-Null }
						}
						
						if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
							[void]$table.Columns.Add($prop.Name, $type)
						}
						else #Type info not found
						{
							[void]$table.Columns.Add($prop.Name)
						}
					}
				}
				
				if ($object -is [System.Data.DataRow])
				{
					foreach ($item in $InputObject)
					{
						$Table.Rows.Add($item)
					}
					return @( ,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()
			}
			
			foreach ($item in $InputObject)
			{
				$row = $table.NewRow()
				
				if ($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if ($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
		
		return @( ,$Table)
	}
	#endregion
	
	$formSelectDatastore_Load = {
		
		$datastores = Get-Datastore -Host $comboboxVMHost.SelectedItem -Server $global:vcenterConnection.Name | ?{ $_.State -eq 'Available' } | select Name, FreeSpaceGB, CapacityGB | Sort-Object -Property Name
		
		#$datastores | Export-Csv "$ScriptDirectory\export.csv" -NoTypeInformation
		
		$table = ConvertTo-DataTable -InputObject $datastores
		
		Update-DataGridView -DataGridView $datagridviewDatastores -Item $table -AutoSizeColumns DisplayedCells
		
		foreach ($row in $datagridviewDatastores.Rows)
		{
			$percentFree = (($row.Cells[1].Value)/($row.Cells[2].Value) * 100)
			
			if ($percentFree -lt 10)
			{
				$row.DefaultCellStyle.BackColor = 'Red'
			}
			elseif (($percentFree -lt 20) -and ($percentFree -gt 10))
			{
				$row.DefaultCellStyle.BackColor = 'Yellow'
			}
		}
		
	}
	
	$buttonExit_Click={
		#TODO: Place custom script here
		$formSelectDatastore.Close()
	}
	
	$buttonLoad_Click= {
		#TODO: Place custom script here
		#	---------------------------------
		#	Sample Code to Load Grid
		#	---------------------------------
		#	$processes = Get-WmiObject Win32_Process -Namespace "Root\CIMV2"
		#	Update-DataGridView -DataGridView $datagridviewResults -Item $processes -AutoSizeColumns DisplayedCells
		#	---------------------------------
		#	Sample Code to Load Sortable Data
		#	---------------------------------
		# 	$processes = Get-WmiObject Win32_Process -Namespace "Root\CIMV2"
		#	$table = ConvertTo-DataTable -InputObject $processes -FilterWMIProperties
		#	Update-DataGridView -DataGridView $datagridviewResults -Item $table -AutoSizeColumns DisplayedCells
		
	
		
	}
	
	$datagridviewDatastores_ColumnHeaderMouseClick=[System.Windows.Forms.DataGridViewCellMouseEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellMouseEventArgs]
		if($datagridviewDatastores.DataSource -is [System.Data.DataTable])
		{
			$column = $datagridviewDatastores.Columns[$_.ColumnIndex]
			$direction = [System.ComponentModel.ListSortDirection]::Ascending
			
			if($column.HeaderCell.SortGlyphDirection -eq 'Descending')
			{
				$direction = [System.ComponentModel.ListSortDirection]::Descending
			}
	
			$datagridviewDatastores.Sort($datagridviewDatastores.Columns[$_.ColumnIndex], $direction)
		}
	}
	
	$datagridviewDatastores_CellMouseDoubleClick=[System.Windows.Forms.DataGridViewCellMouseEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellMouseEventArgs]
		#TODO: Place custom script here
		$textboxDatastore.Text = $datagridviewDatastores.CurrentRow.Cells[0].Value
		$formSelectDatastore.Close()
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formSelectDatastore.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:SelectDatastore_datagridviewDatastores = $datagridviewDatastores.SelectedCells
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$datagridviewDatastores.remove_CellMouseDoubleClick($datagridviewDatastores_CellMouseDoubleClick)
			$datagridviewDatastores.remove_ColumnHeaderMouseClick($datagridviewDatastores_ColumnHeaderMouseClick)
			$buttonExit.remove_Click($buttonExit_Click)
			$formSelectDatastore.remove_Load($formSelectDatastore_Load)
			$formSelectDatastore.remove_Load($Form_StateCorrection_Load)
			$formSelectDatastore.remove_Closing($Form_StoreValues_Closing)
			$formSelectDatastore.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formSelectDatastore.SuspendLayout()
	#
	# formSelectDatastore
	#
	$formSelectDatastore.Controls.Add($datagridviewDatastores)
	$formSelectDatastore.Controls.Add($buttonExit)
	$formSelectDatastore.AutoScaleDimensions = '6, 13'
	$formSelectDatastore.AutoScaleMode = 'Font'
	$formSelectDatastore.ClientSize = '584, 362'
	$formSelectDatastore.Margin = '6, 6, 6, 6'
	$formSelectDatastore.Name = 'formSelectDatastore'
	$formSelectDatastore.StartPosition = 'CenterParent'
	$formSelectDatastore.Text = 'Select Datastore'
	$formSelectDatastore.add_Load($formSelectDatastore_Load)
	#
	# datagridviewDatastores
	#
	$datagridviewDatastores.AllowUserToAddRows = $False
	$datagridviewDatastores.AllowUserToDeleteRows = $False
	$datagridviewDatastores.Anchor = 'Top, Bottom, Left, Right'
	$datagridviewDatastores.Location = '12, 12'
	$datagridviewDatastores.MultiSelect = $False
	$datagridviewDatastores.Name = 'datagridviewDatastores'
	$datagridviewDatastores.ReadOnly = $True
	$datagridviewDatastores.RowTemplate.Height = 33
	$datagridviewDatastores.SelectionMode = 'FullRowSelect'
	$datagridviewDatastores.Size = '560, 309'
	$datagridviewDatastores.TabIndex = 2
	$datagridviewDatastores.add_CellMouseDoubleClick($datagridviewDatastores_CellMouseDoubleClick)
	$datagridviewDatastores.add_ColumnHeaderMouseClick($datagridviewDatastores_ColumnHeaderMouseClick)
	#
	# buttonExit
	#
	$buttonExit.Anchor = 'Bottom, Right'
	$buttonExit.Location = '497, 327'
	$buttonExit.Name = 'buttonExit'
	$buttonExit.Size = '75, 23'
	$buttonExit.TabIndex = 1
	$buttonExit.Text = 'E&xit'
	$buttonExit.UseCompatibleTextRendering = $True
	$buttonExit.UseVisualStyleBackColor = $True
	$buttonExit.add_Click($buttonExit_Click)
	$formSelectDatastore.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formSelectDatastore.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formSelectDatastore.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formSelectDatastore.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formSelectDatastore.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formSelectDatastore.ShowDialog()

}
#endregion Source: SelectDatastore.psf

#region Source: Functions\Get-FolderByPath.ps1
function Invoke-Get-FolderByPath_ps1
{
	<#	
		.NOTES
		===========================================================================
		 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2018 v5.5.150
		 Created on:   	6/17/2019 9:54 AM
		 Created by:   	dalthakar
		 Organization: 	
		 Filename:     	Get-FolderByPath.ps1
		===========================================================================
		.DESCRIPTION
			This function was originally created by LucD and downloaded from http://www.lucd.info/2012/05/18/folder-by-path/.
			Retrieve folders by giving a path .DESCRIPTION The function will retrieve a folder by it's path. 
			The path can contain any type of leave (folder or datacenter). .NOTES Author: Luc Dekens .PARAMETER Path The path to the folder. This is a required parameter. .PARAMETER Path The path to the folder. This is a required parameter. .PARAMETER Separator The character that is used to separate the leaves in the path. The default is '/' .EXAMPLE PS> Get-FolderByPath -Path "Folder1/Datacenter/Folder2"
		
		.EXAMPLE
		  PS> Get-FolderByPath -Path "Folder1>Folder2" -Separator '>'
	#>
	
	function Get-FolderByPath
	{
	  	param (
			[CmdletBinding()]
			[parameter(Mandatory = $true)]
			[System.String[]]${Path},
			[char]${Separator} = '/'
		)
		
		process
		{
			if ((Get-PowerCLIConfiguration).DefaultVIServerMode -eq "Multiple")
			{
				$vcs = $defaultVIServers
			}
			else
			{
				$vcs = $defaultVIServers[0]
			}
			
			foreach ($vc in $vcs)
			{
				foreach ($strPath in $Path)
				{
					$root = Get-Folder -Name Datacenters -Server $vc
					$strPath.Split($Separator) | %{
						$root = Get-Inventory -Name $_ -Location $root -Server $vc -NoRecursion
						if ((Get-Inventory -Location $root -NoRecursion | Select -ExpandProperty Name) -contains "vm")
						{
							$root = Get-Inventory -Name "vm" -Location $root -Server $vc -NoRecursion
						}
					}
					$root | where { $_ -is [VMware.VimAutomation.ViCore.Impl.V1.Inventory.FolderImpl] } | %{
						Get-Folder -Name $_.Name -Location $root.Parent -NoRecursion -Server $vc
					}
				}
			}
		}
	}
}
#endregion Source: Get-FolderByPath.ps1

#region Source: WindowsRoles.psf
function Show-WindowsRoles_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
0QMAACODCAAAAAAABABlk0mPo0gUhO+W/B9KfbXUCZjFlqpLSvbVBpvF+AYmbVYDiYHEv75rai4j
zTuFniKkkELf5wnd2gnhRU5eyce3GIr2+efX9jf962u9+vj4POLiUTyTWi1qdEga9BUVz6ydh1Nb
o+F3N9w/wf8sP0G1xc0X8YoLvRjg4D0glI6yBP89EUp0HYwuU0KPbDbhJmcGXe8tZB+h1CnRq3rg
7DFI53aHCVep6i7TXtixN5tKWK/QWfQgRbFYgadwjLcy2D/zSQjA7DraCLBK2Twf6/E8s9p7NB+2
cQ639KzxLzogVa/zmVPXNM9d4SVZr25SoOOgfQGcVyqs0uSUG4W1NHMRvRcR3XwkzaE6elAAfhtt
o6mftk3BtNllOFa+rywWaG3g7MW8/+7mQC7XFlYqr947eJm9GS++adDdW/CTR5rosr1/yvqV0dQG
cwdFwyidpeHxXpz3jmiQvwUlzVs5v9f9w3c3xg8ftSLK71nRTsg+ZwvXHdihfPMYimQq5SBwClf0
slYFlPSgo0boDpdWrSyiKcca7qGNiEgsm9fXK9ZQ/TZL1J3shsnC+w02JynyXY8ipHfjuJhb+Z/F
Xt+L7VDNqqQvK5XE/Ug7WsRxW8iWk6rttD4W16urpAm5TdMTjAwk4ebcwjzsVD05z6FRAYAU96nd
+yrRIWGvd9ZPNwkjCiKL6zTGLJbHzd19DhEU6Hy9ah0CgskH+biXaIaHaagmnL3U5WQnXKc8SfTo
fcHtqirZ8AlLEysczjv5ej5csN00TFRE0LwH96snx+sVnqKdcAiDaTKLrp86ig92dpqnnD1eUutI
sTMVUrjE3HbZL8mmd81sbOQqfh9S0nVuej3umSDu0L2l0XqlAC6OmIaw4HK1ji4w9ehV6tFipMLp
5qJ9KFtANkgwOsfl7inEhTenw/WtJmyU2Xph9kbBoL284Lhcr8zIVvGkP5P5CYJXyWQ6NS335p5e
fPRmkM5SoATeJUZGbv1wA//8+QQ/OP2ABYcBNWldoOEDfH8+wX8R/voLX695n9EDAAA=#>
#endregion
param
(
	[Parameter(Mandatory = $true)]
	[string]$VMName
)

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formWindowsFeatures = New-Object 'System.Windows.Forms.Form'
	$treeviewWindowsRoles = New-Object 'System.Windows.Forms.TreeView'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	
	$formWindowsFeatures_Load={
		
		$treeviewWindowsRoles.BeginUpdate()
		
		$osVersion = $global:vmOS | ?{ $_.VMName -eq $VMName }
		
		if ($osVersion.OS -eq "Server2012R2")
		{
			$import = Import-Csv "$ScriptDirectory\rolesandfeatures\Server2012R2Features.csv"
			$formWindowsFeatures.Text = "Select Roles to install for Server 2012 R2"
		}
		elseif ($osVersion.OS -eq "Server2016")
		{
			$import = Import-Csv "$ScriptDirectory\rolesandfeatures\Server2016Features.csv"
			$formWindowsFeatures.Text = "Select Roles to install for Server 2016"
		}
		elseif ($osVersion.OS -eq "Server2019")
		{
			$import = Import-Csv "$ScriptDirectory\rolesandfeatures\Server2019Features.csv"
			$formWindowsFeatures.Text = "Select Roles to install for Server 2019"
		}
		
		$roleParents = $import | ?{ $_.FeatureType -eq "Role" }
		$roleServices = $import | ?{ $_.FeatureType -eq "Role Service" }
		#$features = $import | ?{ $_.FeatureType -eq "Feature" }
		$previousSelectedRoles = $global:vmRoles | ?{ $_.VMName -eq $VMName }
		
		$indexCounter = 0
		
		foreach ($role in $roleParents)
		{
			$parentNode = $treeviewWindowsRoles.Nodes.Add($role.DisplayName)
			$parentNode.Name = $role.Name
			$parentNode.Tag = $role.Name
			$parentNode.ToolTipText = $role.Description
			if ($role.Name -in $previousSelectedRoles.Roles) {$parentNode.Checked = $true }
			
		}
		
		$treeviewWindowsRoles.ExpandAll()
		$treeviewWindowsRoles.EndUpdate()
		
	}
	
	#region Control Helper Functions
	function Get-CheckedNode
	{
	<#
		.SYNOPSIS
			This function collects a list of checked nodes in a TreeView
	
		.DESCRIPTION
			This function collects a list of checked nodes in a TreeView
	
		.PARAMETER  $NodeCollection
			The collection of nodes to search
	
		.PARAMETER  $CheckedNodes
			The ArrayList that will contain the all the checked items
		
		.EXAMPLE
			$CheckedNodes = New-Object System.Collections.ArrayList
			Get-CheckedNode $treeview1.Nodes $CheckedNodes
			foreach($node in $CheckedNodes)
			{	
				Write-Host $node.Text
			}
	#>
		param (
				[ValidateNotNull()]
				[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
				[ValidateNotNull()]
				[System.Collections.ArrayList]$CheckedNodes
		)
		
		foreach ($Node in $NodeCollection)
		{
			if ($Node.Checked)
			{
				[void]$CheckedNodes.Add($Node)
			}
			Get-CheckedNode $Node.Nodes $CheckedNodes
		}
	}
	
	#endregion
	
	$buttonOK_Click={
		
		$tmpRoleArray = @()
		
		foreach ($node in $treeviewWindowsRoles.Nodes)
		{
			if ($node.Checked) { $tmpRoleArray += $node }
		}
		
		$roleObject = New-Object PSObject
		
		$roleObject | Add-Member -Type NoteProperty -Name "VMName" -Value $VMName
		$roleObject | Add-Member -Type NoteProperty -Name "Roles" -Value $tmpRoleArray.Name
		
		$global:vmRoles = $global:vmRoles | ?{ $_.VMName -ne $VMName }
		
		$global:vmRoles = [System.Array]$global:vmRoles + $roleObject
		
		$global:vmRoles | Out-File "$ScriptDirectory\logs\roles.log"
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formWindowsFeatures.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		if($treeviewWindowsRoles.SelectedNode -ne $null)
		{
			$script:WindowsRoles_treeviewWindowsRoles = $treeviewWindowsRoles.SelectedNode.Text
		}
		else
		{
			$script:WindowsRoles_treeviewWindowsRoles = $null
		}
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonOK.remove_Click($buttonOK_Click)
			$formWindowsFeatures.remove_Load($formWindowsFeatures_Load)
			$formWindowsFeatures.remove_Load($Form_StateCorrection_Load)
			$formWindowsFeatures.remove_Closing($Form_StoreValues_Closing)
			$formWindowsFeatures.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formWindowsFeatures.SuspendLayout()
	#
	# formWindowsFeatures
	#
	$formWindowsFeatures.Controls.Add($treeviewWindowsRoles)
	$formWindowsFeatures.Controls.Add($buttonOK)
	$formWindowsFeatures.AcceptButton = $buttonOK
	$formWindowsFeatures.AutoScaleDimensions = '6, 13'
	$formWindowsFeatures.AutoScaleMode = 'Font'
	$formWindowsFeatures.ClientSize = '475, 428'
	$formWindowsFeatures.FormBorderStyle = 'FixedDialog'
	$formWindowsFeatures.Margin = '6, 6, 6, 6'
	$formWindowsFeatures.MaximizeBox = $False
	$formWindowsFeatures.MinimizeBox = $False
	$formWindowsFeatures.Name = 'formWindowsFeatures'
	$formWindowsFeatures.StartPosition = 'CenterScreen'
	$formWindowsFeatures.Text = 'Select Roles to Install'
	$formWindowsFeatures.add_Load($formWindowsFeatures_Load)
	#
	# treeviewWindowsRoles
	#
	$treeviewWindowsRoles.CheckBoxes = $True
	$treeviewWindowsRoles.Location = '33, 26'
	$treeviewWindowsRoles.Name = 'treeviewWindowsRoles'
	$treeviewWindowsRoles.Size = '411, 344'
	$treeviewWindowsRoles.TabIndex = 1
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Location = '388, 393'
	$buttonOK.Name = 'buttonOK'
	$buttonOK.Size = '75, 23'
	$buttonOK.TabIndex = 0
	$buttonOK.Text = '&OK'
	$buttonOK.UseCompatibleTextRendering = $True
	$buttonOK.UseVisualStyleBackColor = $True
	$buttonOK.add_Click($buttonOK_Click)
	$formWindowsFeatures.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formWindowsFeatures.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formWindowsFeatures.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formWindowsFeatures.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formWindowsFeatures.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formWindowsFeatures.ShowDialog()

}
#endregion Source: WindowsRoles.psf

#region Source: GetAdminPassword.psf
function Show-GetAdminPassword_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
XQQAACODCAAAAAAABABllMeOo2oQRvdIvENrtkhDMBiQeloCbDDR5OAdNuknRxOefvr23Vzp1urT
p6rV0alPO31173TcL/Ecf3yHCXTtn1+n3/ivLxj6+Pi8jyAHbVyLoE6NuEm/pHTmkga0ZjxNazcm
v/sp+0T/t/ZzLHZj8yVJSoZLim1aE8cJ94vA/Ts8J+B1jb+JkvOKhWlpl42WpBRFLbjWufIEvuv4
/RiPeREleEUdoCaTYKvu+2mCIRxhKtmZ3VwpFNHJATke7U4iZhaSGboqjZuVG7ffWspatmH19Lfe
qsEVmFmrPgYxORIVx4KSYqcFe8NQe+ycUR/Kmta2iqKkog/Xw7V0RbIDD5Fcz460o6Fyww9NmUu2
GZvo8aYH7JW9d0k4ppjriIKOdk9GgSFCnirqoT511o57L/NS2TUWL8ecEZedePF18Wzf0wjBmo4n
BjowARnlpJc85mgIkibHbZBypqfjzWODoSjkUZK6lfssblTQhBSzD0KsC1pbqfrARNVRHk54AdqI
u0JYFkbytAa5uvJE1aKXl0oMGLI17UnCQgqGQL77bsWb9HWsuix3qmq+F48OBwvSta34wDUXuVcg
MHXPK4hBmeJ8xYSDn13cYgoiC0egldWT2kRlhiGb6df9pDdys45sl/Sc0XTtS3NS8A919Jt6Gb0l
tT1v59jAzUXUZ5RF8Ur3zlNdhY3/pGm2VllUfIswFBsNPlbMObEpwtpcspdPOjkbvC/Q69xayab4
vaFmsXAwtKr3hpjZ50Y8aWtIqSTB7Fxq4/EhhhpWejDEAyQCysZPI5FvK6ExiCEg7YurU4d8nWwt
2i5vt7/JHX7UKfJEJWGQQva2DS96aGiMXwb+JN2cmSuHEIZ8hygGPGsvokAXD0mgqyvHO3SwvQ5l
2YVheOrpvQXkYG2PAddYcrnMBSnKvfWeYmHNkwOT3Kt/3JPlm6ksJ0egnAl6pQFB1ez1dnYO27sX
gygYCVVs7UqMFIIkPk7FMs1H2iNNb2gpa40j3pYXfRkDtr+m802MYYitkGSK8TNpbeNMmpexpVzi
lQ4YkU+BiV8xxg97wrr3rTSCNVl0MKgqc7amJZFBuIsJUp2ow0yHuTxgKECnFKAv9nUqyz7r+7Vk
I6MxLj/+cn/+fKI/Wv8Izk1T2jxrkE4f6Hfzif73nXz9BRIrUzVdBAAA#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formSetAdminis6tratorPas = New-Object 'System.Windows.Forms.Form'
	$textboxAdminPassword = New-Object 'System.Windows.Forms.TextBox'
	$labelEnterPassword = New-Object 'System.Windows.Forms.Label'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formSetAdministratorPass_Load={
		#TODO: Initialize Form Controls here
		
	}
	$buttonOK_Click={
		
		foreach ($vm in $global:vmBuilds)
		{
			$pwObject = New-Object PSObject
			
			$pwObject | Add-Member -Type NoteProperty -Name "VMName" -Value $vm.VMName
			$pwObject | Add-Member -Type NoteProperty -Name "Password" -Value $textboxAdminPassword.Text
			
			$global:vmAdminPasswords = [System.Array]$global:vmAdminPasswords + $pwObject
		}
		
		$global:vmAdminPasswords | Out-File "$ScriptDirectory\logs\pws.log"
		
		$labelOK2.Visible = $true
		
		Update-NavButtons
		
	}
	
	$textboxAdminPassword_TextChanged={
		
		if ($textboxAdminPassword.Text.Length -gt 8) { $buttonOK.Enabled = $true }
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formSetAdminis6tratorPas.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:GetAdminPassword_textboxAdminPassword = $textboxAdminPassword.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$textboxAdminPassword.remove_TextChanged($textboxAdminPassword_TextChanged)
			$buttonOK.remove_Click($buttonOK_Click)
			$formSetAdminis6tratorPas.remove_Load($Form_StateCorrection_Load)
			$formSetAdminis6tratorPas.remove_Closing($Form_StoreValues_Closing)
			$formSetAdminis6tratorPas.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formSetAdminis6tratorPas.SuspendLayout()
	#
	# formSetAdminis6tratorPas
	#
	$formSetAdminis6tratorPas.Controls.Add($textboxAdminPassword)
	$formSetAdminis6tratorPas.Controls.Add($labelEnterPassword)
	$formSetAdminis6tratorPas.Controls.Add($buttonOK)
	$formSetAdminis6tratorPas.AcceptButton = $buttonOK
	$formSetAdminis6tratorPas.AutoScaleDimensions = '6, 13'
	$formSetAdminis6tratorPas.AutoScaleMode = 'Font'
	$formSetAdminis6tratorPas.ClientSize = '209, 129'
	$formSetAdminis6tratorPas.FormBorderStyle = 'FixedDialog'
	$formSetAdminis6tratorPas.Margin = '6, 6, 6, 6'
	$formSetAdminis6tratorPas.MaximizeBox = $False
	$formSetAdminis6tratorPas.MinimizeBox = $False
	$formSetAdminis6tratorPas.Name = 'formSetAdminis6tratorPas'
	$formSetAdminis6tratorPas.StartPosition = 'CenterScreen'
	$formSetAdminis6tratorPas.Text = 'Set Adminis6trator Password'
	#
	# textboxAdminPassword
	#
	$textboxAdminPassword.Location = '7, 56'
	$textboxAdminPassword.Margin = '1, 2, 1, 2'
	$textboxAdminPassword.Name = 'textboxAdminPassword'
	$textboxAdminPassword.PasswordChar = '*'
	$textboxAdminPassword.Size = '188, 20'
	$textboxAdminPassword.TabIndex = 2
	$textboxAdminPassword.add_TextChanged($textboxAdminPassword_TextChanged)
	#
	# labelEnterPassword
	#
	$labelEnterPassword.AutoSize = $True
	$labelEnterPassword.Location = '7, 18'
	$labelEnterPassword.Margin = '1, 0, 1, 0'
	$labelEnterPassword.Name = 'labelEnterPassword'
	$labelEnterPassword.Size = '201, 17'
	$labelEnterPassword.TabIndex = 1
	$labelEnterPassword.Text = 'Local Administrator Account Password:'
	$labelEnterPassword.UseCompatibleTextRendering = $True
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Enabled = $False
	$buttonOK.Location = '122, 94'
	$buttonOK.Name = 'buttonOK'
	$buttonOK.Size = '75, 23'
	$buttonOK.TabIndex = 0
	$buttonOK.Text = '&OK'
	$buttonOK.UseCompatibleTextRendering = $True
	$buttonOK.UseVisualStyleBackColor = $True
	$buttonOK.add_Click($buttonOK_Click)
	$formSetAdminis6tratorPas.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formSetAdminis6tratorPas.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formSetAdminis6tratorPas.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formSetAdminis6tratorPas.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formSetAdminis6tratorPas.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formSetAdminis6tratorPas.ShowDialog()

}
#endregion Source: GetAdminPassword.psf

#region Source: WindowsFeatures.psf
function Show-WindowsFeatures_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
zAMAACODCAAAAAAABABlk0mrq1oQheeB/IfDnQpX0xgV8g5su9hFYx+daWxibLa6jd2vv7nnTR68
Gi2KKliw1ne20gcc037hoyH6+ghUwOafX4ffu1/f283X19noi7xookosqlSP6vTbL5oETkhMo+Hd
p+h3i7Iz/r+rn18R9vX31Qq8HYKWMeUAcAbPgX+HBdyuSphx/wLmzNANdccmuuea7japrGPLni4/
vdjkgW/cqvvlfTSkYJHCaC9i+HZjE7Lgl0DhZ/djpmUomOIJkeBohPzK9vhpTjhsqNn99WqwiKID
bhYSCiN53ZfeFmol37tVu/lEhnK13URXw5Ok54FJnVdZAF8fgqlk2dgJPK0dRfXBR5eJUAbTJP3G
JAeEhwxksgXq1GC4js1xBg5j7EXNkrndzLI3c/owCX5XNgKrdKQ7OS0k2tfBi/IskiB1BHtjQvQt
8AtvvVB2NFkoXzEWDiXUldqQdpIiDcnqbDf6A5u9u35hnXXhLpatceFMkcqlW/sTLJUJZyXfvUIh
hwbxwI93EOFOAps7pYRcYT351r2ZjwMybbvAtpsnzlnuSfLbDGg7H70JsjMOUy83ZRocK374mxb7
SUurGTF7aw5t04RVlOSwc+LO0R50Zyagn62R7ertBvhm+z5yTJJNZHExu7DsgOxFlrIvkRgpMn54
SiSREX4iTQFSxyUcMC2+61Omkv6ew+zpmDUrSYm5wWw3wQnE5JvhjvuP8MSEvC3iC46L2IrN7Be1
q45VWUczdaJ2s+ILKs5Lkw+Ju64tI+hB3p3SELyCQd4X2w2medfZ6OwwHzticpk+rmJRWsxYNYjj
RHtE/5rDw8Ko9gnJbTbUVhmsejwr2C2uDGbvBm36CKuUWE/jdtPHWrBYyuCNIl72bTo7fSIwDBxu
Q6qGVcbmskfFPKoCIDS5cCF2y1ulae1dPRdhZ1jxWD7DZACFa8+fvuEr+UAyLvYBc0+YPh3JUSEP
B5opn/i+oTPywbWhS/1l5Yz/YPQDFEAoreOqSNEX/tmc8f/S+/0HaFFiB8wDAAA=#>
#endregion
param
(
	[Parameter(Mandatory = $true)]
	[string]$VMName
)

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formWindowsFeatures = New-Object 'System.Windows.Forms.Form'
	$treeviewWindowsFeatures = New-Object 'System.Windows.Forms.TreeView'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	
	$formWindowsFeatures_Load={
		
		$treeviewWindowsFeatures.BeginUpdate()
		
		$osVersion = $global:vmOS | ?{ $_.VMName -eq $VMName }
		
		if ($osVersion.OS -eq "Server2012R2")
		{
			$import = Import-Csv "$ScriptDirectory\rolesandfeatures\Server2012R2Features.csv"
			$formWindowsFeatures.Text = "Select Features to install for Server 2012 R2"
		}
		elseif ($osVersion.OS -eq "Server2016")
		{
			$import = Import-Csv "$ScriptDirectory\rolesandfeatures\Server2016Features.csv"
			$formWindowsFeatures.Text = "Select Features to install for Server 2016"
		}
		elseif ($osVersion.OS -eq "Server2019")
		{
			$import = Import-Csv "$ScriptDirectory\rolesandfeatures\Server2019Features.csv"
			$formWindowsFeatures.Text = "Select Features to install for Server 2019"
		}
		
		#$roleParents = $import | ?{ $_.FeatureType -eq "Role" }
		#$roleServices = $import | ?{ $_.FeatureType -eq "Role Service" }
		$features = $import | ?{ ($_.FeatureType -eq "Feature") -and ($_.Parent -eq '') }
		$previousSelectedFeatures = $global:vmFeatures | ?{ $_.VMName -eq $VMName }
		
		$indexCounter = 0
		
		foreach ($feature in $features)
		{
			$parentNode = $treeviewWindowsFeatures.Nodes.Add($feature.DisplayName)
			$parentNode.Name = $feature.Name
			$parentNode.ToolTipText = $feature.Description
			if ($feature.Name -in $previousSelectedFeatures.Roles) {$parentNode.Checked = $true }
			
		}
		
		$treeviewWindowsFeatures.ExpandAll()
		$treeviewWindowsFeatures.EndUpdate()
		
	}
	
	#region Control Helper Functions
	function Get-CheckedNode
	{
	<#
		.SYNOPSIS
			This function collects a list of checked nodes in a TreeView
	
		.DESCRIPTION
			This function collects a list of checked nodes in a TreeView
	
		.PARAMETER  $NodeCollection
			The collection of nodes to search
	
		.PARAMETER  $CheckedNodes
			The ArrayList that will contain the all the checked items
		
		.EXAMPLE
			$CheckedNodes = New-Object System.Collections.ArrayList
			Get-CheckedNode $treeview1.Nodes $CheckedNodes
			foreach($node in $CheckedNodes)
			{	
				Write-Host $node.Text
			}
	#>
		param (
				[ValidateNotNull()]
				[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
				[ValidateNotNull()]
				[System.Collections.ArrayList]$CheckedNodes
		)
		
		foreach ($Node in $NodeCollection)
		{
			if ($Node.Checked)
			{
				[void]$CheckedNodes.Add($Node)
			}
			Get-CheckedNode $Node.Nodes $CheckedNodes
		}
	}
	
	#endregion
	
	$buttonOK_Click={
		
		$tmpFeatureArray = @()
		
		foreach ($node in $treeviewWindowsFeatures.Nodes)
		{
			if ($node.Checked) { $tmpFeatureArray += $node }
		}
		
		$featureObject = New-Object PSObject
		
		$featureObject | Add-Member -Type NoteProperty -Name "VMName" -Value $VMName
		$featureObject | Add-Member -Type NoteProperty -Name "Features" -Value $tmpFeatureArray.Name
		
		$global:vmFeatures = $global:vmFeatures | ?{ $_.VMName -ne $VMName }
		
		$global:vmFeatures = [System.Array]$global:vmFeatures + $featureObject
		
		$global:vmFeatures | Out-File "$ScriptDirectory\logs\features.log"
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formWindowsFeatures.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		if($treeviewWindowsFeatures.SelectedNode -ne $null)
		{
			$script:WindowsFeatures_treeviewWindowsFeatures = $treeviewWindowsFeatures.SelectedNode.Text
		}
		else
		{
			$script:WindowsFeatures_treeviewWindowsFeatures = $null
		}
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonOK.remove_Click($buttonOK_Click)
			$formWindowsFeatures.remove_Load($formWindowsFeatures_Load)
			$formWindowsFeatures.remove_Load($Form_StateCorrection_Load)
			$formWindowsFeatures.remove_Closing($Form_StoreValues_Closing)
			$formWindowsFeatures.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formWindowsFeatures.SuspendLayout()
	#
	# formWindowsFeatures
	#
	$formWindowsFeatures.Controls.Add($treeviewWindowsFeatures)
	$formWindowsFeatures.Controls.Add($buttonOK)
	$formWindowsFeatures.AcceptButton = $buttonOK
	$formWindowsFeatures.AutoScaleDimensions = '6, 13'
	$formWindowsFeatures.AutoScaleMode = 'Font'
	$formWindowsFeatures.ClientSize = '475, 428'
	$formWindowsFeatures.FormBorderStyle = 'FixedDialog'
	$formWindowsFeatures.Margin = '6, 6, 6, 6'
	$formWindowsFeatures.MaximizeBox = $False
	$formWindowsFeatures.MinimizeBox = $False
	$formWindowsFeatures.Name = 'formWindowsFeatures'
	$formWindowsFeatures.StartPosition = 'CenterScreen'
	$formWindowsFeatures.Text = 'Select Roles to Install'
	$formWindowsFeatures.add_Load($formWindowsFeatures_Load)
	#
	# treeviewWindowsFeatures
	#
	$treeviewWindowsFeatures.CheckBoxes = $True
	$treeviewWindowsFeatures.Location = '33, 26'
	$treeviewWindowsFeatures.Name = 'treeviewWindowsFeatures'
	$treeviewWindowsFeatures.Size = '411, 344'
	$treeviewWindowsFeatures.TabIndex = 1
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Location = '388, 393'
	$buttonOK.Name = 'buttonOK'
	$buttonOK.Size = '75, 23'
	$buttonOK.TabIndex = 0
	$buttonOK.Text = '&OK'
	$buttonOK.UseCompatibleTextRendering = $True
	$buttonOK.UseVisualStyleBackColor = $True
	$buttonOK.add_Click($buttonOK_Click)
	$formWindowsFeatures.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formWindowsFeatures.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formWindowsFeatures.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formWindowsFeatures.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formWindowsFeatures.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formWindowsFeatures.ShowDialog()

}
#endregion Source: WindowsFeatures.psf

#region Source: AddLocalUsers.psf
function Show-AddLocalUsers_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
uAQAACODCAAAAAAABABllEmrq1oQhecB/8PhTgNXjTEqnHvAJPaxbxKdqdka49Zt3/36F+6bPHg1
KopVRcFafN8OSNEEuvUaD/HXp+kLVP/5Rf0mf/1gu6+vb7Mr8qKOoVhAYMQV+OGfzxtKY+j3H/Hv
ps++8f9p/m6KqKt+jpmpkUjl9EXg+Yt5vfD/1pm/GvBAToc3by8cZx1qMLOVMqnQBmtpRW7ruslw
85/lgx8bEJTkdp4ZyWHidcZ2HsNt9uDKhKkRqG14IZSZPUtT1h4cj+w0XwlH2i8sLshaSi2X7dHf
+Oq0kjnwcmMxl8nwZeoUaGw1GtguscbGaWk+dhMRyZTda2x8CdTRz/0rH0MHGpmi8QRdsHRuRf5N
UMyZPJnP1jAGLscT4vpuAeHZ5yuVYbujjOo0W2751qpKU2poI9zNqSwxblmbb9+q8QTi25WsQF0v
adsb1M2fDUX3D2apSZsd5zOVW0gxquiF7aL6TNONeOqDC3c3qwYG+ltdZJjqyBXkeJMEl3KaVmYG
5SaFVp2xKccYtlArwizgoXWOyXtDRPE7i0xsV7qU5GsoJHW3Hx8PMXhdMr3vYKJlx7xFkcBVwKhY
eQ0RlEzV7gb+QTvNwaULpE2VGrB4xveRSaeO/fnNj1yd1ftrLlaiqHuafVn8bRRhJrKcUPQurhHb
gcPTZ2WcxM0F0ohIPH4cqaa6zy+q3vKEX6OW+YQE231CYndl5J/ISaCZ8hoQjD+GC6oHbj8SsbkO
NvsOkNenofcSU9kPmTMiP2lUgkbXMo3dWEazVI88zAS2YzS49SrusgpQ+FAc4SQh+hDsB+JOQQNN
D2gRz7rO9uvrJIAGuGRx6CBzCXnGORZkK4lQrtTKM3W5xnZtGQ8laCG8r2TipUzaMlowpkGMrPE+
3gEHl+Gh5E09TEFYagTflL3u6K8zMwmScYFhdav2gRmMxUXGdi45L3WgAe55fL2d+EyLhcFkXeur
lCdYb1CA231l+9jOQko9jUPIhgBBQKabu76O79sxpZcs4beImBlsZz0877CY0PGcjCtlNK5JHwVU
DUOXfLjddu+V1jjBEW3q6zYSB/W0KnRD2DD/mE1kfdKtnaMChZ4i+nMtctFSQmqTko1tz3dyfGyk
kxPOONHwAIJRd6Vi/5i4hnhpeFJtYmZdEQ6VzKenZu115rgn7h5NulWI7Yz9fn4T4SZrxXsJqFPX
WYyzWFEWMRPl2NmQsZlWv7jjVXc+UPjzjf+Fxl988H0PqgQWoP/CP5Nv/L+k+vkHlNFEFLgEAAA=#>
#endregion
param
(
	[Parameter(Mandatory = $true)]
	[string]$VMName
)

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formAddUserAccounts = New-Object 'System.Windows.Forms.Form'
	$textboxPassword = New-Object 'System.Windows.Forms.TextBox'
	$textboxUsername = New-Object 'System.Windows.Forms.TextBox'
	$checkboxAdministrator = New-Object 'System.Windows.Forms.CheckBox'
	$labelPassword = New-Object 'System.Windows.Forms.Label'
	$labelUsername = New-Object 'System.Windows.Forms.Label'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	
	$formAddUserAccounts_Load={
		#TODO: Initialize Form Controls here
		
	}
	
	$buttonOK_Click={
		
		$usersObject = New-Object PSObject
		
		#$usersObject | Add-Member -Type NoteProperty -Name "VMName" -Value $VMName
		$usersObject | Add-Member -Type NoteProperty -Name "Username" -Value $textboxUsername.Text
		$usersObject | Add-Member -Type NoteProperty -Name "Password" -Value $textboxPassword.Text
		
		if ($checkboxAdministrator.Checked) { $usersObject | Add-Member -Type NoteProperty -Name "Administrator" -Value "Yes" }
		else { $usersObject | Add-Member -Type NoteProperty -Name "Administrator" -Value "No" }
		
		$global:vmLocalUsers = $global:vmLocalUsers | ?{ $_.Username -ne $textboxUsername.Text }
		
		$global:vmLocalUsers = [System.Array]$global:vmLocalUsers + $usersObject
		
		$global:vmLocalUsers | Out-File "$ScriptDirectory\logs\users.log"
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formAddUserAccounts.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:AddLocalUsers_textboxPassword = $textboxPassword.Text
		$script:AddLocalUsers_textboxUsername = $textboxUsername.Text
		$script:AddLocalUsers_checkboxAdministrator = $checkboxAdministrator.Checked
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonOK.remove_Click($buttonOK_Click)
			$formAddUserAccounts.remove_Load($formAddUserAccounts_Load)
			$formAddUserAccounts.remove_Load($Form_StateCorrection_Load)
			$formAddUserAccounts.remove_Closing($Form_StoreValues_Closing)
			$formAddUserAccounts.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formAddUserAccounts.SuspendLayout()
	#
	# formAddUserAccounts
	#
	$formAddUserAccounts.Controls.Add($textboxPassword)
	$formAddUserAccounts.Controls.Add($textboxUsername)
	$formAddUserAccounts.Controls.Add($checkboxAdministrator)
	$formAddUserAccounts.Controls.Add($labelPassword)
	$formAddUserAccounts.Controls.Add($labelUsername)
	$formAddUserAccounts.Controls.Add($buttonOK)
	$formAddUserAccounts.AcceptButton = $buttonOK
	$formAddUserAccounts.AutoScaleDimensions = '6, 13'
	$formAddUserAccounts.AutoScaleMode = 'Font'
	$formAddUserAccounts.ClientSize = '225, 204'
	$formAddUserAccounts.FormBorderStyle = 'FixedDialog'
	$formAddUserAccounts.Margin = '6, 6, 6, 6'
	$formAddUserAccounts.MaximizeBox = $False
	$formAddUserAccounts.MinimizeBox = $False
	$formAddUserAccounts.Name = 'formAddUserAccounts'
	$formAddUserAccounts.StartPosition = 'CenterScreen'
	$formAddUserAccounts.Text = 'Add User Accounts'
	$formAddUserAccounts.add_Load($formAddUserAccounts_Load)
	#
	# textboxPassword
	#
	$textboxPassword.Location = '94, 86'
	$textboxPassword.Margin = '1, 2, 1, 2'
	$textboxPassword.Name = 'textboxPassword'
	$textboxPassword.PasswordChar = '*'
	$textboxPassword.Size = '100, 20'
	$textboxPassword.TabIndex = 1
	#
	# textboxUsername
	#
	$textboxUsername.Location = '94, 41'
	$textboxUsername.Margin = '1, 2, 1, 2'
	$textboxUsername.Name = 'textboxUsername'
	$textboxUsername.Size = '100, 20'
	$textboxUsername.TabIndex = 0
	#
	# checkboxAdministrator
	#
	$checkboxAdministrator.Location = '24, 138'
	$checkboxAdministrator.Name = 'checkboxAdministrator'
	$checkboxAdministrator.Size = '104, 24'
	$checkboxAdministrator.TabIndex = 2
	$checkboxAdministrator.Text = 'Administrator'
	$checkboxAdministrator.UseCompatibleTextRendering = $True
	$checkboxAdministrator.UseVisualStyleBackColor = $True
	#
	# labelPassword
	#
	$labelPassword.AutoSize = $True
	$labelPassword.Location = '24, 86'
	$labelPassword.Margin = '1, 0, 1, 0'
	$labelPassword.Name = 'labelPassword'
	$labelPassword.Size = '57, 17'
	$labelPassword.TabIndex = 2
	$labelPassword.Text = 'Password:'
	$labelPassword.UseCompatibleTextRendering = $True
	#
	# labelUsername
	#
	$labelUsername.AutoSize = $True
	$labelUsername.Location = '24, 42'
	$labelUsername.Margin = '1, 0, 1, 0'
	$labelUsername.Name = 'labelUsername'
	$labelUsername.Size = '60, 17'
	$labelUsername.TabIndex = 1
	$labelUsername.Text = 'Username:'
	$labelUsername.UseCompatibleTextRendering = $True
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Location = '138, 169'
	$buttonOK.Name = 'buttonOK'
	$buttonOK.Size = '75, 23'
	$buttonOK.TabIndex = 3
	$buttonOK.Text = '&OK'
	$buttonOK.UseCompatibleTextRendering = $True
	$buttonOK.UseVisualStyleBackColor = $True
	$buttonOK.add_Click($buttonOK_Click)
	$formAddUserAccounts.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formAddUserAccounts.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formAddUserAccounts.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formAddUserAccounts.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formAddUserAccounts.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formAddUserAccounts.ShowDialog()

}
#endregion Source: AddLocalUsers.psf

#region Source: WorkgroupDomainJoin.psf
function Show-WorkgroupDomainJoin_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
7gUAACODCAAAAAAABABlVEer62gM3QfyHy5vGxj3BvddcOy4xy2OS3buJe6f+6+fzJvNwAgEklA5
SOJ822ncLem48+EUfn0MUHbt71/YX8ivn/Pp6+vbGMu8bMNaKOtUD5v0x+vGdz52c893TVi2Sle2
f/Ug+4b+l/mnXujG5ofa6gDhUxW74izLGTzH/itXlq8bD1nQirU2hjHRNpXpRl6U2uFi5q3CAz9N
5lNhvSmTez1eH4byTg0AbhfofIpX9annAhDVrQuLJzJkEHrJVIpm3sR8WaCrAG5Mli28cQdLJd0S
dkXAcdevUt7yjI2hgr7GoMEFhD7OJ3saoDsIGFpm9wUJaJDa5taU4pjnBCKt8vWRzB9fyF5Z6B78
BAoJn3yytt49Orz2Uej6vHVf+rrH6flULbsMOfBqFv0qdCR0vwxRUaHvEeh2cIQv7SgO9rjvYoDM
sROI2hActJ1FxadPcZPXjMFFj/KLm3tdzqeV3F4m2q8J+gxRv5Y+ag5YZ1zTJdhk9yC729LjvVjz
ujgO7Lx4N6MxXa2966KTGDUuAwMKUM4q2uR8aqJUFWF/dx0rSPArtukP12JuimGkz1nc16e/8ReW
S7Q0hi+IZzlqKSlVFFzvcRnlXKQkjl8nR4mEa3s+Ab3syLXi7AAIrsAq1mYyZUBuRnxtIjtu1uHQ
guAQOr0+iF6E4wdzCZL4wJ1n5XTDZmYtrV1npL0D9HzaiBlmCxRhCNYxbmTmpBoxPXPL5IQbScsz
GbFaC9lJLIQMTDp5M73fWSUSENeIz8fzZZPgdXg3umPDz964QQ1axiLUoWqd18SvACPt1RUk7RNb
+7DIXgm8QI2B89tb3nEXsxVZZ61sZ5nWGSqsVh33n+e98J+bGhIOsTMr2QODP0znDZmB+vRqqlTt
yV4/Y0yTZxvb5fPSyjTbzxUFKSqFhccQ4hIWIQODSrAtNuIOfD7EobrONtykF9v5OJ7WHi8lnahu
QMfqrkiEj4mEtgdNJSNI2MGOBcI+edlP240CevXHG61aYNOcNNTPJ9i/BT2l+vrMda058IL/wTpp
MELViZfoCdG+csc37B1dqrru+jHWde8DEyIvOBle1PmiNNKDRMIHqpxPPRGgUfiuEWcMo4k2Qg8r
n9cgK4090XdKKgHjCeOUmWnpqcO0c8nFKeekknRNdN/MtbBU7xE2wgF33fnk3jss0mE7UtfYei8S
DxyrCQL0odYJpt9zRSTgZLJyZqgU/x6aUmzh8pjWQCwm7iKqK6m5JXq1G5qPz6clr58tMK+0PyMy
+jZWm7wCpnwqOsFTqKfJzBJEfX1PmNZ3R7ZRyTafzRlN+gn2kyhFwsBbiAmdrMX5XKG1HfWCQUMO
GdXgZo+HW1D1SGhh2DhvdOsFjFBDP1BFN91VWiuKiqOpkanByLI7Sh8b5E1SdVChcD+fGAsVw5Kp
JqPOG3O71ZMj+FQU3lQOeS3Y/HiLuwVTd3cdHhLmGgRNWMr44HLj5SZzG7XaRMs6hQNC3s4nCFsR
m1HE40KNdpaMYKYeR3aYnYlLcYgPnb6mHxL9/Q39Idk/dMsCkDZRXabgC/pEvqH/8vvP34MD6rvu
BQAA#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formWorkgroupJoin = New-Object 'System.Windows.Forms.Form'
	$textboxDomainPassword = New-Object 'System.Windows.Forms.TextBox'
	$textboxDomainUser = New-Object 'System.Windows.Forms.TextBox'
	$textboxDomainName = New-Object 'System.Windows.Forms.TextBox'
	$labelDomainPW = New-Object 'System.Windows.Forms.Label'
	$labelDomainUser = New-Object 'System.Windows.Forms.Label'
	$labelDomainName = New-Object 'System.Windows.Forms.Label'
	$radiobuttonWorkgroup = New-Object 'System.Windows.Forms.RadioButton'
	$radiobuttonDomain = New-Object 'System.Windows.Forms.RadioButton'
	$textboxWorkgroup = New-Object 'System.Windows.Forms.TextBox'
	$labelWorkGroup = New-Object 'System.Windows.Forms.Label'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formWorkgroupJoin_Load={
		#TODO: Initialize Form Controls here
		
	}
	
	$buttonOK_Click = {
		
		if ($radiobuttonDomain.Checked)
		{
			$tmpArray = $global:vmWorkgroupDomain
			
			$global:vmWorkgroupDomain = [System.Collections.ArrayList]@()
					
			foreach ($item in $tmpArray)
			{
				$domainObject = New-Object PSObject
				
				$domainObject | Add-Member -Type NoteProperty -Name "VMName" -Value $item.VMName
				$domainObject | Add-Member -Type NoteProperty -Name "DomainUser" -Value $textboxDomainUser.Text
				$domainObject | Add-Member -Type NoteProperty -Name "DomainPassword" -Value $textboxDomainPassword.Text
				$domainObject | Add-Member -Type NoteProperty -Name "DomainName" -Value $textboxDomainName.Text
				$domainObject | Add-Member -Type NoteProperty -Name "IsWorkgroup" -Value 'No'
				$domainObject | Add-Member -Type NoteProperty -Name "Hostname" -Value $item.Hostname
				
				$global:vmWorkgroupDomain = [System.Array]$global:vmWorkgroupDomain + $domainObject
			}
			
			$global:vmWorkgroupDomain | Out-File "$ScriptDirectory\logs\domains.log"
		}
		elseif ($radiobuttonWorkgroup.Checked)
		{
			$tmpArray = $global:vmWorkgroupDomain
			
			$global:vmWorkgroupDomain = [System.Collections.ArrayList]@()
			
			foreach ($item in $tmpArray)
			{
				$domainObject = New-Object PSObject
				
				$domainObject | Add-Member -Type NoteProperty -Name "VMName" -Value $item.VMName
				$domainObject | Add-Member -Type NoteProperty -Name "DomainUser" -Value ''
				$domainObject | Add-Member -Type NoteProperty -Name "DomainPassword" -Value ''
				$domainObject | Add-Member -Type NoteProperty -Name "DomainName" -Value $textboxWorkgroup.Text
				$domainObject | Add-Member -Type NoteProperty -Name "IsWorkgroup" -Value 'Yes'
				$domainObject | Add-Member -Type NoteProperty -Name "Hostname" -Value $item.Hostname
				
				$global:vmWorkgroupDomain = [System.Array]$global:vmWorkgroupDomain + $domainObject
			}
			
			$global:vmWorkgroupDomain | Out-File "$ScriptDirectory\logs\domains.log"
		}
		
		$labelOK3.Visible = $true
		
		Update-NavButtons
		
	}
	$radiobuttonDomain_CheckedChanged={
		
		if ($radiobuttonDomain.Checked)
		{
			$textboxWorkgroup.Enabled = $false
			$textboxDomainName.Enabled = $true
			$textboxDomainUser.Enabled = $true
			$textboxDomainPassword.Enabled = $true
		}
		elseif ($radiobuttonWorkgroup.Checked)
		{
			$textboxWorkgroup.Enabled = $true
			$textboxDomainName.Enabled = $false
			$textboxDomainUser.Enabled = $false
			$textboxDomainPassword.Enabled = $false
		}
		
	}
	
	$textboxWorkgroup_TextChanged={
		
		if (($textboxWorkgroup.Text -ne ''))
		{
			$buttonOK.Enabled = $true
		}
		else
		{
			$buttonOK.Enabled = $false
		}
		
	}
	
	$textboxDomainName_TextChanged={
		
		If (($textboxHostname.Text -ne '') -and ($textboxDomainName.Text -ne '') -and ($textboxDomainPassword -ne '') -and ($textboxDomainName -ne ''))
		{
			$buttonOK.Enabled = $true
		}
		else
		{
			$buttonOK.Enabled = $false
		}
		
	}
	
	$textboxDomainUser_TextChanged={
		
		If (($textboxHostname.Text -ne '') -and ($textboxDomainName.Text -ne '') -and ($textboxDomainPassword -ne '') -and ($textboxDomainName -ne ''))
		{
			$buttonOK.Enabled = $true
		}
		else
		{
			$buttonOK.Enabled = $false
		}
		
	}
	
	$textboxDomainPassword_TextChanged={
		
		If (($textboxHostname.Text -ne '') -and ($textboxDomainName.Text -ne '') -and ($textboxDomainPassword -ne '') -and ($textboxDomainName -ne ''))
		{
			$buttonOK.Enabled = $true
		}
		else
		{
			$buttonOK.Enabled = $false
		}
		
	}
	
	$textboxHostname_TextChanged={
		
		if ($radiobuttonDomain.Checked)
		{
			If (($textboxHostname.Text -ne '') -and ($textboxDomainName.Text -ne '') -and ($textboxDomainPassword -ne '') -and ($textboxDomainName -ne ''))
			{
				$buttonOK.Enabled = $true
			}
		}
		elseif ($radiobuttonWorkgroup.Checked)
		{
			if (($textboxHostname.Text -ne '') -and ($textboxWorkgroup.Text -ne '')) { $buttonOK.Enabled = $true }
		}
		else
		{
			$buttonOK.Enabled = $false
		}
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formWorkgroupJoin.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:WorkgroupDomainJoin_textboxDomainPassword = $textboxDomainPassword.Text
		$script:WorkgroupDomainJoin_textboxDomainUser = $textboxDomainUser.Text
		$script:WorkgroupDomainJoin_textboxDomainName = $textboxDomainName.Text
		$script:WorkgroupDomainJoin_radiobuttonWorkgroup = $radiobuttonWorkgroup.Checked
		$script:WorkgroupDomainJoin_radiobuttonDomain = $radiobuttonDomain.Checked
		$script:WorkgroupDomainJoin_textboxWorkgroup = $textboxWorkgroup.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$textboxDomainPassword.remove_TextChanged($textboxDomainPassword_TextChanged)
			$textboxDomainUser.remove_TextChanged($textboxDomainUser_TextChanged)
			$textboxDomainName.remove_TextChanged($textboxDomainName_TextChanged)
			$radiobuttonDomain.remove_CheckedChanged($radiobuttonDomain_CheckedChanged)
			$textboxWorkgroup.remove_TextChanged($textboxWorkgroup_TextChanged)
			$buttonOK.remove_Click($buttonOK_Click)
			$formWorkgroupJoin.remove_Load($formWorkgroupJoin_Load)
			$formWorkgroupJoin.remove_Load($Form_StateCorrection_Load)
			$formWorkgroupJoin.remove_Closing($Form_StoreValues_Closing)
			$formWorkgroupJoin.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formWorkgroupJoin.SuspendLayout()
	#
	# formWorkgroupJoin
	#
	$formWorkgroupJoin.Controls.Add($textboxDomainPassword)
	$formWorkgroupJoin.Controls.Add($textboxDomainUser)
	$formWorkgroupJoin.Controls.Add($textboxDomainName)
	$formWorkgroupJoin.Controls.Add($labelDomainPW)
	$formWorkgroupJoin.Controls.Add($labelDomainUser)
	$formWorkgroupJoin.Controls.Add($labelDomainName)
	$formWorkgroupJoin.Controls.Add($radiobuttonWorkgroup)
	$formWorkgroupJoin.Controls.Add($radiobuttonDomain)
	$formWorkgroupJoin.Controls.Add($textboxWorkgroup)
	$formWorkgroupJoin.Controls.Add($labelWorkGroup)
	$formWorkgroupJoin.Controls.Add($buttonOK)
	$formWorkgroupJoin.AcceptButton = $buttonOK
	$formWorkgroupJoin.AutoScaleDimensions = '6, 13'
	$formWorkgroupJoin.AutoScaleMode = 'Font'
	$formWorkgroupJoin.ClientSize = '360, 204'
	$formWorkgroupJoin.FormBorderStyle = 'FixedDialog'
	$formWorkgroupJoin.Margin = '6, 6, 6, 6'
	$formWorkgroupJoin.MaximizeBox = $False
	$formWorkgroupJoin.MinimizeBox = $False
	$formWorkgroupJoin.Name = 'formWorkgroupJoin'
	$formWorkgroupJoin.StartPosition = 'CenterScreen'
	$formWorkgroupJoin.Text = 'Join Workgroup/Domain'
	$formWorkgroupJoin.add_Load($formWorkgroupJoin_Load)
	#
	# textboxDomainPassword
	#
	$textboxDomainPassword.Enabled = $False
	$textboxDomainPassword.Location = '128, 173'
	$textboxDomainPassword.Margin = '1, 2, 1, 2'
	$textboxDomainPassword.Name = 'textboxDomainPassword'
	$textboxDomainPassword.PasswordChar = '*'
	$textboxDomainPassword.Size = '100, 20'
	$textboxDomainPassword.TabIndex = 6
	$textboxDomainPassword.add_TextChanged($textboxDomainPassword_TextChanged)
	#
	# textboxDomainUser
	#
	$textboxDomainUser.Enabled = $False
	$textboxDomainUser.Location = '128, 143'
	$textboxDomainUser.Margin = '1, 2, 1, 2'
	$textboxDomainUser.Name = 'textboxDomainUser'
	$textboxDomainUser.Size = '100, 20'
	$textboxDomainUser.TabIndex = 5
	$textboxDomainUser.add_TextChanged($textboxDomainUser_TextChanged)
	#
	# textboxDomainName
	#
	$textboxDomainName.Enabled = $False
	$textboxDomainName.Location = '128, 107'
	$textboxDomainName.Margin = '1, 2, 1, 2'
	$textboxDomainName.Name = 'textboxDomainName'
	$textboxDomainName.Size = '100, 20'
	$textboxDomainName.TabIndex = 4
	$textboxDomainName.add_TextChanged($textboxDomainName_TextChanged)
	#
	# labelDomainPW
	#
	$labelDomainPW.AutoSize = $True
	$labelDomainPW.Location = '26, 179'
	$labelDomainPW.Margin = '1, 0, 1, 0'
	$labelDomainPW.Name = 'labelDomainPW'
	$labelDomainPW.Size = '99, 17'
	$labelDomainPW.TabIndex = 7
	$labelDomainPW.Text = 'Domain Password:'
	$labelDomainPW.UseCompatibleTextRendering = $True
	#
	# labelDomainUser
	#
	$labelDomainUser.AutoSize = $True
	$labelDomainUser.Location = '26, 143'
	$labelDomainUser.Margin = '1, 0, 1, 0'
	$labelDomainUser.Name = 'labelDomainUser'
	$labelDomainUser.Size = '102, 17'
	$labelDomainUser.TabIndex = 6
	$labelDomainUser.Text = 'Domain Username:'
	$labelDomainUser.UseCompatibleTextRendering = $True
	#
	# labelDomainName
	#
	$labelDomainName.AutoSize = $True
	$labelDomainName.Location = '26, 109'
	$labelDomainName.Margin = '1, 0, 1, 0'
	$labelDomainName.Name = 'labelDomainName'
	$labelDomainName.Size = '80, 17'
	$labelDomainName.TabIndex = 5
	$labelDomainName.Text = 'Domain Name:'
	$labelDomainName.UseCompatibleTextRendering = $True
	#
	# radiobuttonWorkgroup
	#
	$radiobuttonWorkgroup.Location = '165, 15'
	$radiobuttonWorkgroup.Name = 'radiobuttonWorkgroup'
	$radiobuttonWorkgroup.Size = '133, 24'
	$radiobuttonWorkgroup.TabIndex = 2
	$radiobuttonWorkgroup.TabStop = $True
	$radiobuttonWorkgroup.Text = 'Join a Workgroup'
	$radiobuttonWorkgroup.UseCompatibleTextRendering = $True
	$radiobuttonWorkgroup.UseVisualStyleBackColor = $True
	#
	# radiobuttonDomain
	#
	$radiobuttonDomain.Location = '40, 15'
	$radiobuttonDomain.Name = 'radiobuttonDomain'
	$radiobuttonDomain.Size = '104, 24'
	$radiobuttonDomain.TabIndex = 1
	$radiobuttonDomain.TabStop = $True
	$radiobuttonDomain.Text = 'Join a Domain'
	$radiobuttonDomain.UseCompatibleTextRendering = $True
	$radiobuttonDomain.UseVisualStyleBackColor = $True
	$radiobuttonDomain.add_CheckedChanged($radiobuttonDomain_CheckedChanged)
	#
	# textboxWorkgroup
	#
	$textboxWorkgroup.Enabled = $False
	$textboxWorkgroup.Location = '172, 54'
	$textboxWorkgroup.Margin = '1, 2, 1, 2'
	$textboxWorkgroup.Name = 'textboxWorkgroup'
	$textboxWorkgroup.Size = '136, 20'
	$textboxWorkgroup.TabIndex = 3
	$textboxWorkgroup.add_TextChanged($textboxWorkgroup_TextChanged)
	#
	# labelWorkGroup
	#
	$labelWorkGroup.AutoSize = $True
	$labelWorkGroup.Location = '26, 55'
	$labelWorkGroup.Margin = '1, 0, 1, 0'
	$labelWorkGroup.Name = 'labelWorkGroup'
	$labelWorkGroup.Size = '145, 17'
	$labelWorkGroup.TabIndex = 1
	$labelWorkGroup.Text = 'Enter the Workgroup Name:'
	$labelWorkGroup.UseCompatibleTextRendering = $True
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Enabled = $False
	$buttonOK.Location = '273, 170'
	$buttonOK.Name = 'buttonOK'
	$buttonOK.Size = '75, 23'
	$buttonOK.TabIndex = 7
	$buttonOK.Text = '&OK'
	$buttonOK.UseCompatibleTextRendering = $True
	$buttonOK.UseVisualStyleBackColor = $True
	$buttonOK.add_Click($buttonOK_Click)
	$formWorkgroupJoin.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formWorkgroupJoin.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formWorkgroupJoin.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formWorkgroupJoin.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formWorkgroupJoin.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formWorkgroupJoin.ShowDialog()

}
#endregion Source: WorkgroupDomainJoin.psf

#region Source: Functions\Test-TCPport.ps1
function Invoke-Test-TCPport_ps1
{
	function Test-TCPport 
	{
	    Param([parameter(Mandatory=$true,ValueFromPipeline=$True)][string[]]$ComputerName,
	            [parameter(Mandatory=$true,ValueFromPipeline=$True)]$TCPport
	    )
	
	    $requestCallback = $state = $null
	    $client = New-Object System.Net.Sockets.TcpClient
	    $beginConnect = $client.BeginConnect($ComputerName,$TCPport,$requestCallback,$state)
	    Start-Sleep -Milliseconds 500
	    if ($client.Connected) 
	    {
	        $open = $true
	    } 
	    else
	    {
	        $open = $false            
	    }
	
	    $client.Close()
	        
	    [pscustomobject]@{hostname=$ComputerName;port=$TCPport;open=$open}
	}
}
#endregion Source: Test-TCPport.ps1

#region Source: Functions\CustomizeOS.ps1
function Invoke-CustomizeOS_ps1
{
	<#
		.SYNOPSIS
			A brief description of the Invoke-CustomizeOS_ps1 file.
		
		.DESCRIPTION
			A description of the file.
		
		.PARAMETER Scripts
			A description of the Scripts parameter.
		
		.PARAMETER VMName
			A description of the VMName parameter.
		
		.PARAMETER GuestCredential
			A description of the GuestCredential parameter.
		
		.NOTES
			===========================================================================
			Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2018 v5.5.150
			Created on:   	7/9/2019 9:38 AM
			Created by:   	dalthakar
			Organization:
			Filename:     	CustomizeOS.ps1
			===========================================================================
	#>
	
	function Customize-OS
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[string]$VMName,
			[Parameter(Mandatory = $true)]
			[pscredential]$GuestCredential,
			[Parameter(Mandatory = $true)]
			[array]$Scripts
		)
		
		foreach ($script in $Scripts)
		{
			Invoke-VMScript -VM $VMName -GuestCredential $GuestCredential -ScriptText "$($script.Command)" | Out-File "$ScriptDirectory\logs\scriptcommand.log" -Append
			
		}
	}
}
#endregion Source: CustomizeOS.ps1

#region Source: AddVirtualDisk.psf
function Show-AddVirtualDisk_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
aQYAACODCAAAAAAABABlVVkLo1gTfQ/kPzTzKoxb3KCnweUal6hxj76573E36q//0v29DMyF4hZF
VVGHOpz6aWVJv2XTIURL9OPrzFX//ucv/G/0r1/Xy48fP42pKqp31IpVm+lRl/1i09SrpmWNWqGa
m7+HOf8J/yfpT6nYT90v8wQcyr0t2wYsyxsCz/7/cazg+T663ZrAhFtygGmpMhlPVVmHJ0+PMypu
E5HyaCRu2RBrym7EPDOESOIuf73AuZ8ymZzwkT1THwobm6LX6yd1avMZYCGdGS9YCO4qdsIwIXUS
MSsOfTSJ6ManD+4Ic3sfrnCK2ZF+u1lrdJIqTo1rpZtJ6NLqc8QnClLxKS3VFnzKu2SBN18tBHqr
teilCbRVf9gnLMeCJz+izTtIklUhGvWvl0+mNebqPDOdojTjtCAerJkGmDASAe0qr4R3xeqzDotf
b4tlOc19hBBpzjmB896uOXwcLWy5iQ8RgbleWC6s8mr4pJ70sZeWG7KjWRDCaLlCLMH9ac082mIl
2LLKE6Dd4w4VmNsM8rTqEcx1V26ycpQvkfHznW1zR2ZuRSUkQR2y5TEYoWYyIAw4VgGEoR+FdvS7
VKWJqYlm9whiTSVerffY7iciEgaFRF5jK/YrWIPrRR1HB5v9Wy8bHGewceozxfB2QBibY7YdsnLg
DdSr4EFjJEIlhk225jDdCYM9z6W9ZeVEM4HKFwrU1N+dipk+gbjtOCM389I/28CDKrlQtnEpyMcr
Fqu+A/Z2v49l5Nb5yEtvD1smJxiVnCYEk418/4wr1dah60VOJSTFDD/Etlds7ilwkR1wBZ0nHxOI
qf2sOiTGrCpL7GAv2jJ6oZj9FEzRPeUF9l9G0C/yqwwAo1LXCyMvL49HwmnpzwVJXCN0EUnUb1g9
wObHjmW9qIu1HUlGD4hI++wVpkBc85v89Jf8x/sMHwgmOWW/vK6XNSzTqWPP6TSXlI173UJLtlDa
F6J20hIQ8QhoS4A2Q1liQKNBid8WqW6UAHnuoUFELca3ddWuRHRy1wtqCh0BKcZKliskLEsfDv3q
fb/V8yEy0113YwCGk/kZPx9KnQ+4niklIMGyGxmkDBDptFyFhbe1ob9I7YeeHtTxeN/3WoPPrsEd
DbOSGiP0o+sfdtzlNeGgTtSkgAhZhqA+VURJjBVnD3NhIlq1jgfF4tQeXy8n7hfF67PbDBJUsvPO
QY3RouokNdBDJfOFHV8ED6g2bBOY1/pk3dzDpJlFncNffYgMkrOLFNILvdV8kT7pLPDnXCICpCme
DcByeaBJ8yQ+5ftcBHhlNSiRw2ShQ3pmQ3p0T4Jf3oeeG43wTdxvv40wKWK/Xr4lkyC9Z+HZORpk
wm9egn/3mtBchuzwfJpoeNppd28nJg+JDVTTu7tZY3cE5cxAnCZ6t3df+lP8G6kCV4uL3nNI47Fn
Ke91LtPogGJ0gQLMf5jZoBBr7A/Y4WiuYaDvNAaRMeB2Gz06HgajOG2xpz6eMv5FCr+mCMrwVK8D
/HkSKDSy7qGg9oCpTs/krvYKI5fMoS+Rd6xkVzfJAkZ+fsIxpYINwwwuLTOJ3xZCS6+XIh0sxNrG
dDf9xDG26JaYPeXeBO9senScCu+YCB1ZfVKkGY8Ko1XCwwidw+Q0GLrZsEeLNDkSLzAtXi91Jbet
25RfEf/nJ/xH5P/IPTvPWRe3VTb/gL+Rn/C/T8uv/wE8CLOYaQYAAA==#>
#endregion
param
(
	[Parameter(Mandatory = $true)]
	[string]$VMName
)

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formAddDisks = New-Object 'System.Windows.Forms.Form'
	$buttonDeleteDrive = New-Object 'System.Windows.Forms.Button'
	$datagridviewDiskList = New-Object 'System.Windows.Forms.DataGridView'
	$buttonAddDrive = New-Object 'System.Windows.Forms.Button'
	$numericupdownDriveSize = New-Object 'System.Windows.Forms.NumericUpDown'
	$comboboxDriveMount = New-Object 'System.Windows.Forms.ComboBox'
	$labelDriveSizeGB = New-Object 'System.Windows.Forms.Label'
	$labelDriveLetter = New-Object 'System.Windows.Forms.Label'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	
	$formAddDisks_Load={
		
		$formAddDisks.Text = "Add Disks to $VMName"
		
		if ($global:vmAdditionalDisks | ?{ $_.VMName -eq $VMName })
		{
			$diskTmp = $global:vmAdditionalDisks | ?{ $_.VMName -eq $VMName } | select DriveLetter, DriveSize
			
			$driveList = ConvertTo-DataTable -InputObject $diskTmp
			Update-DataGridView -DataGridView $datagridviewDiskList -Item $driveList
			
			foreach ($disk in $diskTmp)
			{
				$comboboxDriveMount.Items.Remove($disk.DriveLetter)
			}
			
			$buttonDeleteDrive.Enabled = $true
		}
	}
	
	#region Control Helper Functions
	function Update-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The DataGridView control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the DataGridView's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		.PARAMETER AutoSizeColumns
		    Resizes DataGridView control's columns after loading the items.
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Item,
		    [Parameter(Mandatory=$false)]
			[string]$DataMember,
			[System.Windows.Forms.DataGridViewAutoSizeColumnMode]$AutoSizeColumns = 'None'
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
		{
			$DataGridView.DataSource = $Item.Tables[0]
		}
		elseif ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{
				$array.Add($Item)
			}
			$DataGridView.DataSource = $array
		}
		
		if ($AutoSizeColumns -ne 'None')
		{
			$DataGridView.AutoResizeColumns($AutoSizeColumns)
		}
		
		$DataGridView.ResumeLayout()
	}
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterWMIProperties
				This switch removes WMI properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param(
		[ValidateNotNull()]
		$InputObject, 
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
		
		if($null -eq $Table)
		{
			$Table = New-Object System.Data.DataTable
		}
		
		if ($InputObject -is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
		{
			$Table = $InputObject.Tables[0]
		}
		else
		{
			if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
				
				if ($null -eq $InputObject) { return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach ($item in $InputObject)
				{
					if ($null -ne $item)
					{
						$object = $item
						break
					}
				}
				
				if ($null -eq $object) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if ($null -ne $prop.Value)
						{
							try { $type = $prop.Value.GetType() }
							catch { Out-Null }
						}
						
						if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
							[void]$table.Columns.Add($prop.Name, $type)
						}
						else #Type info not found
						{
							[void]$table.Columns.Add($prop.Name)
						}
					}
				}
				
				if ($object -is [System.Data.DataRow])
				{
					foreach ($item in $InputObject)
					{
						$Table.Rows.Add($item)
					}
					return @( ,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()
			}
			
			foreach ($item in $InputObject)
			{
				$row = $table.NewRow()
				
				if ($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if ($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
		
		return @(,$Table)	
	}
	
	function Update-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
		
		.PARAMETER ComboBox
			The ComboBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ComboBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red" -Append
			Update-ComboBox $combobox1 "White" -Append
			Update-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Update-ComboBox $combobox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ComboBox]
			$ComboBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]
			$DisplayMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	function Update-ListViewColumnSort
	{
	<#
		.SYNOPSIS
			Sort the ListView's item using the specified column.
		
		.DESCRIPTION
			Sort the ListView's item using the specified column.
			This function uses Add-Type to define a class that sort the items.
			The ListView's Tag property is used to keep track of the sorting.
		
		.PARAMETER ListView
			The ListView control to sort.
		
		.PARAMETER ColumnIndex
			The index of the column to use for sorting.
		
		.PARAMETER SortOrder
			The direction to sort the items. If not specified or set to None, it will toggle.
		
		.EXAMPLE
			Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListView]
			$ListView,
			[Parameter(Mandatory = $true)]
			[int]
			$ColumnIndex,
			[System.Windows.Forms.SortOrder]
			$SortOrder = 'None'
		)
		
		if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
		{
			return;
		}
		
		#region Define ListViewItemComparer
		try
		{
			[ListViewItemComparer] | Out-Null
		}
		catch
		{
			Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
		}
		#endregion
		
		if ($ListView.Tag -is [ListViewItemComparer])
		{
			#Toggle the Sort Order
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
				{
					$ListView.Tag.sortOrder = 'Descending'
				}
				else
				{
					$ListView.Tag.sortOrder = 'Ascending'
				}
			}
			else
			{
				$ListView.Tag.sortOrder = $SortOrder
			}
			
			$ListView.Tag.column = $ColumnIndex
			$ListView.Sort() #Sort the items
		}
		else
		{
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
			}
			
			#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
			$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
			$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
		}
	}
	
	$comboboxDriveMount_SelectedIndexChanged={
		
		if (($comboboxDriveMount.Text -ne '') -and ($numericupdownDriveSize.Text -ne '0'))
		{
			$buttonAddDrive.Enabled = $true
			$buttonDeleteDrive.Enabled = $true
		}
		
	}
	
	$buttonAddDrive_Click={
		
		$driveObject = New-Object PSObject
		
		$driveObject | Add-Member -MemberType NoteProperty -Name "VMName" -Value $VMName
		$driveObject | Add-Member -MemberType NoteProperty -Name "DriveLetter" -Value $comboboxDriveMount.Text
		$driveObject | Add-Member -MemberType NoteProperty -Name "DriveSize" -Value $numericupdownDriveSize.Text
		
		$global:vmAdditionalDisks = [System.Array]$global:vmAdditionalDisks + $driveObject
		
		$driveRecord = ConvertTo-DataTable ($global:vmAdditionalDisks | ?{ $_.VMName -eq $VMName } | select DriveLetter,DriveSize)
		Update-DataGridView -DataGridView $datagridviewDiskList -Item $driveRecord
		
		$comboboxDriveMount.Items.Remove($comboboxDriveMount.Text)
		
	}
	
	$numericupdownDriveSize_ValueChanged={
		
		if (($comboboxDriveMount.Text -ne '') -and ($numericupdownDriveSize.Text -ne '0') -and ($numericupdownDriveSize.Text -ne ''))
		{
			$buttonAddDrive.Enabled = $true
		}
		
	}
	
	$buttonDeleteDrive_Click={
		
		$global:vmAdditionalDisks = $global:vmAdditionalDisks | ?{ -not (($_.VMName -eq $VMName) -and ($_.DriveLetter -eq $datagridviewDiskList.CurrentRow.Cells[0].Value)) }
		$datagridviewDiskList.Rows.RemoveAt($datagridviewDiskList.CurrentRow.Index)
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formAddDisks.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:AddVirtualDisk_datagridviewDiskList = $datagridviewDiskList.SelectedCells
		$script:AddVirtualDisk_numericupdownDriveSize = $numericupdownDriveSize.Value
		$script:AddVirtualDisk_comboboxDriveMount = $comboboxDriveMount.Text
		$script:AddVirtualDisk_comboboxDriveMount_SelectedItem = $comboboxDriveMount.SelectedItem
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonDeleteDrive.remove_Click($buttonDeleteDrive_Click)
			$buttonAddDrive.remove_Click($buttonAddDrive_Click)
			$numericupdownDriveSize.remove_ValueChanged($numericupdownDriveSize_ValueChanged)
			$comboboxDriveMount.remove_SelectedIndexChanged($comboboxDriveMount_SelectedIndexChanged)
			$formAddDisks.remove_Load($formAddDisks_Load)
			$formAddDisks.remove_Load($Form_StateCorrection_Load)
			$formAddDisks.remove_Closing($Form_StoreValues_Closing)
			$formAddDisks.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formAddDisks.SuspendLayout()
	$numericupdownDriveSize.BeginInit()
	#
	# formAddDisks
	#
	$formAddDisks.Controls.Add($buttonDeleteDrive)
	$formAddDisks.Controls.Add($datagridviewDiskList)
	$formAddDisks.Controls.Add($buttonAddDrive)
	$formAddDisks.Controls.Add($numericupdownDriveSize)
	$formAddDisks.Controls.Add($comboboxDriveMount)
	$formAddDisks.Controls.Add($labelDriveSizeGB)
	$formAddDisks.Controls.Add($labelDriveLetter)
	$formAddDisks.Controls.Add($buttonOK)
	$formAddDisks.AcceptButton = $buttonOK
	$formAddDisks.AutoScaleDimensions = '6, 13'
	$formAddDisks.AutoScaleMode = 'Font'
	$formAddDisks.ClientSize = '284, 262'
	$formAddDisks.FormBorderStyle = 'FixedDialog'
	$formAddDisks.MaximizeBox = $False
	$formAddDisks.MinimizeBox = $False
	$formAddDisks.Name = 'formAddDisks'
	$formAddDisks.StartPosition = 'CenterScreen'
	$formAddDisks.Text = 'Form'
	$formAddDisks.add_Load($formAddDisks_Load)
	#
	# buttonDeleteDrive
	#
	$buttonDeleteDrive.Enabled = $False
	$buttonDeleteDrive.Location = '93, 87'
	$buttonDeleteDrive.Name = 'buttonDeleteDrive'
	$buttonDeleteDrive.Size = '75, 23'
	$buttonDeleteDrive.TabIndex = 19
	$buttonDeleteDrive.Text = '&Delete Drive'
	$buttonDeleteDrive.UseCompatibleTextRendering = $True
	$buttonDeleteDrive.UseVisualStyleBackColor = $True
	$buttonDeleteDrive.add_Click($buttonDeleteDrive_Click)
	#
	# datagridviewDiskList
	#
	$datagridviewDiskList.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridviewDiskList.Location = '12, 128'
	$datagridviewDiskList.MultiSelect = $False
	$datagridviewDiskList.Name = 'datagridviewDiskList'
	$datagridviewDiskList.ReadOnly = $True
	$datagridviewDiskList.SelectionMode = 'FullRowSelect'
	$datagridviewDiskList.Size = '260, 93'
	$datagridviewDiskList.TabIndex = 18
	#
	# buttonAddDrive
	#
	$buttonAddDrive.Enabled = $False
	$buttonAddDrive.Location = '12, 87'
	$buttonAddDrive.Name = 'buttonAddDrive'
	$buttonAddDrive.Size = '75, 23'
	$buttonAddDrive.TabIndex = 17
	$buttonAddDrive.Text = '&Add Drive'
	$buttonAddDrive.UseCompatibleTextRendering = $True
	$buttonAddDrive.UseVisualStyleBackColor = $True
	$buttonAddDrive.add_Click($buttonAddDrive_Click)
	#
	# numericupdownDriveSize
	#
	$numericupdownDriveSize.Location = '113, 58'
	$numericupdownDriveSize.Name = 'numericupdownDriveSize'
	$numericupdownDriveSize.Size = '49, 20'
	$numericupdownDriveSize.TabIndex = 16
	$numericupdownDriveSize.add_ValueChanged($numericupdownDriveSize_ValueChanged)
	#
	# comboboxDriveMount
	#
	$comboboxDriveMount.DropDownStyle = 'DropDownList'
	$comboboxDriveMount.FormattingEnabled = $True
	[void]$comboboxDriveMount.Items.Add('E')
	[void]$comboboxDriveMount.Items.Add('F')
	[void]$comboboxDriveMount.Items.Add('G')
	[void]$comboboxDriveMount.Items.Add('H')
	[void]$comboboxDriveMount.Items.Add('I')
	[void]$comboboxDriveMount.Items.Add('J')
	[void]$comboboxDriveMount.Items.Add('K')
	[void]$comboboxDriveMount.Items.Add('L')
	[void]$comboboxDriveMount.Items.Add('M')
	[void]$comboboxDriveMount.Items.Add('N')
	[void]$comboboxDriveMount.Items.Add('O')
	[void]$comboboxDriveMount.Items.Add('P')
	[void]$comboboxDriveMount.Items.Add('Q')
	[void]$comboboxDriveMount.Items.Add('R')
	[void]$comboboxDriveMount.Items.Add('S')
	[void]$comboboxDriveMount.Items.Add('T')
	[void]$comboboxDriveMount.Items.Add('U')
	[void]$comboboxDriveMount.Items.Add('V')
	[void]$comboboxDriveMount.Items.Add('W')
	[void]$comboboxDriveMount.Items.Add('X')
	[void]$comboboxDriveMount.Items.Add('Y')
	[void]$comboboxDriveMount.Items.Add('Z')
	$comboboxDriveMount.Location = '113, 20'
	$comboboxDriveMount.Name = 'comboboxDriveMount'
	$comboboxDriveMount.Size = '49, 21'
	$comboboxDriveMount.TabIndex = 15
	$comboboxDriveMount.add_SelectedIndexChanged($comboboxDriveMount_SelectedIndexChanged)
	#
	# labelDriveSizeGB
	#
	$labelDriveSizeGB.AutoSize = $True
	$labelDriveSizeGB.Location = '12, 61'
	$labelDriveSizeGB.Name = 'labelDriveSizeGB'
	$labelDriveSizeGB.Size = '86, 17'
	$labelDriveSizeGB.TabIndex = 14
	$labelDriveSizeGB.Text = 'Drive Size (GB):'
	$labelDriveSizeGB.UseCompatibleTextRendering = $True
	#
	# labelDriveLetter
	#
	$labelDriveLetter.AutoSize = $True
	$labelDriveLetter.Location = '12, 24'
	$labelDriveLetter.Name = 'labelDriveLetter'
	$labelDriveLetter.Size = '66, 17'
	$labelDriveLetter.TabIndex = 13
	$labelDriveLetter.Text = 'Drive Letter:'
	$labelDriveLetter.UseCompatibleTextRendering = $True
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Location = '197, 227'
	$buttonOK.Name = 'buttonOK'
	$buttonOK.Size = '75, 23'
	$buttonOK.TabIndex = 0
	$buttonOK.Text = '&OK'
	$buttonOK.UseCompatibleTextRendering = $True
	$buttonOK.UseVisualStyleBackColor = $True
	$numericupdownDriveSize.EndInit()
	$formAddDisks.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formAddDisks.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formAddDisks.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formAddDisks.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formAddDisks.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formAddDisks.ShowDialog()

}
#endregion Source: AddVirtualDisk.psf

#region Source: AddNicCard.psf
function Show-AddNicCard_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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
+fwL/N78gP/7lfj9H/j9hOBZCAAA#>
#endregion
param
(
	[Parameter(Mandatory = $true)]
	[string]$VMName
)

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formAddNic = New-Object 'System.Windows.Forms.Form'
	$listviewAddedNics = New-Object 'System.Windows.Forms.ListView'
	$buttonDeleteNIC = New-Object 'System.Windows.Forms.Button'
	$buttonAddNic = New-Object 'System.Windows.Forms.Button'
	$textboxDNS1AddNic = New-Object 'System.Windows.Forms.TextBox'
	$labelDNS1AddNic = New-Object 'System.Windows.Forms.Label'
	$checkboxStaticIPAddNic = New-Object 'System.Windows.Forms.CheckBox'
	$textboxDefaultGatewayAddNic = New-Object 'System.Windows.Forms.TextBox'
	$labelDefaultGatewayAddNic = New-Object 'System.Windows.Forms.Label'
	$textboxSubnetMaskAddNic = New-Object 'System.Windows.Forms.TextBox'
	$labelSubnetMaskAddNic = New-Object 'System.Windows.Forms.Label'
	$textboxIPAddressAddNic = New-Object 'System.Windows.Forms.TextBox'
	$comboboxVSwitchAddNic = New-Object 'System.Windows.Forms.ComboBox'
	$labelIPAddressAddNic = New-Object 'System.Windows.Forms.Label'
	$labelVirtualSwitchAddNic = New-Object 'System.Windows.Forms.Label'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$columnheaderVMName = New-Object 'System.Windows.Forms.ColumnHeader'
	$columnheaderIPType = New-Object 'System.Windows.Forms.ColumnHeader'
	$columnheaderVLAN = New-Object 'System.Windows.Forms.ColumnHeader'
	$columnheaderIPAddress = New-Object 'System.Windows.Forms.ColumnHeader'
	$columnheaderSubnetMask = New-Object 'System.Windows.Forms.ColumnHeader'
	$columnheaderDefaultGateway = New-Object 'System.Windows.Forms.ColumnHeader'
	$columnheaderDNSServer = New-Object 'System.Windows.Forms.ColumnHeader'
	$columnheaderNICFullConfig = New-Object 'System.Windows.Forms.ColumnHeader'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	
	$formAddNic_Load = {
		
		$vmHost = $global:vmbuilds | ?{ $_.VMName -eq $VMName }
		$formAddNic.Text = "Additional NICs for $VMName"
		
		$script:vSwitchesAddNic = Get-VirtualPortGroup -Server $global:vcenterConnection.Name -Host $vmHost.("VM Host") | select Name | Sort-Object -Property Name
		Update-ComboBox -ComboBox $comboboxVSwitchAddNic -Items $script:vSwitchesAddNic.Name
		
		if ($global:vmAdditionalNICs | ?{ $_.VMName -eq $VMName })
		{
			$nicTmp = $global:vmAdditionalNICs | ?{ $_.VMName -eq $VMName }
			
			foreach ($nic in $nicTmp)
			{
				$listviewAddedNics.Items.Add($nic)
			}
			
			#$buttonDeleteNIC.Enabled = $true
		}
		
	}
	
	#region Control Helper Functions
	function Update-ListViewColumnSort
	{
	<#
		.SYNOPSIS
			Sort the ListView's item using the specified column.
		
		.DESCRIPTION
			Sort the ListView's item using the specified column.
			This function uses Add-Type to define a class that sort the items.
			The ListView's Tag property is used to keep track of the sorting.
		
		.PARAMETER ListView
			The ListView control to sort.
		
		.PARAMETER ColumnIndex
			The index of the column to use for sorting.
		
		.PARAMETER SortOrder
			The direction to sort the items. If not specified or set to None, it will toggle.
		
		.EXAMPLE
			Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListView]
			$ListView,
			[Parameter(Mandatory = $true)]
			[int]
			$ColumnIndex,
			[System.Windows.Forms.SortOrder]
			$SortOrder = 'None'
		)
		
		if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
		{
			return;
		}
		
		#region Define ListViewItemComparer
		try
		{
			[ListViewItemComparer] | Out-Null
		}
		catch
		{
			Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
		}
		#endregion
		
		if ($ListView.Tag -is [ListViewItemComparer])
		{
			#Toggle the Sort Order
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
				{
					$ListView.Tag.sortOrder = 'Descending'
				}
				else
				{
					$ListView.Tag.sortOrder = 'Ascending'
				}
			}
			else
			{
				$ListView.Tag.sortOrder = $SortOrder
			}
			
			$ListView.Tag.column = $ColumnIndex
			$ListView.Sort() #Sort the items
		}
		else
		{
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
			}
			
			#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
			$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
			$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
		}
	}
	
	
	function Add-ListViewItem
	{
	<#
		.SYNOPSIS
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.DESCRIPTION
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.PARAMETER ListView
			The ListView control to add the items to.
	
		.PARAMETER Items
			The object or objects you wish to load into the ListView's Items collection.
			
		.PARAMETER  ImageIndex
			The index of a predefined image in the ListView's ImageList.
		
		.PARAMETER  SubItems
			List of strings to add as Subitems.
		
		.PARAMETER Group
			The group to place the item(s) in.
		
		.PARAMETER Clear
			This switch clears the ListView's Items before adding the new item(s).
		
		.EXAMPLE
			Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
	#>
		
		Param( 
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.ListView]$ListView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Items,
		[int]$ImageIndex = -1,
		[string[]]$SubItems,
		$Group,
		[switch]$Clear)
		
		if($Clear)
		{
			$ListView.Items.Clear();
	    }
	    
	    $lvGroup = $null
	    if ($Group -is [System.Windows.Forms.ListViewGroup])
	    {
	        $lvGroup = $Group
	    }
	    elseif ($Group -is [string])
	    {
	        #$lvGroup = $ListView.Group[$Group] # Case sensitive
	        foreach ($groupItem in $ListView.Groups)
	        {
	            if ($groupItem.Name -eq $Group)
	            {
	                $lvGroup = $groupItem
	                break
	            }
	        }
	        
	        if ($null -eq $lvGroup)
	        {
	            $lvGroup = $ListView.Groups.Add($Group, $Group)
	        }
	    }
	    
		if($Items -is [Array])
		{
			$ListView.BeginUpdate()
			foreach ($item in $Items)
			{		
				$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
				#Store the object in the Tag
				$listitem.Tag = $item
				
				if($null -ne $SubItems)
				{
					$listitem.SubItems.AddRange($SubItems)
				}
				
				if($null -ne $lvGroup)
				{
					$listitem.Group = $lvGroup
				}
			}
			$ListView.EndUpdate()
		}
		else
		{
			#Add a new item to the ListView
			$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $Items
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
	}
	
	function Update-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
		
		.PARAMETER ComboBox
			The ComboBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ComboBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red" -Append
			Update-ComboBox $combobox1 "White" -Append
			Update-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Update-ComboBox $combobox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ComboBox]
			$ComboBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]
			$DisplayMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
	}
	#endregion
	
	$checkboxStaticIPAddNic_CheckedChanged={
		
		if ($checkboxStaticIPAddNic.Checked)
		{
			$textboxIPAddressAddNic.Text = ''
			$textboxSubnetMaskAddNic.Text = ''
			$textboxDefaultGatewayAddNic.Text = ''
			$textboxDNS1AddNic.Text = ''
			
			$textboxIPAddressAddNic.Enabled = $true
			$textboxSubnetMaskAddNic.Enabled = $true
			$textboxDefaultGatewayAddNic.Enabled = $true
			$textboxDNS1AddNic.Enabled = $true
			
			$buttonAddNic.Enabled = $false
		}
		else
		{
			$textboxIPAddressAddNic.Enabled = $false
			$textboxSubnetMaskAddNic.Enabled = $false
			$textboxDefaultGatewayAddNic.Enabled = $false
			$textboxDNS1AddNic.Enabled = $false
		}
		
	}
	
	$buttonAddNic_Click = {
		
		$object = New-Object PSObject
		
		$object | Add-Member -MemberType NoteProperty -Name "VMName" -Value $VMName
		
		if ($checkboxStaticIPAddNic.Checked)
		{
			$object | Add-Member -MemberType NoteProperty -Name "IP Type" -Value "Static"
			$object | Add-Member -MemberType NoteProperty -Name "VLAN" -Value $comboboxVSwitchAddNic.Text
			$object | Add-Member -MemberType NoteProperty -Name "IP Address" -Value $textboxIPAddressAddNic.Text
			$object | Add-Member -MemberType NoteProperty -Name "Subnet Mask" -Value $textboxSubnetMaskAddNic.Text
			$object | Add-Member -MemberType NoteProperty -Name "Default Gateway" -Value $textboxDefaultGatewayAddNic.Text
			$object | Add-Member -MemberType NoteProperty -Name "Primary DNS Server" -Value $textboxDNS1AddNic.Text
		}
		else
		{
			$object | Add-Member -MemberType NoteProperty -Name "IP Type" -Value "DHCP"
			$object | Add-Member -MemberType NoteProperty -Name "VLAN" -Value $comboboxVSwitchAddNic.Text
			$object | Add-Member -MemberType NoteProperty -Name "IP Address" -Value ''
			$object | Add-Member -MemberType NoteProperty -Name "Subnet Mask" -Value ''
			$object | Add-Member -MemberType NoteProperty -Name "Default Gateway" -Value ''
			$object | Add-Member -MemberType NoteProperty -Name "Primary DNS Server" -Value ''
		}
		
		$global:vmAdditionalNICs = [System.Array]$global:vmAdditionalNICs + $object
		
		Add-ListViewItem -ListView $listviewAddedNics -Items $object.VMName -SubItems $object.("IP Type"), $object.VLAN, $object.("IP Address"), `
						 $object.("Subnet Mask"), $object.("Default Gateway"), $object.("Primary DNS Server")
		
		#if ($buttonDeleteNIC.Enabled -eq $false) { $buttonDeleteNIC.Enabled = $true }
		
		$textboxIPAddressAddNic.Clear()
		$textboxSubnetMaskAddNic.Clear()
		$textboxDefaultGatewayAddNic.Clear()
		$textboxDNS1AddNic.Clear()
		$checkboxStaticIPAddNic.Checked = $false
		
		Update-ComboBox -ComboBox $comboboxVSwitchAddNic -Items $script:vSwitchesAddNic.Name
	}
	
	$buttonDeleteNIC_Click={
		
		$listviewAddedNics.SelectedItems[0].Remove()
		
		#$datagridviewNicCardsAddNic.CurrentRow.Cells[1].Value | Out-File "$ScriptDirectory\logs\index2.log" -Append
		
		if ($listviewAddedNics.Items.Count -eq 0) {$buttonDeleteNIC.Enabled = $false}
	}
	
	$buttonOK_Click={
		
		#$datagridviewAddNic.Rows.Count | Out-File "$ScriptDirectory\logs\datagridaddnic.log" -Append
		
		#$global:vmAdditionalNics | Out-File "$ScriptDirectory\logs\globalvmadditions.log"
		
		$global:vmAdditionalNics | Out-File "$ScriptDirectory\logs\globalnics.log"
		$listviewAddedNics.Items | ForEach-Object { $_.SubItems | Out-File "$ScriptDirectory\logs\nics2.log" -Append }
	}
	
	$comboboxVSwitchAddNic_SelectedIndexChanged={
		
		if (-not $checkboxStaticIPAddNic.Checked)
		{
			$buttonAddNic.Enabled = $true
		}
		
	}
	
	$textboxIPAddressAddNic_TextChanged={
		
		$buttonAddNic.Enabled = $true
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formAddNic.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:AddNicCard_listviewAddedNics = $listviewAddedNics.SelectedItems
		$script:AddNicCard_textboxDNS1AddNic = $textboxDNS1AddNic.Text
		$script:AddNicCard_checkboxStaticIPAddNic = $checkboxStaticIPAddNic.Checked
		$script:AddNicCard_textboxDefaultGatewayAddNic = $textboxDefaultGatewayAddNic.Text
		$script:AddNicCard_textboxSubnetMaskAddNic = $textboxSubnetMaskAddNic.Text
		$script:AddNicCard_textboxIPAddressAddNic = $textboxIPAddressAddNic.Text
		$script:AddNicCard_comboboxVSwitchAddNic = $comboboxVSwitchAddNic.Text
		$script:AddNicCard_comboboxVSwitchAddNic_SelectedItem = $comboboxVSwitchAddNic.SelectedItem
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonDeleteNIC.remove_Click($buttonDeleteNIC_Click)
			$buttonAddNic.remove_Click($buttonAddNic_Click)
			$checkboxStaticIPAddNic.remove_CheckedChanged($checkboxStaticIPAddNic_CheckedChanged)
			$textboxIPAddressAddNic.remove_TextChanged($textboxIPAddressAddNic_TextChanged)
			$comboboxVSwitchAddNic.remove_SelectedIndexChanged($comboboxVSwitchAddNic_SelectedIndexChanged)
			$buttonOK.remove_Click($buttonOK_Click)
			$formAddNic.remove_Load($formAddNic_Load)
			$formAddNic.remove_Load($Form_StateCorrection_Load)
			$formAddNic.remove_Closing($Form_StoreValues_Closing)
			$formAddNic.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formAddNic.SuspendLayout()
	#
	# formAddNic
	#
	$formAddNic.Controls.Add($listviewAddedNics)
	$formAddNic.Controls.Add($buttonDeleteNIC)
	$formAddNic.Controls.Add($buttonAddNic)
	$formAddNic.Controls.Add($textboxDNS1AddNic)
	$formAddNic.Controls.Add($labelDNS1AddNic)
	$formAddNic.Controls.Add($checkboxStaticIPAddNic)
	$formAddNic.Controls.Add($textboxDefaultGatewayAddNic)
	$formAddNic.Controls.Add($labelDefaultGatewayAddNic)
	$formAddNic.Controls.Add($textboxSubnetMaskAddNic)
	$formAddNic.Controls.Add($labelSubnetMaskAddNic)
	$formAddNic.Controls.Add($textboxIPAddressAddNic)
	$formAddNic.Controls.Add($comboboxVSwitchAddNic)
	$formAddNic.Controls.Add($labelIPAddressAddNic)
	$formAddNic.Controls.Add($labelVirtualSwitchAddNic)
	$formAddNic.Controls.Add($buttonOK)
	$formAddNic.AcceptButton = $buttonOK
	$formAddNic.AutoScaleDimensions = '6, 13'
	$formAddNic.AutoScaleMode = 'Font'
	$formAddNic.ClientSize = '352, 445'
	$formAddNic.FormBorderStyle = 'FixedDialog'
	$formAddNic.MaximizeBox = $False
	$formAddNic.MinimizeBox = $False
	$formAddNic.Name = 'formAddNic'
	$formAddNic.StartPosition = 'CenterScreen'
	$formAddNic.Text = 'masked'
	$formAddNic.add_Load($formAddNic_Load)
	#
	# listviewAddedNics
	#
	[void]$listviewAddedNics.Columns.Add($columnheaderVMName)
	[void]$listviewAddedNics.Columns.Add($columnheaderIPType)
	[void]$listviewAddedNics.Columns.Add($columnheaderVLAN)
	[void]$listviewAddedNics.Columns.Add($columnheaderIPAddress)
	[void]$listviewAddedNics.Columns.Add($columnheaderSubnetMask)
	[void]$listviewAddedNics.Columns.Add($columnheaderDefaultGateway)
	[void]$listviewAddedNics.Columns.Add($columnheaderDNSServer)
	[void]$listviewAddedNics.Columns.Add($columnheaderNICFullConfig)
	$listviewAddedNics.FullRowSelect = $True
	$listviewAddedNics.GridLines = $True
	$listviewAddedNics.HeaderStyle = 'Nonclickable'
	$listviewAddedNics.Location = '32, 229'
	$listviewAddedNics.MultiSelect = $False
	$listviewAddedNics.Name = 'listviewAddedNics'
	$listviewAddedNics.Size = '308, 175'
	$listviewAddedNics.TabIndex = 39
	$listviewAddedNics.UseCompatibleStateImageBehavior = $False
	$listviewAddedNics.View = 'Details'
	#
	# buttonDeleteNIC
	#
	$buttonDeleteNIC.Enabled = $False
	$buttonDeleteNIC.Location = '265, 174'
	$buttonDeleteNIC.Name = 'buttonDeleteNIC'
	$buttonDeleteNIC.Size = '75, 23'
	$buttonDeleteNIC.TabIndex = 38
	$buttonDeleteNIC.Text = 'Delete NIC'
	$buttonDeleteNIC.UseCompatibleTextRendering = $True
	$buttonDeleteNIC.UseVisualStyleBackColor = $True
	$buttonDeleteNIC.add_Click($buttonDeleteNIC_Click)
	#
	# buttonAddNic
	#
	$buttonAddNic.Enabled = $False
	$buttonAddNic.Location = '265, 145'
	$buttonAddNic.Name = 'buttonAddNic'
	$buttonAddNic.Size = '75, 23'
	$buttonAddNic.TabIndex = 37
	$buttonAddNic.Text = 'Add NIC'
	$buttonAddNic.UseCompatibleTextRendering = $True
	$buttonAddNic.UseVisualStyleBackColor = $True
	$buttonAddNic.add_Click($buttonAddNic_Click)
	#
	# textboxDNS1AddNic
	#
	$textboxDNS1AddNic.Enabled = $False
	$textboxDNS1AddNic.Location = '146, 173'
	$textboxDNS1AddNic.Name = 'textboxDNS1AddNic'
	$textboxDNS1AddNic.Size = '92, 20'
	$textboxDNS1AddNic.TabIndex = 35
	#
	# labelDNS1AddNic
	#
	$labelDNS1AddNic.AutoSize = $True
	$labelDNS1AddNic.Location = '32, 173'
	$labelDNS1AddNic.Name = 'labelDNS1AddNic'
	$labelDNS1AddNic.Size = '110, 17'
	$labelDNS1AddNic.TabIndex = 36
	$labelDNS1AddNic.Text = 'Primary DNS Server:'
	$labelDNS1AddNic.UseCompatibleTextRendering = $True
	#
	# checkboxStaticIPAddNic
	#
	$checkboxStaticIPAddNic.Location = '32, 51'
	$checkboxStaticIPAddNic.Name = 'checkboxStaticIPAddNic'
	$checkboxStaticIPAddNic.Size = '137, 24'
	$checkboxStaticIPAddNic.TabIndex = 29
	$checkboxStaticIPAddNic.Text = 'Use Static IP Settings'
	$checkboxStaticIPAddNic.UseCompatibleTextRendering = $True
	$checkboxStaticIPAddNic.UseVisualStyleBackColor = $True
	$checkboxStaticIPAddNic.add_CheckedChanged($checkboxStaticIPAddNic_CheckedChanged)
	#
	# textboxDefaultGatewayAddNic
	#
	$textboxDefaultGatewayAddNic.Enabled = $False
	$textboxDefaultGatewayAddNic.Location = '146, 144'
	$textboxDefaultGatewayAddNic.Name = 'textboxDefaultGatewayAddNic'
	$textboxDefaultGatewayAddNic.Size = '92, 20'
	$textboxDefaultGatewayAddNic.TabIndex = 33
	#
	# labelDefaultGatewayAddNic
	#
	$labelDefaultGatewayAddNic.AutoSize = $True
	$labelDefaultGatewayAddNic.Location = '32, 144'
	$labelDefaultGatewayAddNic.Name = 'labelDefaultGatewayAddNic'
	$labelDefaultGatewayAddNic.Size = '91, 17'
	$labelDefaultGatewayAddNic.TabIndex = 34
	$labelDefaultGatewayAddNic.Text = 'Default Gateway:'
	$labelDefaultGatewayAddNic.UseCompatibleTextRendering = $True
	#
	# textboxSubnetMaskAddNic
	#
	$textboxSubnetMaskAddNic.Enabled = $False
	$textboxSubnetMaskAddNic.Location = '146, 114'
	$textboxSubnetMaskAddNic.Name = 'textboxSubnetMaskAddNic'
	$textboxSubnetMaskAddNic.Size = '92, 20'
	$textboxSubnetMaskAddNic.TabIndex = 32
	#
	# labelSubnetMaskAddNic
	#
	$labelSubnetMaskAddNic.AutoSize = $True
	$labelSubnetMaskAddNic.Location = '32, 114'
	$labelSubnetMaskAddNic.Name = 'labelSubnetMaskAddNic'
	$labelSubnetMaskAddNic.Size = '73, 17'
	$labelSubnetMaskAddNic.TabIndex = 30
	$labelSubnetMaskAddNic.Text = 'Subnet Mask:'
	$labelSubnetMaskAddNic.UseCompatibleTextRendering = $True
	#
	# textboxIPAddressAddNic
	#
	$textboxIPAddressAddNic.Enabled = $False
	$textboxIPAddressAddNic.Location = '146, 82'
	$textboxIPAddressAddNic.Name = 'textboxIPAddressAddNic'
	$textboxIPAddressAddNic.Size = '92, 20'
	$textboxIPAddressAddNic.TabIndex = 31
	$textboxIPAddressAddNic.add_TextChanged($textboxIPAddressAddNic_TextChanged)
	#
	# comboboxVSwitchAddNic
	#
	$comboboxVSwitchAddNic.DropDownStyle = 'DropDownList'
	$comboboxVSwitchAddNic.FormattingEnabled = $True
	$comboboxVSwitchAddNic.Location = '114, 28'
	$comboboxVSwitchAddNic.Name = 'comboboxVSwitchAddNic'
	$comboboxVSwitchAddNic.Size = '121, 21'
	$comboboxVSwitchAddNic.TabIndex = 28
	$comboboxVSwitchAddNic.add_SelectedIndexChanged($comboboxVSwitchAddNic_SelectedIndexChanged)
	#
	# labelIPAddressAddNic
	#
	$labelIPAddressAddNic.AutoSize = $True
	$labelIPAddressAddNic.Location = '32, 85'
	$labelIPAddressAddNic.Name = 'labelIPAddressAddNic'
	$labelIPAddressAddNic.Size = '63, 17'
	$labelIPAddressAddNic.TabIndex = 26
	$labelIPAddressAddNic.Text = 'IP Address:'
	$labelIPAddressAddNic.UseCompatibleTextRendering = $True
	#
	# labelVirtualSwitchAddNic
	#
	$labelVirtualSwitchAddNic.AutoSize = $True
	$labelVirtualSwitchAddNic.Location = '32, 30'
	$labelVirtualSwitchAddNic.Name = 'labelVirtualSwitchAddNic'
	$labelVirtualSwitchAddNic.Size = '76, 17'
	$labelVirtualSwitchAddNic.TabIndex = 27
	$labelVirtualSwitchAddNic.Text = 'Virtual Switch:'
	$labelVirtualSwitchAddNic.UseCompatibleTextRendering = $True
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Location = '265, 410'
	$buttonOK.Name = 'buttonOK'
	$buttonOK.Size = '75, 23'
	$buttonOK.TabIndex = 0
	$buttonOK.Text = '&OK'
	$buttonOK.UseCompatibleTextRendering = $True
	$buttonOK.UseVisualStyleBackColor = $True
	$buttonOK.add_Click($buttonOK_Click)
	#
	# columnheaderVMName
	#
	$columnheaderVMName.Text = 'VMName'
	#
	# columnheaderIPType
	#
	$columnheaderIPType.Text = 'IP Type'
	#
	# columnheaderVLAN
	#
	$columnheaderVLAN.Text = 'VLAN'
	#
	# columnheaderIPAddress
	#
	$columnheaderIPAddress.Text = 'IP Address'
	#
	# columnheaderSubnetMask
	#
	$columnheaderSubnetMask.Text = 'Subnet Mask'
	#
	# columnheaderDefaultGateway
	#
	$columnheaderDefaultGateway.Text = 'Default Gateway'
	#
	# columnheaderDNSServer
	#
	$columnheaderDNSServer.Text = 'Primary DNS Server'
	#
	# columnheaderNICFullConfig
	#
	$columnheaderNICFullConfig.Text = 'NICFullConfig'
	$formAddNic.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formAddNic.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formAddNic.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formAddNic.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formAddNic.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formAddNic.ShowDialog()

}
#endregion Source: AddNicCard.psf

#region Source: SetHostname.psf
function Show-SetHostname_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
eAQAACODCAAAAAAABABlVMeuo1gU3FvyPzz1FmlIJlh6/SSCCcZkbMLOYDIXMJf89ePp2Yw0tSqV
zllV+HbSpJvTYROf4/PrQ2DZtb9/kX/hv36Oh6+vb3Mo87J9NlLZpMYTpD9uOiodHNsP/6uH2Tf6
v4s/f1I3gJ+STWm8LjyYQ44TTFHg/gXPCfgD4DNRcTZaUT3KKlpBEtpWw1ujURetd9738+hwKUQe
HbVzC6pUYGtzlKSPh/ZuRF28Xzy5K51A2vYzSTFDzQQLUwasAEuPQlTT2SaXJ+r7pZUFQi8yr+ap
9IoA3Ix7x2xYxGas7nE81HVmF+Ucmd7UTxWs58ceBhdDscEJl1yJ2mSLJ1wMrqCTYWGS/uDxMsSf
CGrr7ykb80v5NOGYz1tRHQ+kq+ax3ktdc6FpoelHRwXadZVeK4JttRiv9gzLSlFjMSUfEDzES2ec
3CRvoXzzpUUV5ZN4b+r+/V6w44F5mYm/P8qHzuEeJtPeU/X2SLx7M1Gctzev3gbeipwy7TRxFCyE
XxT8Weo18wj7dfLzN2kLKbCDpWnL4yHBysl0Hu97/kZ60kw/Dk2gNG0ht5qLQFtFsO5IuPt1M2my
BN5MqG+kogVYQcl8limGysE1pIo4H4fjIbohFFoZ7+wqo/fdi1iTuWYxgJKoDrYCeFLS95y1o5X9
JwX+JwX+DQcqfqZBpNg2XlkmL6kwl6eRPR5MrIpLgeKMnj8PUUCs49I7/etqiazhxmTPBbIjatqw
J1AcaS/aYXHqFDmKhpDsvS5ncScB6rKh17U/HnRNyO6ZRIzniifoK/bEAz2+kW/VQwD7SCNOilzG
3wJE7C0lDmzLA3yks1N7ji7G3DJOE2TNS0euSWAdDwbqzjernYMFJw0uXpnmnrfXAI1u52HHfKIq
o21OeyMSyULQSokXlIlOyLKKcOpCo45TWbGK6DnDhO3xQMS0P7W3dsmtlbxzFr3UlZSPCyvIuZWQ
TXRBuYrOwmSkUZN9pd6CK9h92t7p5Abho7PE3EB8l7YyhPx4mkyUZbsimcfOyQhFrE/uIbVDmX0q
QNqGNkxrP3sByu18snPgyQGAgf6SnTzs2UNJ2VHHsGZIJbtzPMTG1p96OW7VoWwMv4mNyDuNXBKY
CJlqVAXP2WI5wcBtOBHHEm28pGwTCEgN6u1T69/f6J/a/xkADsIUxE2Zwi/0o3yj/12an78BeJhu
DHgEAAA=#>
#endregion
param
(
	[Parameter(Mandatory = $true)]
	[string]$VMName
)

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$SetHostname = New-Object 'System.Windows.Forms.Form'
	$maskedtextboxHostname = New-Object 'System.Windows.Forms.MaskedTextBox'
	$labelHostname = New-Object 'System.Windows.Forms.Label'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	
	$SetHostname_Load={
		
		
	}
	
	$buttonOK_Click={
		
		if ($maskedtextboxHostname.Text -match " ")
		{
			[System.Windows.Forms.MessageBox]::Show("Spaces are not allowed for hostnames.")
		}
		else
		{
			
			$domainObject = New-Object PSObject
			$domainObject | Add-Member -Type NoteProperty -Name "VMName" -Value $VMName
			$domainObject | Add-Member -Type NoteProperty -Name "Hostname" -Value $maskedtextboxHostname.Text
			
			$global:vmWorkgroupDomain = $global:vmWorkgroupDomain | ?{ $_.VMName -ne $VMName }
			
			$global:vmWorkgroupDomain = [System.Array]$global:vmWorkgroupDomain + $domainObject
			
			$global:vmWorkgroupDomain | Out-File "$ScriptDirectory\logs\hostnames.log"
			
			$labelOK1.Visible = $true
			
			Update-NavButtons
		}
	}
	
	$maskedtextboxHostname_TextChanged={
		
		if ($maskedtextboxHostname.Text -ne '')
		{
			$buttonOK.Enabled = $true
		}
		else
		{
			$buttonOK.Enabled = $false
		}
		
	}
	
	$maskedtextboxHostname_Enter={
		
		if ($maskedtextboxHostname.Text -eq '')
		{
			$maskedtextboxHostname.SelectionStart
		}
	}
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$SetHostname.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$maskedtextboxHostname.remove_TextChanged($maskedtextboxHostname_TextChanged)
			$maskedtextboxHostname.remove_Enter($maskedtextboxHostname_Enter)
			$buttonOK.remove_Click($buttonOK_Click)
			$SetHostname.remove_Load($SetHostname_Load)
			$SetHostname.remove_Load($Form_StateCorrection_Load)
			$SetHostname.remove_Closing($Form_StoreValues_Closing)
			$SetHostname.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$SetHostname.SuspendLayout()
	#
	# SetHostname
	#
	$SetHostname.Controls.Add($maskedtextboxHostname)
	$SetHostname.Controls.Add($labelHostname)
	$SetHostname.Controls.Add($buttonOK)
	$SetHostname.AcceptButton = $buttonOK
	$SetHostname.AutoScaleDimensions = '6, 13'
	$SetHostname.AutoScaleMode = 'Font'
	$SetHostname.ClientSize = '205, 97'
	$SetHostname.FormBorderStyle = 'FixedDialog'
	$SetHostname.MaximizeBox = $False
	$SetHostname.MinimizeBox = $False
	$SetHostname.Name = 'SetHostname'
	$SetHostname.StartPosition = 'CenterScreen'
	$SetHostname.Text = 'Set Hostname'
	$SetHostname.add_Load($SetHostname_Load)
	#
	# maskedtextboxHostname
	#
	$maskedtextboxHostname.AsciiOnly = $True
	$maskedtextboxHostname.BeepOnError = $True
	$maskedtextboxHostname.Location = '83, 26'
	$maskedtextboxHostname.Mask = 'AAAAAAAAAAAAAAA'
	$maskedtextboxHostname.Name = 'maskedtextboxHostname'
	$maskedtextboxHostname.PromptChar = ' '
	$maskedtextboxHostname.Size = '100, 20'
	$maskedtextboxHostname.TabIndex = 14
	$maskedtextboxHostname.add_TextChanged($maskedtextboxHostname_TextChanged)
	$maskedtextboxHostname.add_Enter($maskedtextboxHostname_Enter)
	#
	# labelHostname
	#
	$labelHostname.AutoSize = $True
	$labelHostname.Location = '20, 26'
	$labelHostname.Margin = '1, 0, 1, 0'
	$labelHostname.Name = 'labelHostname'
	$labelHostname.Size = '59, 17'
	$labelHostname.TabIndex = 13
	$labelHostname.Text = 'Hostname:'
	$labelHostname.UseCompatibleTextRendering = $True
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Enabled = $False
	$buttonOK.Location = '118, 62'
	$buttonOK.Name = 'buttonOK'
	$buttonOK.Size = '75, 23'
	$buttonOK.TabIndex = 0
	$buttonOK.Text = '&OK'
	$buttonOK.UseCompatibleTextRendering = $True
	$buttonOK.UseVisualStyleBackColor = $True
	$buttonOK.add_Click($buttonOK_Click)
	$SetHostname.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $SetHostname.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$SetHostname.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$SetHostname.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$SetHostname.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $SetHostname.ShowDialog()

}
#endregion Source: SetHostname.psf

#Start the application
Main ($CommandLine)
