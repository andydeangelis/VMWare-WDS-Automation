#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 9e329b64-f4ea-482a-8786-64b2151c8568
# Source File: C:\Users\dalthakar\OneDrive\Script_Projects\VMWare-WDS-Automation\VMWare-WDS-Automation.psproj
#------------------------------------------------------------------------
#region Project Recovery Data (DO NOT MODIFY)
<#RecoveryData:
FggAAB+LCAAAAAAABACtVltv2jAUfq/U/4DyOClQGGVUC5EoiKrTaBFh8FJpMskBXBw7s50C+/U7
wQmkYahI6YuTc8l3bp/tOGPwxRvIXZ9o4l5fVSrOSIpX8HXF23F/JQWnfyHoWAPCFFh75YAyDbJj
falGqv49WUPzCMyjvg3Z/mWxXxWuRrMCFlX1Vlv7QBhqClJRwd1G9capZUJqwyjw2Hfv4Gvjbt5q
2osmELvZbhC7/a3dslvNeaN+W/fbt622U0ud00/TCia7CFwEzosZuGABhkvFg8IdxNzXmIRCSKMp
egxFEDM4b6chWZ6YM1Hli8tHR7FyH1OGjb6xXE8TqeMo6Z0p7ZxnxVsRmUxnImMczhgWIIH7kJXR
sR75m1iD/cDEnLDfOBvLNe8qGdQH6P/B81ZiYw8J5QMhQ8RbWG4mJQO/MN2UTOfzfeRKE8ZGEsbw
R5m8D7N5eW8tUUg3CKbDYyUH8YJSzkF6wJBryW5SWkgwwAXlZ3bqAbRtyHW/GxG9KvaqaC/RrRnl
gdiosUDumrrymhI9wxy7QUj5iCi1ETIw4EVtiQBpngMgOpaF5DNlCXjkzU/hE/ZL4RY/UOmoKpO5
kOulFHHUFyHusx+C8jT7U8NHYRpWejq9kFeytZkgyIrqkn4aFyegtD3pjSIhdZGHedsFHLw4Zi/G
LRXiHfXsFUPmTCXPCIrHMWF9qtbHg+KoK8ecJ+r3SMb5o3wCagRzaRzuNCM9S7qknLDE4YmE4E6H
M2yfPet7djfGHpAkJCJG+JVTO3G/vnJq7/4D/gHT2v1MFggAAA==#>
#endregion
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2018 v5.5.150
     Generated on:       8/8/2019 10:40 AM
     Generated by:       dalthakar
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2018
#>



#region Source: Startup.pss
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
6wMAACODCAAAAAAABAC9k0trg0AQx++FfgfJWdRlXU1AhdCQS+mDWtJeRx1l6T7C7prgt69NS1Jo
SUsOMpd5MPPjz8xkT1jrHZphBQ680bFcq3xGAzIrrq88L3swvOMKxJoLvAeJRenAuH4bbK3Nwh/V
Q8/SWpSV4GgP8SkzFOVgHUrf23yR4iD6MN+76YXrDeYKe2dA+N5jP06ob3F41m+o8ipNgdUsIQsa
YzRfZOFx5u+M4A4UdChRuWDZOy3BjcATmfyXTEnV0jlLoKFJjJT9TX7hqtF7G6y1kXYSrSsDe666
S1gRbVmbtoQ0LAIKZ1jS1toIXk2jaLzHSUCvUkwjiBusnTZDiWbHa7zoMM4v6xh+fl4Wfn/u4h27
t81y6wMAAA==#>
#endregion
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
<#
    .SYNOPSIS
        The Main function starts the project application.
    
    .PARAMETER Commandline
        $Commandline contains the complete argument string passed to the script packager executable.
    
    .NOTES
        Use this function to initialize your script and to call GUI forms.
		
    .NOTES
        To get the console output in the Packager (Forms Engine) use: 
		$ConsoleOutput (Type: System.Collections.ArrayList)
#>
	Param ([String]$Commandline)
		
	#--------------------------------------------------------------------------
	#TODO: Add initialization script here (Load modules and check requirements)
	
	
	#--------------------------------------------------------------------------
	
	if((Show-MainForm_psf) -eq 'OK')
	{
		if (-not(Get-InstalledModule -Name "VMWare.PowerCLI"))
		{
			try
			{
				Set-ExecutionPolicy Unrestricted -Force
				Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force
				Set-PSRepository -Name "PSGallery" -InstallationPolicy Trusted
				Install-Module -Name "VMWare.PowerCLI" -Force -Scope AllUsers
				Install-Module -Name "PSParallel" -Force -Scope AllUsers
				Write-Host "All required modules successfully installed on" $computer -ForegroundColor Green
				Import-Module "VMWare.PowerCLI"
				Import-Module "PSParallel"
			}
			catch
			{
				
				Write-Host "Unable to install one or more modules on" $computer "Please install manually or resolve connectivity issues." -ForegroundColor Red
			}
		}
		else
		{
			Write-Host "All required modules are already installed. Checking for module updates on $computer." -ForegroundColor Green
			try
			{
				Set-ExecutionPolicy Unrestricted -Force
				Update-Module -Name "VMWare.PowerCLI" -Force -Confirm:$false -ErrorAction SilentlyContinue
				Update-Module -Name "PSParallel" -Force -Confirm:$false -ErrorAction SilentlyContinue
				Import-Module "VMware.PowerCLI"
				Import-Module "PSParallel"
				Write-Host "All required modules are up to date on" $computer -ForegroundColor Green
			}
			catch
			{
				Write-Host "Unable to update one or more modules on $computer. Please install manually or resolve connectivity issues." -ForegroundColor Red
			}
		}
	}
	
	$script:ExitCode = 0 #Set the exit code for the Packager
}







#endregion Source: Startup.pss

#region Source: Globals.ps1
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	
	
	#Sample function that provides the location of the script
	function Get-ScriptDirectory
	{
	<#
		.SYNOPSIS
			Get-ScriptDirectory returns the proper location of the script.
	
		.OUTPUTS
			System.String
		
		.NOTES
			Returns the correct path within a packaged executable.
	#>
		[OutputType([string])]
		param ()
		if ($null -ne $hostinvocation)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	
	#Sample variable that provides the location of the script
	[string]$ScriptDirectory = Get-ScriptDirectory
	
	#Credential object for vCenter authentication.
	$vcCredential = $null
	
	#vCenter connection object.
	$vcenterConnection = $null
	
	#VM build queue
	$vmbuilds = [System.Collections.ArrayList]@()
	
	#VM feature config queue
	$vmFeatures = [System.Collections.ArrayList]@()
	
	#VM role config queue
	$vmRoles = [System.Collections.ArrayList]@()
	
	#VM domain info queue
	$vmDomainInfo = [System.Collections.ArrayList]@()
	
	#VM Operating System
	$vmOS = [System.Collections.ArrayList]@()
	
	#VM Local Admin Passwords
	$vmAdminPasswords = [System.Collections.ArrayList]@()
	
	#VM Additional User Accounts
	$vmLocalUsers = [System.Collections.ArrayList]@()
	
	#VM Additional User Accounts
	$vmWorkgroupDomain = [System.Collections.ArrayList]@()
	
	#VM full OS config
	$vmFullOSConfig = [System.Collections.ArrayList]@()
	
	#VM full OS config
	$vmTimeZones = [System.Collections.ArrayList]@()
	
	#Step 3 Selected VM
	[string]$vmSelectedStep3
	
	#Step 4 Selected VM
	[string]$vmSelectedStep4
	
	#VM Additional Disks
	$vmAdditionalDisks = [System.Collections.ArrayList]@()
	
	#VM Additional NICs
	$vmAdditionalNICs = [System.Collections.ArrayList]@()
	
	#VM Additional NICs
	$vmOSKeys = [System.Collections.ArrayList]@()
	
	# Import all functions.
	
	foreach ($item in (Get-ChildItem -Path "$ScriptDirectory\Functions\"))
	{
		. "$($item.FullName)"
	}
	
	
	
#endregion Source: Globals.ps1

#region Source: MainForm.psf
function Show-MainForm_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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
LEvWxW2VLf8FPr/8C/x/X/P59/8BJjlmK/UjAAA=#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formVMAutomationTool = New-Object 'System.Windows.Forms.Form'
	$buttonCancel = New-Object 'System.Windows.Forms.Button'
	$buttonBack = New-Object 'System.Windows.Forms.Button'
	$buttonFinish = New-Object 'System.Windows.Forms.Button'
	$tabcontrolWizard = New-Object 'System.Windows.Forms.TabControl'
	$tabpageStep1 = New-Object 'System.Windows.Forms.TabPage'
	$pictureboxLoading = New-Object 'System.Windows.Forms.PictureBox'
	$labelStep1 = New-Object 'System.Windows.Forms.Label'
	$panel1 = New-Object 'System.Windows.Forms.Panel'
	$labelConnectionStatusNotC = New-Object 'System.Windows.Forms.Label'
	$labelUsernameNotConnected = New-Object 'System.Windows.Forms.Label'
	$labelVCenterServerNotConn = New-Object 'System.Windows.Forms.Label'
	$labelSetVSphereCredential = New-Object 'System.Windows.Forms.Label'
	$buttonEnterCredentials = New-Object 'System.Windows.Forms.Button'
	$vcenterTextbox = New-Object 'System.Windows.Forms.TextBox'
	$labelVCenterFQDNOrIPAddre = New-Object 'System.Windows.Forms.Label'
	$tabpageStep2 = New-Object 'System.Windows.Forms.TabPage'
	$labelStep2Network = New-Object 'System.Windows.Forms.Label'
	$labelStep2Memory = New-Object 'System.Windows.Forms.Label'
	$labelStep2CPU = New-Object 'System.Windows.Forms.Label'
	$labelStep2VMName = New-Object 'System.Windows.Forms.Label'
	$listviewVMsStep2 = New-Object 'System.Windows.Forms.ListView'
	$buttonDeleteVMFromQueue = New-Object 'System.Windows.Forms.Button'
	$buttonAddVirtualMachine = New-Object 'System.Windows.Forms.Button'
	$labelStep2 = New-Object 'System.Windows.Forms.Label'
	$tabpageStep3 = New-Object 'System.Windows.Forms.TabPage'
	$treeviewVMListStep3 = New-Object 'System.Windows.Forms.TreeView'
	$panel6 = New-Object 'System.Windows.Forms.Panel'
	$checkboxUseKMS = New-Object 'System.Windows.Forms.CheckBox'
	$maskedtextboxOSKey = New-Object 'System.Windows.Forms.MaskedTextBox'
	$labelOSProductKey = New-Object 'System.Windows.Forms.Label'
	$labelVMStep3 = New-Object 'System.Windows.Forms.Label'
	$buttonVNICAdd = New-Object 'System.Windows.Forms.Button'
	$labelVNICConfig = New-Object 'System.Windows.Forms.Label'
	$buttonVDiskAdd = New-Object 'System.Windows.Forms.Button'
	$labelVDiskConfig = New-Object 'System.Windows.Forms.Label'
	$labelOptionalConfig = New-Object 'System.Windows.Forms.Label'
	$tabpageStep4 = New-Object 'System.Windows.Forms.TabPage'
	$treeviewVMListStep4 = New-Object 'System.Windows.Forms.TreeView'
	$panel7 = New-Object 'System.Windows.Forms.Panel'
	$labelVMNameStep4 = New-Object 'System.Windows.Forms.Label'
	$labelOSConfig = New-Object 'System.Windows.Forms.Label'
	$labelOK2 = New-Object 'System.Windows.Forms.Label'
	$comboboxTimezone = New-Object 'System.Windows.Forms.ComboBox'
	$labelTimezone = New-Object 'System.Windows.Forms.Label'
	$labelOK1 = New-Object 'System.Windows.Forms.Label'
	$buttonSetAdminPassword = New-Object 'System.Windows.Forms.Button'
	$labelAdministratorPassword = New-Object 'System.Windows.Forms.Label'
	$buttonAddLocalUsers = New-Object 'System.Windows.Forms.Button'
	$buttonDomainWorkgroup = New-Object 'System.Windows.Forms.Button'
	$buttonOpenFeatureSelection = New-Object 'System.Windows.Forms.Button'
	$labelSelectRoles = New-Object 'System.Windows.Forms.Label'
	$labelSelectFeatures = New-Object 'System.Windows.Forms.Label'
	$buttonOpenRolesSelection = New-Object 'System.Windows.Forms.Button'
	$tabpageStep5 = New-Object 'System.Windows.Forms.TabPage'
	$tabpageStep6 = New-Object 'System.Windows.Forms.TabPage'
	$buttonCustomizeOS = New-Object 'System.Windows.Forms.Button'
	$buttonBuildVMs = New-Object 'System.Windows.Forms.Button'
	$buttonNext = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	#-------------------------------------------------------
	# NOTE: When new TabPage added place the validation code
	# 		in the Test-WizardPage function.
	#-------------------------------------------------------
	function Test-WizardPage
	{
	<#
		Add TabPages and place the validation code in this function
	#>
		[OutputType([boolean])]
		param([System.Windows.Forms.TabPage]$tabPage)
		
		if($tabPage -eq $tabpageStep1)
		{
			#TODO: Enter Validation Code here for Step 1
			if(-not $global:vcenterConnection.IsConnected)
			{
				return $false
			}
			else
			{
				return $true
			}
			
		}
		elseif ($tabPage -eq $tabpageStep2)
		{
			#TODO: Enter Validation Code here for Step 2
			if($global:vmbuilds -ne $null)
			{
				return $true
			}
			
			return $false
		}
		elseif ($tabPage -eq $tabpageStep3)
		{
			#TODO: Enter Validation Code here for Step 2
			if ($global:vmbuilds -ne $null)
			{
				return $true
			}
			
			return $false
		}
		elseif ($tabPage -eq $tabpageStep4)
		{
			foreach ($node in $treeviewVMListStep4.Nodes)
			{
				<#if (-not ($node.Text -in $global:vmAdminPasswords.VMName) -or -not ($node.Text -in $global:vmWorkgroupDomain.VMName))
				{
					return $false
				}/#>
				
				if ($global:vmAdminPasswords.VMName -contains $node.Text)
				{
					return $true
				}
				
				return $false
				
			}
		}
		elseif ($tabPage -eq $tabpageStep5)
		{
			return $true
		}
		#Add more pages here
		
		return $false
	}
	
	
	
	$buttonFinish_Click={
		#-------------------------------------------------------
		# TODO: Place finalization script here
		#-------------------------------------------------------
		
	}
	
	#region Events and Functions
	$formVMAutomationTool_Load={
		Update-NavButtons
		
		$timeZones = Get-TimeZone -ListAvailable | select DisplayName
		
		foreach ($timeZone in $timeZones)
		{
			$comboboxTimezone.Items.Add($timeZone.DisplayName)
		}
		
	}
	
	function Update-NavButtons
	{
		<# 
			.DESCRIPTION
			Validates the current tab and Updates the Next, Prev and Finish buttons.
		#>
		$enabled = Test-WizardPage $tabcontrolWizard.SelectedTab
		$buttonNext.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
		$buttonBack.Enabled = $tabcontrolWizard.SelectedIndex -gt 0
		$buttonFinish.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)	
		#Uncomment to Hide Buttons
		#$buttonNext.Visible = ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
		#$buttonFinish.Visible = ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)
	}
	
	$script:DeselectedIndex = -1
	$tabcontrolWizard_Deselecting=[System.Windows.Forms.TabControlCancelEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
		# Store the previous tab index
		$script:DeselectedIndex = $_.TabPageIndex
	}
	
	$tabcontrolWizard_Selecting=[System.Windows.Forms.TabControlCancelEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
		# We only validate if we are moving to the Next TabPage. 
		# Users can move back without validating
		if($script:DeselectedIndex -ne -1 -and $script:DeselectedIndex -lt $_.TabPageIndex)
		{
			#Validate each page until we reach the one we want
			for($index = $script:DeselectedIndex; $index -lt $_.TabPageIndex; $index++)
			{
				$_.Cancel = -not (Test-WizardPage $tabcontrolWizard.TabPages[$index])
				
				if($_.Cancel) 
				{
					# Cancel and Return if validation failed.
					return;
				}
			}
		}
		
		Update-NavButtons
	}
	
	$buttonBack_Click={
		#Go to the previous tab page
		if($tabcontrolWizard.SelectedIndex -gt 0)
		{
			$tabcontrolWizard.SelectedIndex--
		}
	}
	
	$buttonNext_Click={	
		#Go to the next tab page
		if($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
		{
			$tabcontrolWizard.SelectedIndex++
		}	
	}
	
	#endregion
	
	#------------------------------------------------------
	# NOTE: When a Control State changes you should call
	# 		Update-NavButtons to trigger validation
	#------------------------------------------------------
	
	$radiobuttonOption_CheckedChanged={
		
		if($this.Checked)
		{
			Update-NavButtons
		}
	}
	
	$buttonEnterCredentials_Click={
		
		try
		{
			$pictureboxLoading.Visible = $true
			if ($global:vcenterConnection.IsConnected)
			{
				Disconnect-VIServer -Server * -Force -Confirm:$false
				$labelVCenterServerNotConn.Text = "vCenter Server: Not Connected"
				$labelUsernameNotConnected.Text = "Username: Not Connected"
				$labelConnectionStatusNotC.Text = "Connection Status: Not Connected"
			}
			$global:vcCredential = $null
			$global:vcenterConnection = $null
			$global:vcCredential = Get-Credential -ErrorAction Stop
			Connect-VIServer -Server $vcenterTextbox.Text -Credential $global:vcCredential -ErrorAction Stop
			$global:vcenterConnection = Get-VIServer -Server $vcenterTextbox.Text -ErrorAction Stop
			$buttonEnterCredentials.Enabled = $false
			$pictureboxLoading.Visible = $false
		}
		catch
		{
			"Unable to connect."
		}
		
		If ($global:vcenterConnection.IsConnected)
		{
			$labelVCenterServerNotConn.Text = "vCenter Server: $($vcenterTextbox.Text)"
			$labelUsernameNotConnected.Text = "Username: $($global:vcenterConnection.User)"
			$labelConnectionStatusNotC.Text = "Connection Status: Connected"
			
			Update-NavButtons
			
		}
		else
		{
			[System.Windows.Forms.MessageBox]::Show("Unable to connect to $($vcenterTextbox.Text). Please try logging on again.")
			Update-NavButtons
		}
	}
	
	#region Control Helper Functions
	function Update-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
		
		.PARAMETER ComboBox
			The ComboBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ComboBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red" -Append
			Update-ComboBox $combobox1 "White" -Append
			Update-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Update-ComboBox $combobox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ComboBox]
			$ComboBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]
			$DisplayMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	function Update-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The DataGridView control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the DataGridView's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		.PARAMETER AutoSizeColumns
		    Resizes DataGridView control's columns after loading the items.
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Item,
		    [Parameter(Mandatory=$false)]
			[string]$DataMember,
			[System.Windows.Forms.DataGridViewAutoSizeColumnMode]$AutoSizeColumns = 'None'
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
		{
			$DataGridView.DataSource = $Item.Tables[0]
		}
		elseif ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{
				$array.Add($Item)
			}
			$DataGridView.DataSource = $array
		}
		
		if ($AutoSizeColumns -ne 'None')
		{
			$DataGridView.AutoResizeColumns($AutoSizeColumns)
		}
		
		$DataGridView.ResumeLayout()
	}
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterWMIProperties
				This switch removes WMI properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param(
		[ValidateNotNull()]
		$InputObject, 
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
		
		if($null -eq $Table)
		{
			$Table = New-Object System.Data.DataTable
		}
		
		if ($InputObject -is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
		{
			$Table = $InputObject.Tables[0]
		}
		else
		{
			if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
				
				if ($null -eq $InputObject) { return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach ($item in $InputObject)
				{
					if ($null -ne $item)
					{
						$object = $item
						break
					}
				}
				
				if ($null -eq $object) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if ($null -ne $prop.Value)
						{
							try { $type = $prop.Value.GetType() }
							catch { Out-Null }
						}
						
						if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
							[void]$table.Columns.Add($prop.Name, $type)
						}
						else #Type info not found
						{
							[void]$table.Columns.Add($prop.Name)
						}
					}
				}
				
				if ($object -is [System.Data.DataRow])
				{
					foreach ($item in $InputObject)
					{
						$Table.Rows.Add($item)
					}
					return @( ,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()
			}
			
			foreach ($item in $InputObject)
			{
				$row = $table.NewRow()
				
				if ($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if ($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
		
		return @(,$Table)	
	}
	
	function Update-ListViewColumnSort
	{
	<#
		.SYNOPSIS
			Sort the ListView's item using the specified column.
		
		.DESCRIPTION
			Sort the ListView's item using the specified column.
			This function uses Add-Type to define a class that sort the items.
			The ListView's Tag property is used to keep track of the sorting.
		
		.PARAMETER ListView
			The ListView control to sort.
		
		.PARAMETER ColumnIndex
			The index of the column to use for sorting.
		
		.PARAMETER SortOrder
			The direction to sort the items. If not specified or set to None, it will toggle.
		
		.EXAMPLE
			Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListView]
			$ListView,
			[Parameter(Mandatory = $true)]
			[int]
			$ColumnIndex,
			[System.Windows.Forms.SortOrder]
			$SortOrder = 'None'
		)
		
		if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
		{
			return;
		}
		
		#region Define ListViewItemComparer
		try
		{
			[ListViewItemComparer] | Out-Null
		}
		catch
		{
			Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
		}
		#endregion
		
		if ($ListView.Tag -is [ListViewItemComparer])
		{
			#Toggle the Sort Order
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
				{
					$ListView.Tag.sortOrder = 'Descending'
				}
				else
				{
					$ListView.Tag.sortOrder = 'Ascending'
				}
			}
			else
			{
				$ListView.Tag.sortOrder = $SortOrder
			}
			
			$ListView.Tag.column = $ColumnIndex
			$ListView.Sort() #Sort the items
		}
		else
		{
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
			}
			
			#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
			$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
			$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
		}
	}
	
	
	function Add-ListViewItem
	{
	<#
		.SYNOPSIS
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.DESCRIPTION
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.PARAMETER ListView
			The ListView control to add the items to.
	
		.PARAMETER Items
			The object or objects you wish to load into the ListView's Items collection.
			
		.PARAMETER  ImageIndex
			The index of a predefined image in the ListView's ImageList.
		
		.PARAMETER  SubItems
			List of strings to add as Subitems.
		
		.PARAMETER Group
			The group to place the item(s) in.
		
		.PARAMETER Clear
			This switch clears the ListView's Items before adding the new item(s).
		
		.EXAMPLE
			Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
	#>
		
		Param( 
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.ListView]$ListView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Items,
		[int]$ImageIndex = -1,
		[string[]]$SubItems,
		$Group,
		[switch]$Clear)
		
		if($Clear)
		{
			$ListView.Items.Clear();
	    }
	    
	    $lvGroup = $null
	    if ($Group -is [System.Windows.Forms.ListViewGroup])
	    {
	        $lvGroup = $Group
	    }
	    elseif ($Group -is [string])
	    {
	        #$lvGroup = $ListView.Group[$Group] # Case sensitive
	        foreach ($groupItem in $ListView.Groups)
	        {
	            if ($groupItem.Name -eq $Group)
	            {
	                $lvGroup = $groupItem
	                break
	            }
	        }
	        
	        if ($null -eq $lvGroup)
	        {
	            $lvGroup = $ListView.Groups.Add($Group, $Group)
	        }
	    }
	    
		if($Items -is [Array])
		{
			$ListView.BeginUpdate()
			foreach ($item in $Items)
			{		
				$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
				#Store the object in the Tag
				$listitem.Tag = $item
				
				if($null -ne $SubItems)
				{
					$listitem.SubItems.AddRange($SubItems)
				}
				
				if($null -ne $lvGroup)
				{
					$listitem.Group = $lvGroup
				}
			}
			$ListView.EndUpdate()
		}
		else
		{
			#Add a new item to the ListView
			$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $Items
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
	}
	
	
	function Get-CheckedNode
	{
	<#
		.SYNOPSIS
			This function collects a list of checked nodes in a TreeView
	
		.DESCRIPTION
			This function collects a list of checked nodes in a TreeView
	
		.PARAMETER  $NodeCollection
			The collection of nodes to search
	
		.PARAMETER  $CheckedNodes
			The ArrayList that will contain the all the checked items
		
		.EXAMPLE
			$CheckedNodes = New-Object System.Collections.ArrayList
			Get-CheckedNode $treeview1.Nodes $CheckedNodes
			foreach($node in $CheckedNodes)
			{	
				Write-Host $node.Text
			}
	#>
		param (
				[ValidateNotNull()]
				[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
				[ValidateNotNull()]
				[System.Collections.ArrayList]$CheckedNodes
		)
		
		foreach ($Node in $NodeCollection)
		{
			if ($Node.Checked)
			{
				[void]$CheckedNodes.Add($Node)
			}
			Get-CheckedNode $Node.Nodes $CheckedNodes
		}
	}
	
	#endregion
	
	
	$vcenterTextbox_TextChanged={
		#TODO: Place custom script here
		if ($vcenterTextbox.Text -ne "")
		{
			$buttonEnterCredentials.Enabled = $true
		}
		else
		{
			$buttonEnterCredentials.Enabled = $false
		}
	}
	
	$buttonAddVirtualMachine_Click={
		#TODO: Place custom script here
		if (Show-AddVMForm_psf -eq 'OK')
		{
		}
	}
	
	
	$buttonOpenRolesSelection_Click={
		
		$global:vmSelectedStep4 | Out-File "$ScriptDirectory\logs\vmselectedstep4.log" -Append
		
		if ((Show-WindowsRoles_psf -VMName $global:vmSelectedStep4) -eq 'OK')
		{
			#$selectedRoles = $global:vmRoles | ?{ $_.VMName -eq $vm.VMName } | Select -ExpandProperty Roles		
		}
		
	}
	
	$buttonBuildVMs_Click={
		
		try
		{
			foreach ($vm in $global:vmbuilds)
			{
				while (@(Get-Job | ?{ $_.State -eq "Running" }).Count -ge 5)
				{
					Write-Host "Waiting for open thread...($NumJobs Maximum)"
					Start-Sleep -Seconds 3
				}
				
				# Let's combine all the OS specific data we gathered for the VM into one variable.
				$osConfigObject = New-Object PSObject
				
				$osConfigObject | Add-Member -MemberType NoteProperty -Name "VMName" -Value $vm.VMName
				
				# Add the data for the domain/workgroup
				$osConfigObject | Add-Member -MemberType NoteProperty -Name "Hostname" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).Hostname
				$osConfigObject | Add-Member -MemberType NoteProperty -Name "DomainName" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).DomainName
				$osConfigObject | Add-Member -MemberType NoteProperty -Name "DomainUser" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).DomainUser
				$osConfigObject | Add-Member -MemberType NoteProperty -Name "DomainPassword" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).DomainPassword
				$osConfigObject | Add-Member -MemberType NoteProperty -Name "IsWorkgroup" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).IsWorkgroup
				$osConfigObject | Add-Member -MemberType NoteProperty -Name "LocalAdminPassword" -Value ($global:vmAdminPasswords | ?{ $_.VMName -eq $vm.VMName }).Password
				$osConfigObject | Add-Member -MemberType NoteProperty -Name "Roles" -Value ($global:vmRoles | ?{ $_.VMName -eq $vm.VMName }).Roles
				$osConfigObject | Add-Member -MemberType NoteProperty -Name "Features" -Value ($global:vmFeatures | ?{ $_.VMName -eq $vm.VMName }).Features
				$osConfigObject | Add-Member -MemberType NoteProperty -Name "Timezone" -Value ($global:vmTimeZones | ?{$_.VMName -eq $vm.VMName}).Timezone
				
				$global:vmFullOSConfig = [System.Array]$global:vmFullOSConfig + $osConfigObject
				
				$osConfigObject | Out-File "$ScriptDirectory\logs\osobject.log" -Append
				
				Start-Job -Name $vm.VMName -ArgumentList $vcenterTextbox.Text, $global:vcCredential, $vm, $ScriptDirectory, $osConfigObject -ScriptBlock {
					
					. "$($args[3])\Functions\Get-FolderbyPath.ps1"
					
					Import-Module VMware.PowerCLI
					
					Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -ParticipateInCeip $false -DisplayDeprecationWarnings $false -Confirm:$false
					
					Connect-VIServer -Server $args[0] -Credential $args[1]
					
					$password = ConvertTo-SecureString "$($args[4].DomainPassword)" -AsPlainText -Force
					$domainCredential = New-Object System.Management.Automation.PSCredential ("$($args[4].DomainUser)", $password)
					
					if ($args[4].IsWorkgroup -eq 'No')
					{
						$osSpec = New-OSCustomizationSpec -OSType "Windows" -Name $args[2].VMName -Type NonPersistent `
														  -FullName "Administrator" `
														  -AdminPassword "$($args[4].LocalAdminPassword)" `
														  -AutoLogonCount 1 `
														  -OrgName "Org1" `
														  -Description "Temporary Spec for $($args[2].VMName)" `
														  -ChangeSid `
														  -DeleteAccounts `
														  -Domain "$($args[4].DomainName)" `
														  -DomainCredentials $domainCredential `
														  -NamingScheme fixed `
														  -NamingPrefix $args[4].Hostname `
														  -ErrorAction Stop
					}
					else
					{
						$osSpec = New-OSCustomizationSpec -OSType "Windows" -Name $args[2].VMName -Type NonPersistent `
														  -FullName "Administrator" `
														  -AdminPassword "$($args[4].LocalAdminPassword)" `
														  -AutoLogonCount 1 `
														  -OrgName "Org1" `
														  -Description "Temporary Spec for $($args[2].VMName)" `
														  -ChangeSid `
														  -DeleteAccounts `
														  -Workgroup "$($args[4].DomainName)" `
														  -NamingScheme fixed `
														  -NamingPrefix $args[4].Hostname `
														  -ErrorAction Stop
					}
					
					if ($args[2].("IP Type") -eq "DHCP")
					{
						Get-OSCustomizationNicMapping -OSCustomizationSpec $osSpec | Set-OSCustomizationNicMapping -IpMode UseDHCP
					}
					else
					{
						Get-OSCustomizationNicMapping -OSCustomizationSpec $osSpec | Set-OSCustomizationNicMapping -IpMode UseStaticIP `
																												   -IpAddress $args[2].("IP Address") `
																												   -SubnetMask $args[2].("Subnet Mask") `
																												   -DefaultGateway $args[2].("Default Gateway") `
																												   -Dns $args[2].("Primary DNS Server")
					}
					
					$vmTemplate = Get-Template -Name $args[2].Template
					
					$destFolder = Get-FolderbyPath -Path "$($args[2].Location)" -Separator "\"
					
					$invoke = New-VM -VMHost $args[2].("VM Host") -Name $args[2].VMName -Datastore $args[2].Datastore -Template $vmTemplate -Location $destFolder -OSCustomizationSpec $osSpec -ErrorAction Stop
					$invoke | Out-File "$ScriptDirectory\logs\invoke.log"
					
					Disconnect-VIServer -Server $args[0]
					
				}
				
			}
			
			do
			{
				Start-Sleep -Milliseconds 5000
			}
			while ((Get-Job -State Running).Count -gt 0)
			
			foreach ($item in $global:vmbuilds)
			{
				Get-VM -Name $item.VMName | Set-VM -MemoryGB $item.Memory -NumCpu $item.NumCPU -Confirm:$false -ErrorAction Stop
				
				Get-NetworkAdapter -VM $item.VMName | Set-NetworkAdapter -NetworkName $item.Network -StartConnected $true -Confirm:$false -ErrorAction Stop
				
				Start-VM -VM $item.VMName | Wait-Tools
			}
			
		}
		catch
		{
			[System.Windows.Forms.MessageBox]::Show("Unable to build virtual machines.")
		}
	}
	
	$datagridviewVMQueue_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
		$buttonDeleteVMFromQueue.Enabled = $true	
		
	}
	
	$buttonDeleteVMFromQueue_Click={
		
		$global:vmBuilds = $global:vmBuilds | ?{ $_.VMName -ne $listviewVMsStep2.SelectedItems.Text }
		
		$listviewVMsStep2.Clear()
		
		foreach ($item in $global:vmBuilds)
		{
			$listviewVMsStep2.Items.Add($item.VMName)
		}
		
		# Update the treeview control for Step 3
		
		$treeviewVMListStep3.BeginUpdate()
		$treeviewVMListStep3.Nodes.Clear()
		
		foreach ($vm in $global:vmbuilds)
		{
			$newNode = $treeviewVMListStep3.Nodes.Add($vm.VMName)
		}
		
		$treeviewVMListStep3.EndUpdate()
		
		# Update the treeview control for step 4.
		
		$treeviewVMListStep4.BeginUpdate()
		$treeviewVMListStep4.Nodes.Clear()
		
		foreach ($vm in $global:vmbuilds)
		{
			$newNode = $treeviewVMListStep4.Nodes.Add($vm.VMName)
		}
		
		$treeviewVMListStep4.EndUpdate()
		
		Update-NavButtons
		
		
	}
	
	$treeviewVMListStep4_AfterSelect=[System.Windows.Forms.TreeViewEventHandler]{
		#Event Argument: $_ = [System.Windows.Forms.TreeViewEventArgs]
		
		$global:vmSelectedStep4 = $treeviewVMListStep4.SelectedNode.Text
		
		$labelVMNameStep4.Text = "VM: $($global:vmSelectedStep4)"
		
		if ($treeviewVMListStep4.SelectedNode.Text -in $global:vmAdminPasswords.VMName)
		{
			$labelOK1.Visible = $true
		}
		else
		{
			$labelOK1.Visible = $false
		}
		
		if ($treeviewVMListStep4.SelectedNode.Text -in $global:vmWorkgroupDomain.VMName)
		{
			$labelOK2.Visible = $true		
		}
		else
		{
			$labelOK2.Visible = $false		
		}
		
	}
	
	$radiobuttonDomain_CheckedChanged={
		
		if ($radiobuttonDomain.Checked) { $buttonDomainWorkgroup.Enabled = $true; $buttonSetWorkgroup.Enabled = $false }
		elseif ($radiobuttonWorkgroup.Checked) { $buttonDomainWorkgroup.Enabled = $false; $buttonSetWorkgroup.Enabled = $true }
		
	}
	
	$buttonSetAdminPassword_Click={
		
		if ((Show-GetAdminPassword_psf -VMName $global:vmSelectedStep4) -eq 'OK')
		{ }
	}
	
	$buttonOpenFeatureSelection_Click={
		
		if ((Show-WindowsFeatures_psf -VMName $global:vmSelectedStep4) -eq 'OK')
		{
		}
	}
	
	$buttonAddLocalUsers_Click={
		
		if ((Show-AddLocalUsers_psf -VMName $global:vmSelectedStep4) -eq 'OK'){}
		
	}
	
	$buttonDomainWorkgroup_Click={
		
		if ((Show-WorkgroupDomainJoin_psf -VMName $global:vmSelectedStep4) -eq 'OK') {}
	}
	
	
	$comboboxTimezone_SelectedIndexChanged={
		
		if ($global:vmSelectedStep4 -in $global:vmTimeZones.VMName)
		{
			$global:vmTimeZones = $global:vmTimeZones | ?{ $_.VMName -ne $global:vmTimeZones.VMName }
			$tzobject = New-Object PSOBject
			
			$tzobject | Add-Member -MemberType NoteProperty -Name "VMName" -Value $treeviewVMListStep4.SelectedNode.Text
			$tzobject | Add-Member -MemberType NoteProperty -Name "Timezone" -Value $comboboxTimezone.Text
		}
		else
		{
			$tzobject = New-Object PSOBject
			
			$tzobject | Add-Member -MemberType NoteProperty -Name "VMName" -Value $treeviewVMListStep4.SelectedNode.Text
			$tzobject | Add-Member -MemberType NoteProperty -Name "Timezone" -Value $comboboxTimezone.Text
		}
	}
	
	$buttonCustomizeOS_Click={
		
		foreach ($admin in $global:vmAdminPasswords)
		{
			# First, let's create the PSCredential object
			
			$password = ConvertTo-SecureString $admin.Password -AsPlainText -Force
			$localAdminCred = New-Object System.Management.Automation.PSCredential ("Administrator", $password)
			
			# Declare the array that will house each command to run.
			
			$customizeOSScripts = [System.Collections.ArrayList]@()
			
			# Now, let's build the scripts.
			# We'll start with creating the users.
			
			foreach ($user in $global:vmLocalUsers)
			{
				if ($user.VMName -eq $admin.VMName)
				{
					if ($user.Administrator -eq "Yes")
					{
						$userCreate = New-Object PSObject
						$userCreate | Add-Member -MemberType NoteProperty -Name "Command" -Value "NET USER $($user.Username) $($user.Password) /add"					
						
						$userAdmin = New-Object PSObject
						$userAdmin | Add-Member -MemberType NoteProperty -Name "Command" -Value "NET LOCALGROUP Administrators $($user.Username) /add"
						
						$date = Get-Date -Format "M-d-yyyy"
						$desc = "Admin user created on $date."
						$userTmp = $user.Username
						$userDescription = New-Object PSObject
						$userDescription | Add-Member -MemberType NoteProperty -Name "Command" -Value "Set-LocalUser -Name $userTmp -Description ""$desc"""
						
						$customizeOSScripts = [System.Array]$customizeOSScripts + $userCreate
						$customizeOSScripts = [System.Array]$customizeOSScripts + $userAdmin
						$customizeOSScripts = [System.Array]$customizeOSScripts + $userDescription
					}
					else
					{
						$userCreate = New-Object PSObject
						$userCreate | Add-Member -MemberType NoteProperty -Name "Command" -Value "NET USER $($user.Username) $($user.Password) /add"
						
						$date = Get-Date -Format "M-d-yyyy"
						$desc = "Standard user created on $date."
						$userTmp = $user.Username
						$userDescription = New-Object PSObject
						$userDescription | Add-Member -MemberType NoteProperty -Name "Command" -Value "Set-LocalUser -Name $userTmp -Description ""$desc"""
						
						$customizeOSScripts = [System.Array]$customizeOSScripts + $userCreate
						$customizeOSScripts = [System.Array]$customizeOSScripts + $userDescription
					}
					
				}
				
			}
			
			# Let's install all selected roles.
			
			foreach ($vm in ($global:vmRoles | ?{ $_.VMName -eq $admin.VMName }))
			{
				foreach ($role in $vm.Roles)
				{
					$object = New-Object PSObject
					$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Install-WindowsFeature -Name $role -IncludeManagementTools"
					$customizeOSScripts = [System.Array]$customizeOSScripts + $object
				}
			}
			
			# Let's customize additional disks.
			
			foreach ($disk in ($global:vmAdditionalDisks | ?{ $_.VMName -eq $admin.VMName }))
			{
				$driveLetter = $disk.DriveLetter
				$driveLabel = "Drive-$($disk.DriveLetter)"
				$driveSize = [int]($disk.DriveSize)
				New-HardDisk -VM $admin.VMName -CapacityGB $driveSize -Persistence persistent
				$object = New-Object PSObject
				$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-Disk | Where-Object PartitionStyle -eq ""RAW"" | Initialize-Disk -PartitionStyle GPT -PassThru | New-Partition -DriveLetter $driveLetter -UseMaximumSize | Format-Volume -FileSystem NTFS -NewFileSystemLabel $driveLabel"
				#$customizeOSScripts = [System.Array]$customizeOSScripts + $object
				Invoke-VMScript -VM $admin.VMName -GuestCredential $localAdminCred -ScriptText "$($object.Command)" | Out-File "$ScriptDirectory\logs\$($admin.VMName)_scriptcommand.log" -Append
			}
			
			# Let's customize additional network adapters.
			
			foreach ($nic in ($global:vmAdditionalNICs | ?{ $_.VMName -eq $admin.VMName }))
			{
				$newNic = New-NetworkAdapter -VM $nic.VMName -NetworkName $nic.VLAN -StartConnected -Type Vmxnet3
				
				$newNic | Out-File "$ScriptDirectory\logs\newnic.log" -Append
				$macAddress = "$($newNic.MacAddress)" -replace ":", "-"
				
				if ($nic.("IP Type") -eq "Static")
				{
					$newIP = $nic.("IP Address")
					$newMask = $nic.("Subnet Mask")
					$newGateway = $nic.("Default Gateway")
					$newDNSServer = $nic.("Primary DNS Server")
					
					# Determine the CIDR notation for subnet mask
					$subnetMasks = Import-Csv "$ScriptDirectory\reference\cidrlist.csv"
					
					$cidrNotation = ($subnetMasks | ?{$_.SubnetMask -eq $newMask}).CIDR
					
					if ($newGateway -ne '')
					{
						$object = New-Object PSObject
						$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$macAddress"" | New-NetIPAddress -IPAddress $newIP -DefaultGateway $newGateway -PrefixLength $cidrNotation | Set-DNSClientServerAddress -ServerAddresses $newDNSServer"
						$customizeOSScripts = [System.Array]$customizeOSScripts + $object
					}
					else
					{
						$object = New-Object PSObject
						$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$macAddress"" | New-NetIPAddress -IPAddress $newIP -DefaultGateway $newGateway -PrefixLength $cidrNotation | Set-DNSClientServerAddress -ServerAddresses $newDNSServer"
						$customizeOSScripts = [System.Array]$customizeOSScripts + $object
					}
					
				}
			}
			
			$customizeOSScripts | Out-File "$ScriptDirectory\logs\scriptsarray_$($admin.VMName).log"
			#Customize-OS -VMName $admin.VMName -GuestCredential $localAdminCred -Scripts $customizeOSScripts
			
			foreach ($script in $customizeOSScripts)
			{
				$script.Command | Out-File "$ScriptDirectory\logs\$($admin.VMName)_scriptcommand.log" -Append
				Invoke-VMScript -VM $admin.VMName -GuestCredential $localAdminCred -ScriptText "$($script.Command)" | Out-File "$ScriptDirectory\logs\$($admin.VMName)_scriptcommand.log" -Append
				
				sleep -Seconds 3
			}
			
		}
		
	}
	
	
	$treeviewVMListStep3_AfterSelect=[System.Windows.Forms.TreeViewEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.TreeViewEventArgs]
					
		$global:vmSelectedStep3 = $treeviewVMListStep3.SelectedNode.Text
		
		$labelVMStep3.Text = "VM: $($global:vmSelectedStep3)"
	}
	
	$listviewVMsStep2_SelectedIndexChanged={
					
		$rowTmp = $global:vmBuilds | ?{ $_.VMName -eq $listviewVMsStep2.SelectedItems.Text }
		
		$labelStep2CPU.Text = "CPU: $($rowTmp.NumCPU)"
		$labelStep2Memory.Text = "Memory: $($rowTmp.Memory)"
		$labelStep2Network.Text = "Network: $($rowTmp.Network)"
		$labelStep2VMName.Text = "VM Name: $($rowTmp.VMName)"
		
	}
	$buttonVDiskAdd_Click={
		
		if ((Show-AddVirtualDisk_psf -VMName $treeviewVMListStep3.SelectedNode.Text) -eq 'OK')
		{}
		
	}
	
	$buttonVNICAdd_Click={
		
		if ((Show-AddNicCard_psf -VMName $treeviewVMListStep3.SelectedNode.Text) -eq 'OK')
		{}
	}
	
	$checkboxUseKMS_CheckedChanged={
		
		If ($checkboxUseKMS.Checked -eq $true) { $maskedtextboxOSKey.Enabled = $false }
		elseif ($checkboxUseKMS.Checked -eq $false) { $maskedtextboxOSKey.Enabled = $true }
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formVMAutomationTool.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_vcenterTextbox = $vcenterTextbox.Text
		$script:MainForm_listviewVMsStep2 = $listviewVMsStep2.SelectedItems
		if($treeviewVMListStep3.SelectedNode -ne $null)
		{
			$script:MainForm_treeviewVMListStep3 = $treeviewVMListStep3.SelectedNode.Text
		}
		else
		{
			$script:MainForm_treeviewVMListStep3 = $null
		}
		$script:MainForm_checkboxUseKMS = $checkboxUseKMS.Checked
		if($treeviewVMListStep4.SelectedNode -ne $null)
		{
			$script:MainForm_treeviewVMListStep4 = $treeviewVMListStep4.SelectedNode.Text
		}
		else
		{
			$script:MainForm_treeviewVMListStep4 = $null
		}
		$script:MainForm_comboboxTimezone = $comboboxTimezone.Text
		$script:MainForm_comboboxTimezone_SelectedItem = $comboboxTimezone.SelectedItem
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonBack.remove_Click($buttonBack_Click)
			$buttonFinish.remove_Click($buttonFinish_Click)
			$buttonEnterCredentials.remove_Click($buttonEnterCredentials_Click)
			$vcenterTextbox.remove_TextChanged($vcenterTextbox_TextChanged)
			$listviewVMsStep2.remove_SelectedIndexChanged($listviewVMsStep2_SelectedIndexChanged)
			$buttonDeleteVMFromQueue.remove_Click($buttonDeleteVMFromQueue_Click)
			$buttonAddVirtualMachine.remove_Click($buttonAddVirtualMachine_Click)
			$treeviewVMListStep3.remove_AfterSelect($treeviewVMListStep3_AfterSelect)
			$checkboxUseKMS.remove_CheckedChanged($checkboxUseKMS_CheckedChanged)
			$buttonVNICAdd.remove_Click($buttonVNICAdd_Click)
			$buttonVDiskAdd.remove_Click($buttonVDiskAdd_Click)
			$treeviewVMListStep4.remove_AfterSelect($treeviewVMListStep4_AfterSelect)
			$buttonSetAdminPassword.remove_Click($buttonSetAdminPassword_Click)
			$buttonAddLocalUsers.remove_Click($buttonAddLocalUsers_Click)
			$buttonDomainWorkgroup.remove_Click($buttonDomainWorkgroup_Click)
			$buttonOpenRolesSelection.remove_Click($buttonOpenRolesSelection_Click)
			$buttonCustomizeOS.remove_Click($buttonCustomizeOS_Click)
			$buttonBuildVMs.remove_Click($buttonBuildVMs_Click)
			$tabcontrolWizard.remove_Selecting($tabcontrolWizard_Selecting)
			$tabcontrolWizard.remove_Deselecting($tabcontrolWizard_Deselecting)
			$buttonNext.remove_Click($buttonNext_Click)
			$formVMAutomationTool.remove_Load($formVMAutomationTool_Load)
			$formVMAutomationTool.remove_Load($Form_StateCorrection_Load)
			$formVMAutomationTool.remove_Closing($Form_StoreValues_Closing)
			$formVMAutomationTool.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formVMAutomationTool.SuspendLayout()
	$tabcontrolWizard.SuspendLayout()
	$tabpageStep1.SuspendLayout()
	$panel1.SuspendLayout()
	$tabpageStep2.SuspendLayout()
	$tabpageStep3.SuspendLayout()
	$panel6.SuspendLayout()
	$tabpageStep4.SuspendLayout()
	$panel7.SuspendLayout()
	$tabpageStep6.SuspendLayout()
	#
	# formVMAutomationTool
	#
	$formVMAutomationTool.Controls.Add($buttonCancel)
	$formVMAutomationTool.Controls.Add($buttonBack)
	$formVMAutomationTool.Controls.Add($buttonFinish)
	$formVMAutomationTool.Controls.Add($tabcontrolWizard)
	$formVMAutomationTool.Controls.Add($buttonNext)
	$formVMAutomationTool.AcceptButton = $buttonFinish
	$formVMAutomationTool.AutoScaleDimensions = '6, 13'
	$formVMAutomationTool.AutoScaleMode = 'Font'
	$formVMAutomationTool.CancelButton = $buttonCancel
	$formVMAutomationTool.ClientSize = '537, 329'
	$formVMAutomationTool.FormBorderStyle = 'FixedDialog'
	$formVMAutomationTool.Margin = '6, 6, 6, 6'
	$formVMAutomationTool.MaximizeBox = $False
	$formVMAutomationTool.Name = 'formVMAutomationTool'
	$formVMAutomationTool.StartPosition = 'CenterScreen'
	$formVMAutomationTool.Text = 'VM Automation Tool'
	$formVMAutomationTool.add_Load($formVMAutomationTool_Load)
	#
	# buttonCancel
	#
	$buttonCancel.Anchor = 'Bottom, Right'
	$buttonCancel.DialogResult = 'Cancel'
	$buttonCancel.Location = '369, 294'
	$buttonCancel.Name = 'buttonCancel'
	$buttonCancel.Size = '75, 23'
	$buttonCancel.TabIndex = 4
	$buttonCancel.Text = '&Cancel'
	$buttonCancel.UseCompatibleTextRendering = $True
	$buttonCancel.UseVisualStyleBackColor = $True
	#
	# buttonBack
	#
	$buttonBack.Anchor = 'Bottom, Left'
	$buttonBack.Location = '13, 294'
	$buttonBack.Name = 'buttonBack'
	$buttonBack.Size = '75, 23'
	$buttonBack.TabIndex = 1
	$buttonBack.Text = '< &Back'
	$buttonBack.UseCompatibleTextRendering = $True
	$buttonBack.UseVisualStyleBackColor = $True
	$buttonBack.add_Click($buttonBack_Click)
	#
	# buttonFinish
	#
	$buttonFinish.Anchor = 'Bottom, Right'
	$buttonFinish.DialogResult = 'OK'
	$buttonFinish.Location = '450, 294'
	$buttonFinish.Name = 'buttonFinish'
	$buttonFinish.Size = '75, 23'
	$buttonFinish.TabIndex = 3
	$buttonFinish.Text = '&Finish'
	$buttonFinish.UseCompatibleTextRendering = $True
	$buttonFinish.UseVisualStyleBackColor = $True
	$buttonFinish.add_Click($buttonFinish_Click)
	#
	# tabcontrolWizard
	#
	$tabcontrolWizard.Controls.Add($tabpageStep1)
	$tabcontrolWizard.Controls.Add($tabpageStep2)
	$tabcontrolWizard.Controls.Add($tabpageStep3)
	$tabcontrolWizard.Controls.Add($tabpageStep4)
	$tabcontrolWizard.Controls.Add($tabpageStep5)
	$tabcontrolWizard.Controls.Add($tabpageStep6)
	$tabcontrolWizard.AccessibleRole = 'Clock'
	$tabcontrolWizard.Anchor = 'Top, Bottom, Left, Right'
	$tabcontrolWizard.Location = '13, 12'
	$tabcontrolWizard.Name = 'tabcontrolWizard'
	$tabcontrolWizard.SelectedIndex = 0
	$tabcontrolWizard.Size = '512, 276'
	$tabcontrolWizard.TabIndex = 0
	$tabcontrolWizard.add_Selecting($tabcontrolWizard_Selecting)
	$tabcontrolWizard.add_Deselecting($tabcontrolWizard_Deselecting)
	#
	# tabpageStep1
	#
	$tabpageStep1.Controls.Add($pictureboxLoading)
	$tabpageStep1.Controls.Add($labelStep1)
	$tabpageStep1.Controls.Add($panel1)
	$tabpageStep1.Controls.Add($vcenterTextbox)
	$tabpageStep1.Controls.Add($labelVCenterFQDNOrIPAddre)
	$tabpageStep1.Location = '4, 22'
	$tabpageStep1.Name = 'tabpageStep1'
	$tabpageStep1.Padding = '3, 3, 3, 3'
	$tabpageStep1.Size = '504, 250'
	$tabpageStep1.TabIndex = 0
	$tabpageStep1.Text = 'Step 1 - vCenter Connection'
	$tabpageStep1.UseVisualStyleBackColor = $True
	#
	# pictureboxLoading
	#
	$pictureboxLoading.Anchor = 'Bottom, Right'
	#region Binary Data
	$pictureboxLoading.Image = [System.Convert]::FromBase64String('
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
Cwg1RAAAOwAAAAAAAAAAAA==')
	#endregion
	$pictureboxLoading.Location = '441, 206'
	$pictureboxLoading.Name = 'pictureboxLoading'
	$pictureboxLoading.Size = '68, 68'
	$pictureboxLoading.TabIndex = 4
	$pictureboxLoading.TabStop = $False
	$pictureboxLoading.Visible = $False
	#
	# labelStep1
	#
	$labelStep1.AutoSize = $True
	$labelStep1.Font = 'Microsoft Sans Serif, 12pt, style=Bold'
	$labelStep1.Location = '9, 12'
	$labelStep1.Name = 'labelStep1'
	$labelStep1.Size = '470, 24'
	$labelStep1.TabIndex = 3
	$labelStep1.Text = 'Step 1: Enter your vCenter server and credentials to proceed.'
	$labelStep1.UseCompatibleTextRendering = $True
	#
	# panel1
	#
	$panel1.Controls.Add($labelConnectionStatusNotC)
	$panel1.Controls.Add($labelUsernameNotConnected)
	$panel1.Controls.Add($labelVCenterServerNotConn)
	$panel1.Controls.Add($labelSetVSphereCredential)
	$panel1.Controls.Add($buttonEnterCredentials)
	$panel1.Location = '9, 85'
	$panel1.Name = 'panel1'
	$panel1.Size = '276, 159'
	$panel1.TabIndex = 2
	#
	# labelConnectionStatusNotC
	#
	$labelConnectionStatusNotC.AutoSize = $True
	$labelConnectionStatusNotC.Location = '13, 99'
	$labelConnectionStatusNotC.Name = 'labelConnectionStatusNotC'
	$labelConnectionStatusNotC.Size = '178, 17'
	$labelConnectionStatusNotC.TabIndex = 4
	$labelConnectionStatusNotC.Text = 'Connection Status: Not Connected'
	$labelConnectionStatusNotC.UseCompatibleTextRendering = $True
	#
	# labelUsernameNotConnected
	#
	$labelUsernameNotConnected.AutoSize = $True
	$labelUsernameNotConnected.Location = '13, 62'
	$labelUsernameNotConnected.Name = 'labelUsernameNotConnected'
	$labelUsernameNotConnected.Size = '138, 17'
	$labelUsernameNotConnected.TabIndex = 3
	$labelUsernameNotConnected.Text = 'Username: Not Connected'
	$labelUsernameNotConnected.UseCompatibleTextRendering = $True
	#
	# labelVCenterServerNotConn
	#
	$labelVCenterServerNotConn.AutoSize = $True
	$labelVCenterServerNotConn.Location = '13, 30'
	$labelVCenterServerNotConn.Name = 'labelVCenterServerNotConn'
	$labelVCenterServerNotConn.Size = '162, 17'
	$labelVCenterServerNotConn.TabIndex = 2
	$labelVCenterServerNotConn.Text = 'vCenter Server: Not Connected'
	$labelVCenterServerNotConn.UseCompatibleTextRendering = $True
	#
	# labelSetVSphereCredential
	#
	$labelSetVSphereCredential.AutoSize = $True
	$labelSetVSphereCredential.Dock = 'Fill'
	$labelSetVSphereCredential.Location = '0, 0'
	$labelSetVSphereCredential.Name = 'labelSetVSphereCredential'
	$labelSetVSphereCredential.Size = '127, 17'
	$labelSetVSphereCredential.TabIndex = 1
	$labelSetVSphereCredential.Text = 'Set vSphere Credentials'
	$labelSetVSphereCredential.UseCompatibleTextRendering = $True
	#
	# buttonEnterCredentials
	#
	$buttonEnterCredentials.Enabled = $False
	$buttonEnterCredentials.Location = '13, 130'
	$buttonEnterCredentials.Name = 'buttonEnterCredentials'
	$buttonEnterCredentials.Size = '114, 23'
	$buttonEnterCredentials.TabIndex = 0
	$buttonEnterCredentials.Text = 'Enter Credentials'
	$buttonEnterCredentials.UseCompatibleTextRendering = $True
	$buttonEnterCredentials.UseVisualStyleBackColor = $True
	$buttonEnterCredentials.add_Click($buttonEnterCredentials_Click)
	#
	# vcenterTextbox
	#
	$vcenterTextbox.Location = '169, 52'
	$vcenterTextbox.Name = 'vcenterTextbox'
	$vcenterTextbox.Size = '161, 20'
	$vcenterTextbox.TabIndex = 1
	$vcenterTextbox.add_TextChanged($vcenterTextbox_TextChanged)
	#
	# labelVCenterFQDNOrIPAddre
	#
	$labelVCenterFQDNOrIPAddre.AutoSize = $True
	$labelVCenterFQDNOrIPAddre.Location = '9, 55'
	$labelVCenterFQDNOrIPAddre.Name = 'labelVCenterFQDNOrIPAddre'
	$labelVCenterFQDNOrIPAddre.Size = '153, 17'
	$labelVCenterFQDNOrIPAddre.TabIndex = 0
	$labelVCenterFQDNOrIPAddre.Text = 'vCenter FQDN or IP Address:'
	$labelVCenterFQDNOrIPAddre.UseCompatibleTextRendering = $True
	#
	# tabpageStep2
	#
	$tabpageStep2.Controls.Add($labelStep2Network)
	$tabpageStep2.Controls.Add($labelStep2Memory)
	$tabpageStep2.Controls.Add($labelStep2CPU)
	$tabpageStep2.Controls.Add($labelStep2VMName)
	$tabpageStep2.Controls.Add($listviewVMsStep2)
	$tabpageStep2.Controls.Add($buttonDeleteVMFromQueue)
	$tabpageStep2.Controls.Add($buttonAddVirtualMachine)
	$tabpageStep2.Controls.Add($labelStep2)
	$tabpageStep2.Location = '4, 22'
	$tabpageStep2.Name = 'tabpageStep2'
	$tabpageStep2.Padding = '3, 3, 3, 3'
	$tabpageStep2.Size = '504, 250'
	$tabpageStep2.TabIndex = 1
	$tabpageStep2.Text = 'Step 2 - Congifure VMs'
	$tabpageStep2.UseVisualStyleBackColor = $True
	#
	# labelStep2Network
	#
	$labelStep2Network.AutoSize = $True
	$labelStep2Network.Location = '320, 118'
	$labelStep2Network.Name = 'labelStep2Network'
	$labelStep2Network.Size = '49, 17'
	$labelStep2Network.TabIndex = 15
	$labelStep2Network.Text = 'Network:'
	$labelStep2Network.UseCompatibleTextRendering = $True
	#
	# labelStep2Memory
	#
	$labelStep2Memory.AutoSize = $True
	$labelStep2Memory.Location = '320, 97'
	$labelStep2Memory.Name = 'labelStep2Memory'
	$labelStep2Memory.Size = '48, 17'
	$labelStep2Memory.TabIndex = 14
	$labelStep2Memory.Text = 'Memory:'
	$labelStep2Memory.UseCompatibleTextRendering = $True
	#
	# labelStep2CPU
	#
	$labelStep2CPU.AutoSize = $True
	$labelStep2CPU.Location = '320, 76'
	$labelStep2CPU.Name = 'labelStep2CPU'
	$labelStep2CPU.Size = '64, 17'
	$labelStep2CPU.TabIndex = 13
	$labelStep2CPU.Text = 'CPU Count:'
	$labelStep2CPU.UseCompatibleTextRendering = $True
	#
	# labelStep2VMName
	#
	$labelStep2VMName.AutoSize = $True
	$labelStep2VMName.Location = '320, 55'
	$labelStep2VMName.Name = 'labelStep2VMName'
	$labelStep2VMName.Size = '58, 17'
	$labelStep2VMName.TabIndex = 12
	$labelStep2VMName.Text = 'VM Name:'
	$labelStep2VMName.UseCompatibleTextRendering = $True
	#
	# listviewVMsStep2
	#
	$listviewVMsStep2.FullRowSelect = $True
	$listviewVMsStep2.Location = '156, 40'
	$listviewVMsStep2.MultiSelect = $False
	$listviewVMsStep2.Name = 'listviewVMsStep2'
	$listviewVMsStep2.Size = '145, 210'
	$listviewVMsStep2.TabIndex = 11
	$listviewVMsStep2.UseCompatibleStateImageBehavior = $False
	$listviewVMsStep2.View = 'List'
	$listviewVMsStep2.add_SelectedIndexChanged($listviewVMsStep2_SelectedIndexChanged)
	#
	# buttonDeleteVMFromQueue
	#
	$buttonDeleteVMFromQueue.Enabled = $False
	$buttonDeleteVMFromQueue.Location = '18, 122'
	$buttonDeleteVMFromQueue.Name = 'buttonDeleteVMFromQueue'
	$buttonDeleteVMFromQueue.Size = '123, 23'
	$buttonDeleteVMFromQueue.TabIndex = 10
	$buttonDeleteVMFromQueue.Text = 'Delete VM from Queue'
	$buttonDeleteVMFromQueue.UseCompatibleTextRendering = $True
	$buttonDeleteVMFromQueue.UseVisualStyleBackColor = $True
	$buttonDeleteVMFromQueue.add_Click($buttonDeleteVMFromQueue_Click)
	#
	# buttonAddVirtualMachine
	#
	$buttonAddVirtualMachine.Location = '18, 78'
	$buttonAddVirtualMachine.Name = 'buttonAddVirtualMachine'
	$buttonAddVirtualMachine.Size = '123, 23'
	$buttonAddVirtualMachine.TabIndex = 8
	$buttonAddVirtualMachine.Text = 'Add Virtual Machine'
	$buttonAddVirtualMachine.UseCompatibleTextRendering = $True
	$buttonAddVirtualMachine.UseVisualStyleBackColor = $True
	$buttonAddVirtualMachine.add_Click($buttonAddVirtualMachine_Click)
	#
	# labelStep2
	#
	$labelStep2.AutoSize = $True
	$labelStep2.Font = 'Microsoft Sans Serif, 12pt, style=Bold'
	$labelStep2.Location = '18, 13'
	$labelStep2.Name = 'labelStep2'
	$labelStep2.Size = '358, 24'
	$labelStep2.TabIndex = 4
	$labelStep2.Text = 'Step 2: Press the ''Add Virtual Machine'' button.'
	$labelStep2.UseCompatibleTextRendering = $True
	#
	# tabpageStep3
	#
	$tabpageStep3.Controls.Add($treeviewVMListStep3)
	$tabpageStep3.Controls.Add($panel6)
	$tabpageStep3.Location = '4, 22'
	$tabpageStep3.Name = 'tabpageStep3'
	$tabpageStep3.Size = '504, 250'
	$tabpageStep3.TabIndex = 4
	$tabpageStep3.Text = 'Step 3 - Optional VM Config'
	$tabpageStep3.UseVisualStyleBackColor = $True
	#
	# treeviewVMListStep3
	#
	$treeviewVMListStep3.Location = '3, 0'
	$treeviewVMListStep3.Name = 'treeviewVMListStep3'
	$treeviewVMListStep3.Size = '164, 247'
	$treeviewVMListStep3.TabIndex = 26
	$treeviewVMListStep3.add_AfterSelect($treeviewVMListStep3_AfterSelect)
	#
	# panel6
	#
	$panel6.Controls.Add($checkboxUseKMS)
	$panel6.Controls.Add($maskedtextboxOSKey)
	$panel6.Controls.Add($labelOSProductKey)
	$panel6.Controls.Add($labelVMStep3)
	$panel6.Controls.Add($buttonVNICAdd)
	$panel6.Controls.Add($labelVNICConfig)
	$panel6.Controls.Add($buttonVDiskAdd)
	$panel6.Controls.Add($labelVDiskConfig)
	$panel6.Controls.Add($labelOptionalConfig)
	$panel6.BorderStyle = 'Fixed3D'
	$panel6.Location = '187, 3'
	$panel6.Name = 'panel6'
	$panel6.Size = '314, 244'
	$panel6.TabIndex = 25
	#
	# checkboxUseKMS
	#
	$checkboxUseKMS.Location = '133, 176'
	$checkboxUseKMS.Name = 'checkboxUseKMS'
	$checkboxUseKMS.Size = '114, 24'
	$checkboxUseKMS.TabIndex = 38
	$checkboxUseKMS.Text = 'Use KMS Server'
	$checkboxUseKMS.UseCompatibleTextRendering = $True
	$checkboxUseKMS.UseVisualStyleBackColor = $True
	$checkboxUseKMS.add_CheckedChanged($checkboxUseKMS_CheckedChanged)
	#
	# maskedtextboxOSKey
	#
	$maskedtextboxOSKey.Location = '133, 140'
	$maskedtextboxOSKey.Mask = 'AAAAA-AAAAA-AAAAA-AAAAA-AAAAA'
	$maskedtextboxOSKey.Name = 'maskedtextboxOSKey'
	$maskedtextboxOSKey.Size = '176, 20'
	$maskedtextboxOSKey.TabIndex = 37
	#
	# labelOSProductKey
	#
	$labelOSProductKey.AutoSize = $True
	$labelOSProductKey.Location = '10, 143'
	$labelOSProductKey.Name = 'labelOSProductKey'
	$labelOSProductKey.Size = '88, 17'
	$labelOSProductKey.TabIndex = 36
	$labelOSProductKey.Text = 'OS Product Key:'
	$labelOSProductKey.UseCompatibleTextRendering = $True
	#
	# labelVMStep3
	#
	$labelVMStep3.AutoSize = $True
	$labelVMStep3.Font = 'Microsoft Sans Serif, 10pt, style=Bold'
	$labelVMStep3.Location = '10, 2'
	$labelVMStep3.Name = 'labelVMStep3'
	$labelVMStep3.Size = '30, 20'
	$labelVMStep3.TabIndex = 35
	$labelVMStep3.Text = 'VM:'
	$labelVMStep3.UseCompatibleTextRendering = $True
	#
	# buttonVNICAdd
	#
	$buttonVNICAdd.Location = '188, 102'
	$buttonVNICAdd.Name = 'buttonVNICAdd'
	$buttonVNICAdd.Size = '121, 23'
	$buttonVNICAdd.TabIndex = 4
	$buttonVNICAdd.Text = 'Network &Adapters'
	$buttonVNICAdd.UseCompatibleTextRendering = $True
	$buttonVNICAdd.UseVisualStyleBackColor = $True
	$buttonVNICAdd.add_Click($buttonVNICAdd_Click)
	#
	# labelVNICConfig
	#
	$labelVNICConfig.AutoSize = $True
	$labelVNICConfig.Location = '10, 108'
	$labelVNICConfig.Name = 'labelVNICConfig'
	$labelVNICConfig.Size = '166, 17'
	$labelVNICConfig.TabIndex = 3
	$labelVNICConfig.Text = 'Add/Remove Network Adapters:'
	$labelVNICConfig.UseCompatibleTextRendering = $True
	#
	# buttonVDiskAdd
	#
	$buttonVDiskAdd.Location = '188, 69'
	$buttonVDiskAdd.Name = 'buttonVDiskAdd'
	$buttonVDiskAdd.Size = '121, 23'
	$buttonVDiskAdd.TabIndex = 2
	$buttonVDiskAdd.Text = '&Virtual Disks'
	$buttonVDiskAdd.UseCompatibleTextRendering = $True
	$buttonVDiskAdd.UseVisualStyleBackColor = $True
	$buttonVDiskAdd.add_Click($buttonVDiskAdd_Click)
	#
	# labelVDiskConfig
	#
	$labelVDiskConfig.AutoSize = $True
	$labelVDiskConfig.Location = '10, 74'
	$labelVDiskConfig.Name = 'labelVDiskConfig'
	$labelVDiskConfig.Size = '133, 17'
	$labelVDiskConfig.TabIndex = 1
	$labelVDiskConfig.Text = 'Add/Remove Virtual Disk:'
	$labelVDiskConfig.UseCompatibleTextRendering = $True
	#
	# labelOptionalConfig
	#
	$labelOptionalConfig.AutoSize = $True
	$labelOptionalConfig.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelOptionalConfig.Location = '10, 40'
	$labelOptionalConfig.Name = 'labelOptionalConfig'
	$labelOptionalConfig.Size = '142, 17'
	$labelOptionalConfig.TabIndex = 0
	$labelOptionalConfig.Text = 'Optional VM Configuration'
	$labelOptionalConfig.UseCompatibleTextRendering = $True
	#
	# tabpageStep4
	#
	$tabpageStep4.Controls.Add($treeviewVMListStep4)
	$tabpageStep4.Controls.Add($panel7)
	$tabpageStep4.Location = '4, 22'
	$tabpageStep4.Name = 'tabpageStep4'
	$tabpageStep4.Size = '504, 250'
	$tabpageStep4.TabIndex = 2
	$tabpageStep4.Text = 'Step 4 - Customize OS'
	$tabpageStep4.UseVisualStyleBackColor = $True
	#
	# treeviewVMListStep4
	#
	$treeviewVMListStep4.Location = '0, 0'
	$treeviewVMListStep4.Name = 'treeviewVMListStep4'
	$treeviewVMListStep4.Size = '164, 250'
	$treeviewVMListStep4.TabIndex = 27
	$treeviewVMListStep4.add_AfterSelect($treeviewVMListStep4_AfterSelect)
	#
	# panel7
	#
	$panel7.Controls.Add($labelVMNameStep4)
	$panel7.Controls.Add($labelOSConfig)
	$panel7.Controls.Add($labelOK2)
	$panel7.Controls.Add($comboboxTimezone)
	$panel7.Controls.Add($labelTimezone)
	$panel7.Controls.Add($labelOK1)
	$panel7.Controls.Add($buttonSetAdminPassword)
	$panel7.Controls.Add($labelAdministratorPassword)
	$panel7.Controls.Add($buttonAddLocalUsers)
	$panel7.Controls.Add($buttonDomainWorkgroup)
	$panel7.Controls.Add($buttonOpenFeatureSelection)
	$panel7.Controls.Add($labelSelectRoles)
	$panel7.Controls.Add($labelSelectFeatures)
	$panel7.Controls.Add($buttonOpenRolesSelection)
	$panel7.BorderStyle = 'Fixed3D'
	$panel7.Location = '185, 0'
	$panel7.Name = 'panel7'
	$panel7.Size = '319, 250'
	$panel7.TabIndex = 0
	#
	# labelVMNameStep4
	#
	$labelVMNameStep4.AutoSize = $True
	$labelVMNameStep4.Font = 'Microsoft Sans Serif, 10pt, style=Bold'
	$labelVMNameStep4.Location = '12, 4'
	$labelVMNameStep4.Name = 'labelVMNameStep4'
	$labelVMNameStep4.Size = '30, 20'
	$labelVMNameStep4.TabIndex = 34
	$labelVMNameStep4.Text = 'VM:'
	$labelVMNameStep4.UseCompatibleTextRendering = $True
	#
	# labelOSConfig
	#
	$labelOSConfig.AutoSize = $True
	$labelOSConfig.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelOSConfig.Location = '12, 34'
	$labelOSConfig.Name = 'labelOSConfig'
	$labelOSConfig.Size = '172, 17'
	$labelOSConfig.TabIndex = 33
	$labelOSConfig.Text = 'Operating System Configuration'
	$labelOSConfig.UseCompatibleTextRendering = $True
	#
	# labelOK2
	#
	$labelOK2.AutoSize = $True
	$labelOK2.Font = 'Comic Sans MS, 10.125pt, style=Bold'
	$labelOK2.ForeColor = 'Green'
	$labelOK2.Location = '139, 184'
	$labelOK2.Name = 'labelOK2'
	$labelOK2.Size = '28, 24'
	$labelOK2.TabIndex = 32
	$labelOK2.Text = 'OK!'
	$labelOK2.UseCompatibleTextRendering = $True
	$labelOK2.Visible = $False
	#
	# comboboxTimezone
	#
	$comboboxTimezone.DropDownStyle = 'DropDownList'
	$comboboxTimezone.FormattingEnabled = $True
	$comboboxTimezone.Location = '235, 105'
	$comboboxTimezone.Name = 'comboboxTimezone'
	$comboboxTimezone.Size = '63, 21'
	$comboboxTimezone.TabIndex = 31
	#
	# labelTimezone
	#
	$labelTimezone.AutoSize = $True
	$labelTimezone.Location = '168, 110'
	$labelTimezone.Name = 'labelTimezone'
	$labelTimezone.Size = '61, 17'
	$labelTimezone.TabIndex = 30
	$labelTimezone.Text = 'Time Zone:'
	$labelTimezone.UseCompatibleTextRendering = $True
	#
	# labelOK1
	#
	$labelOK1.AutoSize = $True
	$labelOK1.Font = 'Comic Sans MS, 10.125pt, style=Bold'
	$labelOK1.ForeColor = 'Green'
	$labelOK1.Location = '279, 146'
	$labelOK1.Name = 'labelOK1'
	$labelOK1.Size = '28, 24'
	$labelOK1.TabIndex = 29
	$labelOK1.Text = 'OK!'
	$labelOK1.UseCompatibleTextRendering = $True
	$labelOK1.Visible = $False
	#
	# buttonSetAdminPassword
	#
	$buttonSetAdminPassword.Location = '197, 146'
	$buttonSetAdminPassword.Name = 'buttonSetAdminPassword'
	$buttonSetAdminPassword.Size = '75, 23'
	$buttonSetAdminPassword.TabIndex = 28
	$buttonSetAdminPassword.Text = 'Set'
	$buttonSetAdminPassword.UseCompatibleTextRendering = $True
	$buttonSetAdminPassword.UseVisualStyleBackColor = $True
	$buttonSetAdminPassword.add_Click($buttonSetAdminPassword_Click)
	#
	# labelAdministratorPassword
	#
	$labelAdministratorPassword.AutoSize = $True
	$labelAdministratorPassword.Location = '12, 153'
	$labelAdministratorPassword.Name = 'labelAdministratorPassword'
	$labelAdministratorPassword.Size = '184, 17'
	$labelAdministratorPassword.TabIndex = 27
	$labelAdministratorPassword.Text = 'Administrator Password (Required):'
	$labelAdministratorPassword.UseCompatibleTextRendering = $True
	#
	# buttonAddLocalUsers
	#
	$buttonAddLocalUsers.Location = '168, 67'
	$buttonAddLocalUsers.Name = 'buttonAddLocalUsers'
	$buttonAddLocalUsers.Size = '119, 23'
	$buttonAddLocalUsers.TabIndex = 26
	$buttonAddLocalUsers.Text = 'Add Local Users'
	$buttonAddLocalUsers.UseCompatibleTextRendering = $True
	$buttonAddLocalUsers.UseVisualStyleBackColor = $True
	$buttonAddLocalUsers.add_Click($buttonAddLocalUsers_Click)
	#
	# buttonDomainWorkgroup
	#
	$buttonDomainWorkgroup.Location = '12, 185'
	$buttonDomainWorkgroup.Name = 'buttonDomainWorkgroup'
	$buttonDomainWorkgroup.Size = '119, 23'
	$buttonDomainWorkgroup.TabIndex = 25
	$buttonDomainWorkgroup.Text = 'Domain/Workgroup'
	$buttonDomainWorkgroup.UseCompatibleTextRendering = $True
	$buttonDomainWorkgroup.UseVisualStyleBackColor = $True
	$buttonDomainWorkgroup.add_Click($buttonDomainWorkgroup_Click)
	#
	# buttonOpenFeatureSelection
	#
	$buttonOpenFeatureSelection.Enabled = $False
	$buttonOpenFeatureSelection.Location = '98, 105'
	$buttonOpenFeatureSelection.Name = 'buttonOpenFeatureSelection'
	$buttonOpenFeatureSelection.Size = '57, 23'
	$buttonOpenFeatureSelection.TabIndex = 24
	$buttonOpenFeatureSelection.Text = 'Open...'
	$buttonOpenFeatureSelection.UseCompatibleTextRendering = $True
	$buttonOpenFeatureSelection.UseVisualStyleBackColor = $True
	#
	# labelSelectRoles
	#
	$labelSelectRoles.AutoSize = $True
	$labelSelectRoles.Location = '12, 113'
	$labelSelectRoles.Name = 'labelSelectRoles'
	$labelSelectRoles.Size = '87, 17'
	$labelSelectRoles.TabIndex = 23
	$labelSelectRoles.Text = 'Select Features:'
	$labelSelectRoles.UseCompatibleTextRendering = $True
	#
	# labelSelectFeatures
	#
	$labelSelectFeatures.AutoSize = $True
	$labelSelectFeatures.Location = '12, 72'
	$labelSelectFeatures.Name = 'labelSelectFeatures'
	$labelSelectFeatures.Size = '71, 17'
	$labelSelectFeatures.TabIndex = 21
	$labelSelectFeatures.Text = 'Select Roles:'
	$labelSelectFeatures.UseCompatibleTextRendering = $True
	#
	# buttonOpenRolesSelection
	#
	$buttonOpenRolesSelection.Location = '98, 67'
	$buttonOpenRolesSelection.Name = 'buttonOpenRolesSelection'
	$buttonOpenRolesSelection.Size = '57, 23'
	$buttonOpenRolesSelection.TabIndex = 22
	$buttonOpenRolesSelection.Text = 'Open...'
	$buttonOpenRolesSelection.UseCompatibleTextRendering = $True
	$buttonOpenRolesSelection.UseVisualStyleBackColor = $True
	$buttonOpenRolesSelection.add_Click($buttonOpenRolesSelection_Click)
	#
	# tabpageStep5
	#
	$tabpageStep5.Location = '4, 22'
	$tabpageStep5.Name = 'tabpageStep5'
	$tabpageStep5.Padding = '3, 3, 3, 3'
	$tabpageStep5.Size = '504, 250'
	$tabpageStep5.TabIndex = 5
	$tabpageStep5.Text = 'Step 5 - Review'
	$tabpageStep5.UseVisualStyleBackColor = $True
	#
	# tabpageStep6
	#
	$tabpageStep6.Controls.Add($buttonCustomizeOS)
	$tabpageStep6.Controls.Add($buttonBuildVMs)
	$tabpageStep6.Location = '4, 22'
	$tabpageStep6.Name = 'tabpageStep6'
	$tabpageStep6.Padding = '3, 3, 3, 3'
	$tabpageStep6.Size = '504, 250'
	$tabpageStep6.TabIndex = 3
	$tabpageStep6.Text = 'Step 6 - Execute'
	$tabpageStep6.UseVisualStyleBackColor = $True
	#
	# buttonCustomizeOS
	#
	$buttonCustomizeOS.Location = '208, 118'
	$buttonCustomizeOS.Name = 'buttonCustomizeOS'
	$buttonCustomizeOS.Size = '75, 23'
	$buttonCustomizeOS.TabIndex = 6
	$buttonCustomizeOS.Text = 'Customize OS'
	$buttonCustomizeOS.UseCompatibleTextRendering = $True
	$buttonCustomizeOS.UseVisualStyleBackColor = $True
	$buttonCustomizeOS.add_Click($buttonCustomizeOS_Click)
	#
	# buttonBuildVMs
	#
	$buttonBuildVMs.Location = '208, 33'
	$buttonBuildVMs.Name = 'buttonBuildVMs'
	$buttonBuildVMs.Size = '75, 23'
	$buttonBuildVMs.TabIndex = 5
	$buttonBuildVMs.Text = 'Build VMs'
	$buttonBuildVMs.UseCompatibleTextRendering = $True
	$buttonBuildVMs.UseVisualStyleBackColor = $True
	$buttonBuildVMs.add_Click($buttonBuildVMs_Click)
	#
	# buttonNext
	#
	$buttonNext.Anchor = 'Bottom, Right'
	$buttonNext.Enabled = $False
	$buttonNext.Location = '288, 294'
	$buttonNext.Name = 'buttonNext'
	$buttonNext.Size = '75, 23'
	$buttonNext.TabIndex = 2
	$buttonNext.Text = '&Next >'
	$buttonNext.UseCompatibleTextRendering = $True
	$buttonNext.UseVisualStyleBackColor = $True
	$buttonNext.add_Click($buttonNext_Click)
	$tabpageStep6.ResumeLayout()
	$panel7.ResumeLayout()
	$tabpageStep4.ResumeLayout()
	$panel6.ResumeLayout()
	$tabpageStep3.ResumeLayout()
	$tabpageStep2.ResumeLayout()
	$panel1.ResumeLayout()
	$tabpageStep1.ResumeLayout()
	$tabcontrolWizard.ResumeLayout()
	$formVMAutomationTool.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formVMAutomationTool.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formVMAutomationTool.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formVMAutomationTool.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formVMAutomationTool.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formVMAutomationTool.ShowDialog()

}
#endregion Source: MainForm.psf

#region Source: Functions\InstallPreReqs.ps1
function Invoke-InstallPreReqs_ps1
{
	<#	
		.NOTES
		===========================================================================
		 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2018 v5.5.150
		 Created on:   	4/9/2019 5:13 PM
		 Created by:   	andy-user
		 Organization: 	
		 Filename:     	
		===========================================================================
		.DESCRIPTION
			A description of the file.
	#>
	
	function Install-PreReqs
	{
		try
		{
			# Check if the PSWindowsUpdate PoSH module is installed. If it is not, install it.
			
			if (-not (Get-InstalledModule -Name "VMware.PowerCLI" -ErrorAction SilentlyContinue))
			{
				try
				{
					Set-ExecutionPolicy Unrestricted -Force
					Write-Host "Installing PSWindowsUpdate and PendingReboot modules on" $computer -ForegroundColor Yellow
					Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force
					Set-PSRepository -Name "PSGallery" -InstallationPolicy Trusted
					Install-Module -Name "VMWare.PowerCLI" -Force -Scope AllUsers
					Install-Module -Name "PendingReboot" -Force -Scope AllUsers
					Write-Host "All required modules successfully installed." -ForegroundColor Green
					Import-Module VMware.PowerCLI
					Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -Confirm:$false
					Set-PowerCLIConfiguration -ParticipateInCeip $false -Scope AllUsers -Confirm:$false
					Import-Module PendingReboot
				}
				catch
				{
					
					Write-Host "Unable to install one or more modules. Please install manually or resolve connectivity issues." -ForegroundColor Red
				}
			}
			else
			{
				Write-Host "All required modules are already installed. Checking for module updates." -ForegroundColor Green
				try
				{
					Set-ExecutionPolicy Unrestricted -Force
					Update-Module -Name "VMware.PowerCLI" -Force -Confirm:$false -ErrorAction SilentlyContinue
					Update-Module -Name "PendingReboot" -Force -Confirm:$false -ErrorAction SilentlyContinue
					Write-Host "All required modules are up to date." -ForegroundColor Green
					Import-Module VMWare.PowerCLI
					Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -Confirm:$false
					Set-PowerCLIConfiguration -ParticipateInCeip $false -Scope AllUsers -Confirm:$false
					Import-Module PendingReboot
				}
				catch
				{
					Write-Host "Unable to update one or more modules. Please install manually or resolve connectivity issues." -ForegroundColor Red
				}
			}
			
		} # End try statement.
		catch
		{
			"Unable to execute."
		} # End catch statement.
		
	}
}
#endregion Source: InstallPreReqs.ps1

#region Source: AddVMForm.psf
function Show-AddVMForm_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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
v/8HqGRcp7QMAAA=#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formAddVM = New-Object 'System.Windows.Forms.Form'
	$buttonFormReset = New-Object 'System.Windows.Forms.Button'
	$panel5 = New-Object 'System.Windows.Forms.Panel'
	$comboboxClusters = New-Object 'System.Windows.Forms.ComboBox'
	$labelVMCluster = New-Object 'System.Windows.Forms.Label'
	$labelHostConfiguration = New-Object 'System.Windows.Forms.Label'
	$labelDataCenter = New-Object 'System.Windows.Forms.Label'
	$comboboxVMHost = New-Object 'System.Windows.Forms.ComboBox'
	$comboboxDatacenter = New-Object 'System.Windows.Forms.ComboBox'
	$labelVMHost = New-Object 'System.Windows.Forms.Label'
	$labelFolder = New-Object 'System.Windows.Forms.Label'
	$vcFolderView = New-Object 'System.Windows.Forms.TreeView'
	$buttonBuildVM = New-Object 'System.Windows.Forms.Button'
	$panel3 = New-Object 'System.Windows.Forms.Panel'
	$textboxDNS1 = New-Object 'System.Windows.Forms.TextBox'
	$labelDNS1 = New-Object 'System.Windows.Forms.Label'
	$checkboxStaticIP = New-Object 'System.Windows.Forms.CheckBox'
	$textboxDefaultGateway = New-Object 'System.Windows.Forms.TextBox'
	$labelDefaultGateway = New-Object 'System.Windows.Forms.Label'
	$textboxSubnetMask = New-Object 'System.Windows.Forms.TextBox'
	$labelSubnetMask = New-Object 'System.Windows.Forms.Label'
	$textboxIPAddress = New-Object 'System.Windows.Forms.TextBox'
	$comboboxVSwitch = New-Object 'System.Windows.Forms.ComboBox'
	$labelIPAddress = New-Object 'System.Windows.Forms.Label'
	$labelVirtualSwitch = New-Object 'System.Windows.Forms.Label'
	$labelNetworkingConfigurat = New-Object 'System.Windows.Forms.Label'
	$panel2 = New-Object 'System.Windows.Forms.Panel'
	$labelOS = New-Object 'System.Windows.Forms.Label'
	$comboboxTemplate = New-Object 'System.Windows.Forms.ComboBox'
	$labelTemplateSelect = New-Object 'System.Windows.Forms.Label'
	$labelTemplate = New-Object 'System.Windows.Forms.Label'
	$textboxVMName = New-Object 'System.Windows.Forms.TextBox'
	$labelVirtualMachineName = New-Object 'System.Windows.Forms.Label'
	$panelCompute = New-Object 'System.Windows.Forms.Panel'
	$labelCompute = New-Object 'System.Windows.Forms.Label'
	$labelMemoryGB = New-Object 'System.Windows.Forms.Label'
	$comboboxMemory = New-Object 'System.Windows.Forms.ComboBox'
	$labelNumberOfVCPUs = New-Object 'System.Windows.Forms.Label'
	$comboboxCPU = New-Object 'System.Windows.Forms.ComboBox'
	$panel1 = New-Object 'System.Windows.Forms.Panel'
	$labelVMLocation = New-Object 'System.Windows.Forms.Label'
	$labelDatastore = New-Object 'System.Windows.Forms.Label'
	$textboxDatastore = New-Object 'System.Windows.Forms.TextBox'
	$buttonSelectDatastore = New-Object 'System.Windows.Forms.Button'
	$label1 = New-Object 'System.Windows.Forms.Label'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formAddVM_Load={
		
		# Retrieve all virtual datacenters from vSphere.
		
		$datacenters = Get-Datacenter -Server $global:vcenterConnection.Name
		
		foreach ($datacenter in $datacenters)
		{
			try
			{
				$hosts = Get-VMHost -Location $datacenter.Text
				
				if ($hosts -ne $null)
				{
					Update-ComboBox -Combobox $comboboxDatacenter -items $datacenter.Name
				}
			}
			catch
			{
				[System.Windows.Forms.MessageBox]::Show("Unable to retrieve datacenters.")
			}
		}
		
		# Define the VM build queue variable.
		#$vmBuildQueue = @()
		
	}
	
	#region Control Helper Functions
	function Get-CheckedNode
	{
	<#
		.SYNOPSIS
			This function collects a list of checked nodes in a TreeView
	
		.DESCRIPTION
			This function collects a list of checked nodes in a TreeView
	
		.PARAMETER  $NodeCollection
			The collection of nodes to search
	
		.PARAMETER  $CheckedNodes
			The ArrayList that will contain the all the checked items
		
		.EXAMPLE
			$CheckedNodes = New-Object System.Collections.ArrayList
			Get-CheckedNode $treeview1.Nodes $CheckedNodes
			foreach($node in $CheckedNodes)
			{	
				Write-Host $node.Text
			}
	#>
		param (
				[ValidateNotNull()]
				[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
				[ValidateNotNull()]
				[System.Collections.ArrayList]$CheckedNodes
		)
		
		foreach ($Node in $NodeCollection)
		{
			if ($Node.Checked)
			{
				[void]$CheckedNodes.Add($Node)
			}
			Get-CheckedNode $Node.Nodes $CheckedNodes
		}
	}
	
	
	function Update-ListViewColumnSort
	{
	<#
		.SYNOPSIS
			Sort the ListView's item using the specified column.
		
		.DESCRIPTION
			Sort the ListView's item using the specified column.
			This function uses Add-Type to define a class that sort the items.
			The ListView's Tag property is used to keep track of the sorting.
		
		.PARAMETER ListView
			The ListView control to sort.
		
		.PARAMETER ColumnIndex
			The index of the column to use for sorting.
		
		.PARAMETER SortOrder
			The direction to sort the items. If not specified or set to None, it will toggle.
		
		.EXAMPLE
			Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListView]
			$ListView,
			[Parameter(Mandatory = $true)]
			[int]
			$ColumnIndex,
			[System.Windows.Forms.SortOrder]
			$SortOrder = 'None'
		)
		
		if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
		{
			return;
		}
		
		#region Define ListViewItemComparer
		try
		{
			[ListViewItemComparer] | Out-Null
		}
		catch
		{
			Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
		}
		#endregion
		
		if ($ListView.Tag -is [ListViewItemComparer])
		{
			#Toggle the Sort Order
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
				{
					$ListView.Tag.sortOrder = 'Descending'
				}
				else
				{
					$ListView.Tag.sortOrder = 'Ascending'
				}
			}
			else
			{
				$ListView.Tag.sortOrder = $SortOrder
			}
			
			$ListView.Tag.column = $ColumnIndex
			$ListView.Sort() #Sort the items
		}
		else
		{
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
			}
			
			#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
			$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
			$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
		}
	}
	
	
	function Add-ListViewItem
	{
	<#
		.SYNOPSIS
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.DESCRIPTION
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.PARAMETER ListView
			The ListView control to add the items to.
	
		.PARAMETER Items
			The object or objects you wish to load into the ListView's Items collection.
			
		.PARAMETER  ImageIndex
			The index of a predefined image in the ListView's ImageList.
		
		.PARAMETER  SubItems
			List of strings to add as Subitems.
		
		.PARAMETER Group
			The group to place the item(s) in.
		
		.PARAMETER Clear
			This switch clears the ListView's Items before adding the new item(s).
		
		.EXAMPLE
			Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
	#>
		
		Param( 
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.ListView]$ListView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Items,
		[int]$ImageIndex = -1,
		[string[]]$SubItems,
		$Group,
		[switch]$Clear)
		
		if($Clear)
		{
			$ListView.Items.Clear();
	    }
	    
	    $lvGroup = $null
	    if ($Group -is [System.Windows.Forms.ListViewGroup])
	    {
	        $lvGroup = $Group
	    }
	    elseif ($Group -is [string])
	    {
	        #$lvGroup = $ListView.Group[$Group] # Case sensitive
	        foreach ($groupItem in $ListView.Groups)
	        {
	            if ($groupItem.Name -eq $Group)
	            {
	                $lvGroup = $groupItem
	                break
	            }
	        }
	        
	        if ($null -eq $lvGroup)
	        {
	            $lvGroup = $ListView.Groups.Add($Group, $Group)
	        }
	    }
	    
		if($Items -is [Array])
		{
			$ListView.BeginUpdate()
			foreach ($item in $Items)
			{		
				$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
				#Store the object in the Tag
				$listitem.Tag = $item
				
				if($null -ne $SubItems)
				{
					$listitem.SubItems.AddRange($SubItems)
				}
				
				if($null -ne $lvGroup)
				{
					$listitem.Group = $lvGroup
				}
			}
			$ListView.EndUpdate()
		}
		else
		{
			#Add a new item to the ListView
			$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $Items
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
	}
	
	function Update-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
		
		.PARAMETER ComboBox
			The ComboBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ComboBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red" -Append
			Update-ComboBox $combobox1 "White" -Append
			Update-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Update-ComboBox $combobox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ComboBox]
			$ComboBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]
			$DisplayMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
	}
	#endregion
	
	$buttonSelectDatastore_Click={
		#TODO: Place custom script here
		if (Show-SelectDatastore_psf -eq 'OK')
		{
		}
	}
	
	$buttonBuildVM_Click = {
		
		# Here we build our paramters from the data provided.
		
		try
		{
			$object = New-Object PSObject
			
			$object | Add-Member -MemberType NoteProperty -Name "VMName" -Value $textboxVMName.Text
			$object | Add-Member -MemberType NoteProperty -Name "VM Host" -Value $comboboxVMHost.Text
			$object | Add-Member -MemberType NoteProperty -Name "Datacenter" -Value $comboboxDatacenter.Text
			$object | Add-Member -MemberType NoteProperty -Name "Datastore" -Value $textboxDatastore.Text
			$object | Add-Member -MemberType NoteProperty -Name "NumCPU" -Value $comboboxCPU.Text
			$object | Add-Member -MemberType NoteProperty -Name "Memory" -Value $comboboxMemory.Text
			$object | Add-Member -MemberType NoteProperty -Name "Network" -Value $comboboxVSwitch.Text
			$object | Add-Member -MemberType NoteProperty -Name "Template" -Value $comboboxTemplate.Text
			$object | Add-Member -MemberType NoteProperty -Name "Location" -Value $vcFolderView.SelectedNode.FullPath
			
			if ($checkboxStaticIP.Checked)
			{
				$object | Add-Member -MemberType NoteProperty -Name "IP Type" -Value "Static"
				$object | Add-Member -MemberType NoteProperty -Name "IP Address" -Value $textboxIPAddress.Text
				$object | Add-Member -MemberType NoteProperty -Name "Subnet Mask" -Value $textboxSubnetMask.Text
				$object | Add-Member -MemberType NoteProperty -Name "Default Gateway" -Value $textboxDefaultGateway.Text
				$object | Add-Member -MemberType NoteProperty -Name "Primary DNS Server" -Value $textboxDNS1.Text
			}
			else
			{
				$object | Add-Member -MemberType NoteProperty -Name "IP Type" -Value "DHCP"
				$object | Add-Member -MemberType NoteProperty -Name "IP Address" -Value ''
				$object | Add-Member -MemberType NoteProperty -Name "Subnet Mask" -Value ''
				$object | Add-Member -MemberType NoteProperty -Name "Default Gateway" -Value ''
				$object | Add-Member -MemberType NoteProperty -Name "Primary DNS Server" -Value ''
			}
			
			$allValuesSet = $true
			
			if ($object.("IP Type") -eq "Static")
			{
				# Let's check to make sure we have values in all required fields.
				
				$props = Get-Member -InputObject $object -MemberType NoteProperty
				
				foreach ($prop in $props)
				{
					$propValue = $object | Select-Object -ExpandProperty $prop.Name
					
					if (-not $propValue)
					{
						$allValuesSet = $false
					}
				}
			}
			else
			{
				$props = Get-Member -InputObject $object -MemberType NoteProperty | ?{($_.Name -ne "IP Address") -and ($_.Name -ne "Subnet Mask") -and ($_.Name -ne "Default Gateway") -and ($_.Name -ne "Primary DNS Server")}
				
				foreach ($prop in $props)
				{
					$propValue = $object | Select-Object -ExpandProperty $prop.Name
					
					if (-not $propValue)
					{
						$allValuesSet = $false
					}
				}
			}
			
			if ($allValuesSet)
			{
				$global:vmbuilds += @($object)
				$global:vmbuilds | Out-File "$ScriptDirectory\logs\addvm.log"
				
				If ($comboboxTemplate.Text -like "*2012*R2*")
				{
					$vmOSObject = New-Object PSObject
					$vmOSObject | Add-Member -MemberType NoteProperty -Name "VMName" -Value $textboxVMName.Text
					$vmOSObject | Add-Member -MemberType NoteProperty -Name "OS" -Value "Server2012R2"
					
					$global:vmOS = [System.Array]$global:vmOS + $vmOSObject
				}
				elseif ($comboboxTemplate.Text -like "*2016*")
				{
					$vmOSObject = New-Object PSObject
					$vmOSObject | Add-Member -MemberType NoteProperty -Name "VMName" -Value $textboxVMName.Text
					$vmOSObject | Add-Member -MemberType NoteProperty -Name "OS" -Value "Server2016"
					
					$global:vmOS = [System.Array]$global:vmOS + $vmOSObject
				}
				elseif ($comboboxTemplate.Text -like "*2019*")
				{
					$vmOSObject = New-Object PSObject
					$vmOSObject | Add-Member -MemberType NoteProperty -Name "VMName" -Value $textboxVMName.Text
					$vmOSObject | Add-Member -MemberType NoteProperty -Name "OS" -Value "Server2019"
					
					$global:vmOS = [System.Array]$global:vmOS + $vmOSObject
				}
				
				try
				{
					#$table = ConvertTo-DataTable -InputObject $global:vmbuilds
					#Update-DataGridView -DataGridView $datagridviewVMQueue -Item $table -AutoSizeColumns DisplayedCells
					
					$listviewVMsStep2.Items.Add($vmOSObject.VMName)
					
					Update-NavButtons		
					
				}
				catch
				{
					"Unable to load VM build queue."
				}
				
				# Update the treeview control for Step 3
				
				$treeviewVMListStep3.BeginUpdate()
				$treeviewVMListStep3.Nodes.Clear()
				
				foreach ($vm in $global:vmbuilds)
				{
					$newNode = $treeviewVMListStep3.Nodes.Add($vm.VMName)
				}
				
				$treeviewVMListStep3.EndUpdate()
				
				# Update the treeview control for step 4.
				
				$treeviewVMListStep4.BeginUpdate()
				$treeviewVMListStep4.Nodes.Clear()
				
				foreach ($vm in $global:vmbuilds)
				{
					$newNode = $treeviewVMListStep4.Nodes.Add($vm.VMName)
				}
				
				$treeviewVMListStep4.EndUpdate()
				
				$buttonDeleteVMFromQueue.Enabled = $true
				$formAddVM.Close()
			}
			else
			{
				#$formAddVM.Close()
				[System.Windows.Forms.MessageBox]::Show("All fields must be completed to continue.")
			}
			
		}
		catch
		{
			[System.Windows.Forms.MessageBox]::Show("Unable to add VM to queue.")
		}
	}
	
	$comboboxDatacenter_SelectedIndexChanged={
		
		if ($comboboxDatacenter.Text -ne '')
		{
			$clusters = Get-Cluster -Location $comboboxDatacenter.Text
			
			if ($clusters.Name -ne $null)
			{
				Update-ComboBox -combobox $comboboxClusters -Items $clusters.Name
			}
			
		}
	}
	
	$comboboxVMHost_SelectedIndexChanged={
		
		#Update the Template list
		
		$templates = Get-Template -Server $global:vcenterConnection.Name
		
		try
		{
			Update-ComboBox -Combobox $comboboxTemplate -items $templates.Name
		}
		catch
		{
			[System.Windows.Forms.MessageBox]::Show("Unable to retrieve templates.")
		}
		
		# Clear the datastore selection on change.
		$textboxDatastore.Clear()
		
		# Populate the vSwitch Combobox.
		
		$vSwitches = Get-VirtualPortGroup -Server $global:vcenterConnection.Name -Host $comboboxVMHost.SelectedItem | select Name | Sort-Object -Property Name
		Update-ComboBox -ComboBox $comboboxVSwitch -Items $vSwitches.Name
		
		$buttonSelectDatastore.Enabled = $true
		
		# Populate the folder view.
		
		$vcFolderView.Nodes.Clear()
		
		$vcFolderView.BeginUpdate()
		
		$rootNode = $vcFolderView.Nodes.Add("$($comboboxDatacenter.Text)")
		
		$folders = (Get-Folder -Location $comboboxDatacenter.Text | ?{ ($_.Type -eq "VM") -and ($_.Parent -like "VM") } | Sort-Object)
		
		#$folders | Out-File "$ScriptDirectory\folders.log"
		
		foreach ($folder in $folders)
		{
			$folderNode = $rootNode.Nodes.Add($folder.Name)
			$folderNode.Checked = $false
		}
		
		$vcFolderView.ExpandAll()
		$vcFolderView.EndUpdate()
	}
	
	$comboboxTemplate_SelectedIndexChanged={
		
		If ($comboboxTemplate.Text -like "*2012*R2*")
		{
			$labelOS.Text = "Operating System: Windows Server 2012 R2"
			$comboboxVSwitch.Enabled = $true		
		}
		elseif ($comboboxTemplate.Text -like "*2016*")
		{
			$labelOS.Text = "Operating System: Windows Server 2016"
			$comboboxVSwitch.Enabled = $true
		}
		elseif ($comboboxTemplate.Text -like "*2019*")
		{
			$labelOS.Text = "Operating System: Windows Server 2019"
			$comboboxVSwitch.Enabled = $true
		}
		
	}
	
	
	$checkboxStaticIP_CheckedChanged={
		
		if ($checkboxStaticIP.Checked)
		{
			$textboxIPAddress.Enabled = $true
			$textboxSubnetMask.Enabled = $true
			$textboxDefaultGateway.Enabled = $true
			$textboxDNS1.Enabled = $true
		}
		else
		{
			$textboxIPAddress.Enabled = $false
			$textboxSubnetMask.Enabled = $false
			$textboxDefaultGateway.Enabled = $false
			$textboxDNS1.Enabled = $false
		}
	}
	
	
	$comboboxClusters_SelectedIndexChanged={
		
		$hosts = Get-VMHost -Location $comboboxClusters.Text
		
		if ($hosts.Name -ne $null)
		{
			Update-ComboBox -combobox $comboboxVMHost -Items $hosts.Name
		}
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formAddVM.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:AddVMForm_comboboxClusters = $comboboxClusters.Text
		$script:AddVMForm_comboboxClusters_SelectedItem = $comboboxClusters.SelectedItem
		$script:AddVMForm_comboboxVMHost = $comboboxVMHost.Text
		$script:AddVMForm_comboboxVMHost_SelectedItem = $comboboxVMHost.SelectedItem
		$script:AddVMForm_comboboxDatacenter = $comboboxDatacenter.Text
		$script:AddVMForm_comboboxDatacenter_SelectedItem = $comboboxDatacenter.SelectedItem
		if($vcFolderView.SelectedNode -ne $null)
		{
			$script:AddVMForm_vcFolderView = $vcFolderView.SelectedNode.Text
		}
		else
		{
			$script:AddVMForm_vcFolderView = $null
		}
		$script:AddVMForm_textboxDNS1 = $textboxDNS1.Text
		$script:AddVMForm_checkboxStaticIP = $checkboxStaticIP.Checked
		$script:AddVMForm_textboxDefaultGateway = $textboxDefaultGateway.Text
		$script:AddVMForm_textboxSubnetMask = $textboxSubnetMask.Text
		$script:AddVMForm_textboxIPAddress = $textboxIPAddress.Text
		$script:AddVMForm_comboboxVSwitch = $comboboxVSwitch.Text
		$script:AddVMForm_comboboxVSwitch_SelectedItem = $comboboxVSwitch.SelectedItem
		$script:AddVMForm_comboboxTemplate = $comboboxTemplate.Text
		$script:AddVMForm_comboboxTemplate_SelectedItem = $comboboxTemplate.SelectedItem
		$script:AddVMForm_textboxVMName = $textboxVMName.Text
		$script:AddVMForm_comboboxMemory = $comboboxMemory.Text
		$script:AddVMForm_comboboxMemory_SelectedItem = $comboboxMemory.SelectedItem
		$script:AddVMForm_comboboxCPU = $comboboxCPU.Text
		$script:AddVMForm_comboboxCPU_SelectedItem = $comboboxCPU.SelectedItem
		$script:AddVMForm_textboxDatastore = $textboxDatastore.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonFormReset.remove_Click($formAddVM_Load)
			$comboboxClusters.remove_SelectedIndexChanged($comboboxClusters_SelectedIndexChanged)
			$comboboxVMHost.remove_SelectedIndexChanged($comboboxVMHost_SelectedIndexChanged)
			$comboboxDatacenter.remove_SelectedIndexChanged($comboboxDatacenter_SelectedIndexChanged)
			$buttonBuildVM.remove_Click($buttonBuildVM_Click)
			$checkboxStaticIP.remove_CheckedChanged($checkboxStaticIP_CheckedChanged)
			$comboboxTemplate.remove_SelectedIndexChanged($comboboxTemplate_SelectedIndexChanged)
			$buttonSelectDatastore.remove_Click($buttonSelectDatastore_Click)
			$formAddVM.remove_Load($formAddVM_Load)
			$formAddVM.remove_Load($Form_StateCorrection_Load)
			$formAddVM.remove_Closing($Form_StoreValues_Closing)
			$formAddVM.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formAddVM.SuspendLayout()
	$panel5.SuspendLayout()
	$panel3.SuspendLayout()
	$panel2.SuspendLayout()
	$panelCompute.SuspendLayout()
	$panel1.SuspendLayout()
	#
	# formAddVM
	#
	$formAddVM.Controls.Add($buttonFormReset)
	$formAddVM.Controls.Add($panel5)
	$formAddVM.Controls.Add($labelFolder)
	$formAddVM.Controls.Add($vcFolderView)
	$formAddVM.Controls.Add($buttonBuildVM)
	$formAddVM.Controls.Add($panel3)
	$formAddVM.Controls.Add($panel2)
	$formAddVM.Controls.Add($textboxVMName)
	$formAddVM.Controls.Add($labelVirtualMachineName)
	$formAddVM.Controls.Add($panelCompute)
	$formAddVM.Controls.Add($panel1)
	$formAddVM.AutoScaleDimensions = '6, 13'
	$formAddVM.AutoScaleMode = 'Font'
	$formAddVM.ClientSize = '569, 527'
	$formAddVM.FormBorderStyle = 'SizableToolWindow'
	$formAddVM.Margin = '6, 6, 6, 6'
	$formAddVM.Name = 'formAddVM'
	$formAddVM.StartPosition = 'CenterParent'
	$formAddVM.Text = 'Add Virtual Machine'
	$formAddVM.add_Load($formAddVM_Load)
	#
	# buttonFormReset
	#
	$buttonFormReset.Location = '393, 479'
	$buttonFormReset.Name = 'buttonFormReset'
	$buttonFormReset.Size = '75, 39'
	$buttonFormReset.TabIndex = 23
	$buttonFormReset.Text = 'Reset Form'
	$buttonFormReset.UseCompatibleTextRendering = $True
	$buttonFormReset.UseVisualStyleBackColor = $True
	$buttonFormReset.add_Click($formAddVM_Load)
	#
	# panel5
	#
	$panel5.Controls.Add($comboboxClusters)
	$panel5.Controls.Add($labelVMCluster)
	$panel5.Controls.Add($labelHostConfiguration)
	$panel5.Controls.Add($labelDataCenter)
	$panel5.Controls.Add($comboboxVMHost)
	$panel5.Controls.Add($comboboxDatacenter)
	$panel5.Controls.Add($labelVMHost)
	$panel5.BorderStyle = 'Fixed3D'
	$panel5.Location = '266, 46'
	$panel5.Name = 'panel5'
	$panel5.Size = '296, 151'
	$panel5.TabIndex = 2
	#
	# comboboxClusters
	#
	$comboboxClusters.DropDownStyle = 'DropDownList'
	$comboboxClusters.FormattingEnabled = $True
	$comboboxClusters.Location = '77, 73'
	$comboboxClusters.Name = 'comboboxClusters'
	$comboboxClusters.Size = '193, 21'
	$comboboxClusters.TabIndex = 9
	$comboboxClusters.add_SelectedIndexChanged($comboboxClusters_SelectedIndexChanged)
	#
	# labelVMCluster
	#
	$labelVMCluster.AutoSize = $True
	$labelVMCluster.Location = '12, 73'
	$labelVMCluster.Name = 'labelVMCluster'
	$labelVMCluster.Size = '43, 17'
	$labelVMCluster.TabIndex = 0
	$labelVMCluster.Text = 'Cluster:'
	$labelVMCluster.UseCompatibleTextRendering = $True
	#
	# labelHostConfiguration
	#
	$labelHostConfiguration.AutoSize = $True
	$labelHostConfiguration.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelHostConfiguration.Location = '12, 13'
	$labelHostConfiguration.Name = 'labelHostConfiguration'
	$labelHostConfiguration.Size = '102, 17'
	$labelHostConfiguration.TabIndex = 0
	$labelHostConfiguration.Text = 'Host Configuration'
	$labelHostConfiguration.UseCompatibleTextRendering = $True
	#
	# labelDataCenter
	#
	$labelDataCenter.AutoSize = $True
	$labelDataCenter.Location = '12, 40'
	$labelDataCenter.Name = 'labelDataCenter'
	$labelDataCenter.Size = '63, 17'
	$labelDataCenter.TabIndex = 0
	$labelDataCenter.Text = 'Datacenter:'
	$labelDataCenter.UseCompatibleTextRendering = $True
	#
	# comboboxVMHost
	#
	$comboboxVMHost.DropDownStyle = 'DropDownList'
	$comboboxVMHost.FormattingEnabled = $True
	$comboboxVMHost.Location = '77, 106'
	$comboboxVMHost.Name = 'comboboxVMHost'
	$comboboxVMHost.Size = '193, 21'
	$comboboxVMHost.TabIndex = 10
	$comboboxVMHost.add_SelectedIndexChanged($comboboxVMHost_SelectedIndexChanged)
	#
	# comboboxDatacenter
	#
	$comboboxDatacenter.DropDownStyle = 'DropDownList'
	$comboboxDatacenter.FormattingEnabled = $True
	$comboboxDatacenter.Location = '77, 37'
	$comboboxDatacenter.Name = 'comboboxDatacenter'
	$comboboxDatacenter.Size = '193, 21'
	$comboboxDatacenter.TabIndex = 8
	$comboboxDatacenter.add_SelectedIndexChanged($comboboxDatacenter_SelectedIndexChanged)
	#
	# labelVMHost
	#
	$labelVMHost.AutoSize = $True
	$labelVMHost.Location = '12, 109'
	$labelVMHost.Name = 'labelVMHost'
	$labelVMHost.Size = '51, 17'
	$labelVMHost.TabIndex = 0
	$labelVMHost.Text = 'VM Host:'
	$labelVMHost.UseCompatibleTextRendering = $True
	#
	# labelFolder
	#
	$labelFolder.AutoSize = $True
	$labelFolder.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelFolder.Location = '266, 296'
	$labelFolder.Name = 'labelFolder'
	$labelFolder.Size = '58, 17'
	$labelFolder.TabIndex = 0
	$labelFolder.Text = 'VM Folder'
	$labelFolder.UseCompatibleTextRendering = $True
	#
	# vcFolderView
	#
	$vcFolderView.Location = '266, 316'
	$vcFolderView.Name = 'vcFolderView'
	$vcFolderView.Size = '296, 157'
	$vcFolderView.TabIndex = 21
	#
	# buttonBuildVM
	#
	$buttonBuildVM.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$buttonBuildVM.Location = '474, 479'
	$buttonBuildVM.Name = 'buttonBuildVM'
	$buttonBuildVM.Size = '88, 39'
	$buttonBuildVM.TabIndex = 22
	$buttonBuildVM.Text = 'Add VM to build queue!'
	$buttonBuildVM.UseCompatibleTextRendering = $True
	$buttonBuildVM.UseVisualStyleBackColor = $True
	$buttonBuildVM.add_Click($buttonBuildVM_Click)
	#
	# panel3
	#
	$panel3.Controls.Add($textboxDNS1)
	$panel3.Controls.Add($labelDNS1)
	$panel3.Controls.Add($checkboxStaticIP)
	$panel3.Controls.Add($textboxDefaultGateway)
	$panel3.Controls.Add($labelDefaultGateway)
	$panel3.Controls.Add($textboxSubnetMask)
	$panel3.Controls.Add($labelSubnetMask)
	$panel3.Controls.Add($textboxIPAddress)
	$panel3.Controls.Add($comboboxVSwitch)
	$panel3.Controls.Add($labelIPAddress)
	$panel3.Controls.Add($labelVirtualSwitch)
	$panel3.Controls.Add($labelNetworkingConfigurat)
	$panel3.BorderStyle = 'Fixed3D'
	$panel3.Location = '12, 266'
	$panel3.Name = 'panel3'
	$panel3.Size = '230, 207'
	$panel3.TabIndex = 5
	#
	# textboxDNS1
	#
	$textboxDNS1.Enabled = $False
	$textboxDNS1.Location = '124, 174'
	$textboxDNS1.Name = 'textboxDNS1'
	$textboxDNS1.Size = '92, 20'
	$textboxDNS1.TabIndex = 23
	#
	# labelDNS1
	#
	$labelDNS1.AutoSize = $True
	$labelDNS1.Location = '10, 174'
	$labelDNS1.Name = 'labelDNS1'
	$labelDNS1.Size = '110, 17'
	$labelDNS1.TabIndex = 25
	$labelDNS1.Text = 'Primary DNS Server:'
	$labelDNS1.UseCompatibleTextRendering = $True
	#
	# checkboxStaticIP
	#
	$checkboxStaticIP.Location = '10, 52'
	$checkboxStaticIP.Name = 'checkboxStaticIP'
	$checkboxStaticIP.Size = '137, 24'
	$checkboxStaticIP.TabIndex = 19
	$checkboxStaticIP.Text = 'Use Static IP Settings'
	$checkboxStaticIP.UseCompatibleTextRendering = $True
	$checkboxStaticIP.UseVisualStyleBackColor = $True
	$checkboxStaticIP.add_CheckedChanged($checkboxStaticIP_CheckedChanged)
	#
	# textboxDefaultGateway
	#
	$textboxDefaultGateway.Enabled = $False
	$textboxDefaultGateway.Location = '124, 145'
	$textboxDefaultGateway.Name = 'textboxDefaultGateway'
	$textboxDefaultGateway.Size = '92, 20'
	$textboxDefaultGateway.TabIndex = 22
	#
	# labelDefaultGateway
	#
	$labelDefaultGateway.AutoSize = $True
	$labelDefaultGateway.Location = '10, 145'
	$labelDefaultGateway.Name = 'labelDefaultGateway'
	$labelDefaultGateway.Size = '91, 17'
	$labelDefaultGateway.TabIndex = 22
	$labelDefaultGateway.Text = 'Default Gateway:'
	$labelDefaultGateway.UseCompatibleTextRendering = $True
	#
	# textboxSubnetMask
	#
	$textboxSubnetMask.Enabled = $False
	$textboxSubnetMask.Location = '124, 115'
	$textboxSubnetMask.Name = 'textboxSubnetMask'
	$textboxSubnetMask.Size = '92, 20'
	$textboxSubnetMask.TabIndex = 21
	#
	# labelSubnetMask
	#
	$labelSubnetMask.AutoSize = $True
	$labelSubnetMask.Location = '10, 115'
	$labelSubnetMask.Name = 'labelSubnetMask'
	$labelSubnetMask.Size = '73, 17'
	$labelSubnetMask.TabIndex = 20
	$labelSubnetMask.Text = 'Subnet Mask:'
	$labelSubnetMask.UseCompatibleTextRendering = $True
	#
	# textboxIPAddress
	#
	$textboxIPAddress.Enabled = $False
	$textboxIPAddress.Location = '124, 83'
	$textboxIPAddress.Name = 'textboxIPAddress'
	$textboxIPAddress.Size = '92, 20'
	$textboxIPAddress.TabIndex = 20
	#
	# comboboxVSwitch
	#
	$comboboxVSwitch.DropDownStyle = 'DropDownList'
	$comboboxVSwitch.Enabled = $False
	$comboboxVSwitch.FormattingEnabled = $True
	$comboboxVSwitch.Location = '92, 29'
	$comboboxVSwitch.Name = 'comboboxVSwitch'
	$comboboxVSwitch.Size = '121, 21'
	$comboboxVSwitch.TabIndex = 18
	#
	# labelIPAddress
	#
	$labelIPAddress.AutoSize = $True
	$labelIPAddress.Location = '10, 86'
	$labelIPAddress.Name = 'labelIPAddress'
	$labelIPAddress.Size = '63, 17'
	$labelIPAddress.TabIndex = 0
	$labelIPAddress.Text = 'IP Address:'
	$labelIPAddress.UseCompatibleTextRendering = $True
	#
	# labelVirtualSwitch
	#
	$labelVirtualSwitch.AutoSize = $True
	$labelVirtualSwitch.Location = '10, 31'
	$labelVirtualSwitch.Name = 'labelVirtualSwitch'
	$labelVirtualSwitch.Size = '76, 17'
	$labelVirtualSwitch.TabIndex = 0
	$labelVirtualSwitch.Text = 'Virtual Switch:'
	$labelVirtualSwitch.UseCompatibleTextRendering = $True
	#
	# labelNetworkingConfigurat
	#
	$labelNetworkingConfigurat.AutoSize = $True
	$labelNetworkingConfigurat.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelNetworkingConfigurat.Location = '3, 10'
	$labelNetworkingConfigurat.Name = 'labelNetworkingConfigurat'
	$labelNetworkingConfigurat.Size = '137, 17'
	$labelNetworkingConfigurat.TabIndex = 0
	$labelNetworkingConfigurat.Text = 'Networking Configuration'
	$labelNetworkingConfigurat.UseCompatibleTextRendering = $True
	#
	# panel2
	#
	$panel2.Controls.Add($labelOS)
	$panel2.Controls.Add($comboboxTemplate)
	$panel2.Controls.Add($labelTemplateSelect)
	$panel2.Controls.Add($labelTemplate)
	$panel2.BorderStyle = 'Fixed3D'
	$panel2.Location = '266, 203'
	$panel2.Name = 'panel2'
	$panel2.Size = '296, 86'
	$panel2.TabIndex = 4
	#
	# labelOS
	#
	$labelOS.AutoSize = $True
	$labelOS.Location = '26, 58'
	$labelOS.Margin = '1, 0, 1, 0'
	$labelOS.Name = 'labelOS'
	$labelOS.Size = '98, 17'
	$labelOS.TabIndex = 18
	$labelOS.Text = 'Operating System:'
	$labelOS.UseCompatibleTextRendering = $True
	#
	# comboboxTemplate
	#
	$comboboxTemplate.DropDownStyle = 'DropDownList'
	$comboboxTemplate.FormattingEnabled = $True
	$comboboxTemplate.Location = '125, 33'
	$comboboxTemplate.Name = 'comboboxTemplate'
	$comboboxTemplate.Size = '164, 21'
	$comboboxTemplate.TabIndex = 17
	$comboboxTemplate.add_SelectedIndexChanged($comboboxTemplate_SelectedIndexChanged)
	#
	# labelTemplateSelect
	#
	$labelTemplateSelect.AutoSize = $True
	$labelTemplateSelect.Location = '26, 37'
	$labelTemplateSelect.Name = 'labelTemplateSelect'
	$labelTemplateSelect.Size = '55, 17'
	$labelTemplateSelect.TabIndex = 0
	$labelTemplateSelect.Text = 'Template:'
	$labelTemplateSelect.UseCompatibleTextRendering = $True
	#
	# labelTemplate
	#
	$labelTemplate.AutoSize = $True
	$labelTemplate.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelTemplate.Location = '12, 7'
	$labelTemplate.Name = 'labelTemplate'
	$labelTemplate.Size = '225, 17'
	$labelTemplate.TabIndex = 0
	$labelTemplate.Text = 'Template and Operating System Selection'
	$labelTemplate.UseCompatibleTextRendering = $True
	#
	# textboxVMName
	#
	$textboxVMName.Location = '139, 20'
	$textboxVMName.Name = 'textboxVMName'
	$textboxVMName.Size = '133, 20'
	$textboxVMName.TabIndex = 1
	#
	# labelVirtualMachineName
	#
	$labelVirtualMachineName.AutoSize = $True
	$labelVirtualMachineName.Location = '13, 20'
	$labelVirtualMachineName.Name = 'labelVirtualMachineName'
	$labelVirtualMachineName.Size = '119, 17'
	$labelVirtualMachineName.TabIndex = 0
	$labelVirtualMachineName.Text = 'Virtual Machine Name:'
	$labelVirtualMachineName.UseCompatibleTextRendering = $True
	#
	# panelCompute
	#
	$panelCompute.Controls.Add($labelCompute)
	$panelCompute.Controls.Add($labelMemoryGB)
	$panelCompute.Controls.Add($comboboxMemory)
	$panelCompute.Controls.Add($labelNumberOfVCPUs)
	$panelCompute.Controls.Add($comboboxCPU)
	$panelCompute.BorderStyle = 'Fixed3D'
	$panelCompute.Location = '13, 46'
	$panelCompute.Name = 'panelCompute'
	$panelCompute.Size = '238, 114'
	$panelCompute.TabIndex = 1
	#
	# labelCompute
	#
	$labelCompute.AutoSize = $True
	$labelCompute.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelCompute.Location = '9, 14'
	$labelCompute.Name = 'labelCompute'
	$labelCompute.Size = '125, 17'
	$labelCompute.TabIndex = 0
	$labelCompute.Text = 'Compute Configuration'
	$labelCompute.UseCompatibleTextRendering = $True
	#
	# labelMemoryGB
	#
	$labelMemoryGB.AutoSize = $True
	$labelMemoryGB.Location = '33, 90'
	$labelMemoryGB.Name = 'labelMemoryGB'
	$labelMemoryGB.Size = '75, 17'
	$labelMemoryGB.TabIndex = 0
	$labelMemoryGB.Text = 'Memory (GB):'
	$labelMemoryGB.UseCompatibleTextRendering = $True
	#
	# comboboxMemory
	#
	$comboboxMemory.FormatString = 'N2'
	$comboboxMemory.FormattingEnabled = $True
	[void]$comboboxMemory.Items.Add('1')
	[void]$comboboxMemory.Items.Add('2')
	[void]$comboboxMemory.Items.Add('4')
	[void]$comboboxMemory.Items.Add('8')
	[void]$comboboxMemory.Items.Add('16')
	[void]$comboboxMemory.Items.Add('32')
	[void]$comboboxMemory.Items.Add('64')
	$comboboxMemory.Location = '137, 86'
	$comboboxMemory.Name = 'comboboxMemory'
	$comboboxMemory.Size = '77, 21'
	$comboboxMemory.TabIndex = 5
	#
	# labelNumberOfVCPUs
	#
	$labelNumberOfVCPUs.AutoSize = $True
	$labelNumberOfVCPUs.Location = '33, 47'
	$labelNumberOfVCPUs.Name = 'labelNumberOfVCPUs'
	$labelNumberOfVCPUs.Size = '98, 17'
	$labelNumberOfVCPUs.TabIndex = 0
	$labelNumberOfVCPUs.Text = 'Number of vCPUs:'
	$labelNumberOfVCPUs.UseCompatibleTextRendering = $True
	#
	# comboboxCPU
	#
	$comboboxCPU.FormattingEnabled = $True
	[void]$comboboxCPU.Items.Add('1')
	[void]$comboboxCPU.Items.Add('2')
	[void]$comboboxCPU.Items.Add('4')
	$comboboxCPU.Location = '137, 43'
	$comboboxCPU.Name = 'comboboxCPU'
	$comboboxCPU.Size = '53, 21'
	$comboboxCPU.TabIndex = 3
	#
	# panel1
	#
	$panel1.Controls.Add($labelVMLocation)
	$panel1.Controls.Add($labelDatastore)
	$panel1.Controls.Add($textboxDatastore)
	$panel1.Controls.Add($buttonSelectDatastore)
	$panel1.BorderStyle = 'Fixed3D'
	$panel1.Location = '13, 173'
	$panel1.Name = 'panel1'
	$panel1.Size = '229, 87'
	$panel1.TabIndex = 3
	#
	# labelVMLocation
	#
	$labelVMLocation.AutoSize = $True
	$labelVMLocation.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelVMLocation.Location = '4, 5'
	$labelVMLocation.Name = 'labelVMLocation'
	$labelVMLocation.Size = '123, 17'
	$labelVMLocation.TabIndex = 0
	$labelVMLocation.Text = 'VM Datastore Location'
	$labelVMLocation.UseCompatibleTextRendering = $True
	#
	# labelDatastore
	#
	$labelDatastore.AutoSize = $True
	$labelDatastore.Location = '5, 34'
	$labelDatastore.Name = 'labelDatastore'
	$labelDatastore.Size = '56, 17'
	$labelDatastore.TabIndex = 0
	$labelDatastore.Text = 'Datastore:'
	$labelDatastore.UseCompatibleTextRendering = $True
	#
	# textboxDatastore
	#
	$textboxDatastore.Enabled = $False
	$textboxDatastore.Location = '68, 32'
	$textboxDatastore.Name = 'textboxDatastore'
	$textboxDatastore.ReadOnly = $True
	$textboxDatastore.Size = '142, 20'
	$textboxDatastore.TabIndex = 0
	$textboxDatastore.TabStop = $False
	#
	# buttonSelectDatastore
	#
	$buttonSelectDatastore.Enabled = $False
	$buttonSelectDatastore.Location = '92, 58'
	$buttonSelectDatastore.Name = 'buttonSelectDatastore'
	$buttonSelectDatastore.Size = '118, 23'
	$buttonSelectDatastore.TabIndex = 14
	$buttonSelectDatastore.Text = 'Select Datastore...'
	$buttonSelectDatastore.UseCompatibleTextRendering = $True
	$buttonSelectDatastore.UseVisualStyleBackColor = $True
	$buttonSelectDatastore.add_Click($buttonSelectDatastore_Click)
	#
	# label1
	#
	$label1.Location = '493, 20'
	$label1.Name = 'label1'
	$label1.Size = '35, 17'
	$label1.TabIndex = 0
	$label1.Text = 'label1'
	$label1.UseCompatibleTextRendering = $True
	$panel1.ResumeLayout()
	$panelCompute.ResumeLayout()
	$panel2.ResumeLayout()
	$panel3.ResumeLayout()
	$panel5.ResumeLayout()
	$formAddVM.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formAddVM.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formAddVM.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formAddVM.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formAddVM.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formAddVM.ShowDialog()

}
#endregion Source: AddVMForm.psf

#region Source: SelectDatastore.psf
function Show-SelectDatastore_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
GgQAACODCAAAAAAABABllEmPo1gQhO9I/g+lviI1YGMDUnVJYIzB7Mtju7E8NrPY8DCGXz/VNZeR
Jk+hVMQp84tPB2bDC46rmKDk41tM9dD/+XX4Tf362mEfH5/mWJd1n7RS3UIj6eCXC1uYob/2CQ0j
/P2Yik/if66frDSM3ZeWOTKlqlls33n+bIpn/t8R+DPl52je33m7SAhQUM1xAGzAkchefJV+qHdV
tNXQempSP50DzmWS0C4G6gCXHTa47nuBUcW392g7tls+p/ps7UmcNyGZMb1HuyT9RjVXvYbAMDmj
4kHRWNV6ImfrUvpvCaYPcb+u9gp2WNzeyGQIXTowvXCqjKfKN4roqtlj1pfF7w8lEc0HxRhGYzC6
Pn9uhToGg+H2GaqXMlEsfTs+prOzttwOS57lHgyS9BLC5nVXARVbZ1XvKClqr/tAb42TqBNlTYj0
PoMPR+wXUIoPZUHXq5eNfm4pfmeDwhVYdNxhthrrnsJul2uqErVaFi3c3NR3Vts1ntKwXrL7qWj0
yiKkp+l21AocU/T9ThPBFvAv7ZRIGbia6jtb8B3W2xMTbfe3wrRnM2yE9FLoQFIIH/Ysqzp5c71Z
y3WzZCgWkmX0ohYVTEMWaxwr3HC7E4dwTIj471H7HZa9kFYetPYFOQuc46QO1VwzkJ8KuBbjwnW2
hAC0nalu2f4EHs1NYcbL7WR4bjzNYNybx7ZWRTK5nvxshy2JdINNL21+NUmv7PTivGjDe2orrwVv
BYVgEE3gB1G1sNoJqAude/wchrfpktGU3q7PqUVlJseGfIl32CQzsuTc1mba3q9DX7LO8TEowfjw
I7O8TOGBBpbJohuTe+MMF+G46nEyV5rMp/wbBkg7+GVfpWzee8X3hxwzVtTtBpU+EPRN6d8jnjZ3
QON7u6By0mZcFrd4NEXVIDSoS9Giv4kL68EU6VQ7GvklboN05j2k7bAN7vEYkV3re0xIONAEHMmd
h7hQZeHYTbiZljLctIg2ZKe0C1q4CaaeyrpVBFE0xaRr9YARW/KZ5tcdRpMgZUsNbxK/EY6cZurs
ekrmlCQJRPCGvwUa+qGP//Pnk/iB8gdPfppgl7Y1nD6I780n8d8u+PoH6hPTGRoEAAA=#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formSelectDatastore = New-Object 'System.Windows.Forms.Form'
	$datagridviewDatastores = New-Object 'System.Windows.Forms.DataGridView'
	$buttonExit = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	#region Control Helper Functions
	function Update-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The DataGridView control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the DataGridView's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		.PARAMETER AutoSizeColumns
		    Resizes DataGridView control's columns after loading the items.
		#>
		Param (
				[ValidateNotNull()]
				[Parameter(Mandatory = $true)]
				[System.Windows.Forms.DataGridView]$DataGridView,
				[ValidateNotNull()]
				[Parameter(Mandatory = $true)]
				$Item,
				[Parameter(Mandatory = $false)]
				[string]$DataMember,
				[System.Windows.Forms.DataGridViewAutoSizeColumnMode]$AutoSizeColumns = 'None'
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
		{
			$DataGridView.DataSource = $Item.Tables[0]
		}
		elseif ($Item -is [System.ComponentModel.IListSource]`
				-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView])
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{
				$array.Add($Item)
			}
			$DataGridView.DataSource = $array
		}
		
		if ($AutoSizeColumns -ne 'None')
		{
			$DataGridView.AutoResizeColumns($AutoSizeColumns)
		}
		
		$DataGridView.ResumeLayout()
	}
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterWMIProperties
				This switch removes WMI properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param (
				[ValidateNotNull()]
				$InputObject,
				[ValidateNotNull()]
				[System.Data.DataTable]$Table,
				[switch]$RetainColumns,
				[switch]$FilterWMIProperties)
		
		if ($null -eq $Table)
		{
			$Table = New-Object System.Data.DataTable
		}
		
		if ($InputObject -is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
		{
			$Table = $InputObject.Tables[0]
		}
		else
		{
			if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
				
				if ($null -eq $InputObject) { return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach ($item in $InputObject)
				{
					if ($null -ne $item)
					{
						$object = $item
						break
					}
				}
				
				if ($null -eq $object) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if ($null -ne $prop.Value)
						{
							try { $type = $prop.Value.GetType() }
							catch { Out-Null }
						}
						
						if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
							[void]$table.Columns.Add($prop.Name, $type)
						}
						else #Type info not found
						{
							[void]$table.Columns.Add($prop.Name)
						}
					}
				}
				
				if ($object -is [System.Data.DataRow])
				{
					foreach ($item in $InputObject)
					{
						$Table.Rows.Add($item)
					}
					return @( ,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()
			}
			
			foreach ($item in $InputObject)
			{
				$row = $table.NewRow()
				
				if ($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if ($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
		
		return @( ,$Table)
	}
	#endregion
	
	$formSelectDatastore_Load = {
		
		$datastores = Get-Datastore -Host $comboboxVMHost.SelectedItem -Server $global:vcenterConnection.Name | ?{ $_.State -eq 'Available' } | select Name, FreeSpaceGB, CapacityGB | Sort-Object -Property Name
		
		#$datastores | Export-Csv "$ScriptDirectory\export.csv" -NoTypeInformation
		
		$table = ConvertTo-DataTable -InputObject $datastores
		
		Update-DataGridView -DataGridView $datagridviewDatastores -Item $table -AutoSizeColumns DisplayedCells
		
		foreach ($row in $datagridviewDatastores.Rows)
		{
			$percentFree = (($row.Cells[1].Value)/($row.Cells[2].Value) * 100)
			
			if ($percentFree -lt 10)
			{
				$row.DefaultCellStyle.BackColor = 'Red'
			}
			elseif (($percentFree -lt 20) -and ($percentFree -gt 10))
			{
				$row.DefaultCellStyle.BackColor = 'Yellow'
			}
		}
		
	}
	
	$buttonExit_Click={
		#TODO: Place custom script here
		$formSelectDatastore.Close()
	}
	
	$buttonLoad_Click= {
		#TODO: Place custom script here
		#	---------------------------------
		#	Sample Code to Load Grid
		#	---------------------------------
		#	$processes = Get-WmiObject Win32_Process -Namespace "Root\CIMV2"
		#	Update-DataGridView -DataGridView $datagridviewResults -Item $processes -AutoSizeColumns DisplayedCells
		#	---------------------------------
		#	Sample Code to Load Sortable Data
		#	---------------------------------
		# 	$processes = Get-WmiObject Win32_Process -Namespace "Root\CIMV2"
		#	$table = ConvertTo-DataTable -InputObject $processes -FilterWMIProperties
		#	Update-DataGridView -DataGridView $datagridviewResults -Item $table -AutoSizeColumns DisplayedCells
		
	
		
	}
	
	$datagridviewDatastores_ColumnHeaderMouseClick=[System.Windows.Forms.DataGridViewCellMouseEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellMouseEventArgs]
		if($datagridviewDatastores.DataSource -is [System.Data.DataTable])
		{
			$column = $datagridviewDatastores.Columns[$_.ColumnIndex]
			$direction = [System.ComponentModel.ListSortDirection]::Ascending
			
			if($column.HeaderCell.SortGlyphDirection -eq 'Descending')
			{
				$direction = [System.ComponentModel.ListSortDirection]::Descending
			}
	
			$datagridviewDatastores.Sort($datagridviewDatastores.Columns[$_.ColumnIndex], $direction)
		}
	}
	
	$datagridviewDatastores_CellMouseDoubleClick=[System.Windows.Forms.DataGridViewCellMouseEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellMouseEventArgs]
		#TODO: Place custom script here
		$textboxDatastore.Text = $datagridviewDatastores.CurrentRow.Cells[0].Value
		$formSelectDatastore.Close()
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formSelectDatastore.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:SelectDatastore_datagridviewDatastores = $datagridviewDatastores.SelectedCells
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$datagridviewDatastores.remove_CellMouseDoubleClick($datagridviewDatastores_CellMouseDoubleClick)
			$datagridviewDatastores.remove_ColumnHeaderMouseClick($datagridviewDatastores_ColumnHeaderMouseClick)
			$buttonExit.remove_Click($buttonExit_Click)
			$formSelectDatastore.remove_Load($formSelectDatastore_Load)
			$formSelectDatastore.remove_Load($Form_StateCorrection_Load)
			$formSelectDatastore.remove_Closing($Form_StoreValues_Closing)
			$formSelectDatastore.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formSelectDatastore.SuspendLayout()
	#
	# formSelectDatastore
	#
	$formSelectDatastore.Controls.Add($datagridviewDatastores)
	$formSelectDatastore.Controls.Add($buttonExit)
	$formSelectDatastore.AutoScaleDimensions = '6, 13'
	$formSelectDatastore.AutoScaleMode = 'Font'
	$formSelectDatastore.ClientSize = '584, 362'
	$formSelectDatastore.Margin = '6, 6, 6, 6'
	$formSelectDatastore.Name = 'formSelectDatastore'
	$formSelectDatastore.StartPosition = 'CenterParent'
	$formSelectDatastore.Text = 'Select Datastore'
	$formSelectDatastore.add_Load($formSelectDatastore_Load)
	#
	# datagridviewDatastores
	#
	$datagridviewDatastores.AllowUserToAddRows = $False
	$datagridviewDatastores.AllowUserToDeleteRows = $False
	$datagridviewDatastores.Anchor = 'Top, Bottom, Left, Right'
	$datagridviewDatastores.Location = '12, 12'
	$datagridviewDatastores.MultiSelect = $False
	$datagridviewDatastores.Name = 'datagridviewDatastores'
	$datagridviewDatastores.ReadOnly = $True
	$datagridviewDatastores.RowTemplate.Height = 33
	$datagridviewDatastores.SelectionMode = 'FullRowSelect'
	$datagridviewDatastores.Size = '560, 309'
	$datagridviewDatastores.TabIndex = 2
	$datagridviewDatastores.add_CellMouseDoubleClick($datagridviewDatastores_CellMouseDoubleClick)
	$datagridviewDatastores.add_ColumnHeaderMouseClick($datagridviewDatastores_ColumnHeaderMouseClick)
	#
	# buttonExit
	#
	$buttonExit.Anchor = 'Bottom, Right'
	$buttonExit.Location = '497, 327'
	$buttonExit.Name = 'buttonExit'
	$buttonExit.Size = '75, 23'
	$buttonExit.TabIndex = 1
	$buttonExit.Text = 'E&xit'
	$buttonExit.UseCompatibleTextRendering = $True
	$buttonExit.UseVisualStyleBackColor = $True
	$buttonExit.add_Click($buttonExit_Click)
	$formSelectDatastore.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formSelectDatastore.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formSelectDatastore.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formSelectDatastore.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formSelectDatastore.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formSelectDatastore.ShowDialog()

}
#endregion Source: SelectDatastore.psf

#region Source: Functions\Get-FolderByPath.ps1
function Invoke-Get-FolderByPath_ps1
{
	<#	
		.NOTES
		===========================================================================
		 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2018 v5.5.150
		 Created on:   	6/17/2019 9:54 AM
		 Created by:   	dalthakar
		 Organization: 	
		 Filename:     	Get-FolderByPath.ps1
		===========================================================================
		.DESCRIPTION
			This function was originally created by LucD and downloaded from http://www.lucd.info/2012/05/18/folder-by-path/.
			Retrieve folders by giving a path .DESCRIPTION The function will retrieve a folder by it's path. 
			The path can contain any type of leave (folder or datacenter). .NOTES Author: Luc Dekens .PARAMETER Path The path to the folder. This is a required parameter. .PARAMETER Path The path to the folder. This is a required parameter. .PARAMETER Separator The character that is used to separate the leaves in the path. The default is '/' .EXAMPLE PS> Get-FolderByPath -Path "Folder1/Datacenter/Folder2"
		
		.EXAMPLE
		  PS> Get-FolderByPath -Path "Folder1>Folder2" -Separator '>'
	#>
	
	function Get-FolderByPath
	{
	  	param (
			[CmdletBinding()]
			[parameter(Mandatory = $true)]
			[System.String[]]${Path},
			[char]${Separator} = '/'
		)
		
		process
		{
			if ((Get-PowerCLIConfiguration).DefaultVIServerMode -eq "Multiple")
			{
				$vcs = $defaultVIServers
			}
			else
			{
				$vcs = $defaultVIServers[0]
			}
			
			foreach ($vc in $vcs)
			{
				foreach ($strPath in $Path)
				{
					$root = Get-Folder -Name Datacenters -Server $vc
					$strPath.Split($Separator) | %{
						$root = Get-Inventory -Name $_ -Location $root -Server $vc -NoRecursion
						if ((Get-Inventory -Location $root -NoRecursion | Select -ExpandProperty Name) -contains "vm")
						{
							$root = Get-Inventory -Name "vm" -Location $root -Server $vc -NoRecursion
						}
					}
					$root | where { $_ -is [VMware.VimAutomation.ViCore.Impl.V1.Inventory.FolderImpl] } | %{
						Get-Folder -Name $_.Name -Location $root.Parent -NoRecursion -Server $vc
					}
				}
			}
		}
	}
}
#endregion Source: Get-FolderByPath.ps1

#region Source: WindowsRoles.psf
function Show-WindowsRoles_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
0QMAACODCAAAAAAABABlk0mPo0gUhO+W/B9KfbXUCZjFlqpLSvbVBpvF+AYmbVYDiYHEv75rai4j
zTuFniKkkELf5wnd2gnhRU5eyce3GIr2+efX9jf962u9+vj4POLiUTyTWi1qdEga9BUVz6ydh1Nb
o+F3N9w/wf8sP0G1xc0X8YoLvRjg4D0glI6yBP89EUp0HYwuU0KPbDbhJmcGXe8tZB+h1CnRq3rg
7DFI53aHCVep6i7TXtixN5tKWK/QWfQgRbFYgadwjLcy2D/zSQjA7DraCLBK2Twf6/E8s9p7NB+2
cQ639KzxLzogVa/zmVPXNM9d4SVZr25SoOOgfQGcVyqs0uSUG4W1NHMRvRcR3XwkzaE6elAAfhtt
o6mftk3BtNllOFa+rywWaG3g7MW8/+7mQC7XFlYqr947eJm9GS++adDdW/CTR5rosr1/yvqV0dQG
cwdFwyidpeHxXpz3jmiQvwUlzVs5v9f9w3c3xg8ftSLK71nRTsg+ZwvXHdihfPMYimQq5SBwClf0
slYFlPSgo0boDpdWrSyiKcca7qGNiEgsm9fXK9ZQ/TZL1J3shsnC+w02JynyXY8ipHfjuJhb+Z/F
Xt+L7VDNqqQvK5XE/Ug7WsRxW8iWk6rttD4W16urpAm5TdMTjAwk4ebcwjzsVD05z6FRAYAU96nd
+yrRIWGvd9ZPNwkjCiKL6zTGLJbHzd19DhEU6Hy9ah0CgskH+biXaIaHaagmnL3U5WQnXKc8SfTo
fcHtqirZ8AlLEysczjv5ej5csN00TFRE0LwH96snx+sVnqKdcAiDaTKLrp86ig92dpqnnD1eUutI
sTMVUrjE3HbZL8mmd81sbOQqfh9S0nVuej3umSDu0L2l0XqlAC6OmIaw4HK1ji4w9ehV6tFipMLp
5qJ9KFtANkgwOsfl7inEhTenw/WtJmyU2Xph9kbBoL284Lhcr8zIVvGkP5P5CYJXyWQ6NS335p5e
fPRmkM5SoATeJUZGbv1wA//8+QQ/OP2ABYcBNWldoOEDfH8+wX8R/voLX695n9EDAAA=#>
#endregion
param
(
	[Parameter(Mandatory = $true)]
	[string]$VMName
)

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formWindowsFeatures = New-Object 'System.Windows.Forms.Form'
	$treeviewWindowsRoles = New-Object 'System.Windows.Forms.TreeView'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	
	$formWindowsFeatures_Load={
		
		$treeviewWindowsRoles.BeginUpdate()
		
		$osVersion = $global:vmOS | ?{ $_.VMName -eq $VMName }
		
		if ($osVersion.OS -eq "Server2012R2")
		{
			$import = Import-Csv "$ScriptDirectory\rolesandfeatures\Server2012R2Features.csv"
			$formWindowsFeatures.Text = "Select Roles to install for Server 2012 R2"
		}
		elseif ($osVersion.OS -eq "Server2016")
		{
			$import = Import-Csv "$ScriptDirectory\rolesandfeatures\Server2016Features.csv"
			$formWindowsFeatures.Text = "Select Roles to install for Server 2016"
		}
		elseif ($osVersion.OS -eq "Server2019")
		{
			$import = Import-Csv "$ScriptDirectory\rolesandfeatures\Server2019Features.csv"
			$formWindowsFeatures.Text = "Select Roles to install for Server 2019"
		}
		
		$roleParents = $import | ?{ $_.FeatureType -eq "Role" }
		$roleServices = $import | ?{ $_.FeatureType -eq "Role Service" }
		#$features = $import | ?{ $_.FeatureType -eq "Feature" }
		$previousSelectedRoles = $global:vmRoles | ?{ $_.VMName -eq $VMName }
		
		$indexCounter = 0
		
		foreach ($role in $roleParents)
		{
			$parentNode = $treeviewWindowsRoles.Nodes.Add($role.DisplayName)
			$parentNode.Name = $role.Name
			$parentNode.Tag = $role.Name
			$parentNode.ToolTipText = $role.Description
			if ($role.Name -in $previousSelectedRoles.Roles) {$parentNode.Checked = $true }
			
		}
		
		$treeviewWindowsRoles.ExpandAll()
		$treeviewWindowsRoles.EndUpdate()
		
	}
	
	#region Control Helper Functions
	function Get-CheckedNode
	{
	<#
		.SYNOPSIS
			This function collects a list of checked nodes in a TreeView
	
		.DESCRIPTION
			This function collects a list of checked nodes in a TreeView
	
		.PARAMETER  $NodeCollection
			The collection of nodes to search
	
		.PARAMETER  $CheckedNodes
			The ArrayList that will contain the all the checked items
		
		.EXAMPLE
			$CheckedNodes = New-Object System.Collections.ArrayList
			Get-CheckedNode $treeview1.Nodes $CheckedNodes
			foreach($node in $CheckedNodes)
			{	
				Write-Host $node.Text
			}
	#>
		param (
				[ValidateNotNull()]
				[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
				[ValidateNotNull()]
				[System.Collections.ArrayList]$CheckedNodes
		)
		
		foreach ($Node in $NodeCollection)
		{
			if ($Node.Checked)
			{
				[void]$CheckedNodes.Add($Node)
			}
			Get-CheckedNode $Node.Nodes $CheckedNodes
		}
	}
	
	#endregion
	
	$buttonOK_Click={
		
		$tmpRoleArray = @()
		
		foreach ($node in $treeviewWindowsRoles.Nodes)
		{
			if ($node.Checked) { $tmpRoleArray += $node }
		}
		
		$roleObject = New-Object PSObject
		
		$roleObject | Add-Member -Type NoteProperty -Name "VMName" -Value $VMName
		$roleObject | Add-Member -Type NoteProperty -Name "Roles" -Value $tmpRoleArray.Name
		
		$global:vmRoles = $global:vmRoles | ?{ $_.VMName -ne $VMName }
		
		$global:vmRoles = [System.Array]$global:vmRoles + $roleObject
		
		$global:vmRoles | Out-File "$ScriptDirectory\logs\roles.log"
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formWindowsFeatures.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		if($treeviewWindowsRoles.SelectedNode -ne $null)
		{
			$script:WindowsRoles_treeviewWindowsRoles = $treeviewWindowsRoles.SelectedNode.Text
		}
		else
		{
			$script:WindowsRoles_treeviewWindowsRoles = $null
		}
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonOK.remove_Click($buttonOK_Click)
			$formWindowsFeatures.remove_Load($formWindowsFeatures_Load)
			$formWindowsFeatures.remove_Load($Form_StateCorrection_Load)
			$formWindowsFeatures.remove_Closing($Form_StoreValues_Closing)
			$formWindowsFeatures.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formWindowsFeatures.SuspendLayout()
	#
	# formWindowsFeatures
	#
	$formWindowsFeatures.Controls.Add($treeviewWindowsRoles)
	$formWindowsFeatures.Controls.Add($buttonOK)
	$formWindowsFeatures.AcceptButton = $buttonOK
	$formWindowsFeatures.AutoScaleDimensions = '6, 13'
	$formWindowsFeatures.AutoScaleMode = 'Font'
	$formWindowsFeatures.ClientSize = '475, 428'
	$formWindowsFeatures.FormBorderStyle = 'FixedDialog'
	$formWindowsFeatures.Margin = '6, 6, 6, 6'
	$formWindowsFeatures.MaximizeBox = $False
	$formWindowsFeatures.MinimizeBox = $False
	$formWindowsFeatures.Name = 'formWindowsFeatures'
	$formWindowsFeatures.StartPosition = 'CenterScreen'
	$formWindowsFeatures.Text = 'Select Roles to Install'
	$formWindowsFeatures.add_Load($formWindowsFeatures_Load)
	#
	# treeviewWindowsRoles
	#
	$treeviewWindowsRoles.CheckBoxes = $True
	$treeviewWindowsRoles.Location = '33, 26'
	$treeviewWindowsRoles.Name = 'treeviewWindowsRoles'
	$treeviewWindowsRoles.Size = '411, 344'
	$treeviewWindowsRoles.TabIndex = 1
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Location = '388, 393'
	$buttonOK.Name = 'buttonOK'
	$buttonOK.Size = '75, 23'
	$buttonOK.TabIndex = 0
	$buttonOK.Text = '&OK'
	$buttonOK.UseCompatibleTextRendering = $True
	$buttonOK.UseVisualStyleBackColor = $True
	$buttonOK.add_Click($buttonOK_Click)
	$formWindowsFeatures.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formWindowsFeatures.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formWindowsFeatures.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formWindowsFeatures.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formWindowsFeatures.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formWindowsFeatures.ShowDialog()

}
#endregion Source: WindowsRoles.psf

#region Source: GetAdminPassword.psf
function Show-GetAdminPassword_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
XQQAACODCAAAAAAABABllMeOo2oQRvdIvENrtkhDMBiQeloCbDDR5OAdNuknRxOefvr23Vzp1urT
p6rV0alPO31173TcL/Ecf3yHCXTtn1+n3/ivLxj6+Pi8jyAHbVyLoE6NuEm/pHTmkga0ZjxNazcm
v/sp+0T/t/ZzLHZj8yVJSoZLim1aE8cJ94vA/Ts8J+B1jb+JkvOKhWlpl42WpBRFLbjWufIEvuv4
/RiPeREleEUdoCaTYKvu+2mCIRxhKtmZ3VwpFNHJATke7U4iZhaSGboqjZuVG7ffWspatmH19Lfe
qsEVmFmrPgYxORIVx4KSYqcFe8NQe+ycUR/Kmta2iqKkog/Xw7V0RbIDD5Fcz460o6Fyww9NmUu2
GZvo8aYH7JW9d0k4ppjriIKOdk9GgSFCnirqoT511o57L/NS2TUWL8ecEZedePF18Wzf0wjBmo4n
BjowARnlpJc85mgIkibHbZBypqfjzWODoSjkUZK6lfssblTQhBSzD0KsC1pbqfrARNVRHk54AdqI
u0JYFkbytAa5uvJE1aKXl0oMGLI17UnCQgqGQL77bsWb9HWsuix3qmq+F48OBwvSta34wDUXuVcg
MHXPK4hBmeJ8xYSDn13cYgoiC0egldWT2kRlhiGb6df9pDdys45sl/Sc0XTtS3NS8A919Jt6Gb0l
tT1v59jAzUXUZ5RF8Ur3zlNdhY3/pGm2VllUfIswFBsNPlbMObEpwtpcspdPOjkbvC/Q69xayab4
vaFmsXAwtKr3hpjZ50Y8aWtIqSTB7Fxq4/EhhhpWejDEAyQCysZPI5FvK6ExiCEg7YurU4d8nWwt
2i5vt7/JHX7UKfJEJWGQQva2DS96aGiMXwb+JN2cmSuHEIZ8hygGPGsvokAXD0mgqyvHO3SwvQ5l
2YVheOrpvQXkYG2PAddYcrnMBSnKvfWeYmHNkwOT3Kt/3JPlm6ksJ0egnAl6pQFB1ez1dnYO27sX
gygYCVVs7UqMFIIkPk7FMs1H2iNNb2gpa40j3pYXfRkDtr+m802MYYitkGSK8TNpbeNMmpexpVzi
lQ4YkU+BiV8xxg97wrr3rTSCNVl0MKgqc7amJZFBuIsJUp2ow0yHuTxgKECnFKAv9nUqyz7r+7Vk
I6MxLj/+cn/+fKI/Wv8Izk1T2jxrkE4f6Hfzif73nXz9BRIrUzVdBAAA#>
#endregion
param
(
	[Parameter(Mandatory = $true)]
	[string]$VMName
)

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formSetAdminis6tratorPas = New-Object 'System.Windows.Forms.Form'
	$textboxAdminPassword = New-Object 'System.Windows.Forms.TextBox'
	$labelEnterPassword = New-Object 'System.Windows.Forms.Label'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	
	$formSetAdministratorPass_Load={
		#TODO: Initialize Form Controls here
		
	}
	$buttonOK_Click={
		
		$pwObject = New-Object PSObject
		
		$pwObject | Add-Member -Type NoteProperty -Name "VMName" -Value $VMName
		$pwObject | Add-Member -Type NoteProperty -Name "Password" -Value $textboxAdminPassword.Text
		
		$global:vmAdminPasswords = $global:vmAdminPasswords | ?{ $_.VMName -ne $VMName }
		
		$global:vmAdminPasswords = [System.Array]$global:vmAdminPasswords + $pwObject
		
		$global:vmAdminPasswords | Out-File "$ScriptDirectory\logs\pws.log"
		
		$labelOK1.Visible = $true
		
		Update-NavButtons
		
	}
	
	$textboxAdminPassword_TextChanged={
		
		if ($textboxAdminPassword.Text.Length -gt 8) { $buttonOK.Enabled = $true }
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formSetAdminis6tratorPas.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:GetAdminPassword_textboxAdminPassword = $textboxAdminPassword.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$textboxAdminPassword.remove_TextChanged($textboxAdminPassword_TextChanged)
			$buttonOK.remove_Click($buttonOK_Click)
			$formSetAdminis6tratorPas.remove_Load($Form_StateCorrection_Load)
			$formSetAdminis6tratorPas.remove_Closing($Form_StoreValues_Closing)
			$formSetAdminis6tratorPas.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formSetAdminis6tratorPas.SuspendLayout()
	#
	# formSetAdminis6tratorPas
	#
	$formSetAdminis6tratorPas.Controls.Add($textboxAdminPassword)
	$formSetAdminis6tratorPas.Controls.Add($labelEnterPassword)
	$formSetAdminis6tratorPas.Controls.Add($buttonOK)
	$formSetAdminis6tratorPas.AcceptButton = $buttonOK
	$formSetAdminis6tratorPas.AutoScaleDimensions = '6, 13'
	$formSetAdminis6tratorPas.AutoScaleMode = 'Font'
	$formSetAdminis6tratorPas.ClientSize = '209, 129'
	$formSetAdminis6tratorPas.FormBorderStyle = 'FixedDialog'
	$formSetAdminis6tratorPas.Margin = '6, 6, 6, 6'
	$formSetAdminis6tratorPas.MaximizeBox = $False
	$formSetAdminis6tratorPas.MinimizeBox = $False
	$formSetAdminis6tratorPas.Name = 'formSetAdminis6tratorPas'
	$formSetAdminis6tratorPas.StartPosition = 'CenterScreen'
	$formSetAdminis6tratorPas.Text = 'Set Adminis6trator Password'
	#
	# textboxAdminPassword
	#
	$textboxAdminPassword.Location = '7, 56'
	$textboxAdminPassword.Margin = '1, 2, 1, 2'
	$textboxAdminPassword.Name = 'textboxAdminPassword'
	$textboxAdminPassword.PasswordChar = '*'
	$textboxAdminPassword.Size = '188, 20'
	$textboxAdminPassword.TabIndex = 2
	$textboxAdminPassword.add_TextChanged($textboxAdminPassword_TextChanged)
	#
	# labelEnterPassword
	#
	$labelEnterPassword.AutoSize = $True
	$labelEnterPassword.Location = '7, 18'
	$labelEnterPassword.Margin = '1, 0, 1, 0'
	$labelEnterPassword.Name = 'labelEnterPassword'
	$labelEnterPassword.Size = '201, 17'
	$labelEnterPassword.TabIndex = 1
	$labelEnterPassword.Text = 'Local Administrator Account Password:'
	$labelEnterPassword.UseCompatibleTextRendering = $True
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Enabled = $False
	$buttonOK.Location = '122, 94'
	$buttonOK.Name = 'buttonOK'
	$buttonOK.Size = '75, 23'
	$buttonOK.TabIndex = 0
	$buttonOK.Text = '&OK'
	$buttonOK.UseCompatibleTextRendering = $True
	$buttonOK.UseVisualStyleBackColor = $True
	$buttonOK.add_Click($buttonOK_Click)
	$formSetAdminis6tratorPas.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formSetAdminis6tratorPas.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formSetAdminis6tratorPas.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formSetAdminis6tratorPas.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formSetAdminis6tratorPas.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formSetAdminis6tratorPas.ShowDialog()

}
#endregion Source: GetAdminPassword.psf

#region Source: WindowsFeatures.psf
function Show-WindowsFeatures_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
zAMAACODCAAAAAAABABlk0mrq1oQheeB/IfDnQpX0xgV8g5su9hFYx+daWxibLa6jd2vv7nnTR68
Gi2KKliw1ne20gcc037hoyH6+ghUwOafX4ffu1/f283X19noi7xookosqlSP6vTbL5oETkhMo+Hd
p+h3i7Iz/r+rn18R9vX31Qq8HYKWMeUAcAbPgX+HBdyuSphx/wLmzNANdccmuuea7japrGPLni4/
vdjkgW/cqvvlfTSkYJHCaC9i+HZjE7Lgl0DhZ/djpmUomOIJkeBohPzK9vhpTjhsqNn99WqwiKID
bhYSCiN53ZfeFmol37tVu/lEhnK13URXw5Ok54FJnVdZAF8fgqlk2dgJPK0dRfXBR5eJUAbTJP3G
JAeEhwxksgXq1GC4js1xBg5j7EXNkrndzLI3c/owCX5XNgKrdKQ7OS0k2tfBi/IskiB1BHtjQvQt
8AtvvVB2NFkoXzEWDiXUldqQdpIiDcnqbDf6A5u9u35hnXXhLpatceFMkcqlW/sTLJUJZyXfvUIh
hwbxwI93EOFOAps7pYRcYT351r2ZjwMybbvAtpsnzlnuSfLbDGg7H70JsjMOUy83ZRocK374mxb7
SUurGTF7aw5t04RVlOSwc+LO0R50Zyagn62R7ertBvhm+z5yTJJNZHExu7DsgOxFlrIvkRgpMn54
SiSREX4iTQFSxyUcMC2+61Omkv6ew+zpmDUrSYm5wWw3wQnE5JvhjvuP8MSEvC3iC46L2IrN7Be1
q45VWUczdaJ2s+ILKs5Lkw+Ju64tI+hB3p3SELyCQd4X2w2medfZ6OwwHzticpk+rmJRWsxYNYjj
RHtE/5rDw8Ko9gnJbTbUVhmsejwr2C2uDGbvBm36CKuUWE/jdtPHWrBYyuCNIl72bTo7fSIwDBxu
Q6qGVcbmskfFPKoCIDS5cCF2y1ulae1dPRdhZ1jxWD7DZACFa8+fvuEr+UAyLvYBc0+YPh3JUSEP
B5opn/i+oTPywbWhS/1l5Yz/YPQDFEAoreOqSNEX/tmc8f/S+/0HaFFiB8wDAAA=#>
#endregion
param
(
	[Parameter(Mandatory = $true)]
	[string]$VMName
)

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formWindowsFeatures = New-Object 'System.Windows.Forms.Form'
	$treeviewWindowsFeatures = New-Object 'System.Windows.Forms.TreeView'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	
	$formWindowsFeatures_Load={
		
		$treeviewWindowsFeatures.BeginUpdate()
		
		$osVersion = $global:vmOS | ?{ $_.VMName -eq $VMName }
		
		if ($osVersion.OS -eq "Server2012R2")
		{
			$import = Import-Csv "$ScriptDirectory\rolesandfeatures\Server2012R2Features.csv"
			$formWindowsFeatures.Text = "Select Features to install for Server 2012 R2"
		}
		elseif ($osVersion.OS -eq "Server2016")
		{
			$import = Import-Csv "$ScriptDirectory\rolesandfeatures\Server2016Features.csv"
			$formWindowsFeatures.Text = "Select Features to install for Server 2016"
		}
		elseif ($osVersion.OS -eq "Server2019")
		{
			$import = Import-Csv "$ScriptDirectory\rolesandfeatures\Server2019Features.csv"
			$formWindowsFeatures.Text = "Select Features to install for Server 2019"
		}
		
		#$roleParents = $import | ?{ $_.FeatureType -eq "Role" }
		#$roleServices = $import | ?{ $_.FeatureType -eq "Role Service" }
		$features = $import | ?{ ($_.FeatureType -eq "Feature") -and ($_.Parent -eq '') }
		$previousSelectedFeatures = $global:vmFeatures | ?{ $_.VMName -eq $VMName }
		
		$indexCounter = 0
		
		foreach ($feature in $features)
		{
			$parentNode = $treeviewWindowsFeatures.Nodes.Add($feature.DisplayName)
			$parentNode.Name = $feature.Name
			$parentNode.ToolTipText = $feature.Description
			if ($feature.Name -in $previousSelectedFeatures.Roles) {$parentNode.Checked = $true }
			
		}
		
		$treeviewWindowsFeatures.ExpandAll()
		$treeviewWindowsFeatures.EndUpdate()
		
	}
	
	#region Control Helper Functions
	function Get-CheckedNode
	{
	<#
		.SYNOPSIS
			This function collects a list of checked nodes in a TreeView
	
		.DESCRIPTION
			This function collects a list of checked nodes in a TreeView
	
		.PARAMETER  $NodeCollection
			The collection of nodes to search
	
		.PARAMETER  $CheckedNodes
			The ArrayList that will contain the all the checked items
		
		.EXAMPLE
			$CheckedNodes = New-Object System.Collections.ArrayList
			Get-CheckedNode $treeview1.Nodes $CheckedNodes
			foreach($node in $CheckedNodes)
			{	
				Write-Host $node.Text
			}
	#>
		param (
				[ValidateNotNull()]
				[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
				[ValidateNotNull()]
				[System.Collections.ArrayList]$CheckedNodes
		)
		
		foreach ($Node in $NodeCollection)
		{
			if ($Node.Checked)
			{
				[void]$CheckedNodes.Add($Node)
			}
			Get-CheckedNode $Node.Nodes $CheckedNodes
		}
	}
	
	#endregion
	
	$buttonOK_Click={
		
		$tmpFeatureArray = @()
		
		foreach ($node in $treeviewWindowsFeatures.Nodes)
		{
			if ($node.Checked) { $tmpFeatureArray += $node }
		}
		
		$featureObject = New-Object PSObject
		
		$featureObject | Add-Member -Type NoteProperty -Name "VMName" -Value $VMName
		$featureObject | Add-Member -Type NoteProperty -Name "Features" -Value $tmpFeatureArray.Name
		
		$global:vmFeatures = $global:vmFeatures | ?{ $_.VMName -ne $VMName }
		
		$global:vmFeatures = [System.Array]$global:vmFeatures + $featureObject
		
		$global:vmFeatures | Out-File "$ScriptDirectory\logs\features.log"
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formWindowsFeatures.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		if($treeviewWindowsFeatures.SelectedNode -ne $null)
		{
			$script:WindowsFeatures_treeviewWindowsFeatures = $treeviewWindowsFeatures.SelectedNode.Text
		}
		else
		{
			$script:WindowsFeatures_treeviewWindowsFeatures = $null
		}
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonOK.remove_Click($buttonOK_Click)
			$formWindowsFeatures.remove_Load($formWindowsFeatures_Load)
			$formWindowsFeatures.remove_Load($Form_StateCorrection_Load)
			$formWindowsFeatures.remove_Closing($Form_StoreValues_Closing)
			$formWindowsFeatures.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formWindowsFeatures.SuspendLayout()
	#
	# formWindowsFeatures
	#
	$formWindowsFeatures.Controls.Add($treeviewWindowsFeatures)
	$formWindowsFeatures.Controls.Add($buttonOK)
	$formWindowsFeatures.AcceptButton = $buttonOK
	$formWindowsFeatures.AutoScaleDimensions = '6, 13'
	$formWindowsFeatures.AutoScaleMode = 'Font'
	$formWindowsFeatures.ClientSize = '475, 428'
	$formWindowsFeatures.FormBorderStyle = 'FixedDialog'
	$formWindowsFeatures.Margin = '6, 6, 6, 6'
	$formWindowsFeatures.MaximizeBox = $False
	$formWindowsFeatures.MinimizeBox = $False
	$formWindowsFeatures.Name = 'formWindowsFeatures'
	$formWindowsFeatures.StartPosition = 'CenterScreen'
	$formWindowsFeatures.Text = 'Select Roles to Install'
	$formWindowsFeatures.add_Load($formWindowsFeatures_Load)
	#
	# treeviewWindowsFeatures
	#
	$treeviewWindowsFeatures.CheckBoxes = $True
	$treeviewWindowsFeatures.Location = '33, 26'
	$treeviewWindowsFeatures.Name = 'treeviewWindowsFeatures'
	$treeviewWindowsFeatures.Size = '411, 344'
	$treeviewWindowsFeatures.TabIndex = 1
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Location = '388, 393'
	$buttonOK.Name = 'buttonOK'
	$buttonOK.Size = '75, 23'
	$buttonOK.TabIndex = 0
	$buttonOK.Text = '&OK'
	$buttonOK.UseCompatibleTextRendering = $True
	$buttonOK.UseVisualStyleBackColor = $True
	$buttonOK.add_Click($buttonOK_Click)
	$formWindowsFeatures.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formWindowsFeatures.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formWindowsFeatures.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formWindowsFeatures.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formWindowsFeatures.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formWindowsFeatures.ShowDialog()

}
#endregion Source: WindowsFeatures.psf

#region Source: AddLocalUsers.psf
function Show-AddLocalUsers_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
uAQAACODCAAAAAAABABllEmrq1oQhecB/8PhTgNXjTEqnHvAJPaxbxKdqdka49Zt3/36F+6bPHg1
KopVRcFafN8OSNEEuvUaD/HXp+kLVP/5Rf0mf/1gu6+vb7Mr8qKOoVhAYMQV+OGfzxtKY+j3H/Hv
ps++8f9p/m6KqKt+jpmpkUjl9EXg+Yt5vfD/1pm/GvBAToc3by8cZx1qMLOVMqnQBmtpRW7ruslw
85/lgx8bEJTkdp4ZyWHidcZ2HsNt9uDKhKkRqG14IZSZPUtT1h4cj+w0XwlH2i8sLshaSi2X7dHf
+Oq0kjnwcmMxl8nwZeoUaGw1GtguscbGaWk+dhMRyZTda2x8CdTRz/0rH0MHGpmi8QRdsHRuRf5N
UMyZPJnP1jAGLscT4vpuAeHZ5yuVYbujjOo0W2751qpKU2poI9zNqSwxblmbb9+q8QTi25WsQF0v
adsb1M2fDUX3D2apSZsd5zOVW0gxquiF7aL6TNONeOqDC3c3qwYG+ltdZJjqyBXkeJMEl3KaVmYG
5SaFVp2xKccYtlArwizgoXWOyXtDRPE7i0xsV7qU5GsoJHW3Hx8PMXhdMr3vYKJlx7xFkcBVwKhY
eQ0RlEzV7gb+QTvNwaULpE2VGrB4xveRSaeO/fnNj1yd1ftrLlaiqHuafVn8bRRhJrKcUPQurhHb
gcPTZ2WcxM0F0ohIPH4cqaa6zy+q3vKEX6OW+YQE231CYndl5J/ISaCZ8hoQjD+GC6oHbj8SsbkO
NvsOkNenofcSU9kPmTMiP2lUgkbXMo3dWEazVI88zAS2YzS49SrusgpQ+FAc4SQh+hDsB+JOQQNN
D2gRz7rO9uvrJIAGuGRx6CBzCXnGORZkK4lQrtTKM3W5xnZtGQ8laCG8r2TipUzaMlowpkGMrPE+
3gEHl+Gh5E09TEFYagTflL3u6K8zMwmScYFhdav2gRmMxUXGdi45L3WgAe55fL2d+EyLhcFkXeur
lCdYb1CA231l+9jOQko9jUPIhgBBQKabu76O79sxpZcs4beImBlsZz0877CY0PGcjCtlNK5JHwVU
DUOXfLjddu+V1jjBEW3q6zYSB/W0KnRD2DD/mE1kfdKtnaMChZ4i+nMtctFSQmqTko1tz3dyfGyk
kxPOONHwAIJRd6Vi/5i4hnhpeFJtYmZdEQ6VzKenZu115rgn7h5NulWI7Yz9fn4T4SZrxXsJqFPX
WYyzWFEWMRPl2NmQsZlWv7jjVXc+UPjzjf+Fxl988H0PqgQWoP/CP5Nv/L+k+vkHlNFEFLgEAAA=#>
#endregion
param
(
	[Parameter(Mandatory = $true)]
	[string]$VMName
)

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formAddUserAccounts = New-Object 'System.Windows.Forms.Form'
	$textboxPassword = New-Object 'System.Windows.Forms.TextBox'
	$textboxUsername = New-Object 'System.Windows.Forms.TextBox'
	$checkboxAdministrator = New-Object 'System.Windows.Forms.CheckBox'
	$labelPassword = New-Object 'System.Windows.Forms.Label'
	$labelUsername = New-Object 'System.Windows.Forms.Label'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	
	$formAddUserAccounts_Load={
		#TODO: Initialize Form Controls here
		
	}
	
	$buttonOK_Click={
		
		$usersObject = New-Object PSObject
		
		$usersObject | Add-Member -Type NoteProperty -Name "VMName" -Value $VMName
		$usersObject | Add-Member -Type NoteProperty -Name "Username" -Value $textboxUsername.Text
		$usersObject | Add-Member -Type NoteProperty -Name "Password" -Value $textboxPassword.Text
		
		if ($checkboxAdministrator.Checked) { $usersObject | Add-Member -Type NoteProperty -Name "Administrator" -Value "Yes" }
		else { $usersObject | Add-Member -Type NoteProperty -Name "Administrator" -Value "No" }
		
		$global:vmLocalUsers = $global:vmLocalUsers | ?{ $_.Username -ne $textboxUsername.Text }
		
		$global:vmLocalUsers = [System.Array]$global:vmLocalUsers + $usersObject
		
		$global:vmLocalUsers | Out-File "$ScriptDirectory\logs\users.log"
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formAddUserAccounts.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:AddLocalUsers_textboxPassword = $textboxPassword.Text
		$script:AddLocalUsers_textboxUsername = $textboxUsername.Text
		$script:AddLocalUsers_checkboxAdministrator = $checkboxAdministrator.Checked
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonOK.remove_Click($buttonOK_Click)
			$formAddUserAccounts.remove_Load($formAddUserAccounts_Load)
			$formAddUserAccounts.remove_Load($Form_StateCorrection_Load)
			$formAddUserAccounts.remove_Closing($Form_StoreValues_Closing)
			$formAddUserAccounts.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formAddUserAccounts.SuspendLayout()
	#
	# formAddUserAccounts
	#
	$formAddUserAccounts.Controls.Add($textboxPassword)
	$formAddUserAccounts.Controls.Add($textboxUsername)
	$formAddUserAccounts.Controls.Add($checkboxAdministrator)
	$formAddUserAccounts.Controls.Add($labelPassword)
	$formAddUserAccounts.Controls.Add($labelUsername)
	$formAddUserAccounts.Controls.Add($buttonOK)
	$formAddUserAccounts.AcceptButton = $buttonOK
	$formAddUserAccounts.AutoScaleDimensions = '6, 13'
	$formAddUserAccounts.AutoScaleMode = 'Font'
	$formAddUserAccounts.ClientSize = '225, 204'
	$formAddUserAccounts.FormBorderStyle = 'FixedDialog'
	$formAddUserAccounts.Margin = '6, 6, 6, 6'
	$formAddUserAccounts.MaximizeBox = $False
	$formAddUserAccounts.MinimizeBox = $False
	$formAddUserAccounts.Name = 'formAddUserAccounts'
	$formAddUserAccounts.StartPosition = 'CenterScreen'
	$formAddUserAccounts.Text = 'Add User Accounts'
	$formAddUserAccounts.add_Load($formAddUserAccounts_Load)
	#
	# textboxPassword
	#
	$textboxPassword.Location = '94, 86'
	$textboxPassword.Margin = '1, 2, 1, 2'
	$textboxPassword.Name = 'textboxPassword'
	$textboxPassword.PasswordChar = '*'
	$textboxPassword.Size = '100, 20'
	$textboxPassword.TabIndex = 1
	#
	# textboxUsername
	#
	$textboxUsername.Location = '94, 41'
	$textboxUsername.Margin = '1, 2, 1, 2'
	$textboxUsername.Name = 'textboxUsername'
	$textboxUsername.Size = '100, 20'
	$textboxUsername.TabIndex = 0
	#
	# checkboxAdministrator
	#
	$checkboxAdministrator.Location = '24, 138'
	$checkboxAdministrator.Name = 'checkboxAdministrator'
	$checkboxAdministrator.Size = '104, 24'
	$checkboxAdministrator.TabIndex = 2
	$checkboxAdministrator.Text = 'Administrator'
	$checkboxAdministrator.UseCompatibleTextRendering = $True
	$checkboxAdministrator.UseVisualStyleBackColor = $True
	#
	# labelPassword
	#
	$labelPassword.AutoSize = $True
	$labelPassword.Location = '24, 86'
	$labelPassword.Margin = '1, 0, 1, 0'
	$labelPassword.Name = 'labelPassword'
	$labelPassword.Size = '57, 17'
	$labelPassword.TabIndex = 2
	$labelPassword.Text = 'Password:'
	$labelPassword.UseCompatibleTextRendering = $True
	#
	# labelUsername
	#
	$labelUsername.AutoSize = $True
	$labelUsername.Location = '24, 42'
	$labelUsername.Margin = '1, 0, 1, 0'
	$labelUsername.Name = 'labelUsername'
	$labelUsername.Size = '60, 17'
	$labelUsername.TabIndex = 1
	$labelUsername.Text = 'Username:'
	$labelUsername.UseCompatibleTextRendering = $True
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Location = '138, 169'
	$buttonOK.Name = 'buttonOK'
	$buttonOK.Size = '75, 23'
	$buttonOK.TabIndex = 3
	$buttonOK.Text = '&OK'
	$buttonOK.UseCompatibleTextRendering = $True
	$buttonOK.UseVisualStyleBackColor = $True
	$buttonOK.add_Click($buttonOK_Click)
	$formAddUserAccounts.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formAddUserAccounts.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formAddUserAccounts.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formAddUserAccounts.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formAddUserAccounts.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formAddUserAccounts.ShowDialog()

}
#endregion Source: AddLocalUsers.psf

#region Source: WorkgroupDomainJoin.psf
function Show-WorkgroupDomainJoin_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
ZgYAACODCAAAAAAABABllUnLo3gQxu+BfIemr0Ibt6jwToNGjYn+3feb+xL3XT/9vNNzGZg6FUVV
QfH8eOrLSONuTceDC+fwx3cylV3710/sF/Lz9/Xy48eXOpZ52Ya1UNapEjbpb7cbP/nYLT3XNWHZ
vruy/dVP2Rf8v84/80I3Nr+x6lUikYElB2CYh8o9mH+DZTincegVr3J9U2hvWeiccPnMGnIdbjXv
VaC3Bcs8eUDzBUMni3vJ2kcCohq71ws5a5n6EPQmZ9D6uRsDXjEWt52QVzeRAKccTLHGFs3eietx
0Wa83PhbYCMuo5t9kWinmBEVxJX8nlnXCyR0uWtRzsHFOpNqkJO5Za/hUs/Od1AYG2GDjs1siXjw
cTodRBHbVYuzsOJutxCgPZIibq8PdTBN5fWi9Vh5KPCe2nRs8eGjIFVYzcCMd0dAbKM9RWNc428y
N9yg4n34weHcy0hkwqJiFg0P/ja+YVt/9tm4XS+iw2V56PmAlfCVdF7Aq3XgteZcpuInp+L7xCMN
Lq0eb1f33Ckd2HBWjPFGzW/p53O15qTCwcRCG+VcL1Jrg4CsUyxcPt7HFR97xusPnFIMM8qxVRlA
IqaEC9uc+PAfS1avVCi1ADUMQGYvorJNiIHNESiI118veOIMPcn5w5nqDshFseLeArMn1SN+7gXP
QJid+eZ9novhOTL+7K2gP40RI2qaogV5r2qAbXTR0hlSXy8geANEizQFtQV2GT/2jSxVHkAwAUS7
RfeQkmod80TR6MVFqR8Wv/TQcxdPOyBaXsARRwoxnIc/jWZfLwPavna6pOIPwskEcSZD87nHWyVm
ZL3gDB7cBrjgVfqE7j5UKptN+PQKV7tgVkLDGnS0kB0vH5YNqd+X2jpRvafhZQdbZoTVac+hXhvO
5x4cJE++Tfbdqgd+FGjGgifxCd3G/wf8/Rv8XWLjmliPpst4JH/cs+vlrNhS3yA7LehNAyJ1C0Km
OVQ3RgfJhiiO81+Zq8DAl9dd8iMWc4IlmYTGQYxDqhytTgAaz2ZT7WN4vZRm0XDuE8lOpI8+E8bs
AxElajVT+6ZtNtwKfunB1mT0ZCdltPqohQZNQs5UapTOOaRi1vqmsw7tDOP1Mm/PLoE6VSJv/C0P
u4TEaaSSFG3xIp9ugs0jq3c571awhHXbWL1pJ7RT7oqp964KfZB4SBQN3JPD+N62N97yUHxQImfw
lDNgNR8vmoYyoa2AwO9R6tiUMCZDNrTK8NBRkwpv9/TgI4Vz0xP60GErp/LupZicXi8F243YGiRR
vCXLRNcIMQn2rIkvd55gw7AHl9mRXEA531EhPDIZqm7RWut2H+/eZrA8X6oN+cUqM+W3pgKKjMk9
P++epJUYEEFwNwrk7Y/GJuFBQJMqIkzPHnRKCCEVz4froqvYfXVKKwFWbsVCKn9mg0yV+zdvqqwK
pC++6XeBRKHivgDiytMa6vQbwbzCacgmWl3aWU55ttgUOVZSIxYmRrMB4V5Qyy0j5QxkbyPqfL00
AZWEUgaemLeZqe4jrUdqkcuqhpfSQQPzLgQBJOzXSTFSpMszyw/7G7zesHHvvCljRssNZzgLhzy+
Xj6GJnOOWx5n/wapf3v4PtqZYx8WKClG8kr1ghqQ9PjMNGs4m28wGpE8mztGCIhHbx8R11AYX5ug
LrDr5bUxzBf8x9z/2DwzTWkT1WU6/YC/K1/wf//K778BF3wq1GYGAAA=#>
#endregion
param
(
	[Parameter(Mandatory = $true)]
	[string]$VMName
)

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formWorkgroupJoin = New-Object 'System.Windows.Forms.Form'
	$textboxHostname = New-Object 'System.Windows.Forms.TextBox'
	$labelHostname = New-Object 'System.Windows.Forms.Label'
	$textboxDomainPassword = New-Object 'System.Windows.Forms.TextBox'
	$textboxDomainUser = New-Object 'System.Windows.Forms.TextBox'
	$textboxDomainName = New-Object 'System.Windows.Forms.TextBox'
	$labelDomainPW = New-Object 'System.Windows.Forms.Label'
	$labelDomainUser = New-Object 'System.Windows.Forms.Label'
	$labelDomainName = New-Object 'System.Windows.Forms.Label'
	$radiobuttonWorkgroup = New-Object 'System.Windows.Forms.RadioButton'
	$radiobuttonDomain = New-Object 'System.Windows.Forms.RadioButton'
	$textboxWorkgroup = New-Object 'System.Windows.Forms.TextBox'
	$labelWorkGroup = New-Object 'System.Windows.Forms.Label'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	
	$formWorkgroupJoin_Load={
		#TODO: Initialize Form Controls here
		
	}
	
	$buttonOK_Click = {
		
		if ($radiobuttonDomain.Checked)
		{
			$domainObject = New-Object PSObject
			
			$domainObject | Add-Member -Type NoteProperty -Name "VMName" -Value $VMName
			$domainObject | Add-Member -Type NoteProperty -Name "DomainUser" -Value $textboxDomainUser.Text
			$domainObject | Add-Member -Type NoteProperty -Name "DomainPassword" -Value $textboxDomainPassword.Text
			$domainObject | Add-Member -Type NoteProperty -Name "DomainName" -Value $textboxDomainName.Text
			$domainObject | Add-Member -Type NoteProperty -Name "IsWorkgroup" -Value 'No'
			$domainObject | Add-Member -Type NoteProperty -Name "Hostname" -Value $textboxHostname.Text
			
			$global:vmWorkgroupDomain = $global:vmWorkgroupDomain | ?{ $_.VMName -ne $VMName }
			
			$global:vmWorkgroupDomain = [System.Array]$global:vmWorkgroupDomain + $domainObject
			
			$global:vmWorkgroupDomain | Out-File "$ScriptDirectory\logs\domains.log"
		}
		elseif ($radiobuttonWorkgroup.Checked)
		{
			$domainObject = New-Object PSObject
			
			$domainObject | Add-Member -Type NoteProperty -Name "VMName" -Value $VMName
			$domainObject | Add-Member -Type NoteProperty -Name "DomainUser" -Value ''
			$domainObject | Add-Member -Type NoteProperty -Name "DomainPassword" -Value ''
			$domainObject | Add-Member -Type NoteProperty -Name "DomainName" -Value $textboxWorkgroup.Text
			$domainObject | Add-Member -Type NoteProperty -Name "IsWorkgroup" -Value 'Yes'
			$domainObject | Add-Member -Type NoteProperty -Name "Hostname" -Value $textboxHostname.Text
			
			$global:vmWorkgroupDomain = $global:vmWorkgroupDomain | ?{ $_.VMName -ne $VMName }
			
			$global:vmWorkgroupDomain = [System.Array]$global:vmWorkgroupDomain + $domainObject
			
			$global:vmWorkgroupDomain | Out-File "$ScriptDirectory\logs\domains.log"
		}
		
		$labelOK2.Visible = $true
		
		Update-NavButtons
		
	}
	$radiobuttonDomain_CheckedChanged={
		
		if ($radiobuttonDomain.Checked)
		{
			$textboxWorkgroup.Enabled = $false
			$textboxDomainName.Enabled = $true
			$textboxDomainUser.Enabled = $true
			$textboxDomainPassword.Enabled = $true
		}
		elseif ($radiobuttonWorkgroup.Checked)
		{
			$textboxWorkgroup.Enabled = $true
			$textboxDomainName.Enabled = $false
			$textboxDomainUser.Enabled = $false
			$textboxDomainPassword.Enabled = $false
		}
		
	}
	
	$textboxWorkgroup_TextChanged={
		
		if (($textboxHostname.Text -ne '') -and ($textboxWorkgroup.Text -ne ''))
		{
			$buttonOK.Enabled = $true
		}
		else
		{
			$buttonOK.Enabled = $false
		}
		
	}
	
	$textboxDomainName_TextChanged={
		
		If (($textboxHostname.Text -ne '') -and ($textboxDomainName.Text -ne '') -and ($textboxDomainPassword -ne '') -and ($textboxDomainName -ne ''))
		{
			$buttonOK.Enabled = $true
		}
		else
		{
			$buttonOK.Enabled = $false
		}
		
	}
	
	$textboxDomainUser_TextChanged={
		
		If (($textboxHostname.Text -ne '') -and ($textboxDomainName.Text -ne '') -and ($textboxDomainPassword -ne '') -and ($textboxDomainName -ne ''))
		{
			$buttonOK.Enabled = $true
		}
		else
		{
			$buttonOK.Enabled = $false
		}
		
	}
	
	$textboxDomainPassword_TextChanged={
		
		If (($textboxHostname.Text -ne '') -and ($textboxDomainName.Text -ne '') -and ($textboxDomainPassword -ne '') -and ($textboxDomainName -ne ''))
		{
			$buttonOK.Enabled = $true
		}
		else
		{
			$buttonOK.Enabled = $false
		}
		
	}
	
	$textboxHostname_TextChanged={
		
		if ($radiobuttonDomain.Checked)
		{
			If (($textboxHostname.Text -ne '') -and ($textboxDomainName.Text -ne '') -and ($textboxDomainPassword -ne '') -and ($textboxDomainName -ne ''))
			{
				$buttonOK.Enabled = $true
			}
		}
		elseif ($radiobuttonWorkgroup.Checked)
		{
			if (($textboxHostname.Text -ne '') -and ($textboxWorkgroup.Text -ne '')) { $buttonOK.Enabled = $true }
		}
		else
		{
			$buttonOK.Enabled = $false
		}
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formWorkgroupJoin.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:WorkgroupDomainJoin_textboxHostname = $textboxHostname.Text
		$script:WorkgroupDomainJoin_textboxDomainPassword = $textboxDomainPassword.Text
		$script:WorkgroupDomainJoin_textboxDomainUser = $textboxDomainUser.Text
		$script:WorkgroupDomainJoin_textboxDomainName = $textboxDomainName.Text
		$script:WorkgroupDomainJoin_radiobuttonWorkgroup = $radiobuttonWorkgroup.Checked
		$script:WorkgroupDomainJoin_radiobuttonDomain = $radiobuttonDomain.Checked
		$script:WorkgroupDomainJoin_textboxWorkgroup = $textboxWorkgroup.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$textboxHostname.remove_TextChanged($textboxHostname_TextChanged)
			$textboxDomainPassword.remove_TextChanged($textboxDomainPassword_TextChanged)
			$textboxDomainUser.remove_TextChanged($textboxDomainUser_TextChanged)
			$textboxDomainName.remove_TextChanged($textboxDomainName_TextChanged)
			$radiobuttonDomain.remove_CheckedChanged($radiobuttonDomain_CheckedChanged)
			$textboxWorkgroup.remove_TextChanged($textboxWorkgroup_TextChanged)
			$buttonOK.remove_Click($buttonOK_Click)
			$formWorkgroupJoin.remove_Load($formWorkgroupJoin_Load)
			$formWorkgroupJoin.remove_Load($Form_StateCorrection_Load)
			$formWorkgroupJoin.remove_Closing($Form_StoreValues_Closing)
			$formWorkgroupJoin.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formWorkgroupJoin.SuspendLayout()
	#
	# formWorkgroupJoin
	#
	$formWorkgroupJoin.Controls.Add($textboxHostname)
	$formWorkgroupJoin.Controls.Add($labelHostname)
	$formWorkgroupJoin.Controls.Add($textboxDomainPassword)
	$formWorkgroupJoin.Controls.Add($textboxDomainUser)
	$formWorkgroupJoin.Controls.Add($textboxDomainName)
	$formWorkgroupJoin.Controls.Add($labelDomainPW)
	$formWorkgroupJoin.Controls.Add($labelDomainUser)
	$formWorkgroupJoin.Controls.Add($labelDomainName)
	$formWorkgroupJoin.Controls.Add($radiobuttonWorkgroup)
	$formWorkgroupJoin.Controls.Add($radiobuttonDomain)
	$formWorkgroupJoin.Controls.Add($textboxWorkgroup)
	$formWorkgroupJoin.Controls.Add($labelWorkGroup)
	$formWorkgroupJoin.Controls.Add($buttonOK)
	$formWorkgroupJoin.AcceptButton = $buttonOK
	$formWorkgroupJoin.AutoScaleDimensions = '6, 13'
	$formWorkgroupJoin.AutoScaleMode = 'Font'
	$formWorkgroupJoin.ClientSize = '360, 264'
	$formWorkgroupJoin.FormBorderStyle = 'FixedDialog'
	$formWorkgroupJoin.Margin = '6, 6, 6, 6'
	$formWorkgroupJoin.MaximizeBox = $False
	$formWorkgroupJoin.MinimizeBox = $False
	$formWorkgroupJoin.Name = 'formWorkgroupJoin'
	$formWorkgroupJoin.StartPosition = 'CenterScreen'
	$formWorkgroupJoin.Text = 'Join Workgroup/Domain'
	$formWorkgroupJoin.add_Load($formWorkgroupJoin_Load)
	#
	# textboxHostname
	#
	$textboxHostname.Location = '89, 20'
	$textboxHostname.Margin = '1, 2, 1, 2'
	$textboxHostname.MaxLength = 15
	$textboxHostname.Name = 'textboxHostname'
	$textboxHostname.Size = '100, 20'
	$textboxHostname.TabIndex = 0
	$textboxHostname.add_TextChanged($textboxHostname_TextChanged)
	#
	# labelHostname
	#
	$labelHostname.AutoSize = $True
	$labelHostname.Location = '29, 23'
	$labelHostname.Margin = '1, 0, 1, 0'
	$labelHostname.Name = 'labelHostname'
	$labelHostname.Size = '59, 17'
	$labelHostname.TabIndex = 11
	$labelHostname.Text = 'Hostname:'
	$labelHostname.UseCompatibleTextRendering = $True
	#
	# textboxDomainPassword
	#
	$textboxDomainPassword.Enabled = $False
	$textboxDomainPassword.Location = '131, 208'
	$textboxDomainPassword.Margin = '1, 2, 1, 2'
	$textboxDomainPassword.Name = 'textboxDomainPassword'
	$textboxDomainPassword.PasswordChar = '*'
	$textboxDomainPassword.Size = '100, 20'
	$textboxDomainPassword.TabIndex = 6
	$textboxDomainPassword.add_TextChanged($textboxDomainPassword_TextChanged)
	#
	# textboxDomainUser
	#
	$textboxDomainUser.Enabled = $False
	$textboxDomainUser.Location = '131, 178'
	$textboxDomainUser.Margin = '1, 2, 1, 2'
	$textboxDomainUser.Name = 'textboxDomainUser'
	$textboxDomainUser.Size = '100, 20'
	$textboxDomainUser.TabIndex = 5
	$textboxDomainUser.add_TextChanged($textboxDomainUser_TextChanged)
	#
	# textboxDomainName
	#
	$textboxDomainName.Enabled = $False
	$textboxDomainName.Location = '131, 142'
	$textboxDomainName.Margin = '1, 2, 1, 2'
	$textboxDomainName.Name = 'textboxDomainName'
	$textboxDomainName.Size = '100, 20'
	$textboxDomainName.TabIndex = 4
	$textboxDomainName.add_TextChanged($textboxDomainName_TextChanged)
	#
	# labelDomainPW
	#
	$labelDomainPW.AutoSize = $True
	$labelDomainPW.Location = '29, 214'
	$labelDomainPW.Margin = '1, 0, 1, 0'
	$labelDomainPW.Name = 'labelDomainPW'
	$labelDomainPW.Size = '99, 17'
	$labelDomainPW.TabIndex = 7
	$labelDomainPW.Text = 'Domain Password:'
	$labelDomainPW.UseCompatibleTextRendering = $True
	#
	# labelDomainUser
	#
	$labelDomainUser.AutoSize = $True
	$labelDomainUser.Location = '29, 178'
	$labelDomainUser.Margin = '1, 0, 1, 0'
	$labelDomainUser.Name = 'labelDomainUser'
	$labelDomainUser.Size = '102, 17'
	$labelDomainUser.TabIndex = 6
	$labelDomainUser.Text = 'Domain Username:'
	$labelDomainUser.UseCompatibleTextRendering = $True
	#
	# labelDomainName
	#
	$labelDomainName.AutoSize = $True
	$labelDomainName.Location = '29, 144'
	$labelDomainName.Margin = '1, 0, 1, 0'
	$labelDomainName.Name = 'labelDomainName'
	$labelDomainName.Size = '80, 17'
	$labelDomainName.TabIndex = 5
	$labelDomainName.Text = 'Domain Name:'
	$labelDomainName.UseCompatibleTextRendering = $True
	#
	# radiobuttonWorkgroup
	#
	$radiobuttonWorkgroup.Location = '168, 50'
	$radiobuttonWorkgroup.Name = 'radiobuttonWorkgroup'
	$radiobuttonWorkgroup.Size = '133, 24'
	$radiobuttonWorkgroup.TabIndex = 2
	$radiobuttonWorkgroup.TabStop = $True
	$radiobuttonWorkgroup.Text = 'Join a Workgroup'
	$radiobuttonWorkgroup.UseCompatibleTextRendering = $True
	$radiobuttonWorkgroup.UseVisualStyleBackColor = $True
	#
	# radiobuttonDomain
	#
	$radiobuttonDomain.Location = '43, 50'
	$radiobuttonDomain.Name = 'radiobuttonDomain'
	$radiobuttonDomain.Size = '104, 24'
	$radiobuttonDomain.TabIndex = 1
	$radiobuttonDomain.TabStop = $True
	$radiobuttonDomain.Text = 'Join a Domain'
	$radiobuttonDomain.UseCompatibleTextRendering = $True
	$radiobuttonDomain.UseVisualStyleBackColor = $True
	$radiobuttonDomain.add_CheckedChanged($radiobuttonDomain_CheckedChanged)
	#
	# textboxWorkgroup
	#
	$textboxWorkgroup.Enabled = $False
	$textboxWorkgroup.Location = '175, 89'
	$textboxWorkgroup.Margin = '1, 2, 1, 2'
	$textboxWorkgroup.Name = 'textboxWorkgroup'
	$textboxWorkgroup.Size = '136, 20'
	$textboxWorkgroup.TabIndex = 3
	$textboxWorkgroup.add_TextChanged($textboxWorkgroup_TextChanged)
	#
	# labelWorkGroup
	#
	$labelWorkGroup.AutoSize = $True
	$labelWorkGroup.Location = '29, 90'
	$labelWorkGroup.Margin = '1, 0, 1, 0'
	$labelWorkGroup.Name = 'labelWorkGroup'
	$labelWorkGroup.Size = '145, 17'
	$labelWorkGroup.TabIndex = 1
	$labelWorkGroup.Text = 'Enter the Workgroup Name:'
	$labelWorkGroup.UseCompatibleTextRendering = $True
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Enabled = $False
	$buttonOK.Location = '274, 229'
	$buttonOK.Name = 'buttonOK'
	$buttonOK.Size = '75, 23'
	$buttonOK.TabIndex = 7
	$buttonOK.Text = '&OK'
	$buttonOK.UseCompatibleTextRendering = $True
	$buttonOK.UseVisualStyleBackColor = $True
	$buttonOK.add_Click($buttonOK_Click)
	$formWorkgroupJoin.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formWorkgroupJoin.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formWorkgroupJoin.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formWorkgroupJoin.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formWorkgroupJoin.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formWorkgroupJoin.ShowDialog()

}
#endregion Source: WorkgroupDomainJoin.psf

#region Source: Functions\Test-TCPport.ps1
function Invoke-Test-TCPport_ps1
{
	function Test-TCPport 
	{
	    Param([parameter(Mandatory=$true,ValueFromPipeline=$True)][string[]]$ComputerName,
	            [parameter(Mandatory=$true,ValueFromPipeline=$True)]$TCPport
	    )
	
	    $requestCallback = $state = $null
	    $client = New-Object System.Net.Sockets.TcpClient
	    $beginConnect = $client.BeginConnect($ComputerName,$TCPport,$requestCallback,$state)
	    Start-Sleep -Milliseconds 500
	    if ($client.Connected) 
	    {
	        $open = $true
	    } 
	    else
	    {
	        $open = $false            
	    }
	
	    $client.Close()
	        
	    [pscustomobject]@{hostname=$ComputerName;port=$TCPport;open=$open}
	}
}
#endregion Source: Test-TCPport.ps1

#region Source: Functions\CustomizeOS.ps1
function Invoke-CustomizeOS_ps1
{
	<#
		.SYNOPSIS
			A brief description of the Invoke-CustomizeOS_ps1 file.
		
		.DESCRIPTION
			A description of the file.
		
		.PARAMETER Scripts
			A description of the Scripts parameter.
		
		.PARAMETER VMName
			A description of the VMName parameter.
		
		.PARAMETER GuestCredential
			A description of the GuestCredential parameter.
		
		.NOTES
			===========================================================================
			Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2018 v5.5.150
			Created on:   	7/9/2019 9:38 AM
			Created by:   	dalthakar
			Organization:
			Filename:     	CustomizeOS.ps1
			===========================================================================
	#>
	
	function Customize-OS
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[string]$VMName,
			[Parameter(Mandatory = $true)]
			[pscredential]$GuestCredential,
			[Parameter(Mandatory = $true)]
			[array]$Scripts
		)
		
		foreach ($script in $Scripts)
		{
			Invoke-VMScript -VM $VMName -GuestCredential $GuestCredential -ScriptText "$($script.Command)" | Out-File "$ScriptDirectory\logs\scriptcommand.log" -Append
			
		}
	}
}
#endregion Source: CustomizeOS.ps1

#region Source: AddVirtualDisk.psf
function Show-AddVirtualDisk_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
aQYAACODCAAAAAAABABlVVkLo1gTfQ/kPzTzKoxb3KCnweUal6hxj76573E36q//0v29DMyF4hZF
VVGHOpz6aWVJv2XTIURL9OPrzFX//ucv/G/0r1/Xy48fP42pKqp31IpVm+lRl/1i09SrpmWNWqGa
m7+HOf8J/yfpT6nYT90v8wQcyr0t2wYsyxsCz/7/cazg+T663ZrAhFtygGmpMhlPVVmHJ0+PMypu
E5HyaCRu2RBrym7EPDOESOIuf73AuZ8ymZzwkT1THwobm6LX6yd1avMZYCGdGS9YCO4qdsIwIXUS
MSsOfTSJ6ManD+4Ic3sfrnCK2ZF+u1lrdJIqTo1rpZtJ6NLqc8QnClLxKS3VFnzKu2SBN18tBHqr
teilCbRVf9gnLMeCJz+izTtIklUhGvWvl0+mNebqPDOdojTjtCAerJkGmDASAe0qr4R3xeqzDotf
b4tlOc19hBBpzjmB896uOXwcLWy5iQ8RgbleWC6s8mr4pJ70sZeWG7KjWRDCaLlCLMH9ac082mIl
2LLKE6Dd4w4VmNsM8rTqEcx1V26ycpQvkfHznW1zR2ZuRSUkQR2y5TEYoWYyIAw4VgGEoR+FdvS7
VKWJqYlm9whiTSVerffY7iciEgaFRF5jK/YrWIPrRR1HB5v9Wy8bHGewceozxfB2QBibY7YdsnLg
DdSr4EFjJEIlhk225jDdCYM9z6W9ZeVEM4HKFwrU1N+dipk+gbjtOCM389I/28CDKrlQtnEpyMcr
Fqu+A/Z2v49l5Nb5yEtvD1smJxiVnCYEk418/4wr1dah60VOJSTFDD/Etlds7ilwkR1wBZ0nHxOI
qf2sOiTGrCpL7GAv2jJ6oZj9FEzRPeUF9l9G0C/yqwwAo1LXCyMvL49HwmnpzwVJXCN0EUnUb1g9
wObHjmW9qIu1HUlGD4hI++wVpkBc85v89Jf8x/sMHwgmOWW/vK6XNSzTqWPP6TSXlI173UJLtlDa
F6J20hIQ8QhoS4A2Q1liQKNBid8WqW6UAHnuoUFELca3ddWuRHRy1wtqCh0BKcZKliskLEsfDv3q
fb/V8yEy0113YwCGk/kZPx9KnQ+4niklIMGyGxmkDBDptFyFhbe1ob9I7YeeHtTxeN/3WoPPrsEd
DbOSGiP0o+sfdtzlNeGgTtSkgAhZhqA+VURJjBVnD3NhIlq1jgfF4tQeXy8n7hfF67PbDBJUsvPO
QY3RouokNdBDJfOFHV8ED6g2bBOY1/pk3dzDpJlFncNffYgMkrOLFNILvdV8kT7pLPDnXCICpCme
DcByeaBJ8yQ+5ftcBHhlNSiRw2ShQ3pmQ3p0T4Jf3oeeG43wTdxvv40wKWK/Xr4lkyC9Z+HZORpk
wm9egn/3mtBchuzwfJpoeNppd28nJg+JDVTTu7tZY3cE5cxAnCZ6t3df+lP8G6kCV4uL3nNI47Fn
Ke91LtPogGJ0gQLMf5jZoBBr7A/Y4WiuYaDvNAaRMeB2Gz06HgajOG2xpz6eMv5FCr+mCMrwVK8D
/HkSKDSy7qGg9oCpTs/krvYKI5fMoS+Rd6xkVzfJAkZ+fsIxpYINwwwuLTOJ3xZCS6+XIh0sxNrG
dDf9xDG26JaYPeXeBO9senScCu+YCB1ZfVKkGY8Ko1XCwwidw+Q0GLrZsEeLNDkSLzAtXi91Jbet
25RfEf/nJ/xH5P/IPTvPWRe3VTb/gL+Rn/C/T8uv/wE8CLOYaQYAAA==#>
#endregion
param
(
	[Parameter(Mandatory = $true)]
	[string]$VMName
)

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formAddDisks = New-Object 'System.Windows.Forms.Form'
	$buttonDeleteDrive = New-Object 'System.Windows.Forms.Button'
	$datagridviewDiskList = New-Object 'System.Windows.Forms.DataGridView'
	$buttonAddDrive = New-Object 'System.Windows.Forms.Button'
	$numericupdownDriveSize = New-Object 'System.Windows.Forms.NumericUpDown'
	$comboboxDriveMount = New-Object 'System.Windows.Forms.ComboBox'
	$labelDriveSizeGB = New-Object 'System.Windows.Forms.Label'
	$labelDriveLetter = New-Object 'System.Windows.Forms.Label'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	
	$formAddDisks_Load={
		
		$formAddDisks.Text = "Add Disks to $VMName"
		
		if ($global:vmAdditionalDisks | ?{ $_.VMName -eq $VMName })
		{
			$diskTmp = $global:vmAdditionalDisks | ?{ $_.VMName -eq $VMName } | select DriveLetter, DriveSize
			
			$driveList = ConvertTo-DataTable -InputObject $diskTmp
			Update-DataGridView -DataGridView $datagridviewDiskList -Item $driveList
			
			foreach ($disk in $diskTmp)
			{
				$comboboxDriveMount.Items.Remove($disk.DriveLetter)
			}
			
			$buttonDeleteDrive.Enabled = $true
		}
	}
	
	#region Control Helper Functions
	function Update-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The DataGridView control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the DataGridView's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		.PARAMETER AutoSizeColumns
		    Resizes DataGridView control's columns after loading the items.
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Item,
		    [Parameter(Mandatory=$false)]
			[string]$DataMember,
			[System.Windows.Forms.DataGridViewAutoSizeColumnMode]$AutoSizeColumns = 'None'
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
		{
			$DataGridView.DataSource = $Item.Tables[0]
		}
		elseif ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{
				$array.Add($Item)
			}
			$DataGridView.DataSource = $array
		}
		
		if ($AutoSizeColumns -ne 'None')
		{
			$DataGridView.AutoResizeColumns($AutoSizeColumns)
		}
		
		$DataGridView.ResumeLayout()
	}
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterWMIProperties
				This switch removes WMI properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param(
		[ValidateNotNull()]
		$InputObject, 
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
		
		if($null -eq $Table)
		{
			$Table = New-Object System.Data.DataTable
		}
		
		if ($InputObject -is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
		{
			$Table = $InputObject.Tables[0]
		}
		else
		{
			if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
				
				if ($null -eq $InputObject) { return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach ($item in $InputObject)
				{
					if ($null -ne $item)
					{
						$object = $item
						break
					}
				}
				
				if ($null -eq $object) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if ($null -ne $prop.Value)
						{
							try { $type = $prop.Value.GetType() }
							catch { Out-Null }
						}
						
						if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
							[void]$table.Columns.Add($prop.Name, $type)
						}
						else #Type info not found
						{
							[void]$table.Columns.Add($prop.Name)
						}
					}
				}
				
				if ($object -is [System.Data.DataRow])
				{
					foreach ($item in $InputObject)
					{
						$Table.Rows.Add($item)
					}
					return @( ,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()
			}
			
			foreach ($item in $InputObject)
			{
				$row = $table.NewRow()
				
				if ($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if ($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
		
		return @(,$Table)	
	}
	
	function Update-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
		
		.PARAMETER ComboBox
			The ComboBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ComboBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red" -Append
			Update-ComboBox $combobox1 "White" -Append
			Update-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Update-ComboBox $combobox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ComboBox]
			$ComboBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]
			$DisplayMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	function Update-ListViewColumnSort
	{
	<#
		.SYNOPSIS
			Sort the ListView's item using the specified column.
		
		.DESCRIPTION
			Sort the ListView's item using the specified column.
			This function uses Add-Type to define a class that sort the items.
			The ListView's Tag property is used to keep track of the sorting.
		
		.PARAMETER ListView
			The ListView control to sort.
		
		.PARAMETER ColumnIndex
			The index of the column to use for sorting.
		
		.PARAMETER SortOrder
			The direction to sort the items. If not specified or set to None, it will toggle.
		
		.EXAMPLE
			Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListView]
			$ListView,
			[Parameter(Mandatory = $true)]
			[int]
			$ColumnIndex,
			[System.Windows.Forms.SortOrder]
			$SortOrder = 'None'
		)
		
		if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
		{
			return;
		}
		
		#region Define ListViewItemComparer
		try
		{
			[ListViewItemComparer] | Out-Null
		}
		catch
		{
			Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
		}
		#endregion
		
		if ($ListView.Tag -is [ListViewItemComparer])
		{
			#Toggle the Sort Order
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
				{
					$ListView.Tag.sortOrder = 'Descending'
				}
				else
				{
					$ListView.Tag.sortOrder = 'Ascending'
				}
			}
			else
			{
				$ListView.Tag.sortOrder = $SortOrder
			}
			
			$ListView.Tag.column = $ColumnIndex
			$ListView.Sort() #Sort the items
		}
		else
		{
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
			}
			
			#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
			$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
			$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
		}
	}
	
	$comboboxDriveMount_SelectedIndexChanged={
		
		if (($comboboxDriveMount.Text -ne '') -and ($numericupdownDriveSize.Text -ne '0'))
		{
			$buttonAddDrive.Enabled = $true
			$buttonDeleteDrive.Enabled = $true
		}
		
	}
	
	$buttonAddDrive_Click={
		
		$driveObject = New-Object PSObject
		
		$driveObject | Add-Member -MemberType NoteProperty -Name "VMName" -Value $VMName
		$driveObject | Add-Member -MemberType NoteProperty -Name "DriveLetter" -Value $comboboxDriveMount.Text
		$driveObject | Add-Member -MemberType NoteProperty -Name "DriveSize" -Value $numericupdownDriveSize.Text
		
		$global:vmAdditionalDisks = [System.Array]$global:vmAdditionalDisks + $driveObject
		
		$driveRecord = ConvertTo-DataTable ($global:vmAdditionalDisks | ?{ $_.VMName -eq $VMName } | select DriveLetter,DriveSize)
		Update-DataGridView -DataGridView $datagridviewDiskList -Item $driveRecord
		
		$comboboxDriveMount.Items.Remove($comboboxDriveMount.Text)
		
	}
	
	$numericupdownDriveSize_ValueChanged={
		
		if (($comboboxDriveMount.Text -ne '') -and ($numericupdownDriveSize.Text -ne '0') -and ($numericupdownDriveSize.Text -ne ''))
		{
			$buttonAddDrive.Enabled = $true
		}
		
	}
	
	$buttonDeleteDrive_Click={
		
		$global:vmAdditionalDisks = $global:vmAdditionalDisks | ?{ -not (($_.VMName -eq $VMName) -and ($_.DriveLetter -eq $datagridviewDiskList.CurrentRow.Cells[0].Value)) }
		$datagridviewDiskList.Rows.RemoveAt($datagridviewDiskList.CurrentRow.Index)
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formAddDisks.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:AddVirtualDisk_datagridviewDiskList = $datagridviewDiskList.SelectedCells
		$script:AddVirtualDisk_numericupdownDriveSize = $numericupdownDriveSize.Value
		$script:AddVirtualDisk_comboboxDriveMount = $comboboxDriveMount.Text
		$script:AddVirtualDisk_comboboxDriveMount_SelectedItem = $comboboxDriveMount.SelectedItem
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonDeleteDrive.remove_Click($buttonDeleteDrive_Click)
			$buttonAddDrive.remove_Click($buttonAddDrive_Click)
			$numericupdownDriveSize.remove_ValueChanged($numericupdownDriveSize_ValueChanged)
			$comboboxDriveMount.remove_SelectedIndexChanged($comboboxDriveMount_SelectedIndexChanged)
			$formAddDisks.remove_Load($formAddDisks_Load)
			$formAddDisks.remove_Load($Form_StateCorrection_Load)
			$formAddDisks.remove_Closing($Form_StoreValues_Closing)
			$formAddDisks.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formAddDisks.SuspendLayout()
	$numericupdownDriveSize.BeginInit()
	#
	# formAddDisks
	#
	$formAddDisks.Controls.Add($buttonDeleteDrive)
	$formAddDisks.Controls.Add($datagridviewDiskList)
	$formAddDisks.Controls.Add($buttonAddDrive)
	$formAddDisks.Controls.Add($numericupdownDriveSize)
	$formAddDisks.Controls.Add($comboboxDriveMount)
	$formAddDisks.Controls.Add($labelDriveSizeGB)
	$formAddDisks.Controls.Add($labelDriveLetter)
	$formAddDisks.Controls.Add($buttonOK)
	$formAddDisks.AcceptButton = $buttonOK
	$formAddDisks.AutoScaleDimensions = '6, 13'
	$formAddDisks.AutoScaleMode = 'Font'
	$formAddDisks.ClientSize = '284, 262'
	$formAddDisks.FormBorderStyle = 'FixedDialog'
	$formAddDisks.MaximizeBox = $False
	$formAddDisks.MinimizeBox = $False
	$formAddDisks.Name = 'formAddDisks'
	$formAddDisks.StartPosition = 'CenterScreen'
	$formAddDisks.Text = 'Form'
	$formAddDisks.add_Load($formAddDisks_Load)
	#
	# buttonDeleteDrive
	#
	$buttonDeleteDrive.Enabled = $False
	$buttonDeleteDrive.Location = '93, 87'
	$buttonDeleteDrive.Name = 'buttonDeleteDrive'
	$buttonDeleteDrive.Size = '75, 23'
	$buttonDeleteDrive.TabIndex = 19
	$buttonDeleteDrive.Text = '&Delete Drive'
	$buttonDeleteDrive.UseCompatibleTextRendering = $True
	$buttonDeleteDrive.UseVisualStyleBackColor = $True
	$buttonDeleteDrive.add_Click($buttonDeleteDrive_Click)
	#
	# datagridviewDiskList
	#
	$datagridviewDiskList.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridviewDiskList.Location = '12, 128'
	$datagridviewDiskList.MultiSelect = $False
	$datagridviewDiskList.Name = 'datagridviewDiskList'
	$datagridviewDiskList.ReadOnly = $True
	$datagridviewDiskList.SelectionMode = 'FullRowSelect'
	$datagridviewDiskList.Size = '260, 93'
	$datagridviewDiskList.TabIndex = 18
	#
	# buttonAddDrive
	#
	$buttonAddDrive.Enabled = $False
	$buttonAddDrive.Location = '12, 87'
	$buttonAddDrive.Name = 'buttonAddDrive'
	$buttonAddDrive.Size = '75, 23'
	$buttonAddDrive.TabIndex = 17
	$buttonAddDrive.Text = '&Add Drive'
	$buttonAddDrive.UseCompatibleTextRendering = $True
	$buttonAddDrive.UseVisualStyleBackColor = $True
	$buttonAddDrive.add_Click($buttonAddDrive_Click)
	#
	# numericupdownDriveSize
	#
	$numericupdownDriveSize.Location = '113, 58'
	$numericupdownDriveSize.Name = 'numericupdownDriveSize'
	$numericupdownDriveSize.Size = '49, 20'
	$numericupdownDriveSize.TabIndex = 16
	$numericupdownDriveSize.add_ValueChanged($numericupdownDriveSize_ValueChanged)
	#
	# comboboxDriveMount
	#
	$comboboxDriveMount.DropDownStyle = 'DropDownList'
	$comboboxDriveMount.FormattingEnabled = $True
	[void]$comboboxDriveMount.Items.Add('E')
	[void]$comboboxDriveMount.Items.Add('F')
	[void]$comboboxDriveMount.Items.Add('G')
	[void]$comboboxDriveMount.Items.Add('H')
	[void]$comboboxDriveMount.Items.Add('I')
	[void]$comboboxDriveMount.Items.Add('J')
	[void]$comboboxDriveMount.Items.Add('K')
	[void]$comboboxDriveMount.Items.Add('L')
	[void]$comboboxDriveMount.Items.Add('M')
	[void]$comboboxDriveMount.Items.Add('N')
	[void]$comboboxDriveMount.Items.Add('O')
	[void]$comboboxDriveMount.Items.Add('P')
	[void]$comboboxDriveMount.Items.Add('Q')
	[void]$comboboxDriveMount.Items.Add('R')
	[void]$comboboxDriveMount.Items.Add('S')
	[void]$comboboxDriveMount.Items.Add('T')
	[void]$comboboxDriveMount.Items.Add('U')
	[void]$comboboxDriveMount.Items.Add('V')
	[void]$comboboxDriveMount.Items.Add('W')
	[void]$comboboxDriveMount.Items.Add('X')
	[void]$comboboxDriveMount.Items.Add('Y')
	[void]$comboboxDriveMount.Items.Add('Z')
	$comboboxDriveMount.Location = '113, 20'
	$comboboxDriveMount.Name = 'comboboxDriveMount'
	$comboboxDriveMount.Size = '49, 21'
	$comboboxDriveMount.TabIndex = 15
	$comboboxDriveMount.add_SelectedIndexChanged($comboboxDriveMount_SelectedIndexChanged)
	#
	# labelDriveSizeGB
	#
	$labelDriveSizeGB.AutoSize = $True
	$labelDriveSizeGB.Location = '12, 61'
	$labelDriveSizeGB.Name = 'labelDriveSizeGB'
	$labelDriveSizeGB.Size = '86, 17'
	$labelDriveSizeGB.TabIndex = 14
	$labelDriveSizeGB.Text = 'Drive Size (GB):'
	$labelDriveSizeGB.UseCompatibleTextRendering = $True
	#
	# labelDriveLetter
	#
	$labelDriveLetter.AutoSize = $True
	$labelDriveLetter.Location = '12, 24'
	$labelDriveLetter.Name = 'labelDriveLetter'
	$labelDriveLetter.Size = '66, 17'
	$labelDriveLetter.TabIndex = 13
	$labelDriveLetter.Text = 'Drive Letter:'
	$labelDriveLetter.UseCompatibleTextRendering = $True
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Location = '197, 227'
	$buttonOK.Name = 'buttonOK'
	$buttonOK.Size = '75, 23'
	$buttonOK.TabIndex = 0
	$buttonOK.Text = '&OK'
	$buttonOK.UseCompatibleTextRendering = $True
	$buttonOK.UseVisualStyleBackColor = $True
	$numericupdownDriveSize.EndInit()
	$formAddDisks.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formAddDisks.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formAddDisks.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formAddDisks.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formAddDisks.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formAddDisks.ShowDialog()

}
#endregion Source: AddVirtualDisk.psf

#region Source: AddNicCard.psf
function Show-AddNicCard_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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
lM9FCAAA#>
#endregion
param
(
	[Parameter(Mandatory = $true)]
	[string]$VMName
)

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formAddNic = New-Object 'System.Windows.Forms.Form'
	$listviewAddedNics = New-Object 'System.Windows.Forms.ListView'
	$buttonDeleteNIC = New-Object 'System.Windows.Forms.Button'
	$buttonAddNic = New-Object 'System.Windows.Forms.Button'
	$textboxDNS1AddNic = New-Object 'System.Windows.Forms.TextBox'
	$labelDNS1AddNic = New-Object 'System.Windows.Forms.Label'
	$checkboxStaticIPAddNic = New-Object 'System.Windows.Forms.CheckBox'
	$textboxDefaultGatewayAddNic = New-Object 'System.Windows.Forms.TextBox'
	$labelDefaultGatewayAddNic = New-Object 'System.Windows.Forms.Label'
	$textboxSubnetMaskAddNic = New-Object 'System.Windows.Forms.TextBox'
	$labelSubnetMaskAddNic = New-Object 'System.Windows.Forms.Label'
	$textboxIPAddressAddNic = New-Object 'System.Windows.Forms.TextBox'
	$comboboxVSwitchAddNic = New-Object 'System.Windows.Forms.ComboBox'
	$labelIPAddressAddNic = New-Object 'System.Windows.Forms.Label'
	$labelVirtualSwitchAddNic = New-Object 'System.Windows.Forms.Label'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$columnheaderVMName = New-Object 'System.Windows.Forms.ColumnHeader'
	$columnheaderIPType = New-Object 'System.Windows.Forms.ColumnHeader'
	$columnheaderVLAN = New-Object 'System.Windows.Forms.ColumnHeader'
	$columnheaderIPAddress = New-Object 'System.Windows.Forms.ColumnHeader'
	$columnheaderSubnetMask = New-Object 'System.Windows.Forms.ColumnHeader'
	$columnheaderDefaultGateway = New-Object 'System.Windows.Forms.ColumnHeader'
	$columnheaderDNSServer = New-Object 'System.Windows.Forms.ColumnHeader'
	$columnheaderNICFullConfig = New-Object 'System.Windows.Forms.ColumnHeader'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	
	$formAddNic_Load = {
		
		$vmHost = $global:vmbuilds | ?{$_.VMName -eq $VMName}
		$script:vSwitchesAddNic = Get-VirtualPortGroup -Server $global:vcenterConnection.Name -Host $vmHost.("VM Host") | select Name | Sort-Object -Property Name
		Update-ComboBox -ComboBox $comboboxVSwitchAddNic -Items $script:vSwitchesAddNic.Name
		
		if ($global:vmAdditionalNICs | ?{ $_.VMName -eq $VMName })
		{
			$nicTmp = $global:vmAdditionalNICs | ?{ $_.VMName -eq $VMName }
			
			foreach ($nic in $global:vmAdditionalNics)
			{
				
			}
			
			#$buttonDeleteNIC.Enabled = $true
		}
		
	}
	
	#region Control Helper Functions
	function Update-ListViewColumnSort
	{
	<#
		.SYNOPSIS
			Sort the ListView's item using the specified column.
		
		.DESCRIPTION
			Sort the ListView's item using the specified column.
			This function uses Add-Type to define a class that sort the items.
			The ListView's Tag property is used to keep track of the sorting.
		
		.PARAMETER ListView
			The ListView control to sort.
		
		.PARAMETER ColumnIndex
			The index of the column to use for sorting.
		
		.PARAMETER SortOrder
			The direction to sort the items. If not specified or set to None, it will toggle.
		
		.EXAMPLE
			Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListView]
			$ListView,
			[Parameter(Mandatory = $true)]
			[int]
			$ColumnIndex,
			[System.Windows.Forms.SortOrder]
			$SortOrder = 'None'
		)
		
		if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
		{
			return;
		}
		
		#region Define ListViewItemComparer
		try
		{
			[ListViewItemComparer] | Out-Null
		}
		catch
		{
			Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
		}
		#endregion
		
		if ($ListView.Tag -is [ListViewItemComparer])
		{
			#Toggle the Sort Order
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
				{
					$ListView.Tag.sortOrder = 'Descending'
				}
				else
				{
					$ListView.Tag.sortOrder = 'Ascending'
				}
			}
			else
			{
				$ListView.Tag.sortOrder = $SortOrder
			}
			
			$ListView.Tag.column = $ColumnIndex
			$ListView.Sort() #Sort the items
		}
		else
		{
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
			}
			
			#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
			$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
			$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
		}
	}
	
	
	function Add-ListViewItem
	{
	<#
		.SYNOPSIS
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.DESCRIPTION
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.PARAMETER ListView
			The ListView control to add the items to.
	
		.PARAMETER Items
			The object or objects you wish to load into the ListView's Items collection.
			
		.PARAMETER  ImageIndex
			The index of a predefined image in the ListView's ImageList.
		
		.PARAMETER  SubItems
			List of strings to add as Subitems.
		
		.PARAMETER Group
			The group to place the item(s) in.
		
		.PARAMETER Clear
			This switch clears the ListView's Items before adding the new item(s).
		
		.EXAMPLE
			Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
	#>
		
		Param( 
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.ListView]$ListView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Items,
		[int]$ImageIndex = -1,
		[string[]]$SubItems,
		$Group,
		[switch]$Clear)
		
		if($Clear)
		{
			$ListView.Items.Clear();
	    }
	    
	    $lvGroup = $null
	    if ($Group -is [System.Windows.Forms.ListViewGroup])
	    {
	        $lvGroup = $Group
	    }
	    elseif ($Group -is [string])
	    {
	        #$lvGroup = $ListView.Group[$Group] # Case sensitive
	        foreach ($groupItem in $ListView.Groups)
	        {
	            if ($groupItem.Name -eq $Group)
	            {
	                $lvGroup = $groupItem
	                break
	            }
	        }
	        
	        if ($null -eq $lvGroup)
	        {
	            $lvGroup = $ListView.Groups.Add($Group, $Group)
	        }
	    }
	    
		if($Items -is [Array])
		{
			$ListView.BeginUpdate()
			foreach ($item in $Items)
			{		
				$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
				#Store the object in the Tag
				$listitem.Tag = $item
				
				if($null -ne $SubItems)
				{
					$listitem.SubItems.AddRange($SubItems)
				}
				
				if($null -ne $lvGroup)
				{
					$listitem.Group = $lvGroup
				}
			}
			$ListView.EndUpdate()
		}
		else
		{
			#Add a new item to the ListView
			$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $Items
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
	}
	
	function Update-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
		
		.PARAMETER ComboBox
			The ComboBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ComboBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red" -Append
			Update-ComboBox $combobox1 "White" -Append
			Update-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Update-ComboBox $combobox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ComboBox]
			$ComboBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]
			$DisplayMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
	}
	#endregion
	
	$checkboxStaticIPAddNic_CheckedChanged={
		
		if ($checkboxStaticIPAddNic.Checked)
		{
			$textboxIPAddressAddNic.Enabled = $true
			$textboxSubnetMaskAddNic.Enabled = $true
			$textboxDefaultGatewayAddNic.Enabled = $true
			$textboxDNS1AddNic.Enabled = $true
		}
		else
		{
			$textboxIPAddressAddNic.Enabled = $false
			$textboxSubnetMaskAddNic.Enabled = $false
			$textboxDefaultGatewayAddNic.Enabled = $false
			$textboxDNS1AddNic.Enabled = $false
		}
		
	}
	
	$buttonAddNic_Click = {
		
		$object = New-Object PSObject
		
		$object | Add-Member -MemberType NoteProperty -Name "VMName" -Value $VMName
		
		if ($checkboxStaticIPAddNic.Checked)
		{
			$object | Add-Member -MemberType NoteProperty -Name "IP Type" -Value "Static"
			$object | Add-Member -MemberType NoteProperty -Name "VLAN" -Value $comboboxVSwitchAddNic.Text
			$object | Add-Member -MemberType NoteProperty -Name "IP Address" -Value $textboxIPAddressAddNic.Text
			$object | Add-Member -MemberType NoteProperty -Name "Subnet Mask" -Value $textboxSubnetMaskAddNic.Text
			$object | Add-Member -MemberType NoteProperty -Name "Default Gateway" -Value $textboxDefaultGatewayAddNic.Text
			$object | Add-Member -MemberType NoteProperty -Name "Primary DNS Server" -Value $textboxDNS1AddNic.Text
		}
		else
		{
			$object | Add-Member -MemberType NoteProperty -Name "IP Type" -Value "DHCP"
			$object | Add-Member -MemberType NoteProperty -Name "VLAN" -Value $comboboxVSwitchAddNic.Text
			$object | Add-Member -MemberType NoteProperty -Name "IP Address" -Value ''
			$object | Add-Member -MemberType NoteProperty -Name "Subnet Mask" -Value ''
			$object | Add-Member -MemberType NoteProperty -Name "Default Gateway" -Value ''
			$object | Add-Member -MemberType NoteProperty -Name "Primary DNS Server" -Value ''
		}
		
		$global:vmAdditionalNICs = [System.Array]$global:vmAdditionalNICs + $object
		
		Add-ListViewItem -ListView $listviewAddedNics -Items $object.VMName -SubItems $object.("IP Type"), $object.VLAN, $object.("IP Address"), `
						 $object.("Subnet Mask"), $object.("Default Gateway"), $object.("Primary DNS Server")
		
		#if ($buttonDeleteNIC.Enabled -eq $false) { $buttonDeleteNIC.Enabled = $true }
		
		$textboxIPAddressAddNic.Clear()
		$textboxSubnetMaskAddNic.Clear()
		$textboxDefaultGatewayAddNic.Clear()
		$textboxDNS1AddNic.Clear()
		$checkboxStaticIPAddNic.Checked = $false
		
		Update-ComboBox -ComboBox $comboboxVSwitchAddNic -Items $script:vSwitchesAddNic.Name
	}
	
	$buttonDeleteNIC_Click={
		
		$listviewAddedNics.SelectedItems[0].Remove()
		
		#$datagridviewNicCardsAddNic.CurrentRow.Cells[1].Value | Out-File "$ScriptDirectory\logs\index2.log" -Append
		
		if ($listviewAddedNics.Items.Count -eq 0) {$buttonDeleteNIC.Enabled = $false}
	}
	
	$buttonOK_Click={
		
		#$datagridviewAddNic.Rows.Count | Out-File "$ScriptDirectory\logs\datagridaddnic.log" -Append
		
		#$global:vmAdditionalNics | Out-File "$ScriptDirectory\logs\globalvmadditions.log"
		
		$global:vmAdditionalNics | Out-File "$ScriptDirectory\logs\globalnics.log"
		
	}
	
	$comboboxVSwitchAddNic_SelectedIndexChanged={
		
		$buttonAddNic.Enabled = $true
		
	}
	
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formAddNic.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:AddNicCard_listviewAddedNics = $listviewAddedNics.SelectedItems
		$script:AddNicCard_textboxDNS1AddNic = $textboxDNS1AddNic.Text
		$script:AddNicCard_checkboxStaticIPAddNic = $checkboxStaticIPAddNic.Checked
		$script:AddNicCard_textboxDefaultGatewayAddNic = $textboxDefaultGatewayAddNic.Text
		$script:AddNicCard_textboxSubnetMaskAddNic = $textboxSubnetMaskAddNic.Text
		$script:AddNicCard_textboxIPAddressAddNic = $textboxIPAddressAddNic.Text
		$script:AddNicCard_comboboxVSwitchAddNic = $comboboxVSwitchAddNic.Text
		$script:AddNicCard_comboboxVSwitchAddNic_SelectedItem = $comboboxVSwitchAddNic.SelectedItem
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonDeleteNIC.remove_Click($buttonDeleteNIC_Click)
			$buttonAddNic.remove_Click($buttonAddNic_Click)
			$checkboxStaticIPAddNic.remove_CheckedChanged($checkboxStaticIPAddNic_CheckedChanged)
			$comboboxVSwitchAddNic.remove_SelectedIndexChanged($comboboxVSwitchAddNic_SelectedIndexChanged)
			$buttonOK.remove_Click($buttonOK_Click)
			$formAddNic.remove_Load($formAddNic_Load)
			$formAddNic.remove_Load($Form_StateCorrection_Load)
			$formAddNic.remove_Closing($Form_StoreValues_Closing)
			$formAddNic.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formAddNic.SuspendLayout()
	#
	# formAddNic
	#
	$formAddNic.Controls.Add($listviewAddedNics)
	$formAddNic.Controls.Add($buttonDeleteNIC)
	$formAddNic.Controls.Add($buttonAddNic)
	$formAddNic.Controls.Add($textboxDNS1AddNic)
	$formAddNic.Controls.Add($labelDNS1AddNic)
	$formAddNic.Controls.Add($checkboxStaticIPAddNic)
	$formAddNic.Controls.Add($textboxDefaultGatewayAddNic)
	$formAddNic.Controls.Add($labelDefaultGatewayAddNic)
	$formAddNic.Controls.Add($textboxSubnetMaskAddNic)
	$formAddNic.Controls.Add($labelSubnetMaskAddNic)
	$formAddNic.Controls.Add($textboxIPAddressAddNic)
	$formAddNic.Controls.Add($comboboxVSwitchAddNic)
	$formAddNic.Controls.Add($labelIPAddressAddNic)
	$formAddNic.Controls.Add($labelVirtualSwitchAddNic)
	$formAddNic.Controls.Add($buttonOK)
	$formAddNic.AcceptButton = $buttonOK
	$formAddNic.AutoScaleDimensions = '6, 13'
	$formAddNic.AutoScaleMode = 'Font'
	$formAddNic.ClientSize = '352, 445'
	$formAddNic.FormBorderStyle = 'FixedDialog'
	$formAddNic.MaximizeBox = $False
	$formAddNic.MinimizeBox = $False
	$formAddNic.Name = 'formAddNic'
	$formAddNic.StartPosition = 'CenterScreen'
	$formAddNic.Text = 'masked'
	$formAddNic.add_Load($formAddNic_Load)
	#
	# listviewAddedNics
	#
	[void]$listviewAddedNics.Columns.Add($columnheaderVMName)
	[void]$listviewAddedNics.Columns.Add($columnheaderIPType)
	[void]$listviewAddedNics.Columns.Add($columnheaderVLAN)
	[void]$listviewAddedNics.Columns.Add($columnheaderIPAddress)
	[void]$listviewAddedNics.Columns.Add($columnheaderSubnetMask)
	[void]$listviewAddedNics.Columns.Add($columnheaderDefaultGateway)
	[void]$listviewAddedNics.Columns.Add($columnheaderDNSServer)
	[void]$listviewAddedNics.Columns.Add($columnheaderNICFullConfig)
	$listviewAddedNics.FullRowSelect = $True
	$listviewAddedNics.GridLines = $True
	$listviewAddedNics.HeaderStyle = 'Nonclickable'
	$listviewAddedNics.Location = '32, 229'
	$listviewAddedNics.MultiSelect = $False
	$listviewAddedNics.Name = 'listviewAddedNics'
	$listviewAddedNics.Size = '308, 175'
	$listviewAddedNics.TabIndex = 39
	$listviewAddedNics.UseCompatibleStateImageBehavior = $False
	$listviewAddedNics.View = 'Details'
	#
	# buttonDeleteNIC
	#
	$buttonDeleteNIC.Enabled = $False
	$buttonDeleteNIC.Location = '265, 174'
	$buttonDeleteNIC.Name = 'buttonDeleteNIC'
	$buttonDeleteNIC.Size = '75, 23'
	$buttonDeleteNIC.TabIndex = 38
	$buttonDeleteNIC.Text = 'Delete NIC'
	$buttonDeleteNIC.UseCompatibleTextRendering = $True
	$buttonDeleteNIC.UseVisualStyleBackColor = $True
	$buttonDeleteNIC.add_Click($buttonDeleteNIC_Click)
	#
	# buttonAddNic
	#
	$buttonAddNic.Enabled = $False
	$buttonAddNic.Location = '265, 145'
	$buttonAddNic.Name = 'buttonAddNic'
	$buttonAddNic.Size = '75, 23'
	$buttonAddNic.TabIndex = 37
	$buttonAddNic.Text = 'Add NIC'
	$buttonAddNic.UseCompatibleTextRendering = $True
	$buttonAddNic.UseVisualStyleBackColor = $True
	$buttonAddNic.add_Click($buttonAddNic_Click)
	#
	# textboxDNS1AddNic
	#
	$textboxDNS1AddNic.Enabled = $False
	$textboxDNS1AddNic.Location = '146, 173'
	$textboxDNS1AddNic.Name = 'textboxDNS1AddNic'
	$textboxDNS1AddNic.Size = '92, 20'
	$textboxDNS1AddNic.TabIndex = 35
	#
	# labelDNS1AddNic
	#
	$labelDNS1AddNic.AutoSize = $True
	$labelDNS1AddNic.Location = '32, 173'
	$labelDNS1AddNic.Name = 'labelDNS1AddNic'
	$labelDNS1AddNic.Size = '110, 17'
	$labelDNS1AddNic.TabIndex = 36
	$labelDNS1AddNic.Text = 'Primary DNS Server:'
	$labelDNS1AddNic.UseCompatibleTextRendering = $True
	#
	# checkboxStaticIPAddNic
	#
	$checkboxStaticIPAddNic.Location = '32, 51'
	$checkboxStaticIPAddNic.Name = 'checkboxStaticIPAddNic'
	$checkboxStaticIPAddNic.Size = '137, 24'
	$checkboxStaticIPAddNic.TabIndex = 29
	$checkboxStaticIPAddNic.Text = 'Use Static IP Settings'
	$checkboxStaticIPAddNic.UseCompatibleTextRendering = $True
	$checkboxStaticIPAddNic.UseVisualStyleBackColor = $True
	$checkboxStaticIPAddNic.add_CheckedChanged($checkboxStaticIPAddNic_CheckedChanged)
	#
	# textboxDefaultGatewayAddNic
	#
	$textboxDefaultGatewayAddNic.Enabled = $False
	$textboxDefaultGatewayAddNic.Location = '146, 144'
	$textboxDefaultGatewayAddNic.Name = 'textboxDefaultGatewayAddNic'
	$textboxDefaultGatewayAddNic.Size = '92, 20'
	$textboxDefaultGatewayAddNic.TabIndex = 33
	#
	# labelDefaultGatewayAddNic
	#
	$labelDefaultGatewayAddNic.AutoSize = $True
	$labelDefaultGatewayAddNic.Location = '32, 144'
	$labelDefaultGatewayAddNic.Name = 'labelDefaultGatewayAddNic'
	$labelDefaultGatewayAddNic.Size = '91, 17'
	$labelDefaultGatewayAddNic.TabIndex = 34
	$labelDefaultGatewayAddNic.Text = 'Default Gateway:'
	$labelDefaultGatewayAddNic.UseCompatibleTextRendering = $True
	#
	# textboxSubnetMaskAddNic
	#
	$textboxSubnetMaskAddNic.Enabled = $False
	$textboxSubnetMaskAddNic.Location = '146, 114'
	$textboxSubnetMaskAddNic.Name = 'textboxSubnetMaskAddNic'
	$textboxSubnetMaskAddNic.Size = '92, 20'
	$textboxSubnetMaskAddNic.TabIndex = 32
	#
	# labelSubnetMaskAddNic
	#
	$labelSubnetMaskAddNic.AutoSize = $True
	$labelSubnetMaskAddNic.Location = '32, 114'
	$labelSubnetMaskAddNic.Name = 'labelSubnetMaskAddNic'
	$labelSubnetMaskAddNic.Size = '73, 17'
	$labelSubnetMaskAddNic.TabIndex = 30
	$labelSubnetMaskAddNic.Text = 'Subnet Mask:'
	$labelSubnetMaskAddNic.UseCompatibleTextRendering = $True
	#
	# textboxIPAddressAddNic
	#
	$textboxIPAddressAddNic.Enabled = $False
	$textboxIPAddressAddNic.Location = '146, 82'
	$textboxIPAddressAddNic.Name = 'textboxIPAddressAddNic'
	$textboxIPAddressAddNic.Size = '92, 20'
	$textboxIPAddressAddNic.TabIndex = 31
	#
	# comboboxVSwitchAddNic
	#
	$comboboxVSwitchAddNic.DropDownStyle = 'DropDownList'
	$comboboxVSwitchAddNic.FormattingEnabled = $True
	$comboboxVSwitchAddNic.Location = '114, 28'
	$comboboxVSwitchAddNic.Name = 'comboboxVSwitchAddNic'
	$comboboxVSwitchAddNic.Size = '121, 21'
	$comboboxVSwitchAddNic.TabIndex = 28
	$comboboxVSwitchAddNic.add_SelectedIndexChanged($comboboxVSwitchAddNic_SelectedIndexChanged)
	#
	# labelIPAddressAddNic
	#
	$labelIPAddressAddNic.AutoSize = $True
	$labelIPAddressAddNic.Location = '32, 85'
	$labelIPAddressAddNic.Name = 'labelIPAddressAddNic'
	$labelIPAddressAddNic.Size = '63, 17'
	$labelIPAddressAddNic.TabIndex = 26
	$labelIPAddressAddNic.Text = 'IP Address:'
	$labelIPAddressAddNic.UseCompatibleTextRendering = $True
	#
	# labelVirtualSwitchAddNic
	#
	$labelVirtualSwitchAddNic.AutoSize = $True
	$labelVirtualSwitchAddNic.Location = '32, 30'
	$labelVirtualSwitchAddNic.Name = 'labelVirtualSwitchAddNic'
	$labelVirtualSwitchAddNic.Size = '76, 17'
	$labelVirtualSwitchAddNic.TabIndex = 27
	$labelVirtualSwitchAddNic.Text = 'Virtual Switch:'
	$labelVirtualSwitchAddNic.UseCompatibleTextRendering = $True
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Location = '265, 410'
	$buttonOK.Name = 'buttonOK'
	$buttonOK.Size = '75, 23'
	$buttonOK.TabIndex = 0
	$buttonOK.Text = '&OK'
	$buttonOK.UseCompatibleTextRendering = $True
	$buttonOK.UseVisualStyleBackColor = $True
	$buttonOK.add_Click($buttonOK_Click)
	#
	# columnheaderVMName
	#
	$columnheaderVMName.Text = 'VMName'
	#
	# columnheaderIPType
	#
	$columnheaderIPType.Text = 'IP Type'
	#
	# columnheaderVLAN
	#
	$columnheaderVLAN.Text = 'VLAN'
	#
	# columnheaderIPAddress
	#
	$columnheaderIPAddress.Text = 'IP Address'
	#
	# columnheaderSubnetMask
	#
	$columnheaderSubnetMask.Text = 'Subnet Mask'
	#
	# columnheaderDefaultGateway
	#
	$columnheaderDefaultGateway.Text = 'Default Gateway'
	#
	# columnheaderDNSServer
	#
	$columnheaderDNSServer.Text = 'Primary DNS Server'
	#
	# columnheaderNICFullConfig
	#
	$columnheaderNICFullConfig.Text = 'NICFullConfig'
	$formAddNic.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formAddNic.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formAddNic.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formAddNic.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formAddNic.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formAddNic.ShowDialog()

}
#endregion Source: AddNicCard.psf

#Start the application
Main ($CommandLine)
