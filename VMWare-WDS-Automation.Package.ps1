#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 9e329b64-f4ea-482a-8786-64b2151c8568
# Source File: C:\Users\dalthakar\OneDrive\Script_Projects\VMWare-WDS-Automation\VMWare-WDS-Automation.psproj
#------------------------------------------------------------------------
#region Project Recovery Data (DO NOT MODIFY)
<#RecoveryData:
hQwAAB+LCAAAAAAABACtV99v2jAQfq/U/wHlcVKgMNpRjUaiZbRdR4sIg5dKk0kOcHHszHbasr9+
FxwghKIimZfAfWfu7rtfDs0+BOIV5KJNNPFOT0qlZk+KFwh0yV/wYCYFp/8gvHI6hClwlmCHMg3y
yvlSjlX1e/qMzEdoPqrvEVt+mSyfCp8GmQGLy/pdO0tH6GoIUlHBvVr5rFlZCZkOvcB927uEr7XL
8UXdndSBuPVGjbiNb40L96I+rlXPq0Hj/KLRrGSHs59mDAaLGDw0nBdXxgUL0V0mrgGvk/BAYxAK
TRqkeKIrwoTBfj2NyHRHvRJVnlzeO4ql64QyTPSZ4/maSJ3Eae4MtX0nS/6MyLQ6A5lgcfowAQk8
gBWNK+eev4o5uLdMjAn7g7VxPPNdpYX6xPoH9vyZeHO7hPKOkBHamzjeSkoLfmC4WTPtj/eeK00Y
60now19l4l7X5nlba0GkFYbD7obJWjyAyj6TPjDstXSalBYSjOECeMxM3YJ2TXNdL3pEz4q5Kuot
sjWiPBRvqi+wdw2vPGKRM4yxFUaU94hSb0KGxngRtXCQxdkBohNZCH4FWpjHvvklAsJ+KxzxdStt
IJvIhZxPpUjitohwzn4KyrPodxWfuak52XZ6Ji/k3WWCYFeUp/RovTgApd3BTS8WUhf7MK87oAcP
9nmT4EhFeEc9+UWXOZXljqC4jglrUzXfLIoNZtc5jzS4Iaue38hWK0jfCaU5idbrZw1YmO1DamA5
kq0gEAnXxvoufsz91kLxlWjIprVY44Laos4/OL7U9EETyh5gYahtY8de2yMY4/2V4GAMyJjBR5u7
cMSW3kPX3+ZmgGMTuyPqw3soxe0msYdtnN3+fiBprDfrdldlfYsPuwOIYobtlb/GN+ix8zYgat5j
yU6T53UW+WsnMaMBxj3sGj45YIeKEcw76voV2khPkk4pJyw98Iij7w27I2Tpjtq+20pw5ZLUKVqM
8VfNys7x05NmZetvx38FU0BwhQwAAA==#>
#endregion
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2018 v5.5.150
     Generated on:       12/10/2019 1:06 PM
     Generated by:       dalthakar
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2018
#>



#region Source: Startup.pss
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
6wMAACODCAAAAAAABAC9k0trg0AQx++FfgfJWdRlXU1AhdCQS+mDWtJeRx1l6T7C7prgt69NS1Jo
SUsOMpd5MPPjz8xkT1jrHZphBQ680bFcq3xGAzIrrq88L3swvOMKxJoLvAeJRenAuH4bbK3Nwh/V
Q8/SWpSV4GgP8SkzFOVgHUrf23yR4iD6MN+76YXrDeYKe2dA+N5jP06ob3F41m+o8ipNgdUsIQsa
YzRfZOFx5u+M4A4UdChRuWDZOy3BjcATmfyXTEnV0jlLoKFJjJT9TX7hqtF7G6y1kXYSrSsDe666
S1gRbVmbtoQ0LAIKZ1jS1toIXk2jaLzHSUCvUkwjiBusnTZDiWbHa7zoMM4v6xh+fl4Wfn/u4h27
t81y6wMAAA==#>
#endregion
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
<#
    .SYNOPSIS
        The Main function starts the project application.
    
    .PARAMETER Commandline
        $Commandline contains the complete argument string passed to the script packager executable.
    
    .NOTES
        Use this function to initialize your script and to call GUI forms.
		
    .NOTES
        To get the console output in the Packager (Forms Engine) use: 
		$ConsoleOutput (Type: System.Collections.ArrayList)
#>
	Param ([String]$Commandline)
		
	#--------------------------------------------------------------------------
	#TODO: Add initialization script here (Load modules and check requirements)
	
	
	#--------------------------------------------------------------------------
	
	if((Show-MainForm_psf) -eq 'OK')
	{
		if (-not(Get-InstalledModule -Name "VMWare.PowerCLI"))
		{
			try
			{
				Set-ExecutionPolicy Unrestricted -Force
				Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force
				Set-PSRepository -Name "PSGallery" -InstallationPolicy Trusted
				Install-Module -Name "VMWare.PowerCLI" -Force -Scope AllUsers
				Install-Module -Name "PSParallel" -Force -Scope AllUsers
				Write-Host "All required modules successfully installed on" $computer -ForegroundColor Green
				Import-Module "VMWare.PowerCLI"
				Import-Module "PSParallel"
			}
			catch
			{
				
				Write-Host "Unable to install one or more modules on" $computer "Please install manually or resolve connectivity issues." -ForegroundColor Red
			}
		}
		else
		{
			Write-Host "All required modules are already installed. Checking for module updates on $computer." -ForegroundColor Green
			try
			{
				Set-ExecutionPolicy Unrestricted -Force
				Update-Module -Name "VMWare.PowerCLI" -Force -Confirm:$false -ErrorAction SilentlyContinue
				Update-Module -Name "PSParallel" -Force -Confirm:$false -ErrorAction SilentlyContinue
				Import-Module "VMware.PowerCLI"
				Import-Module "PSParallel"
				Write-Host "All required modules are up to date on" $computer -ForegroundColor Green
			}
			catch
			{
				Write-Host "Unable to update one or more modules on $computer. Please install manually or resolve connectivity issues." -ForegroundColor Red
			}
		}
	}
	
	$script:ExitCode = 0 #Set the exit code for the Packager
}







#endregion Source: Startup.pss

#region Source: Globals.ps1
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	
	
	#Sample function that provides the location of the script
	function Get-ScriptDirectory
	{
	<#
		.SYNOPSIS
			Get-ScriptDirectory returns the proper location of the script.
	
		.OUTPUTS
			System.String
		
		.NOTES
			Returns the correct path within a packaged executable.
	#>
		[OutputType([string])]
		param ()
		if ($null -ne $hostinvocation)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	
	Set-ExecutionPolicy -Scope Process -ExecutionPolicy Unrestricted -Force
	
	#Sample variable that provides the location of the script
	[string]$ScriptDirectory = Get-ScriptDirectory
	
	# Set the log directory.
	[string]$docsDirectory = [Environment]::GetFolderPath('MyDocuments')
	$logGUID = New-Guid
	[string]$logParentDirectory = "$docsDirectory\vmware_automation_logfiles"
	[string]$logDirectory = "$docsDirectory\vmware_automation_logfiles\$logGUID"
	
	if (-not (Get-Item -Path $logGUID)) { New-Item -ItemType Directory -Path "$logParentDirectory" -Name $logGUID}
	
	#Credential object for vCenter authentication.
	$vcCredential = $null
	
	#vCenter connection object.
	$vcenterConnection = $null
	
	#VM build queue
	$vmbuilds = [System.Collections.ArrayList]@()
	
	#VM feature config queue
	$vmFeatures = [System.Collections.ArrayList]@()
	
	#VM role config queue
	$vmRoles = [System.Collections.ArrayList]@()
	
	#VM domain info queue
	$vmDomainInfo = [System.Collections.ArrayList]@()
	
	#VM Operating System
	$vmOS = [System.Collections.ArrayList]@()
	
	#VM Local Admin Passwords
	$vmAdminPasswords
	
	#VM Additional User Accounts
	$vmLocalUsers = [System.Collections.ArrayList]@()
	
	#VM Additional User Accounts
	$vmWorkgroupDomain = [System.Collections.ArrayList]@()
	
	#VM full OS config
	$vmFullOSConfig = [System.Collections.ArrayList]@()
	
	#VM TimeZone
	$vmTimeZones
	
	#Existing VM List
	$existingVMList = [System.Collections.ArrayList]@()
	
	#Step 3 Selected VM
	[string]$vmSelectedStep3
	
	#Step 4 Selected VM
	[string]$vmSelectedStep4
	
	#VM Additional Disks
	$vmAdditionalDisks = [System.Collections.ArrayList]@()
	
	#VM Additional NICs
	$vmAdditionalNICs = [System.Collections.ArrayList]@()
	
	#VM Additional NICs
	$vmOSKeys = [System.Collections.ArrayList]@()
	
	# VM Admin Account Rename
	$vmAdminAccount = $null
	
	# Post Install Scripts
	$postInstallScripts = @()
	
	# Temp array for domain/workgroup info.
	$vmDomainWorkgroupStep5 = @()
	
	# Import all functions.
	
	foreach ($item in (Get-ChildItem -Path "$ScriptDirectory\Functions\"))
	{
		. "$($item.FullName)"
	}
	
	if (-not (Get-ChildItem "$logParentDirectory\prereqsinstalled.log" -ErrorAction SilentlyContinue))
	{
		Install-PreReqs | Out-File "$logParentDirectory\prereqsinstalled.log"
	}
#endregion Source: Globals.ps1

#region Source: MainForm.psf
function Show-MainForm_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
CScAACODCAAAAAAABABlmseOrNy2pftb2u9wdbtIF++kc4+EN4GJwEMP773n6Yv/VKekyk6mMsRK
WHPOMb5Brn9ZeToe+XLz8Rb/1/vDWo/D//43+j/wf//775//+q9/mUtd1kPciXWXG3Gf/1uP60Ec
l/5/prX4F/j/ffyfi/75/N+jKhGwOJVG2jIMZ/Ic83+/WIbfhnx7sDW+Tw0g7wPgyQHDcJq81TYs
qbRSt3b6tsqPsZMbnJRfq35klDkd6u8fOkiFrSqSkvNwEdBp21PVQ4rbYSIL+utANG+BWZ9qTtg3
CZmiwtcZwDId0aOJAxhoHctanp1qINin//5Rv3NGt+oAAsABaWJRhL7kV3U0HGtADesEFuticc+W
s91ckEOsl3gH3IfrU/jqAhLkZMBjfPPDj6H+75/xnOLKWj2LOzwJpkoPTZgeKMrc1XOfinOFKso6
QL8rSTN1L8dxWceFLVDGidEmON/ttSjob6WD82j+/nlcg3REAfpScZDmN97gFDtcH3j/JfGHXvgL
iUme5voYSiQRaADKl9EGokg6+JUd4ShbG8fNHvffX8z9/eNpNJdyHunSuLPZYBEb3Neg158+8eGz
1REYZk+mxKeTIoYa6NolCMsW078pu7AVFgh0KYO5G8fLWsm/f8iwxuHOsTsJ/hakfmlYThA5BtEH
+323b4FOocY2LD6EHVEA1FAr9CRvsGhGGYo6fepWE8Mhr0d2Tfv7xzi1kUUtl3MCo0iMLYAPOSAx
I88b0iTkRiM8H9Pa75LN+cJiAb2DkIeCOfmQFPLVNjuZZTzOvhBQKH//DBGRW0DMzleVA6abkKMw
MPJa98ty5XVMJUsmO8avVngh7DMk0R9rybGZkqnrsxWC92nyH6+gCMuiyN8/ums2oGvPY850C4Gy
gve0Um7O0swQNWSR+xfrTBAH9XKFat7hUvT5gVG/TT/qZxQ8B8kOrNEggRUa/PePxS9E/REizfdI
g+4uPxGUB8JlEmnILwCihYhNSzxgJGLCS4o849ufZlLZrNa5kEqpsnpmJv/PwNhvh2izoYtIsVdO
K8bXGOKMToMLSrZX1tPaiBeF9dF62tvhc98rCfIY5ygKGlB3LvoeaDb2oU+wRuh9OOHvHxaeAHNG
rq/4RZZrjvync9NL0eSvO9qVO+VzW9hZlavl8djyUrydxlVYiJug8yUdI33W57gvfAi9+vn75wyr
iSjNaEqfcESZKBVpkrSlggHBETvBDYOJVE6YwwS/KAQA73ysgXNzMKGfDz+QJFH3EWai6j6E6t8/
6YCecj34xbekNr8w5KsuQuBOx7yYlqiPad/y0LiN3O9yOkSE8CfnuaVshVDTWnnt0u5NMqv8S2h2
/vvngE2uZLQs+9o0TO8dfR18w/Kww/ki059h8UwyeOCejgAZuQX2GIz8tCsaTUpIwxhnfuAYxclp
Znrn3z8UBK1ICu2xterV3oUNlZ/ogdJFqFYSTy9Lg6j6Nt1mEfKI1+l3BZNmtUiYDBDFb9sSYFxk
Q4z3lq/+/kG+xIHgR1Zgjf/1RI6w5UwJ3co59L7tGbUrSGnnM8odJKnaxtRvL43O/H5paemYBRgm
DtUWm49C29Grb1F1qWezkj+kmiBay0owu8OsErWxl/yulQiOlxNH30pYdVuXloLx/J2Vk1pcZKfH
saKoQKsf0xPp7e3e3nOUvJnJEPYSUKCSSnAlb1i+LV5DiK36XsI8Rq6vvHgycRb0HGc5Ki1XgD2a
O/7juGKRY/NDYJ3/dq/rm7rOLJ9a3bF82PiQxLURVidxvB3dZG6yEo34FK+S3BpH7Wl2rHTe8jv/
DpYso8yoUge9w09Hvf/+ichnboUfLpc7YjgcgtdOjhqEDvRbf8xD7cmocO21EBT9unsTin8SJzk8
7Ufmi40buB0h5mQtvosir8u4/awk85FYsntLfJFMwlnGCiJs9JfECnRr8g0CgglPtESgx9+zs+Tq
WIjuGXqFSAPSi8RytcThklTy9082PGEyRMIo5oVsPHnOJ44jspfOSzq8KR9C8rNGUGeBrJtjE9Mw
xK5N0o0AbbUDAmxAYWtCsYfUEt/JSoXD3m/RdB4kOz8/QSUGlUwhWo8CyO/M2l4mQWPsVH4iDU8n
omJ3v0nafLJGzshoiJlwa1fcyiq3z3tvibsVY1p5HXqoxMVqFGSNw+Ijms0mzNdgb5NlG20AaJ/s
utyxbt218zs24M3y19bucPwQINRwCOvVtzyV9rJKOsM05nBhAQgHHks/pnyCfJUs/JJlsUiY6hE6
K3p8kLLZqc/EX+64elIO4CMwZRse/7SIuv7+2cOw5Z8emn+0NbHqIaKTA/2Q8vJzAk0B0QJQ393h
D9wsnrbMnY8j1szOtlnYEuklbX1+c+S82hgyppccPAK0EJ52fyYvxCPkc9DV7HRZ8tmuT6WtrtiR
Zr3NfvAowZOJ9Pl2SY9Q0UPBXwU8vyss8aDfFrf/zCnj8PHbFlHHUZbJ76UJ7LnPUl9fy9W7YaSL
uE4lQfL4amZkDa9oe5spdXq8RPKOgG94VhVw2kMm2N9+K5fOcfhh0NnjPo+v/BE2Y26sJCmjrkJy
76kYTgfCRcfHZ46RYY1WWE5ruetRRyLEtDkvfo8TJhXt1wGbY8/SsYJ791Txpen84HuSNbkDUVZu
PzjLloY86hn6xQ9aZdCk4CM5VRbrzTYmeXAolhYcC8KoA/g79ZbEdcSIINseD29nHp9Vkajl6uGT
RBTCnZ0y5UwcGkf96gJZ/fCp/MNG616035QyiWipV4jSrRO64ks1vNZ3XxFq5xDV4hDymVU9Mguf
3fX5BmH+YGmIu2gCCNfkktaVI7oWbTyExcJHub01NHread1GZ38vcYXSIiSYJG2nbZp0RNzM9V5Z
b5s4/dMmBM/tU7vuPlBbsiT87pAt8loDaCIdjNK0Whh3G3TezYAlXn3rWg8Ka2AIF0W3sf5gYXOG
d0F6KjQTgl1fUz4ynNzYMsk+i9ZcKw+P1jKkyL7OX9asMbsMk6pXZjJ7J6suRqNKkjbbYXJ3quH1
i3g1Y/cVeE/YOGxiHU+DIM+drgAQ1vcvbB7EHy0SWqM4aDimiqvqugFuy3//wENJCHMNE/bv1Cqx
PLe9jTDn2T8LJr9WEMOGCPzIpHtkCarv/ePVzHaiwdqFkoi1sCM7OqIrPS5Y7auWpcGKbNh8JVnU
fCnk3Q+U+i7HP7MSLGORHYwd1evCRjt06Qg0wQr3tQa/y9ZEtWQL7itjjYP7YuW3Q7b14GJEq7s7
Hudi4aCDpa5b/gwmtpl8G3MfW8QqaLWLenetqNFdLjhf1MWjUf88vIFc+2nyweDFycshzdAXM6vD
8XPWaRzxFLKqitPm0gnLvqzboT8O0ue9be9KhDVDJvykZt2mtQYXb84Lkt6gB+dlHXRd//7hqdO1
iAYKN2NxbQKdysEeDdUTUveqoR1GaOzo0HkOz2dJ7iEPFVGk4s1CfHcNJTCi1pJDlA8eMujbva7F
KGMm+bPkv5CipDDdMNDDhamCWHbWmHd1KJkID+ynbyCH8ZThll+3VTuh0mXFza+OpWUnlu9EeVfj
1KFcec8KuVTtqD5UrpkQSLFBkHvvkv0ybbbvqUgycm78ED2FFwaNqoUM8HEs4QSH9DVNxDwDpfJb
09kW0TM+v2L16hJhmNy1Q3XsJN1xmEY7td1vggL3DT7dR/HHE1W9kXvOnYDEx6wm+yaPaHRMUU14
jfn7h5hLhGkc/d0pJiaRmRKnaQa9kjeO0c62HoMxeWamvVSI8bDRXHZb88tsESo4v5s1L8FhZK8u
TwlaX3euhPA2xEn4lZUw7xmUOcRMFBz+pkPCnnKZ57GbrYSFuahdYplc3i7LsBplkhDul9FLSXY/
iSAnod1etZR0CcOxgpcrkBd5Ccapqb6bMK2Ob3uU6KP0ZiO3ir7LApo6YXUmpSDedZNz/kImCqQ7
cbiZ/W97srdD4vTd+Zbae/azee2Cqp2eh9LL1BvD7naTwCEWEOJ7y4xY0jJLvwFNM9juzNcjc9gj
SxPIIybTR46P92pIw44oTeh63KYpT3pC4cfVIW6nRBUdhcKhoPCif8mSGXNf4pucqJuEBtrXgtMD
o4k4tf8YYxgmxv36qaqdjv6FgSiAyR8wPNsIyj4wAaFNJqprrUwl2a0tRMrBP3CNUg2TWQi69W7J
UDoK8umSomzXdAnTvTnLe7o6Er3oWUPOEbEITRNGWuz6/MQzw16h4HncrK7umyLsEySQ5acVoTPv
uuRN38ZXR6mv4gpYfeuz/P1ze6iu7td2CREbLh9VSirI5HbSXY1bEvxhHP3TzdY+fOGEeWqFw7so
URAJbwY7rJe8D/C2ueqryduXuCTF330uJpmX6IvkqYRT9zvUtWXs8HSPqFNlq5SufyEYyS86zDk3
ruA8C9OHq/raRhJLMLjadH+ZUb/aK8+LirCwVvZWxR1NV7/UN7Zm8IHbV0q62nikWnRE0//RTGR2
O+ppNl74lAQFxpXrDG4SI6E7flu+q5UdiK164SPX1kfo9kXGsdUoCTXugf9iU6kzM4NZKMuQQZx8
Yqhf4J0jiFfp8WYj5nS9Bivw4EOy7Lemdg/t3j5C/VAJghdEenZXvzq469VpE8eoTq5RtKyBcLdN
ZNBWp5r4+RrSbEvYISXI7JxlmRTbf1JBfydre6d0DxInCOzpa/2Mw4sO2uqApX4pS7OJ+43NQ0Uq
aDyQ9oyIGp//PosB92gh4cM86S8/oLGmY8ybZTQDPwgHNh0PUaFnyf1fW/oQRqYuKb/TgpOp7TSj
CKtexxl6mjvf5v3W99uQXnu0h8WoQ0BFaIqt5X//OCuvO1jSBoY1mFwol04uXk9T1NNnFGO6MTfv
UeTDaEbsimmpgKISIM/OxnQaWhmtPkNOENB7LV3X/fvnqiPnbcUbDYe8XF7WPxPMbhuJQZ+Mw6J2
hBE1GrCIhJuO9ieRhhu4mXPVWVzxYbghe/eMX09RmxPz5bewncHtMgdNt7eniEjdFpSgjUZMyuwP
JFi+oh84+ftlZXarkPWr5Qxxf9XVs7oTXAoRmoi3zyc1jK/XO8Qbv6PXfv3jY/Oj6h2sn4gNwMii
BEft9trlgCyuUbFwFOkc1EKCkxHdXECawYlwgmaEMP2IdbuYV5GWvd1c0JpeoVRPgs+ZbupX75/3
aZA4lUGxxIrqfznEJUTZUCLhulWZIYxJe1trQ0Kydoay1YXU/6ov1cB3bEH+rG0pyxjZBT+Q4+2U
1wr6eZ10FQbOi35AaAUAqrrAVp2i+YCuXLI7O629+pEP3qtKM+/69qXotYD2sWCc/pzQew8yZzka
OOlG6RDfjBZOVW+Ntz+irAuO2Xn2Y+PxjqrcSmKzapxpVOyoju3QyWy8VOMiScR55YIdThRIBYPO
L61arkQqiKyLeOVVkDOgP6GPHIJ6l4PrgIl+NAbPl79PK14zuI8T0m5oSPk6IFlq0SX92n2MzT1Q
m0o1OkDfNQUQnAjl25pASIHqn9Re1bi6Lszt6hh9NmnAhmwg+FnmRiX6Ulwwvr4Q27EWVGwobt9+
27tUqqUharFtkNNkBA9KxKdHi69g+CYbyXRwCffTq/eXN8PLrLxtsAQAOYc2p71PuilWyM4Go/Jz
mq9OxvIHRhAACC4XyKklVZNWy1FMejEfi+jykTfS29hOmRUBsXk+CLoW6Hz4h6v572St6YBDQOho
sRNSENUF1nUYvIUKBfw0HpbG/k8nlqDrXyl1HmelOSQaV2Wghg1hUP3O5Xbtqdg40Kd5u9cOIKWn
8h+urdbEtVUeUt+oODGC/nVCJIGUQgN0VZ1o20t38dIExgMJCu5uJcR7+7IRcT7V48g+/Ka2l5cB
hlCRNo/fB7iLcyUscSaZArGCKrJ+LiUU/ciAn29YfsGf63gG+IB1z5QZZYXDfueYWH8TZ7vst6aA
1YmZYxd+ttP6lbG4N8eWkgNOQ5McITmFCHh23t1SCH9+r2neC8N0LdwlsIVxdo3R/JZajRF1san+
/VPQC0+4zxPzZIrcDdtkUzDL8mp99dQZ0/gxHoiJD0JKNghuPtkLvF8pTnf6ASL/+t1vBMg7SYK/
/vxO/dLDRMFTcCcpeNCGmXaHuynm+XTqkFP11YqeOQGppm++efPrtyw8CJOzigSaVWOCQAXEMm9d
ef9GyH+qUClUnTHC8Vsd+X1YULQ0C5Cib+B+htS/fSO7la2d7Nqe4Jt0oRLgjvVb27Qq81g75nSK
KvkF8sybAT9U/ryDUlJeGVCTGmpW2urFkSLRF9s/RWiD67chAOSCR6qTL56hyRKCk6VsbjuYlsLG
D2T9PdirSNK7bzYlUJoA4KePBdyqpHI80IhULHrwi2tqo0U0JcTFOvxqpm0cST+cq+ysvZSnO+Ik
um+0bq7wZoc0+vePwgHii8N1X4wbt5jaTmSnTPi4IlOgsmwnjdsOfHY5cZAhHH6cd+mw5ZoNrF1b
8opPsola8BQPvPrcm3aBvkS8hUo1yqJQ6EzYoTHDwlB9Kvr0LQDwn8/XL0AXIH8q/uS0qz2sAxTE
zQYAM+9nz8ZDNNaAi75V0M/IKX8Vnx2BizdnQO0Aj5JoT5ljQ/5oQLGR3+CTCs2/dC/n1fndH4CL
Y43EcfeIqOfDefqJs0VrvFSDTpuBh+/mSSoBCaT7+S7NWMsXjNJnl6TsXdG3dLPJegI4H/HbuGos
40IRUKOZtg+9zJyiYdrfBVyDv3/2X3W6KWAH33df0c/KBx3F/ZpPQqU3EHnD0mTByU7uEyxrulfO
Uf3o4eqXTqex7lVXc3D1VL039WrZV3s7Jv+Exx4NBKOhQ9yi90R5Zo4b/oHxxwJncn0xR7GLE+18
hiPQ2kW07HVUO0cRsTR1gM+QA+0Oi69aPmH8xoiKRFiq3YHzU0TeSEVLU0XrVymPN9+gj7tPVKhC
2qZS7Af92tfreIfPg6no9vmof8t5TrMMfqvAWe7P9GhCEj/6LF+q6TIz9qZJtCiLWZ/4osl6mTK8
OWVyuuXnQKpfoYY9eHjD5e13nqYurL7r2Cy9nqW+1dYKrhaD0kKEqEMmBIDLmd4k1LLBKADOlWO3
jBVxbk1/aU4bHvXqSr6kJ99zADFI1FPONvzbmbffyqReASIauk+gCvSyC028S4X2cb7pq4pqt+WO
tuF2r/G7Er0QN5QfTgMDmCalLxjX2eV76LtlMV+RbzLKzBI/OzURF24l6cs+iT678ScA+ksDPQ0Z
PjIbLwKdJWSIiaSSCTrNIiqX5zb1dChsEwGISChs5fLrMp7sjVUj/nib4okN4igeHHY1Onr04upx
K4dvZ54Y/sL4F1I423Woeam+tXc3NJqYVbAL+eWfyc16MfhqyM0Hzacv8evjU3fODOPhgKcMQ71e
fvgQIgxaVjcJHB3k15EQQbmDWdtjkbY4VBZmjt12hsUlB/6il3vBxFoYFrWbz/WSATKcF1PkX83h
n2BTqh2StGskUWQIhrPXV3zHXXCYcITBwIBMX2WdVKvlh18eif84IC/p2dI/YaEWyJ5RmjzJMInp
X/BTeuSovYl+wS9wgon8/Pg+y84TRIA8JN4dmRfKYWldqt8JFXcu8OrbOJOf7zXcUp4tP4vqJvyF
wKE8iJPTaDbqx+JawenpTL2TX/8woacFPnOBmSykfllXAGXRBP1CCSrkn/+1WR4Wt77ydX757GzJ
XR4f/ezespI8mxgmReNr3pQ4GuXr1TkRSx2ahrM4MPNIwPSDh2T7exfMEujP3z8/XNZlJLqGa5N3
1aH9Pa/y4La/HIjC+SwuLcWaJi4+hehLxw9jLXICqQwi++i3NwGuJ/HTHzlHyPrrgNqbx6g3MSPb
oF83zyR1gXJXY7KEBybrHmX7h3f8dAOgiYr5HrRxLACoGSfN+qluXnTytALFbDFqOnqpZleqZTAu
esW3zpxB8cYrynqm9i7iCBeBZTIpjzPEhJT7IyBhUVUSamNzWHLHgXg0cDAvcL7YYLf4d7KWJ1IW
/uAO9dXts7yVvbULhATgpty8V61nQCc1Qj2ftny2k3qqJXqsWTGxZx1avtHYcygpAVeWQ3mnHgNf
x8FRVCF7OUdpGzWl6DpE9qjamszkn2p5EHn8jhrWUTJAsabLmYoGcTreOpbYuuOzAzHQ3trwZsAJ
DQyu88vfYGxAEXvS8MV9+Xj4Nw7h+eB5OQrxAnIZX3cSc9LzvygNsjqYHgf6cwwWlrRok0E9Uti3
puzzMbngcwER0wxfyQQS/oAJClMjXCK5wqzLY3e8LRc/KVi0l8CKbHqThGHSJfAd5yyl5xIHiGyI
IOSft+561ZxqnhRPM/biGx97wjM/HHsUWedrn8mx8lTTKOLoGQotopR64wPoiz0Ccl2TfSibr/HH
R6u3Sn//kOACwIbcL8cPeCf8COT0WlvtwttvREFqsX+rvmkT8s0mghyw4BYkyLj7Fnj3RiDkH3lR
GDL32uOlvb9/cONeQVTtWhuci7aKQRYD6WfLM591YroPaEFHsZaTDi6GvY37vlmr7KaQeji0hZ3R
Zq8FhFVSAPvoZctr43ErxcwCsm01qtQrJbkDOZpw7P08+74O2FjUrOQUR2MYg5xPKPP6u1GIKKJL
XlnZ7R1UtwagKqUv1exfirmgothZuggxwVVFLUY1ovoiUcAs4gW5UDqUYkWQyuqRLR//PNod7jdS
fD1tBkGUfE3k9nbbLP7+ObnlsN50lXzgH5wnaHX7v+3DmrvHSFQor3nQbsE3BJbLo98iBf1NU2kW
5kahVtb5HOMOW8DymNEmuf+cc9DyFkuyTKtipCaArwm6VEyKgLNScJDu60p3e1ba/ZM1oKdva54h
4IeGwYWMqYlqT0ujW8bRMErq/v7pKAiYjOlNFIIpNIb1hsoxDtYH+cXk5TQZAyKvJx35c1kq50Lg
s7DcQPfWZAQGJsSAP9FypNfBkPzzHgldt0IqC9V7PFy7uddFPoumHI9j+MVWW+ZLjbV7GFsC6Mxd
5PRenIE883juUFPhkDN0aR37m2TlGD7vnBLZ/dsosUgdkCs3tTwK/RA26sB2++ibfin2fkQQWtkC
wf4yDWEH+w/oP9cFfkWbpsRc1+WgR60GFv/+aX/LtT9FGPMEE9xjKZJFF+T4CZfTj6Xv3DE6cCfI
xsZEMO5QmcMXBisdgNPMoMWnQdgzbuqWH7T7y98/x3R/2BZhEzEbkRtPtU24gowLHKboErz2F5Hm
ir1U5eV8tS+GU6JDoodXPaiNEgYCVoBGR+P6EmBPv1RDM0VYDLeXiPQn0AEDoNftUKK5MY+VASZg
776uMX0lelG5XvpQLbXl7eVlz6Qe8Ac/dRKzKM5fkeQlh7cZHioLRzHVt4B8m0tw+mHxs0osFOTj
aqIGyOv09rh4n19ZZF9plYJ7iobQbB752a2iYmD8pfgXyv/+sZ4ka60szvdyKzxB6/ZY7vWKKENU
0XP5cV/MsGnn66rAoRxZ/hzr8ItlEA3bON4XMIhl75DqPMfk+c2nJjBWMERdIKyQXKRVxzbh9TFV
S5WPSolAYg/4r1py2zjo9PYd+Dt/pAO005D6QSSpvuCy7kG5nOjLIY8krxHYDPPNFuKXpnBoBvmD
CI6VvJKWwlXI+r78Lfjm0h4hXOj1KV5fACoOZg8kVRrf6ysHwuvq8ybKagTPEgL87F1eOzwOkC8g
1dAwu83c+TDgVqxkyxqE8DZX0oPYuoEnHVw8hZCJr1MyBAuV1r9ZGkffKhSyQgKuxvY+2qtQV+eg
oSky/hG27SoAaG63+j5ypaxj6PNykBVDcHTV6VvC43oE3rTVo1KKyuJQivj756u0SA/ABV3wMElr
dpr/6gA1slnDSv4Kuwhoqal5A6m3YYOuOtie34Pq3YvXwPtuLnSdhaQcz2f3vMRFBZ/Y2H/apUPf
+DVdZtsCRxmMzk2UHfychPXoBx5kcMLQvleMqKiSDhPgMp8KrvFVDoDvEbxYr9fg//6pad8ZRRax
/wHO4UZmXVatog6Jcd8vjgYP7aPCbSu/wVPIF/+bWm7j2eheFonpQSWU5d/wkpuIXNHknVOzoGDH
+kFPjYxOiZbPIkfIZZKgA1n80DfWXajadnBQI5YF0V0gqEKfhznk5jgHmjBnm5OpLyhl48u93+cB
EtB5K/UONCvF/zlzxvzv//4L/M9RtP8cSmPWNe+Tt0Lrf4Hvb/4F/r9H3/79fwBDX1QQCScAAA==#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formVMAutomationTool = New-Object 'System.Windows.Forms.Form'
	$buttonCancel = New-Object 'System.Windows.Forms.Button'
	$buttonBack = New-Object 'System.Windows.Forms.Button'
	$buttonFinish = New-Object 'System.Windows.Forms.Button'
	$tabcontrolWizard = New-Object 'System.Windows.Forms.TabControl'
	$tabpageStep1 = New-Object 'System.Windows.Forms.TabPage'
	$pictureboxLoading = New-Object 'System.Windows.Forms.PictureBox'
	$labelStep1 = New-Object 'System.Windows.Forms.Label'
	$panel1 = New-Object 'System.Windows.Forms.Panel'
	$labelOKStep1 = New-Object 'System.Windows.Forms.Label'
	$labelConnectionStatusNotC = New-Object 'System.Windows.Forms.Label'
	$labelUsernameNotConnected = New-Object 'System.Windows.Forms.Label'
	$labelVCenterServerNotConn = New-Object 'System.Windows.Forms.Label'
	$labelSetVSphereCredential = New-Object 'System.Windows.Forms.Label'
	$buttonEnterCredentials = New-Object 'System.Windows.Forms.Button'
	$vcenterTextbox = New-Object 'System.Windows.Forms.TextBox'
	$labelVCenterFQDNOrIPAddre = New-Object 'System.Windows.Forms.Label'
	$tabpageStep2 = New-Object 'System.Windows.Forms.TabPage'
	$buttonDuplicateVMBuild = New-Object 'System.Windows.Forms.Button'
	$labelStep2Network = New-Object 'System.Windows.Forms.Label'
	$labelStep2Memory = New-Object 'System.Windows.Forms.Label'
	$labelStep2CPU = New-Object 'System.Windows.Forms.Label'
	$labelStep2VMName = New-Object 'System.Windows.Forms.Label'
	$listviewVMsStep2 = New-Object 'System.Windows.Forms.ListView'
	$buttonDeleteVMFromQueue = New-Object 'System.Windows.Forms.Button'
	$buttonAddVirtualMachine = New-Object 'System.Windows.Forms.Button'
	$labelStep2 = New-Object 'System.Windows.Forms.Label'
	$tabpageStep3 = New-Object 'System.Windows.Forms.TabPage'
	$treeviewVMListStep3 = New-Object 'System.Windows.Forms.TreeView'
	$panel6 = New-Object 'System.Windows.Forms.Panel'
	$labelVMStep3 = New-Object 'System.Windows.Forms.Label'
	$buttonVNICAdd = New-Object 'System.Windows.Forms.Button'
	$labelVNICConfig = New-Object 'System.Windows.Forms.Label'
	$buttonVDiskAdd = New-Object 'System.Windows.Forms.Button'
	$labelVDiskConfig = New-Object 'System.Windows.Forms.Label'
	$labelOptionalConfig = New-Object 'System.Windows.Forms.Label'
	$tabpageStep4 = New-Object 'System.Windows.Forms.TabPage'
	$treeviewVMListStep4 = New-Object 'System.Windows.Forms.TreeView'
	$panel7 = New-Object 'System.Windows.Forms.Panel'
	$radiobuttonKMSKey = New-Object 'System.Windows.Forms.RadioButton'
	$radiobuttonRetailKey = New-Object 'System.Windows.Forms.RadioButton'
	$labelHostname = New-Object 'System.Windows.Forms.Label'
	$buttonProductKey = New-Object 'System.Windows.Forms.Button'
	$labelOSProductKey = New-Object 'System.Windows.Forms.Label'
	$labelOK1 = New-Object 'System.Windows.Forms.Label'
	$buttonSetHostname = New-Object 'System.Windows.Forms.Button'
	$labelVMNameStep4 = New-Object 'System.Windows.Forms.Label'
	$labelOSConfig = New-Object 'System.Windows.Forms.Label'
	$buttonOpenFeatureSelection = New-Object 'System.Windows.Forms.Button'
	$labelSelectRoles = New-Object 'System.Windows.Forms.Label'
	$labelSelectFeatures = New-Object 'System.Windows.Forms.Label'
	$buttonOpenRolesSelection = New-Object 'System.Windows.Forms.Button'
	$tabpageStep5 = New-Object 'System.Windows.Forms.TabPage'
	$buttonSelectScripts = New-Object 'System.Windows.Forms.Button'
	$labelPostDeploymentScript = New-Object 'System.Windows.Forms.Label'
	$comboboxTimezone = New-Object 'System.Windows.Forms.ComboBox'
	$labelTimezone = New-Object 'System.Windows.Forms.Label'
	$buttonAdminRename = New-Object 'System.Windows.Forms.Button'
	$labelAdminRename = New-Object 'System.Windows.Forms.Label'
	$labelAddLocalUsers = New-Object 'System.Windows.Forms.Label'
	$buttonAddLocalUsers = New-Object 'System.Windows.Forms.Button'
	$labelDomainWorkgroupRequi = New-Object 'System.Windows.Forms.Label'
	$labelOK3 = New-Object 'System.Windows.Forms.Label'
	$labelOK2 = New-Object 'System.Windows.Forms.Label'
	$buttonSet = New-Object 'System.Windows.Forms.Button'
	$labelAdministratorPasswor = New-Object 'System.Windows.Forms.Label'
	$buttonDomainWorkgroup = New-Object 'System.Windows.Forms.Button'
	$tabpageStep6 = New-Object 'System.Windows.Forms.TabPage'
	$webbrowserVMBuildSummary = New-Object 'System.Windows.Forms.WebBrowser'
	$buttonBuildAndConfigureVMs = New-Object 'System.Windows.Forms.Button'
	$buttonNext = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	#-------------------------------------------------------
	# NOTE: When new TabPage added place the validation code
	# 		in the Test-WizardPage function.
	#-------------------------------------------------------
	function Test-WizardPage
	{
	<#
		Add TabPages and place the validation code in this function
	#>
		[OutputType([boolean])]
		param([System.Windows.Forms.TabPage]$tabPage)
		
		if($tabPage -eq $tabpageStep1)
		{
			#TODO: Enter Validation Code here for Step 1
			if(-not $global:vcenterConnection.IsConnected)
			{
				return $false
			}
			else
			{
				return $true
			}
			
		}
		elseif ($tabPage -eq $tabpageStep2)
		{
			#TODO: Enter Validation Code here for Step 2
			if($global:vmbuilds -ne $null)
			{
				return $true
			}
			
			return $false
		}
		elseif ($tabPage -eq $tabpageStep3)
		{
			#TODO: Enter Validation Code here for Step 2
			if ($global:vmbuilds -ne $null)
			{
				return $true
			}
			
			return $false
		}
		elseif ($tabPage -eq $tabpageStep4)
		{
			$hostnameComplete = $true
			
			foreach ($node in $treeviewVMListStep4.Nodes)
			{
				if ($node.Text -notin $global:vmWorkgroupDomain.VMName)
				{
					$hostnameComplete = $false
				}
			}
			
			if ($hostnameComplete)
			{
				return $true
			}
			
			return $false
			
		}
		elseif ($tabPage -eq $tabpageStep5)
		{
			[System.Array]$timeZones = (Get-TimeZone -ListAvailable).DisplayName
			
			foreach ($timeZone in $timeZones)
			{
				$comboboxTimezone.Items.Add($timeZone)
			}
			
			if ($global:vmAdminPasswords)
			{
				return $false
			}
			
			return $true
		}
		elseif ($tabPage -eq $tabpageStep6)
		{
			$datetime = get-date -Format "MMddyyy_mmhhss"
			$string = ""
			if (Get-ChildItem -Path "$logDirectory\build_$datetime.html" -ErrorAction Ignore) { Remove-Item "$logDirectory\build_$datetime.html" -Force}		
			foreach ($vm in $global:vmBuilds)
			{
				$totalCoreCount = [int]($vm.NumCPU) * [int]($vm.CoresPerSocket)
				
				$string = "
						<p>
							<font size=3><b>VMName: <font color=red>$($vm.VMName)</font></b></font><br>
							<font size=2>
							&nbsp;&nbsp;&nbsp;<b>VM Host:</b> $($vm."VM Host")<br>
							&nbsp;&nbsp;&nbsp;<b>Datacenter:</b> $($vm.Datacenter)<br>
							&nbsp;&nbsp;&nbsp;<b>Datastore:</b> $($vm.Datastore)<br>
							&nbsp;&nbsp;&nbsp;<b>CPU Count:</b> $($vm.NumCPU)<br>
							&nbsp;&nbsp;&nbsp;<b>Cores Per Socket:</b> $($vm.CoresPerSocket)<br>
							&nbsp;&nbsp;&nbsp;<b>Total CPU Cores:</b> $totalCoreCount <br>
							&nbsp;&nbsp;&nbsp;<b>Memory:</b> $($vm.Memory)<br>
							&nbsp;&nbsp;&nbsp;<b>Template:</b> $($vm.Template)<br>
							&nbsp;&nbsp;&nbsp;<b>Location:</b> $($vm.Location)<br>
					"
				
				$domain = $global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }
				
				$string = $string + "&nbsp;&nbsp;&nbsp;<b>Hostname:</b> $($domain.Hostname)<br>"
				$string = $string + "&nbsp;&nbsp;&nbsp;<b>Domain/Workgroup:</b> $($domain.DomainName)<br>"
				
				$roles = $global:vmRoles | ?{ $_.VMName -eq $vm.VMName }
				
				if ($roles -ne '')
				{
					$string = $string + "&nbsp;&nbsp;&nbsp;<b>Roles:</b><br>"
					
					foreach ($role in $roles.Roles)
					{
						$string = $string + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$role<br>"
					}
				}
				
				$vmKeyTemp = $global:vmOSKeys | ?{ $_.VMName -eq $vm.VMName }
				
				$tzArray = Import-Csv "$ScriptDirectory\reference\timezones.csv"
				
				$tz = ($tzArray | ?{ $_.TimeZoneCode -eq $global:vmTimeZones}).Description
				
				$string = $string + "&nbsp;&nbsp;&nbsp;<b>Time Zone:</b> $tz<br>"
				
				if ($vmKeyTemp.UseKMS -eq 'Yes')
				{
					$string = $string + "&nbsp;&nbsp;&nbsp;<b>License Type:</b> Using KMS<br>"
				}
				elseif ($vmKeyTemp.UseKMS -eq "No")
				{
					$string = $string + "
										&nbsp;&nbsp;&nbsp;<b>License Type:</b> Product Key<br>
										&nbsp;&nbsp;&nbsp;<b>License Key:</b> $($vmKeyTemp.ProductKey)<br>
									"
				}
				
				if ($vm."IP Type" -eq "Static")
				{
					$string = $string + "
										&nbsp;&nbsp;&nbsp;<b>IP Type:</b> $($vm."IP Type")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Network:</b> $($vm.Network)<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>IP Address:</b> $($vm."IP Address")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Subnet Mask:</b> $($vm."Subnet Mask")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Default Gateway:</b> $($vm."Default Gateway")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Primary DNS Server:</b> $($vm."Primary DNS Server")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Secondary DNS Server:</b> $($vm."Secondary DNS Server")<br>
										"
				}
				else
				{
					$string = $string + "&nbsp;&nbsp;&nbsp;<b>IP Type:</b> $($vm."IP Type")<br>"
					$string = $string + "&nbsp;&nbsp;&nbsp;<b>Network:</b> $($vm.Network)<br>"
				}
				
				$disks = $global:vmAdditionalDisks | ?{ $_.VMName -eq $vm.VMName }
				
				
				foreach ($disk in $disks)
				{
					$string = $string + "&nbsp;&nbsp;&nbsp;<b>Additional Disk:</b> $($disk.DriveLetter) - $($disk.DriveSize)GB <br>"				
				}
				
				foreach ($nic in ($global:vmAdditionalNICs | ?{ $_.VMName -eq $vmName }))
				{
					if ($nic."IP Type" -eq "Static")
					{
						$string = $string + "
										&nbsp;&nbsp;&nbsp;<b>Additional NIC:</b> $($nic."IP Type")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Network:</b> $($nic.VLAN)<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>IP Address:</b> $($nic."IP Address")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Subnet Mask:</b> $($nic."Subnet Mask")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Default Gateway:</b> $($nic."Default Gateway")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Primary DNS Server:</b> $($nic."Primary DNS Server")<br>
										"
					}
					else
					{
						$string = $string + "
										&nbsp;&nbsp;&nbsp;<b>Additional NIC:</b> $($nic."IP Type")<br>"					
					}
				}
				
				if ($global:vmLocalUsers -ne '')
				{
					$string = $string + "&nbsp;&nbsp;&nbsp;<b>Additional Users:</b><br>"
					
					foreach ($user in $global:vmLocalUsers)
					{
						$string = $string + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$($user.Username)<br>"
					}
				}
				
				$string = $string + "</font></p>"
				
				ConvertTo-Html -Body $string | Out-File "$logDirectory\build_$datetime.html" -Append
			}
				
			$webbrowserVMBuildSummary.Url = "$logDirectory\build_$datetime.html"
			
			return $true
		}
		#Add more pages here
		
		return $false
	}
	
	
	
	$buttonFinish_Click={
		#-------------------------------------------------------
		# TODO: Place finalization script here
		#-------------------------------------------------------
		
	}
	
	#region Events and Functions
	$formVMAutomationTool_Load = {
		
		Update-NavButtons
		
		$Path = $env:TEMP
		
		if (Get-Item "$Path\VcenterHistory\vcenterhistory.log")
		{
			$autoCompleteArray = (Import-Csv "$Path\VcenterHistory\vcenterhistory.log").vcenter
			
			$vcenterTextbox.AutoCompleteCustomSource.AddRange($autoCompleteArray)
		}
		
	}
	
	function Update-NavButtons
	{
		<# 
			.DESCRIPTION
			Validates the current tab and Updates the Next, Prev and Finish buttons.
		#>
		$enabled = Test-WizardPage $tabcontrolWizard.SelectedTab
		$buttonNext.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
		$buttonBack.Enabled = $tabcontrolWizard.SelectedIndex -gt 0
		$buttonFinish.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)	
		#Uncomment to Hide Buttons
		#$buttonNext.Visible = ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
		#$buttonFinish.Visible = ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)
	}
	
	$script:DeselectedIndex = -1
	$tabcontrolWizard_Deselecting=[System.Windows.Forms.TabControlCancelEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
		# Store the previous tab index
		$script:DeselectedIndex = $_.TabPageIndex
	}
	
	$tabcontrolWizard_Selecting=[System.Windows.Forms.TabControlCancelEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
		# We only validate if we are moving to the Next TabPage. 
		# Users can move back without validating
		if($script:DeselectedIndex -ne -1 -and $script:DeselectedIndex -lt $_.TabPageIndex)
		{
			#Validate each page until we reach the one we want
			for($index = $script:DeselectedIndex; $index -lt $_.TabPageIndex; $index++)
			{
				$_.Cancel = -not (Test-WizardPage $tabcontrolWizard.TabPages[$index])
				
				if($_.Cancel) 
				{
					# Cancel and Return if validation failed.
					return;
				}
			}
		}
		
		Update-NavButtons
	}
	
	$buttonBack_Click={
		#Go to the previous tab page
		if($tabcontrolWizard.SelectedIndex -gt 0)
		{
			$tabcontrolWizard.SelectedIndex--
		}
	}
	
	$buttonNext_Click={	
		#Go to the next tab page
		if($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
		{
			$tabcontrolWizard.SelectedIndex++
		}	
	}
	
	#endregion
	
	#------------------------------------------------------
	# NOTE: When a Control State changes you should call
	# 		Update-NavButtons to trigger validation
	#------------------------------------------------------
	
	$radiobuttonOption_CheckedChanged={
		
		if($this.Checked)
		{
			Update-NavButtons
		}
	}
	
	$buttonEnterCredentials_Click={
		
		try
		{
			$pictureboxLoading.Visible = $true
			if ($global:vcenterConnection.IsConnected)
			{
				Disconnect-VIServer -Server * -Force -Confirm:$false
				$labelVCenterServerNotConn.Text = "vCenter Server: Not Connected"
				$labelUsernameNotConnected.Text = "Username: Not Connected"
				$labelConnectionStatusNotC.Text = "Connection Status: Not Connected"
			}
			$global:vcCredential = $null
			$global:vcenterConnection = $null
			$global:vcCredential = Get-Credential -ErrorAction Stop
			$global:vcenterConnection = Connect-VIServer -Server $vcenterTextbox.Text -Credential $global:vcCredential -ErrorAction Stop
			$buttonEnterCredentials.Enabled = $false
			$pictureboxLoading.Visible = $false
		}
		catch
		{
			"Unable to connect."
		}
		
		If ($global:vcenterConnection.IsConnected)
		{
			$labelVCenterServerNotConn.Text = "vCenter Server: $($vcenterTextbox.Text)"
			$labelUsernameNotConnected.Text = "Username: $($global:vcenterConnection.User)"
			$labelConnectionStatusNotC.Text = "Connection Status: Connected"
			$labelOKStep1.Visible = $true
			
			$Path = $env:TEMP
			
			if (-not (Get-Item "$Path\VcenterHistory" -ErrorAction SilentlyContinue))
			{
				New-Item -Name VcenterHistory -Path $Path -ItemType Directory
			}
			
			if (Get-Item "$Path\VcenterHistory\vcenterhistory.log" -ErrorAction SilentlyContinue)
			{
				$vcHistoryArray = Import-Csv "$Path\VcenterHistory\vcenterhistory.log"
				
				$vcHistoryArray = $vcHistoryArray | ?{ $_.vcenter -ne "$($vcenterTextbox.Text)" }
				
				$object = New-Object PSObject
				
				$object | Add-Member -MemberType NoteProperty -Name vcenter -Value $vcenterTextbox.Text
				
				$vcHistoryArray = [System.Array]$vcHistoryArray + $object
				
				$vcHistoryArray | Export-CSV "$Path\VcenterHistory\vcenterhistory.log" -NoTypeInformation
			}
			else
			{
				$vcHistoryArray = @()
				
				$object = New-Object PSObject
				
				$object | Add-Member -MemberType NoteProperty -Name vcenter -Value $vcenterTextbox.Text
				
				$vcHistoryArray = [System.Array]$vcHistoryArray + $object
				
				$vcHistoryArray | Export-CSV "$Path\VcenterHistory\vcenterhistory.log" -NoTypeInformation
			}
			
			Update-NavButtons
			
		}
		else
		{
			[System.Windows.Forms.MessageBox]::Show("Unable to connect to $($vcenterTextbox.Text). Please try logging on again.")
			$labelOKStep1.Visible = $false
			Update-NavButtons
		}
	}
	
	#region Control Helper Functions
	function Update-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
		
		.PARAMETER ComboBox
			The ComboBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ComboBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red" -Append
			Update-ComboBox $combobox1 "White" -Append
			Update-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Update-ComboBox $combobox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ComboBox]
			$ComboBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]
			$DisplayMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	function Update-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The DataGridView control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the DataGridView's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		.PARAMETER AutoSizeColumns
		    Resizes DataGridView control's columns after loading the items.
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Item,
		    [Parameter(Mandatory=$false)]
			[string]$DataMember,
			[System.Windows.Forms.DataGridViewAutoSizeColumnMode]$AutoSizeColumns = 'None'
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
		{
			$DataGridView.DataSource = $Item.Tables[0]
		}
		elseif ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{
				$array.Add($Item)
			}
			$DataGridView.DataSource = $array
		}
		
		if ($AutoSizeColumns -ne 'None')
		{
			$DataGridView.AutoResizeColumns($AutoSizeColumns)
		}
		
		$DataGridView.ResumeLayout()
	}
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterWMIProperties
				This switch removes WMI properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param(
		[ValidateNotNull()]
		$InputObject, 
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
		
		if($null -eq $Table)
		{
			$Table = New-Object System.Data.DataTable
		}
		
		if ($InputObject -is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
		{
			$Table = $InputObject.Tables[0]
		}
		else
		{
			if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
				
				if ($null -eq $InputObject) { return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach ($item in $InputObject)
				{
					if ($null -ne $item)
					{
						$object = $item
						break
					}
				}
				
				if ($null -eq $object) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if ($null -ne $prop.Value)
						{
							try { $type = $prop.Value.GetType() }
							catch { Out-Null }
						}
						
						if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
							[void]$table.Columns.Add($prop.Name, $type)
						}
						else #Type info not found
						{
							[void]$table.Columns.Add($prop.Name)
						}
					}
				}
				
				if ($object -is [System.Data.DataRow])
				{
					foreach ($item in $InputObject)
					{
						$Table.Rows.Add($item)
					}
					return @( ,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()
			}
			
			foreach ($item in $InputObject)
			{
				$row = $table.NewRow()
				
				if ($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if ($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
		
		return @(,$Table)	
	}
	
	function Update-ListViewColumnSort
	{
	<#
		.SYNOPSIS
			Sort the ListView's item using the specified column.
		
		.DESCRIPTION
			Sort the ListView's item using the specified column.
			This function uses Add-Type to define a class that sort the items.
			The ListView's Tag property is used to keep track of the sorting.
		
		.PARAMETER ListView
			The ListView control to sort.
		
		.PARAMETER ColumnIndex
			The index of the column to use for sorting.
		
		.PARAMETER SortOrder
			The direction to sort the items. If not specified or set to None, it will toggle.
		
		.EXAMPLE
			Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListView]
			$ListView,
			[Parameter(Mandatory = $true)]
			[int]
			$ColumnIndex,
			[System.Windows.Forms.SortOrder]
			$SortOrder = 'None'
		)
		
		if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
		{
			return;
		}
		
		#region Define ListViewItemComparer
		try
		{
			[ListViewItemComparer] | Out-Null
		}
		catch
		{
			Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
		}
		#endregion
		
		if ($ListView.Tag -is [ListViewItemComparer])
		{
			#Toggle the Sort Order
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
				{
					$ListView.Tag.sortOrder = 'Descending'
				}
				else
				{
					$ListView.Tag.sortOrder = 'Ascending'
				}
			}
			else
			{
				$ListView.Tag.sortOrder = $SortOrder
			}
			
			$ListView.Tag.column = $ColumnIndex
			$ListView.Sort() #Sort the items
		}
		else
		{
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
			}
			
			#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
			$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
			$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
		}
	}
	
	
	function Add-ListViewItem
	{
	<#
		.SYNOPSIS
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.DESCRIPTION
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.PARAMETER ListView
			The ListView control to add the items to.
	
		.PARAMETER Items
			The object or objects you wish to load into the ListView's Items collection.
			
		.PARAMETER  ImageIndex
			The index of a predefined image in the ListView's ImageList.
		
		.PARAMETER  SubItems
			List of strings to add as Subitems.
		
		.PARAMETER Group
			The group to place the item(s) in.
		
		.PARAMETER Clear
			This switch clears the ListView's Items before adding the new item(s).
		
		.EXAMPLE
			Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
	#>
		
		Param( 
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.ListView]$ListView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Items,
		[int]$ImageIndex = -1,
		[string[]]$SubItems,
		$Group,
		[switch]$Clear)
		
		if($Clear)
		{
			$ListView.Items.Clear();
	    }
	    
	    $lvGroup = $null
	    if ($Group -is [System.Windows.Forms.ListViewGroup])
	    {
	        $lvGroup = $Group
	    }
	    elseif ($Group -is [string])
	    {
	        #$lvGroup = $ListView.Group[$Group] # Case sensitive
	        foreach ($groupItem in $ListView.Groups)
	        {
	            if ($groupItem.Name -eq $Group)
	            {
	                $lvGroup = $groupItem
	                break
	            }
	        }
	        
	        if ($null -eq $lvGroup)
	        {
	            $lvGroup = $ListView.Groups.Add($Group, $Group)
	        }
	    }
	    
		if($Items -is [Array])
		{
			$ListView.BeginUpdate()
			foreach ($item in $Items)
			{		
				$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
				#Store the object in the Tag
				$listitem.Tag = $item
				
				if($null -ne $SubItems)
				{
					$listitem.SubItems.AddRange($SubItems)
				}
				
				if($null -ne $lvGroup)
				{
					$listitem.Group = $lvGroup
				}
			}
			$ListView.EndUpdate()
		}
		else
		{
			#Add a new item to the ListView
			$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $Items
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
	}
	
	
	function Get-CheckedNode
	{
	<#
		.SYNOPSIS
			This function collects a list of checked nodes in a TreeView
	
		.DESCRIPTION
			This function collects a list of checked nodes in a TreeView
	
		.PARAMETER  $NodeCollection
			The collection of nodes to search
	
		.PARAMETER  $CheckedNodes
			The ArrayList that will contain the all the checked items
		
		.EXAMPLE
			$CheckedNodes = New-Object System.Collections.ArrayList
			Get-CheckedNode $treeview1.Nodes $CheckedNodes
			foreach($node in $CheckedNodes)
			{	
				Write-Host $node.Text
			}
	#>
		param (
				[ValidateNotNull()]
				[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
				[ValidateNotNull()]
				[System.Collections.ArrayList]$CheckedNodes
		)
		
		foreach ($Node in $NodeCollection)
		{
			if ($Node.Checked)
			{
				[void]$CheckedNodes.Add($Node)
			}
			Get-CheckedNode $Node.Nodes $CheckedNodes
		}
	}
	
	#endregion
	
	
	$vcenterTextbox_TextChanged={
		#TODO: Place custom script here
		if ($vcenterTextbox.Text -ne "")
		{
			$buttonEnterCredentials.Enabled = $true
		}
		else
		{
			$buttonEnterCredentials.Enabled = $false
		}
	}
	
	$buttonAddVirtualMachine_Click={
		#TODO: Place custom script here
		if ((Show-AddVMForm_psf) -eq 'OK')
		{
		}
	}
	
	
	$buttonOpenRolesSelection_Click={
		
		$global:vmSelectedStep4 | Out-File "$logDirectory\vmselectedstep4.log" -Append
		
		if ((Show-WindowsRoles_psf -VMName $global:vmSelectedStep4) -eq 'OK')
		{
			#$selectedRoles = $global:vmRoles | ?{ $_.VMName -eq $vm.VMName } | Select -ExpandProperty Roles		
		}
		
	}
	
	$buttonBuildAndConfigureVMs_Click={
		
		#$progressbarVMBuild.Visible = $true
		$buttonBuildAndConfigureVMs.Enabled = $false
		
		try
		{
			#$progressbarVMBuild.Maximum = ($global:vmBuilds).Count
			#$progressbarVMBuild.Value = 0
			#$progressbarVMBuild.Step = 1
			
			foreach ($vm in $global:vmbuilds)
			{
				while (@(Get-Job | ?{ $_.State -eq "Running" }).Count -ge 5)
				{
					# We're going to iterate through the running jobs and kill any that have been running for X minutes.
					# This block is ignored if there are less than 5 total builds. We'll handle that part later.
					
					foreach ($job in (Get-Job))
					{
						$runTime = ((Get-Date) - $job.PSBeginTime).Minutes
						if ($runtime -gt 30)
						{
							try
							{
								Stop-Job $job.Name -Confirm:$false
							}
							catch
							{
								"Unable to stop job."
							}
						}
					}
				
					Write-Host "Waiting for open thread...($NumJobs Maximum)"
					Start-Sleep -Seconds 3
				}
				
				# Let's combine all the OS specific data we gathered for the VM into one variable.
				$osConfigObject = New-Object PSObject
				
				$osConfigObject | Add-Member -MemberType NoteProperty -Name "VMName" -Value $vm.VMName
				
				# Add the data for the domain/workgroup
				$osConfigObject | Add-Member -MemberType NoteProperty -Name "Hostname" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).Hostname
				$osConfigObject | Add-Member -MemberType NoteProperty -Name "DomainName" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).DomainName
				$osConfigObject | Add-Member -MemberType NoteProperty -Name "DomainUser" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).DomainUser
				$osConfigObject | Add-Member -MemberType NoteProperty -Name "DomainPassword" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).DomainPassword
				$osConfigObject | Add-Member -MemberType NoteProperty -Name "IsWorkgroup" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).IsWorkgroup
				$osConfigObject | Add-Member -MemberType NoteProperty -Name "LocalAdminPassword" -Value $global:vmAdminPasswords
				$osConfigObject | Add-Member -MemberType NoteProperty -Name "Roles" -Value ($global:vmRoles | ?{ $_.VMName -eq $vm.VMName }).Roles
				$osConfigObject | Add-Member -MemberType NoteProperty -Name "Features" -Value ($global:vmFeatures | ?{ $_.VMName -eq $vm.VMName }).Features
				$osConfigObject | Add-Member -MemberType NoteProperty -Name "AdminPassword" -Value ($global:vmAdminPasswords | ?{ $_.VMName -eq $vm.VMName }).Password
				$osConfigObject | Add-Member -MemberType NoteProperty -Name "LocalUsers" -Value $global:vmLocalUsers
				$osConfigObject | Add-Member -MemberType NoteProperty -Name "Disks" -Value ($global:vmAdditionalDisks | ?{ $_.VMName -eq $vm.VMName })
				$osConfigObject | Add-Member -MemberType NoteProperty -Name "NICs" -Value ($global:vmAdditionalNICs | ?{ $_.VMName -eq $vm.VMName })
				$osConfigObject | Add-Member -MemberType NoteProperty -Name "OSKeys" -Value ($global:vmOSKeys | ?{ $_.VMName -eq $vm.VMName })
				$osConfigObject | Add-Member -MemberType NoteProperty -Name "TimeZone" -Value $global:vmTimeZones
				$osConfigObject | Add-Member -MemberType NoteProperty -Name "PostInstallScripts" -Value $global:postInstallScripts
				
				if ($global:vmAdminAccount -ne "")
				{
					$osConfigObject | Add-Member -MemberType NoteProperty -Name "AdminAccount" -Value $global:vmAdminAccount
				}
				else
				{
					$osConfigObject | Add-Member -MemberType NoteProperty -Name "AdminAccount" -Value ""
				}
				
				#$global:vmFullOSConfig = [System.Array]$global:vmFullOSConfig + $osConfigObject
				
				$osConfigObject | Out-File "$logDirectory\osobject.log" -Append
				$vm | Out-File "$logDirectory\vmobject.log" -Append
				# Define and start the build job for the VM.
				
				Start-Job -Name $vm.VMName -ArgumentList $vcenterTextbox.Text, $global:vcCredential, $vm, $ScriptDirectory, $osConfigObject, $logDirectory -Verbose -ScriptBlock {
					. "$($args[3])\Functions\Get-FolderbyPath.ps1"
					
					Import-Module VMware.PowerCLI
					
					Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -ParticipateInCeip $false -DisplayDeprecationWarnings $false -Confirm:$false -WebOperationTimeoutSeconds 3600 -ErrorAction Stop
					
					$connection = Connect-VIServer -Server $args[0] -Credential $args[1] -ErrorAction Stop
					
					if ($args[4].IsWorkgroup -eq 'No')
					{
						
						$password = ConvertTo-SecureString "$($args[4].DomainPassword)" -AsPlainText -Force
						$domainCredential = New-Object System.Management.Automation.PSCredential ("$($args[4].DomainUser)", $password)
						
						$osSpec = New-OSCustomizationSpec -OSType "Windows" -Name $args[2].VMName -Type NonPersistent `
														  -FullName "Administrator" `
														  -AdminPassword "$($args[4].LocalAdminPassword)" `
														  -AutoLogonCount 1 `
														  -OrgName "Org1" `
														  -Description "Temporary Spec for $($args[2].VMName)" `
														  -ChangeSid `
														  -Domain "$($args[4].DomainName)" `
														  -DomainCredentials $domainCredential `
														  -NamingScheme fixed `
														  -NamingPrefix $args[4].Hostname `
														  -ErrorAction Stop
						
					}
					else
					{
						
						$osSpec = New-OSCustomizationSpec -OSType "Windows" -Name $args[2].VMName -Type NonPersistent `
														  -FullName "Administrator" `
														  -AdminPassword "$($args[4].LocalAdminPassword)" `
														  -AutoLogonCount 1 `
														  -OrgName "Org1" `
														  -Description "Temporary Spec for $($args[2].VMName)" `
														  -ChangeSid `
														  -Workgroup "$($args[4].DomainName)" `
														  -NamingScheme fixed `
														  -NamingPrefix $args[4].Hostname `
														  -ErrorAction Stop
						
					}
					
					
					if ($args[2].("IP Type") -eq "DHCP")
					{
						
						Get-OSCustomizationNicMapping -OSCustomizationSpec $osSpec | Set-OSCustomizationNicMapping -IpMode UseDHCP -ErrorAction Stop					
					}
					else
					{
						Get-OSCustomizationNicMapping -OSCustomizationSpec $osSpec | Set-OSCustomizationNicMapping -IpMode UseStaticIP `
																												   -IpAddress $args[2].("IP Address") `
																												   -SubnetMask $args[2].("Subnet Mask") `
																												   -DefaultGateway $args[2].("Default Gateway") `
																												   -Dns $args[2].("Primary DNS Server"), $args[2].("Secondary DNS Server") `
																												   -ErrorAction Stop				
					}
					
					# Here, we pull in the template depending on if it's in vCenter or in a Content Library.
					
					#if ($args[2].TemplateLocation -eq "vCenter")
					#{
						$vmTemplate = Get-Template -Name $args[2].Template
					
						$destFolder = Get-FolderbyPath -Path "$($args[2].Location)" -Separator "\"
					
						$args[2].("VM Host") | Out-File "$($args[5])\params.log" -Append
						$args[2].VMName | Out-File "$($args[5])\params.log" -Append
						$args[2].Datastore | Out-File "$($args[5])\params.log" -Append
						$vmTemplate | Out-File "$($args[5])\params.log" -Append
						$destFolder | Out-File "$($args[5])\params.log" -Append
						$osSpec | Out-File "$($args[5])\params.log" -Append
						# Now, let's actually build the VM with the configuration spec we defined above.
						$invoke = New-VM -VMHost "$($args[2].("VM Host"))" -Name "$($args[2].VMName)" -Datastore "$($args[2].Datastore)" -Template "$vmTemplate" -Location "$destFolder" -OSCustomizationSpec $osSpec -ErrorAction Stop
						
					#}
					<#
					elseif ($args[2].TemplateLocation -eq "Content Library")
					{					
						if ($connection.Version -ge 6.5)
						{
							$vmTemplate = Get-ContentLibraryItem -Name $args[2].Template
							
							$destFolder = Get-FolderbyPath -Path "$($args[2].Location)" -Separator "\"
							
							# Now, let's actually build the VM with the configuration spec we defined above.
							$invokeTask = New-VM -VMHost $args[2].("VM Host") -Name $args[2].VMName -Datastore $args[2].Datastore -Location $destFolder -ContentLibraryItem $vmTemplate -RunAsync -ErrorAction Stop
							
							do
							{
								Write-Host $invokeTask
								Start-Sleep -Seconds 5
							}
							while ($invokeTask.State -eq "Running")
							
							
							$applySpec = Get-VM -Name $args[2].VMName | Set-VM -OSCustomizationSpec $osSpec -Confirm:$false -ErrorAction Stop
						}
						else
						{
							$vmTemplate = Get-ContentLibraryItem -Name $args[2].Template
						}					
					} /#>
					
					# Now that the VM is built, we need to modify the network adapter and assign it to the specified vSwitch before powering it on.
					$totalCPUs = [int]($args[2].NumCPU) * [int]($args[2].CoresPerSocket)
					Get-VM -Name $args[2].VMName | Set-VM -MemoryGB $args[2].Memory -NumCpu $totalCPUs -CoresPerSocket $args[2].CoresPerSocket -Confirm:$false -ErrorAction Stop
					
					Get-NetworkAdapter -VM $args[2].VMName | Set-NetworkAdapter -NetworkName $args[2].Network -StartConnected $true -Confirm:$false -ErrorAction Stop
					
					Start-VM -VM $args[2].VMName -RunAsync
					
					# Now we wait for the VM to power up and auto log in before continuing.
					$vmstatus = (Get-VM -Name "$($args[2].VMName)").extensionData.Guest.interactiveGuestOperationsReady
					
					do
					{
						Start-Sleep -Seconds 1
						$vmstatus = (Get-VM -Name "$($args[2].VMName)").extensionData.Guest.interactiveGuestOperationsReady
						Write-Host $vmStatus -ForegroundColor Red
					}
					while ($vmStatus -ne $True)
					
					Write-Host $vmStatus -ForegroundColor Green
					
					#Get-VM $args[2].VMName -ErrorAction Stop | Restart-VMGuest -Confirm:$false -ErrorAction Stop
					
					# Now that our VM is built, let's finish customizing it. We'll start by creating the credential object to run Invoke-VMScript.
					
					$vmAdminPass = $args[4].LocalAdminPassword
					
					$localAdmin = "Administrator"
					$password = ConvertTo-SecureString $args[4].LocalAdminPassword -AsPlainText -Force
					$localAdminCred = New-Object System.Management.Automation.PSCredential ($localAdmin, $password)
					
					# Declare the array that will house each command to run.
					
					$customizeOSScripts = [System.Collections.ArrayList]@()
					
					# Now, build the commands to add the additional user accounts to the new VMs. Add the commands to the command array.
					
					foreach ($user in $args[4].LocalUsers)
					{
						if ($user.Administrator -eq "Yes")
						{
							$userCreate = New-Object PSObject
							$userCreate | Add-Member -MemberType NoteProperty -Name "Command" -Value "NET USER $($user.Username) $($user.Password) /add"
							
							$userAdmin = New-Object PSObject
							$userAdmin | Add-Member -MemberType NoteProperty -Name "Command" -Value "NET LOCALGROUP Administrators $($user.Username) /add"
							
							$date = Get-Date -Format "M-d-yyyy"
							$desc = "Admin user created on $date."
							$userTmp = $user.Username
							$userDescription = New-Object PSObject
							$userDescription | Add-Member -MemberType NoteProperty -Name "Command" -Value "Set-LocalUser -Name $userTmp -Description ""$desc"""
							
							$customizeOSScripts = [System.Array]$customizeOSScripts + $userCreate
							$customizeOSScripts = [System.Array]$customizeOSScripts + $userAdmin
							$customizeOSScripts = [System.Array]$customizeOSScripts + $userDescription
						}
						else
						{
							$userCreate = New-Object PSObject
							$userCreate | Add-Member -MemberType NoteProperty -Name "Command" -Value "NET USER $($user.Username) $($user.Password) /add"
							
							$date = Get-Date -Format "M-d-yyyy"
							$desc = "Standard user created on $date."
							$userTmp = $user.Username
							$userDescription = New-Object PSObject
							$userDescription | Add-Member -MemberType NoteProperty -Name "Command" -Value "Set-LocalUser -Name $userTmp -Description ""$desc"""
							
							$customizeOSScripts = [System.Array]$customizeOSScripts + $userCreate
							$customizeOSScripts = [System.Array]$customizeOSScripts + $userDescription
						}
					}
					
					# Build the command to install the selected Roles.
					
					foreach ($role in $args[4].Roles)
					{
						$object = New-Object PSObject
						$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Install-WindowsFeature -Name $role -IncludeManagementTools"
						$customizeOSScripts = [System.Array]$customizeOSScripts + $object
					}
					
					# Now, we add, format and partition additional specified disks.
					
					foreach ($disk in $args[4].Disks)
					{
						$driveLetter = $disk.DriveLetter
						$driveLabel = "Drive-$($disk.DriveLetter)"
						$driveSize = [int]($disk.DriveSize)
						$confirm = '$false'
						New-HardDisk -VM $args[2].VMName -CapacityGB $driveSize -Persistence persistent -Confirm:$false -ErrorAction Stop
						$object = New-Object PSObject
						$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-Disk | Where-Object PartitionStyle -eq ""RAW"" | Initialize-Disk -PartitionStyle GPT -PassThru | New-Partition -DriveLetter $driveLetter -UseMaximumSize | Format-Volume -FileSystem NTFS -NewFileSystemLabel $driveLabel -AllocationUnitSize 65536 -Confirm:$confirm"
						#$customizeOSScripts = [System.Array]$customizeOSScripts + $object
						Invoke-VMScript -VM $args[2].VMName -GuestCredential $localAdminCred -ScriptText "$($object.Command)" -ErrorAction Stop | Out-File "$($args[5])\$($args[2].VMName)_scriptcommand.log" -Append
					}
					
					# Now, we need to rename the original adapter and set binding order.
					
					$prNICLabelObject = New-Object PSObject
					$prNICLabel = $args[2].NICLabel
					$prMacAddress = (Get-VM -Name $args[2].VMName | Get-NetworkAdapter | ?{ $_.Name -eq "Network Adapter 1" }).MacAddress
					
					$prMacAddress = "$prMacAddress" -replace ":", "-"
					
					$prNICLabelObject | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$prMacAddress"" | Rename-NetAdapter -NewName $prNICLabel"
					$customizeOSScripts = [System.Array]$customizeOSScripts + $prNICLabelObject
					
					$prNICPriorityObject = New-Object PSObject
					$prNICPriorityObject | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$prMacAddress"" | Get-NetIPInterface | Set-NetIPInterface -InterfaceMetric 1"
					$customizeOSScripts = [System.Array]$customizeOSScripts + $prNICPriorityObject
					
					# Let's customize additional network adapters.
					
					foreach ($nic in $args[4].NICs)
					{
						$newNic = New-NetworkAdapter -VM $nic.VMName -NetworkName $nic.VLAN -StartConnected -Type Vmxnet3
						
						$macAddress = "$($newNic.MacAddress)" -replace ":", "-"
						
						if ($nic.("IP Type") -eq "Static")
						{
							$newIP = $nic.("IP Address")
							$newMask = $nic.("Subnet Mask")
							$newGateway = $nic.("Default Gateway")
							$newDNSServer = $nic.("Primary DNS Server")
							$newNICLabel = $nic.NICLabel
							
							# Determine the CIDR notation for subnet mask. We'll need this later.'
							$subnetMasks = Import-Csv "$($args[3])\reference\cidrlist.csv"
							
							$cidrNotation = ($subnetMasks | ?{ $_.SubnetMask -eq $newMask }).CIDR
							
							if ($newGateway -ne '')
							{
								if ($newDNSServer -ne '')
								{
									$object = New-Object PSObject
									$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$macAddress"" | New-NetIPAddress -IPAddress $newIP -DefaultGateway $newGateway -PrefixLength $cidrNotation | Set-DNSClientServerAddress -ServerAddresses $newDNSServer"
									$customizeOSScripts = [System.Array]$customizeOSScripts + $object
									$object2 = New-Object PSObject
									$object2 | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$macAddress"" | Rename-NetAdapter -NewName $newNICLabel"
									$customizeOSScripts = [System.Array]$customizeOSScripts + $object2
								}
								else
								{
									$object = New-Object PSObject
									$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$macAddress"" | New-NetIPAddress -IPAddress $newIP -DefaultGateway $newGateway -PrefixLength $cidrNotation"
									$customizeOSScripts = [System.Array]$customizeOSScripts + $object
									$object2 = New-Object PSObject
									$object2 | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$macAddress"" | Rename-NetAdapter -NewName $newNICLabel"
									$customizeOSScripts = [System.Array]$customizeOSScripts + $object2
								}
								
								$customizeOSScripts = [System.Array]$customizeOSScripts + $object
							}
							else
							{
								if ($newDNSServer -ne '')
								{
									$object = New-Object PSObject
									$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$macAddress"" | New-NetIPAddress -IPAddress $newIP -PrefixLength $cidrNotation | Set-DNSClientServerAddress -ServerAddresses $newDNSServer"
									$customizeOSScripts = [System.Array]$customizeOSScripts + $object
									$object2 = New-Object PSObject
									$object2 | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$macAddress"" | Rename-NetAdapter -NewName $newNICLabel"
									$customizeOSScripts = [System.Array]$customizeOSScripts + $object2
								}
								else
								{
									$object = New-Object PSObject
									$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$macAddress"" | New-NetIPAddress -IPAddress $newIP -PrefixLength $cidrNotation"
									$customizeOSScripts = [System.Array]$customizeOSScripts + $object
									$object2 = New-Object PSObject
									$object2 | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$macAddress"" | Rename-NetAdapter -NewName $newNICLabel"
									$customizeOSScripts = [System.Array]$customizeOSScripts + $object2
								}
							}
						}
						else
						{
							$newNICLabel = $nic.NICLabel
							$object2 = New-Object PSObject
							$object2 | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$macAddress"" | Rename-NetAdapter -NewName $newNICLabel"
							$customizeOSScripts = [System.Array]$customizeOSScripts + $object2
						}
					}
					
					# Let's set the product key and activate Windows.
					
					foreach ($key in $args[4].OSKeys)
					{
						if ($key.UseKMS -eq "Yes")
						{
							[string]$kmsServerCmd = "cscript C:\Windows\System32\slmgr.vbs /skms $($key.KMSServer):$($key.KMSServerPort)"
							
							$object = New-Object PSObject
							$object | Add-Member -MemberType NoteProperty -Name "Command" -Value $kmsServerCmd
							
							$customizeOSScripts = [System.Array]$customizeOSScripts + $object
						}
						elseif ($key.UseKMS -eq "No")
						{
							[string]$productKeyCmd = "cscript C:\Windows\System32\slmgr.vbs /ipk $($key.ProductKey)"
							[string]$activationCmd = "cscript C:\Windows\System32\slmgr.vbs /ato"
							
							$object = New-Object PSObject
							$object | Add-Member -MemberType NoteProperty -Name "Command" -Value $productKeyCmd
							
							$customizeOSScripts = [System.Array]$customizeOSScripts + $object
							
							Clear-Variable object
							
							$object = New-Object PSObject
							$object | Add-Member -MemberType NoteProperty -Name "Command" -Value $activationCmd
							
							$customizeOSScripts = [System.Array]$customizeOSScripts + $object
						}
					}
					
					# Now we'll set the time zone
					
					foreach ($tz in $args[4].TimeZone)
					{
						$setTZID = (Get-TimeZone -ListAvailable | Where-Object DisplayName -eq $tz).Id
						
						$newTZCommand = "Set-TimeZone -Id '$setTZID'"
						
						$object = New-Object PSObject
						$object | Add-Member -MemberType NoteProperty -Name "Command" -Value $newTZCommand
						
						$customizeOSScripts = [System.Array]$customizeOSScripts + $object
					}
					
					if ($args[4].AdminAccount -ne "")
					{
						$newAdminCommand = "Get-LocalUser Administrator | Rename-LocalUser -NewName $($args[4].AdminAccount)"
						
						$object = New-Object PSObject
						$object | Add-Member -MemberType NoteProperty -Name "Command" -Value $newAdminCommand
						
						$customizeOSScripts = [System.Array]$customizeOSScripts + $object
					}
					
					# Let's output the commands to verify.
					$customizeOSScripts | Out-File "$($args[5])\scriptsarray_$($args[2].VMName).log"
					
					# Now, we run all the customization commands.
					
					foreach ($script in $customizeOSScripts)
					{
						$script.Command | Out-File "$($args[5])\$($args[2].VMName)_scriptcommand.log" -Append
						Invoke-VMScript -VM $args[2].VMName -GuestCredential $localAdminCred -ScriptText "$($script.Command)" -ErrorAction Ignore | Out-File "$($args[5])\$($args[2].VMName)_scriptcommand.log" -Append
						
					}
					
					$newLocalAdmin = $($args[4].AdminAccount)
					$password = ConvertTo-SecureString $args[4].LocalAdminPassword -AsPlainText -Force
					$newLocalAdminCred = New-Object System.Management.Automation.PSCredential ($newLocalAdmin, $password)
					
					foreach ($postInstallScript in $args[4].PostInstallScripts)
					{
						$postInstallScript.Script | Out-File "$($args[5])\$($args[2].VMName)_scriptcommand.log" -Append
						Invoke-VMScript -VM $args[2].VMName -GuestCredential $newLocalAdminCred -ScriptText "$($postInstallScript.Script)" -ErrorAction Ignore | Out-File "$($args[5])\$($args[2].VMName)_scriptcommand.log" -Append
					}
					
					Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -ParticipateInCeip $false -DisplayDeprecationWarnings $false -Confirm:$false -WebOperationTimeoutSeconds 300 -ErrorAction Stop
					
					Disconnect-VIServer -Server $args[0] -Force -Confirm:$false -ErrorAction Stop
				
					
				} # End job block
				
			} # End foreach statement
			
			# Let's wait for all the build jobs to finish. We'll also kill any jobs that have been running for longer than X minutes.
			# For each job returned that has not completed, we'll check to see if it has been running longer than X minutes. If it has, kill the job.
			
			do
			{
				Start-Sleep -Milliseconds 1000
				
				foreach ($job in (Get-Job))
				{
					$runTime = ((Get-Date) - $job.PSBeginTime).Minutes
					if ($runtime -gt 30)
					{
						try
						{
							Stop-Job $job.Name -Confirm:$false
						}
						catch
						{
							"Unable to stop job."
						}
					}
				}
				
			}
			while ((Get-Job -State Running).Count -gt 0)
			
			$datetime = Get-Date -Format "MMddyyyy_HHmmss"
			
			# Get the completed jobs.
			$jobs = Get-Job | ?{ $_.State -eq "Completed" }
			
			# Get the failed jobs.
			$failedJobs = Get-Job | ?{ $_.State -ne "Completed" }
			
			# Output the job results to a separate log file for each VM.		
			$data = @()
			
			foreach ($job in $jobs)
			{
				$data += Get-Job $job.Name | Receive-Job
				Remove-Job $job
				
				Get-VM $job.Name | Restart-VMGuest -Confirm:$false
				
				$data | Out-File "$logDirectory\jobresult.log" -Append
			}
			
			$failedData = @()
			
			foreach ($failedJob in $failedJobs)
			{
				$failedData += Get-Job $failedJob.Name | Receive-Job
				Remove-Job $failedJob
				
				Get-VM $job.VMName | Stop-VM -RunAsync -Confirm:$false
				
				do { Start-Sleep -Milliseconds 500 }
				while ((Get-VM $job.Name).PowerState -eq "PoweredOff")
				
				Remove-VM $job.Name -RunAsync -DeletePermanently -Confirm:$false
			}
			
			$data | Out-File "$logDirectory\jobtext.log" -Append
			
			if (-not $failedData)
			{
				[System.Windows.Forms.MessageBox]::Show("All requested virtual machines are available.")
			}
			else
			{
				$failedData | Out-File "$logDirectory\failedjobtext.log" -Append
				[System.Windows.Forms.MessageBox]::Show("The following virtual machine builds failed: $failedData")
			}
			
			$datetime = Get-Date -Format "MMddyyyy_HH_mm_ss"
			$userName = $env:USERNAME
			[string]$archiveName = "vmbuild__$userName_$datetime.zip"
			Compress-Archive -Path $logDirectory -DestinationPath "$logParentDirectory\$archiveName" -Verbose
			Remove-Item -Path $logDirectory -Recurse -Confirm:$false
			
		} # End try statement
		catch
		{
			[System.Windows.Forms.MessageBox]::Show("Unable to build virtual machines.")
		}
	}
	
	$datagridviewVMQueue_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
		$buttonDeleteVMFromQueue.Enabled = $true	
		
	}
	
	$buttonDeleteVMFromQueue_Click={
		
		$global:vmBuilds = $global:vmBuilds | ?{ $_.VMName -ne $listviewVMsStep2.SelectedItems.Text }
		
		$listviewVMsStep2.Clear()
		$buttonDuplicateVMBuild.Enabled = $false
		
		$labelStep2CPU.Text = "CPU:"
		$labelStep2Memory.Text = "Memory:"
		$labelStep2Network.Text = "Network:"
		$labelStep2VMName.Text = "VM Name:"
		
		foreach ($item in $global:vmBuilds)
		{
			$listviewVMsStep2.Items.Add($item.VMName)
		}
		
		# Update the treeview control for Step 3
		
		$treeviewVMListStep3.BeginUpdate()
		$treeviewVMListStep3.Nodes.Clear()
		
		foreach ($vm in $global:vmbuilds)
		{
			$newNode = $treeviewVMListStep3.Nodes.Add($vm.VMName)
		}
		
		$treeviewVMListStep3.EndUpdate()
		
		# Update the treeview control for step 4.
		
		$treeviewVMListStep4.BeginUpdate()
		$treeviewVMListStep4.Nodes.Clear()
		
		foreach ($vm in $global:vmbuilds)
		{
			$newNode = $treeviewVMListStep4.Nodes.Add($vm.VMName)
		}
		
		# Determine if we should be resetting all the variables.
		if ($global:vmBuilds -eq $null)
		{
			$vmFeatures = [System.Collections.ArrayList]@()
			$vmRoles = [System.Collections.ArrayList]@()
			$vmDomainInfo = [System.Collections.ArrayList]@()
			$vmOS = [System.Collections.ArrayList]@()
			$vmAdminPasswords = [System.Collections.ArrayList]@()
			$vmLocalUsers = [System.Collections.ArrayList]@()
			$vmWorkgroupDomain = [System.Collections.ArrayList]@()
			$vmFullOSConfig = [System.Collections.ArrayList]@()
			$vmTimeZones = [System.Collections.ArrayList]@()
			$vmAdditionalDisks = [System.Collections.ArrayList]@()
			$vmAdditionalNICs = [System.Collections.ArrayList]@()
			$vmOSKeys = [System.Collections.ArrayList]@()
			$vmAdminAccount = $null
			
			$buttonDeleteVMFromQueue.Enabled = $false
			$buttonDuplicateVMBuild.Enabled = $false
			
			foreach ($item in (Get-ChildItem -Path "$logDirectory"))
			{
				$item | Remove-Item -Force -Recurse
			}
		}
		
		$treeviewVMListStep4.EndUpdate()
		
		Update-NavButtons
		
		
	}
	
	$treeviewVMListStep4_AfterSelect=[System.Windows.Forms.TreeViewEventHandler]{
		#Event Argument: $_ = [System.Windows.Forms.TreeViewEventArgs]
		
		$global:vmSelectedStep4 = $treeviewVMListStep4.SelectedNode.Text
		
		$labelVMNameStep4.Text = "VM: $($global:vmSelectedStep4)"
		
		if ($treeviewVMListStep4.SelectedNode.Text -in $global:vmWorkgroupDomain.VMName)
		{
			$labelOK1.Visible = $true		
		}
		else
		{
			$labelOK1.Visible = $false
		}
		
		if ($treeviewVMListStep4.SelectedNode.Text -in $global:vmOSKeys.VMName)
		{
			$vmTemp = $global:vmOSKeys | ?{ $_.VMName -eq $treeviewVMListStep4.SelectedNode.Text }
			
			if ($vmTemp.UseKMS -eq "Yes")
			{
				$radiobuttonKMSKey.Checked = $true
				$buttonProductKey.Text = "KMS Key"
			}
			elseif ($vmTemp.UseKMS -eq "No")
			{
				$radiobuttonRetailKey.Checked = $true
				$buttonProductKey.Text = "Retail Key"
			}
		}
		else
		{
			$radiobuttonKMSKey.Checked = $false
			$radiobuttonRetailKey.Checked = $false
			$buttonProductKey.Text = "Product Key"
			$buttonProductKey.Enabled = $false
		}
		
	}
	
	$radiobuttonDomain_CheckedChanged={
		
		if ($radiobuttonDomain.Checked) { $buttonDomainWorkgroup.Enabled = $true; $buttonSetWorkgroup.Enabled = $false }
		elseif ($radiobuttonWorkgroup.Checked) { $buttonDomainWorkgroup.Enabled = $false; $buttonSetWorkgroup.Enabled = $true }
		
	}
	
	$buttonOpenFeatureSelection_Click={
		
		if ((Show-WindowsFeatures_psf -VMName $global:vmSelectedStep4) -eq 'OK')
		{
		}
	}
	
	$buttonAddLocalUsers_Click={
		
		if ((Show-AddLocalUsers_psf -VMName $global:vmSelectedStep4) -eq 'OK'){}
		
	}
	
	$comboboxTimezone_SelectedIndexChanged={
		
		$global:vmTimeZones = $comboboxTimezone.Text
		
		$global:vmTimeZones | Out-File "$logDirectory\tz.log"
			
	}
	
	$treeviewVMListStep3_AfterSelect=[System.Windows.Forms.TreeViewEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.TreeViewEventArgs]
					
		$global:vmSelectedStep3 = $treeviewVMListStep3.SelectedNode.Text
		
		$labelVMStep3.Text = "VM: $($global:vmSelectedStep3)"
		
	}
	
	$listviewVMsStep2_SelectedIndexChanged={
					
		$rowTmp = $global:vmBuilds | ?{ $_.VMName -eq $listviewVMsStep2.SelectedItems.Text }
		
		$labelStep2CPU.Text = "CPU: $($rowTmp.NumCPU)"
		$labelStep2Memory.Text = "Memory: $($rowTmp.Memory)"
		$labelStep2Network.Text = "Network: $($rowTmp.Network)"
		$labelStep2VMName.Text = "VM Name: $($rowTmp.VMName)"
		
		$buttonDuplicateVMBuild.Enabled = $true
		
	}
	$buttonVDiskAdd_Click={
		
		if ((Show-AddVirtualDisk_psf -VMName $treeviewVMListStep3.SelectedNode.Text) -eq 'OK')
		{ }
		
	}
	
	$buttonVNICAdd_Click={
		
		if ((Show-AddNicCard_psf -VMName $treeviewVMListStep3.SelectedNode.Text) -eq 'OK')
		{ }
		
	}
	
	
	
	$maskedtextboxHostname_Enter={
		#TODO: Place custom script here
		$maskedtextboxHostname.Select(0,0)
	}
	
	$buttonSetHostname_Click={
		
		if ((Show-SetHostname_psf -VMName $treeviewVMListStep4.SelectedNode.Text) -eq 'OK')
		{ }
	}
	
	$buttonDomainWorkgroup_Click={
		
		if ((Show-WorkgroupDomainJoin_psf) -eq 'OK')
		{ }	
	}
	
	$buttonSet_Click={
		
		if ((Show-GetAdminPassword_psf) -eq 'OK')
		{ }
	}
	
	$buttonAdminRename_Click={
		#TODO: Place custom script here
		if ((Show-RenameAdminAccount_psf) -eq 'OK')
		{ }
	}
	
	$buttonProductKey_Click={
		
		if ($radiobuttonRetailKey.Checked)
		{
			if ((Show-EnterRetailKey_psf -VMName $treeviewVMListStep4.SelectedNode.Text) -eq 'OK')
			{ }
		}
		elseif ($radiobuttonKMSKey.Checked)
		{
			if ((Show-EnterKMSKey_psf -VMName $treeviewVMListStep4.SelectedNode.Text) -eq 'OK')
			{ }
		}
		
	}
	
	$radiobuttonRetailKey_CheckedChanged={
		
		if ($radiobuttonRetailKey.Checked)
		{
			$buttonProductKey.Text = "Retail Key"
			$buttonProductKey.Enabled = $true
		}
		
	}
	
	$radiobuttonKMSKey_CheckedChanged={
		
		if ($radiobuttonKMSKey.Checked)
		{
			$buttonProductKey.Text = "KMS Key"
			$buttonProductKey.Enabled = $true
		}
	}
	
	
	$buttonSelectScripts_Click={
		
		if ((Show-AddPostInstallScripts_psf) -eq 'OK')
		{ }
	}
	
	$buttonDuplicateVMBuild_Click={
		
		$listviewVMsStep2.SelectedItems.Text | Out-File "$logDirectory\step2.txt"
		
		if ((Show-DuplicateVM_psf -VMName $listviewVMsStep2.SelectedItems.Text) -eq 'OK')
		{ }
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formVMAutomationTool.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_vcenterTextbox = $vcenterTextbox.Text
		$script:MainForm_listviewVMsStep2 = $listviewVMsStep2.SelectedItems
		if($treeviewVMListStep3.SelectedNode -ne $null)
		{
			$script:MainForm_treeviewVMListStep3 = $treeviewVMListStep3.SelectedNode.Text
		}
		else
		{
			$script:MainForm_treeviewVMListStep3 = $null
		}
		if($treeviewVMListStep4.SelectedNode -ne $null)
		{
			$script:MainForm_treeviewVMListStep4 = $treeviewVMListStep4.SelectedNode.Text
		}
		else
		{
			$script:MainForm_treeviewVMListStep4 = $null
		}
		$script:MainForm_radiobuttonKMSKey = $radiobuttonKMSKey.Checked
		$script:MainForm_radiobuttonRetailKey = $radiobuttonRetailKey.Checked
		$script:MainForm_comboboxTimezone = $comboboxTimezone.Text
		$script:MainForm_comboboxTimezone_SelectedItem = $comboboxTimezone.SelectedItem
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonBack.remove_Click($buttonBack_Click)
			$buttonEnterCredentials.remove_Click($buttonEnterCredentials_Click)
			$vcenterTextbox.remove_TextChanged($vcenterTextbox_TextChanged)
			$buttonDuplicateVMBuild.remove_Click($buttonDuplicateVMBuild_Click)
			$listviewVMsStep2.remove_SelectedIndexChanged($listviewVMsStep2_SelectedIndexChanged)
			$buttonDeleteVMFromQueue.remove_Click($buttonDeleteVMFromQueue_Click)
			$buttonAddVirtualMachine.remove_Click($buttonAddVirtualMachine_Click)
			$treeviewVMListStep3.remove_AfterSelect($treeviewVMListStep3_AfterSelect)
			$buttonVNICAdd.remove_Click($buttonVNICAdd_Click)
			$buttonVDiskAdd.remove_Click($buttonVDiskAdd_Click)
			$treeviewVMListStep4.remove_AfterSelect($treeviewVMListStep4_AfterSelect)
			$radiobuttonKMSKey.remove_CheckedChanged($radiobuttonKMSKey_CheckedChanged)
			$radiobuttonRetailKey.remove_CheckedChanged($radiobuttonRetailKey_CheckedChanged)
			$buttonProductKey.remove_Click($buttonProductKey_Click)
			$buttonSetHostname.remove_Click($buttonSetHostname_Click)
			$buttonOpenRolesSelection.remove_Click($buttonOpenRolesSelection_Click)
			$buttonSelectScripts.remove_Click($buttonSelectScripts_Click)
			$comboboxTimezone.remove_SelectedIndexChanged($comboboxTimezone_SelectedIndexChanged)
			$buttonAdminRename.remove_Click($buttonAdminRename_Click)
			$buttonAddLocalUsers.remove_Click($buttonAddLocalUsers_Click)
			$buttonSet.remove_Click($buttonSet_Click)
			$buttonDomainWorkgroup.remove_Click($buttonDomainWorkgroup_Click)
			$buttonBuildAndConfigureVMs.remove_Click($buttonBuildAndConfigureVMs_Click)
			$tabcontrolWizard.remove_Selecting($tabcontrolWizard_Selecting)
			$tabcontrolWizard.remove_Deselecting($tabcontrolWizard_Deselecting)
			$buttonNext.remove_Click($buttonNext_Click)
			$formVMAutomationTool.remove_Load($formVMAutomationTool_Load)
			$formVMAutomationTool.remove_Load($Form_StateCorrection_Load)
			$formVMAutomationTool.remove_Closing($Form_StoreValues_Closing)
			$formVMAutomationTool.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formVMAutomationTool.SuspendLayout()
	$tabcontrolWizard.SuspendLayout()
	$tabpageStep1.SuspendLayout()
	$panel1.SuspendLayout()
	$tabpageStep2.SuspendLayout()
	$tabpageStep3.SuspendLayout()
	$panel6.SuspendLayout()
	$tabpageStep4.SuspendLayout()
	$panel7.SuspendLayout()
	$tabpageStep5.SuspendLayout()
	$tabpageStep6.SuspendLayout()
	#
	# formVMAutomationTool
	#
	$formVMAutomationTool.Controls.Add($buttonCancel)
	$formVMAutomationTool.Controls.Add($buttonBack)
	$formVMAutomationTool.Controls.Add($buttonFinish)
	$formVMAutomationTool.Controls.Add($tabcontrolWizard)
	$formVMAutomationTool.Controls.Add($buttonNext)
	$formVMAutomationTool.AcceptButton = $buttonFinish
	$formVMAutomationTool.AutoScaleDimensions = '6, 13'
	$formVMAutomationTool.AutoScaleMode = 'Font'
	$formVMAutomationTool.CancelButton = $buttonCancel
	$formVMAutomationTool.ClientSize = '537, 329'
	$formVMAutomationTool.FormBorderStyle = 'FixedDialog'
	$formVMAutomationTool.Margin = '6, 6, 6, 6'
	$formVMAutomationTool.MaximizeBox = $False
	$formVMAutomationTool.Name = 'formVMAutomationTool'
	$formVMAutomationTool.StartPosition = 'CenterScreen'
	$formVMAutomationTool.Text = 'VM Automation Tool'
	$formVMAutomationTool.add_Load($formVMAutomationTool_Load)
	#
	# buttonCancel
	#
	$buttonCancel.Anchor = 'Bottom, Right'
	$buttonCancel.DialogResult = 'Cancel'
	$buttonCancel.Location = '369, 294'
	$buttonCancel.Name = 'buttonCancel'
	$buttonCancel.Size = '75, 23'
	$buttonCancel.TabIndex = 4
	$buttonCancel.Text = '&Cancel'
	$buttonCancel.UseCompatibleTextRendering = $True
	$buttonCancel.UseVisualStyleBackColor = $True
	#
	# buttonBack
	#
	$buttonBack.Anchor = 'Bottom, Left'
	$buttonBack.Location = '13, 294'
	$buttonBack.Name = 'buttonBack'
	$buttonBack.Size = '75, 23'
	$buttonBack.TabIndex = 1
	$buttonBack.Text = '< &Back'
	$buttonBack.UseCompatibleTextRendering = $True
	$buttonBack.UseVisualStyleBackColor = $True
	$buttonBack.add_Click($buttonBack_Click)
	#
	# buttonFinish
	#
	$buttonFinish.Anchor = 'Bottom, Right'
	$buttonFinish.DialogResult = 'OK'
	$buttonFinish.Location = '450, 294'
	$buttonFinish.Name = 'buttonFinish'
	$buttonFinish.Size = '75, 23'
	$buttonFinish.TabIndex = 3
	$buttonFinish.Text = '&Finish'
	$buttonFinish.UseCompatibleTextRendering = $True
	$buttonFinish.UseVisualStyleBackColor = $True
	#
	# tabcontrolWizard
	#
	$tabcontrolWizard.Controls.Add($tabpageStep1)
	$tabcontrolWizard.Controls.Add($tabpageStep2)
	$tabcontrolWizard.Controls.Add($tabpageStep3)
	$tabcontrolWizard.Controls.Add($tabpageStep4)
	$tabcontrolWizard.Controls.Add($tabpageStep5)
	$tabcontrolWizard.Controls.Add($tabpageStep6)
	$tabcontrolWizard.AccessibleRole = 'Clock'
	$tabcontrolWizard.Anchor = 'Top, Bottom, Left, Right'
	$tabcontrolWizard.Location = '13, 12'
	$tabcontrolWizard.Name = 'tabcontrolWizard'
	$tabcontrolWizard.SelectedIndex = 0
	$tabcontrolWizard.Size = '512, 276'
	$tabcontrolWizard.TabIndex = 0
	$tabcontrolWizard.add_Selecting($tabcontrolWizard_Selecting)
	$tabcontrolWizard.add_Deselecting($tabcontrolWizard_Deselecting)
	#
	# tabpageStep1
	#
	$tabpageStep1.Controls.Add($pictureboxLoading)
	$tabpageStep1.Controls.Add($labelStep1)
	$tabpageStep1.Controls.Add($panel1)
	$tabpageStep1.Controls.Add($vcenterTextbox)
	$tabpageStep1.Controls.Add($labelVCenterFQDNOrIPAddre)
	$tabpageStep1.Location = '4, 22'
	$tabpageStep1.Name = 'tabpageStep1'
	$tabpageStep1.Padding = '3, 3, 3, 3'
	$tabpageStep1.Size = '504, 250'
	$tabpageStep1.TabIndex = 0
	$tabpageStep1.Text = 'Step 1 - vCenter Connection'
	$tabpageStep1.UseVisualStyleBackColor = $True
	#
	# pictureboxLoading
	#
	$pictureboxLoading.Anchor = 'Bottom, Right'
	#region Binary Data
	$pictureboxLoading.Image = [System.Convert]::FromBase64String('
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
Cwg1RAAAOwAAAAAAAAAAAA==')
	#endregion
	$pictureboxLoading.Location = '446, 217'
	$pictureboxLoading.Name = 'pictureboxLoading'
	$pictureboxLoading.Size = '68, 68'
	$pictureboxLoading.TabIndex = 4
	$pictureboxLoading.TabStop = $False
	$pictureboxLoading.Visible = $False
	#
	# labelStep1
	#
	$labelStep1.AutoSize = $True
	$labelStep1.Font = 'Microsoft Sans Serif, 12pt, style=Bold'
	$labelStep1.Location = '9, 12'
	$labelStep1.Name = 'labelStep1'
	$labelStep1.Size = '470, 24'
	$labelStep1.TabIndex = 3
	$labelStep1.Text = 'Step 1: Enter your vCenter server and credentials to proceed.'
	$labelStep1.UseCompatibleTextRendering = $True
	#
	# panel1
	#
	$panel1.Controls.Add($labelOKStep1)
	$panel1.Controls.Add($labelConnectionStatusNotC)
	$panel1.Controls.Add($labelUsernameNotConnected)
	$panel1.Controls.Add($labelVCenterServerNotConn)
	$panel1.Controls.Add($labelSetVSphereCredential)
	$panel1.Controls.Add($buttonEnterCredentials)
	$panel1.Location = '9, 85'
	$panel1.Name = 'panel1'
	$panel1.Size = '276, 159'
	$panel1.TabIndex = 2
	#
	# labelOKStep1
	#
	$labelOKStep1.AutoSize = $True
	$labelOKStep1.Font = 'Comic Sans MS, 10.125pt, style=Bold'
	$labelOKStep1.ForeColor = 'Green'
	$labelOKStep1.Location = '197, 96'
	$labelOKStep1.Name = 'labelOKStep1'
	$labelOKStep1.Size = '28, 24'
	$labelOKStep1.TabIndex = 38
	$labelOKStep1.Text = 'OK!'
	$labelOKStep1.UseCompatibleTextRendering = $True
	$labelOKStep1.Visible = $False
	#
	# labelConnectionStatusNotC
	#
	$labelConnectionStatusNotC.AutoSize = $True
	$labelConnectionStatusNotC.Location = '13, 99'
	$labelConnectionStatusNotC.Name = 'labelConnectionStatusNotC'
	$labelConnectionStatusNotC.Size = '178, 17'
	$labelConnectionStatusNotC.TabIndex = 4
	$labelConnectionStatusNotC.Text = 'Connection Status: Not Connected'
	$labelConnectionStatusNotC.UseCompatibleTextRendering = $True
	#
	# labelUsernameNotConnected
	#
	$labelUsernameNotConnected.AutoSize = $True
	$labelUsernameNotConnected.Location = '13, 62'
	$labelUsernameNotConnected.Name = 'labelUsernameNotConnected'
	$labelUsernameNotConnected.Size = '138, 17'
	$labelUsernameNotConnected.TabIndex = 3
	$labelUsernameNotConnected.Text = 'Username: Not Connected'
	$labelUsernameNotConnected.UseCompatibleTextRendering = $True
	#
	# labelVCenterServerNotConn
	#
	$labelVCenterServerNotConn.AutoSize = $True
	$labelVCenterServerNotConn.Location = '13, 30'
	$labelVCenterServerNotConn.Name = 'labelVCenterServerNotConn'
	$labelVCenterServerNotConn.Size = '162, 17'
	$labelVCenterServerNotConn.TabIndex = 2
	$labelVCenterServerNotConn.Text = 'vCenter Server: Not Connected'
	$labelVCenterServerNotConn.UseCompatibleTextRendering = $True
	#
	# labelSetVSphereCredential
	#
	$labelSetVSphereCredential.AutoSize = $True
	$labelSetVSphereCredential.Dock = 'Fill'
	$labelSetVSphereCredential.Location = '0, 0'
	$labelSetVSphereCredential.Name = 'labelSetVSphereCredential'
	$labelSetVSphereCredential.Size = '127, 17'
	$labelSetVSphereCredential.TabIndex = 1
	$labelSetVSphereCredential.Text = 'Set vSphere Credentials'
	$labelSetVSphereCredential.UseCompatibleTextRendering = $True
	#
	# buttonEnterCredentials
	#
	$buttonEnterCredentials.Enabled = $False
	$buttonEnterCredentials.Location = '13, 130'
	$buttonEnterCredentials.Name = 'buttonEnterCredentials'
	$buttonEnterCredentials.Size = '114, 23'
	$buttonEnterCredentials.TabIndex = 0
	$buttonEnterCredentials.Text = 'Enter Credentials'
	$buttonEnterCredentials.UseCompatibleTextRendering = $True
	$buttonEnterCredentials.UseVisualStyleBackColor = $True
	$buttonEnterCredentials.add_Click($buttonEnterCredentials_Click)
	#
	# vcenterTextbox
	#
	$vcenterTextbox.AutoCompleteMode = 'Append'
	$vcenterTextbox.AutoCompleteSource = 'CustomSource'
	$vcenterTextbox.Location = '169, 52'
	$vcenterTextbox.Name = 'vcenterTextbox'
	$vcenterTextbox.Size = '161, 20'
	$vcenterTextbox.TabIndex = 1
	$vcenterTextbox.add_TextChanged($vcenterTextbox_TextChanged)
	#
	# labelVCenterFQDNOrIPAddre
	#
	$labelVCenterFQDNOrIPAddre.AutoSize = $True
	$labelVCenterFQDNOrIPAddre.Location = '9, 55'
	$labelVCenterFQDNOrIPAddre.Name = 'labelVCenterFQDNOrIPAddre'
	$labelVCenterFQDNOrIPAddre.Size = '153, 17'
	$labelVCenterFQDNOrIPAddre.TabIndex = 0
	$labelVCenterFQDNOrIPAddre.Text = 'vCenter FQDN or IP Address:'
	$labelVCenterFQDNOrIPAddre.UseCompatibleTextRendering = $True
	#
	# tabpageStep2
	#
	$tabpageStep2.Controls.Add($buttonDuplicateVMBuild)
	$tabpageStep2.Controls.Add($labelStep2Network)
	$tabpageStep2.Controls.Add($labelStep2Memory)
	$tabpageStep2.Controls.Add($labelStep2CPU)
	$tabpageStep2.Controls.Add($labelStep2VMName)
	$tabpageStep2.Controls.Add($listviewVMsStep2)
	$tabpageStep2.Controls.Add($buttonDeleteVMFromQueue)
	$tabpageStep2.Controls.Add($buttonAddVirtualMachine)
	$tabpageStep2.Controls.Add($labelStep2)
	$tabpageStep2.Location = '4, 22'
	$tabpageStep2.Name = 'tabpageStep2'
	$tabpageStep2.Padding = '3, 3, 3, 3'
	$tabpageStep2.Size = '504, 250'
	$tabpageStep2.TabIndex = 1
	$tabpageStep2.Text = 'Step 2 - Congifure VMs'
	$tabpageStep2.UseVisualStyleBackColor = $True
	#
	# buttonDuplicateVMBuild
	#
	$buttonDuplicateVMBuild.Enabled = $False
	$buttonDuplicateVMBuild.Location = '331, 61'
	$buttonDuplicateVMBuild.Name = 'buttonDuplicateVMBuild'
	$buttonDuplicateVMBuild.Size = '132, 23'
	$buttonDuplicateVMBuild.TabIndex = 16
	$buttonDuplicateVMBuild.Text = 'Duplicate VM Build'
	$buttonDuplicateVMBuild.UseCompatibleTextRendering = $True
	$buttonDuplicateVMBuild.UseVisualStyleBackColor = $True
	$buttonDuplicateVMBuild.add_Click($buttonDuplicateVMBuild_Click)
	#
	# labelStep2Network
	#
	$labelStep2Network.AutoSize = $True
	$labelStep2Network.Location = '335, 168'
	$labelStep2Network.Name = 'labelStep2Network'
	$labelStep2Network.Size = '49, 17'
	$labelStep2Network.TabIndex = 15
	$labelStep2Network.Text = 'Network:'
	$labelStep2Network.UseCompatibleTextRendering = $True
	#
	# labelStep2Memory
	#
	$labelStep2Memory.AutoSize = $True
	$labelStep2Memory.Location = '335, 147'
	$labelStep2Memory.Name = 'labelStep2Memory'
	$labelStep2Memory.Size = '48, 17'
	$labelStep2Memory.TabIndex = 14
	$labelStep2Memory.Text = 'Memory:'
	$labelStep2Memory.UseCompatibleTextRendering = $True
	#
	# labelStep2CPU
	#
	$labelStep2CPU.AutoSize = $True
	$labelStep2CPU.Location = '335, 126'
	$labelStep2CPU.Name = 'labelStep2CPU'
	$labelStep2CPU.Size = '64, 17'
	$labelStep2CPU.TabIndex = 13
	$labelStep2CPU.Text = 'CPU Count:'
	$labelStep2CPU.UseCompatibleTextRendering = $True
	#
	# labelStep2VMName
	#
	$labelStep2VMName.AutoSize = $True
	$labelStep2VMName.Location = '335, 105'
	$labelStep2VMName.Name = 'labelStep2VMName'
	$labelStep2VMName.Size = '58, 17'
	$labelStep2VMName.TabIndex = 12
	$labelStep2VMName.Text = 'VM Name:'
	$labelStep2VMName.UseCompatibleTextRendering = $True
	#
	# listviewVMsStep2
	#
	$listviewVMsStep2.FullRowSelect = $True
	$listviewVMsStep2.Location = '180, 40'
	$listviewVMsStep2.MultiSelect = $False
	$listviewVMsStep2.Name = 'listviewVMsStep2'
	$listviewVMsStep2.Size = '145, 210'
	$listviewVMsStep2.TabIndex = 11
	$listviewVMsStep2.UseCompatibleStateImageBehavior = $False
	$listviewVMsStep2.View = 'List'
	$listviewVMsStep2.add_SelectedIndexChanged($listviewVMsStep2_SelectedIndexChanged)
	#
	# buttonDeleteVMFromQueue
	#
	$buttonDeleteVMFromQueue.Enabled = $False
	$buttonDeleteVMFromQueue.Location = '18, 124'
	$buttonDeleteVMFromQueue.Name = 'buttonDeleteVMFromQueue'
	$buttonDeleteVMFromQueue.Size = '156, 23'
	$buttonDeleteVMFromQueue.TabIndex = 10
	$buttonDeleteVMFromQueue.Text = 'Delete VM from Queue'
	$buttonDeleteVMFromQueue.UseCompatibleTextRendering = $True
	$buttonDeleteVMFromQueue.UseVisualStyleBackColor = $True
	$buttonDeleteVMFromQueue.add_Click($buttonDeleteVMFromQueue_Click)
	#
	# buttonAddVirtualMachine
	#
	$buttonAddVirtualMachine.Location = '18, 78'
	$buttonAddVirtualMachine.Name = 'buttonAddVirtualMachine'
	$buttonAddVirtualMachine.Size = '156, 23'
	$buttonAddVirtualMachine.TabIndex = 8
	$buttonAddVirtualMachine.Text = 'Add Virtual Machine'
	$buttonAddVirtualMachine.UseCompatibleTextRendering = $True
	$buttonAddVirtualMachine.UseVisualStyleBackColor = $True
	$buttonAddVirtualMachine.add_Click($buttonAddVirtualMachine_Click)
	#
	# labelStep2
	#
	$labelStep2.AutoSize = $True
	$labelStep2.Font = 'Microsoft Sans Serif, 12pt, style=Bold'
	$labelStep2.Location = '18, 11'
	$labelStep2.Name = 'labelStep2'
	$labelStep2.Size = '358, 24'
	$labelStep2.TabIndex = 4
	$labelStep2.Text = 'Step 2: Press the ''Add Virtual Machine'' button.'
	$labelStep2.UseCompatibleTextRendering = $True
	#
	# tabpageStep3
	#
	$tabpageStep3.Controls.Add($treeviewVMListStep3)
	$tabpageStep3.Controls.Add($panel6)
	$tabpageStep3.Location = '4, 22'
	$tabpageStep3.Name = 'tabpageStep3'
	$tabpageStep3.Size = '504, 250'
	$tabpageStep3.TabIndex = 4
	$tabpageStep3.Text = 'Step 3 - Optional Disks and NICs'
	$tabpageStep3.UseVisualStyleBackColor = $True
	#
	# treeviewVMListStep3
	#
	$treeviewVMListStep3.Location = '3, 0'
	$treeviewVMListStep3.Name = 'treeviewVMListStep3'
	$treeviewVMListStep3.Size = '164, 247'
	$treeviewVMListStep3.TabIndex = 26
	$treeviewVMListStep3.add_AfterSelect($treeviewVMListStep3_AfterSelect)
	#
	# panel6
	#
	$panel6.Controls.Add($labelVMStep3)
	$panel6.Controls.Add($buttonVNICAdd)
	$panel6.Controls.Add($labelVNICConfig)
	$panel6.Controls.Add($buttonVDiskAdd)
	$panel6.Controls.Add($labelVDiskConfig)
	$panel6.Controls.Add($labelOptionalConfig)
	$panel6.BorderStyle = 'Fixed3D'
	$panel6.Location = '187, 3'
	$panel6.Name = 'panel6'
	$panel6.Size = '314, 244'
	$panel6.TabIndex = 25
	#
	# labelVMStep3
	#
	$labelVMStep3.AutoSize = $True
	$labelVMStep3.Font = 'Microsoft Sans Serif, 10pt, style=Bold'
	$labelVMStep3.Location = '10, 2'
	$labelVMStep3.Name = 'labelVMStep3'
	$labelVMStep3.Size = '30, 20'
	$labelVMStep3.TabIndex = 35
	$labelVMStep3.Text = 'VM:'
	$labelVMStep3.UseCompatibleTextRendering = $True
	#
	# buttonVNICAdd
	#
	$buttonVNICAdd.Location = '188, 102'
	$buttonVNICAdd.Name = 'buttonVNICAdd'
	$buttonVNICAdd.Size = '121, 23'
	$buttonVNICAdd.TabIndex = 4
	$buttonVNICAdd.Text = 'Network &Adapters'
	$buttonVNICAdd.UseCompatibleTextRendering = $True
	$buttonVNICAdd.UseVisualStyleBackColor = $True
	$buttonVNICAdd.add_Click($buttonVNICAdd_Click)
	#
	# labelVNICConfig
	#
	$labelVNICConfig.AutoSize = $True
	$labelVNICConfig.Location = '10, 108'
	$labelVNICConfig.Name = 'labelVNICConfig'
	$labelVNICConfig.Size = '166, 17'
	$labelVNICConfig.TabIndex = 3
	$labelVNICConfig.Text = 'Add/Remove Network Adapters:'
	$labelVNICConfig.UseCompatibleTextRendering = $True
	#
	# buttonVDiskAdd
	#
	$buttonVDiskAdd.Location = '188, 69'
	$buttonVDiskAdd.Name = 'buttonVDiskAdd'
	$buttonVDiskAdd.Size = '121, 23'
	$buttonVDiskAdd.TabIndex = 2
	$buttonVDiskAdd.Text = '&Virtual Disks'
	$buttonVDiskAdd.UseCompatibleTextRendering = $True
	$buttonVDiskAdd.UseVisualStyleBackColor = $True
	$buttonVDiskAdd.add_Click($buttonVDiskAdd_Click)
	#
	# labelVDiskConfig
	#
	$labelVDiskConfig.AutoSize = $True
	$labelVDiskConfig.Location = '10, 74'
	$labelVDiskConfig.Name = 'labelVDiskConfig'
	$labelVDiskConfig.Size = '133, 17'
	$labelVDiskConfig.TabIndex = 1
	$labelVDiskConfig.Text = 'Add/Remove Virtual Disk:'
	$labelVDiskConfig.UseCompatibleTextRendering = $True
	#
	# labelOptionalConfig
	#
	$labelOptionalConfig.AutoSize = $True
	$labelOptionalConfig.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelOptionalConfig.Location = '10, 40'
	$labelOptionalConfig.Name = 'labelOptionalConfig'
	$labelOptionalConfig.Size = '142, 17'
	$labelOptionalConfig.TabIndex = 0
	$labelOptionalConfig.Text = 'Optional VM Configuration'
	$labelOptionalConfig.UseCompatibleTextRendering = $True
	#
	# tabpageStep4
	#
	$tabpageStep4.Controls.Add($treeviewVMListStep4)
	$tabpageStep4.Controls.Add($panel7)
	$tabpageStep4.Location = '4, 22'
	$tabpageStep4.Name = 'tabpageStep4'
	$tabpageStep4.Size = '504, 250'
	$tabpageStep4.TabIndex = 2
	$tabpageStep4.Text = 'Step 4 - Customize OS'
	$tabpageStep4.UseVisualStyleBackColor = $True
	#
	# treeviewVMListStep4
	#
	$treeviewVMListStep4.Location = '0, 0'
	$treeviewVMListStep4.Name = 'treeviewVMListStep4'
	$treeviewVMListStep4.Size = '164, 250'
	$treeviewVMListStep4.TabIndex = 27
	$treeviewVMListStep4.add_AfterSelect($treeviewVMListStep4_AfterSelect)
	#
	# panel7
	#
	$panel7.Controls.Add($radiobuttonKMSKey)
	$panel7.Controls.Add($radiobuttonRetailKey)
	$panel7.Controls.Add($labelHostname)
	$panel7.Controls.Add($buttonProductKey)
	$panel7.Controls.Add($labelOSProductKey)
	$panel7.Controls.Add($labelOK1)
	$panel7.Controls.Add($buttonSetHostname)
	$panel7.Controls.Add($labelVMNameStep4)
	$panel7.Controls.Add($labelOSConfig)
	$panel7.Controls.Add($buttonOpenFeatureSelection)
	$panel7.Controls.Add($labelSelectRoles)
	$panel7.Controls.Add($labelSelectFeatures)
	$panel7.Controls.Add($buttonOpenRolesSelection)
	$panel7.Location = '185, 0'
	$panel7.Name = 'panel7'
	$panel7.Size = '319, 250'
	$panel7.TabIndex = 0
	#
	# radiobuttonKMSKey
	#
	$radiobuttonKMSKey.Location = '108, 200'
	$radiobuttonKMSKey.Name = 'radiobuttonKMSKey'
	$radiobuttonKMSKey.Size = '76, 24'
	$radiobuttonKMSKey.TabIndex = 53
	$radiobuttonKMSKey.TabStop = $True
	$radiobuttonKMSKey.Text = 'KMS Key'
	$radiobuttonKMSKey.UseCompatibleTextRendering = $True
	$radiobuttonKMSKey.UseVisualStyleBackColor = $True
	$radiobuttonKMSKey.add_CheckedChanged($radiobuttonKMSKey_CheckedChanged)
	#
	# radiobuttonRetailKey
	#
	$radiobuttonRetailKey.Location = '108, 169'
	$radiobuttonRetailKey.Name = 'radiobuttonRetailKey'
	$radiobuttonRetailKey.Size = '76, 24'
	$radiobuttonRetailKey.TabIndex = 52
	$radiobuttonRetailKey.TabStop = $True
	$radiobuttonRetailKey.Text = 'Retail Key'
	$radiobuttonRetailKey.UseCompatibleTextRendering = $True
	$radiobuttonRetailKey.UseVisualStyleBackColor = $True
	$radiobuttonRetailKey.add_CheckedChanged($radiobuttonRetailKey_CheckedChanged)
	#
	# labelHostname
	#
	$labelHostname.AutoSize = $True
	$labelHostname.Location = '16, 77'
	$labelHostname.Name = 'labelHostname'
	$labelHostname.Size = '59, 17'
	$labelHostname.TabIndex = 51
	$labelHostname.Text = 'Hostname:'
	$labelHostname.UseCompatibleTextRendering = $True
	#
	# buttonProductKey
	#
	$buttonProductKey.Enabled = $False
	$buttonProductKey.Location = '202, 185'
	$buttonProductKey.Name = 'buttonProductKey'
	$buttonProductKey.Size = '85, 23'
	$buttonProductKey.TabIndex = 50
	$buttonProductKey.Text = 'Product Key'
	$buttonProductKey.UseCompatibleTextRendering = $True
	$buttonProductKey.UseVisualStyleBackColor = $True
	$buttonProductKey.add_Click($buttonProductKey_Click)
	#
	# labelOSProductKey
	#
	$labelOSProductKey.AutoSize = $True
	$labelOSProductKey.Location = '12, 174'
	$labelOSProductKey.Name = 'labelOSProductKey'
	$labelOSProductKey.Size = '88, 17'
	$labelOSProductKey.TabIndex = 47
	$labelOSProductKey.Text = 'OS Product Key:'
	$labelOSProductKey.UseCompatibleTextRendering = $True
	#
	# labelOK1
	#
	$labelOK1.AutoSize = $True
	$labelOK1.Font = 'Comic Sans MS, 10.125pt, style=Bold'
	$labelOK1.ForeColor = 'Green'
	$labelOK1.Location = '184, 74'
	$labelOK1.Name = 'labelOK1'
	$labelOK1.Size = '28, 24'
	$labelOK1.TabIndex = 37
	$labelOK1.Text = 'OK!'
	$labelOK1.UseCompatibleTextRendering = $True
	$labelOK1.Visible = $False
	#
	# buttonSetHostname
	#
	$buttonSetHostname.Location = '82, 73'
	$buttonSetHostname.Name = 'buttonSetHostname'
	$buttonSetHostname.Size = '87, 23'
	$buttonSetHostname.TabIndex = 35
	$buttonSetHostname.Text = 'Set Hostname'
	$buttonSetHostname.UseCompatibleTextRendering = $True
	$buttonSetHostname.UseVisualStyleBackColor = $True
	$buttonSetHostname.add_Click($buttonSetHostname_Click)
	#
	# labelVMNameStep4
	#
	$labelVMNameStep4.AutoSize = $True
	$labelVMNameStep4.Font = 'Microsoft Sans Serif, 10pt, style=Bold'
	$labelVMNameStep4.Location = '12, 4'
	$labelVMNameStep4.Name = 'labelVMNameStep4'
	$labelVMNameStep4.Size = '30, 20'
	$labelVMNameStep4.TabIndex = 34
	$labelVMNameStep4.Text = 'VM:'
	$labelVMNameStep4.UseCompatibleTextRendering = $True
	#
	# labelOSConfig
	#
	$labelOSConfig.AutoSize = $True
	$labelOSConfig.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelOSConfig.Location = '12, 34'
	$labelOSConfig.Name = 'labelOSConfig'
	$labelOSConfig.Size = '172, 17'
	$labelOSConfig.TabIndex = 33
	$labelOSConfig.Text = 'Operating System Configuration'
	$labelOSConfig.UseCompatibleTextRendering = $True
	#
	# buttonOpenFeatureSelection
	#
	$buttonOpenFeatureSelection.Enabled = $False
	$buttonOpenFeatureSelection.Location = '202, 123'
	$buttonOpenFeatureSelection.Name = 'buttonOpenFeatureSelection'
	$buttonOpenFeatureSelection.Size = '57, 23'
	$buttonOpenFeatureSelection.TabIndex = 24
	$buttonOpenFeatureSelection.Text = 'Open...'
	$buttonOpenFeatureSelection.UseCompatibleTextRendering = $True
	$buttonOpenFeatureSelection.UseVisualStyleBackColor = $True
	#
	# labelSelectRoles
	#
	$labelSelectRoles.AutoSize = $True
	$labelSelectRoles.Location = '144, 128'
	$labelSelectRoles.Name = 'labelSelectRoles'
	$labelSelectRoles.Size = '52, 17'
	$labelSelectRoles.TabIndex = 23
	$labelSelectRoles.Text = 'Features:'
	$labelSelectRoles.UseCompatibleTextRendering = $True
	#
	# labelSelectFeatures
	#
	$labelSelectFeatures.AutoSize = $True
	$labelSelectFeatures.Location = '16, 128'
	$labelSelectFeatures.Name = 'labelSelectFeatures'
	$labelSelectFeatures.Size = '36, 17'
	$labelSelectFeatures.TabIndex = 21
	$labelSelectFeatures.Text = 'Roles:'
	$labelSelectFeatures.UseCompatibleTextRendering = $True
	#
	# buttonOpenRolesSelection
	#
	$buttonOpenRolesSelection.Location = '62, 123'
	$buttonOpenRolesSelection.Name = 'buttonOpenRolesSelection'
	$buttonOpenRolesSelection.Size = '57, 23'
	$buttonOpenRolesSelection.TabIndex = 22
	$buttonOpenRolesSelection.Text = 'Open...'
	$buttonOpenRolesSelection.UseCompatibleTextRendering = $True
	$buttonOpenRolesSelection.UseVisualStyleBackColor = $True
	$buttonOpenRolesSelection.add_Click($buttonOpenRolesSelection_Click)
	#
	# tabpageStep5
	#
	$tabpageStep5.Controls.Add($buttonSelectScripts)
	$tabpageStep5.Controls.Add($labelPostDeploymentScript)
	$tabpageStep5.Controls.Add($comboboxTimezone)
	$tabpageStep5.Controls.Add($labelTimezone)
	$tabpageStep5.Controls.Add($buttonAdminRename)
	$tabpageStep5.Controls.Add($labelAdminRename)
	$tabpageStep5.Controls.Add($labelAddLocalUsers)
	$tabpageStep5.Controls.Add($buttonAddLocalUsers)
	$tabpageStep5.Controls.Add($labelDomainWorkgroupRequi)
	$tabpageStep5.Controls.Add($labelOK3)
	$tabpageStep5.Controls.Add($labelOK2)
	$tabpageStep5.Controls.Add($buttonSet)
	$tabpageStep5.Controls.Add($labelAdministratorPasswor)
	$tabpageStep5.Controls.Add($buttonDomainWorkgroup)
	$tabpageStep5.Location = '4, 22'
	$tabpageStep5.Name = 'tabpageStep5'
	$tabpageStep5.Padding = '3, 3, 3, 3'
	$tabpageStep5.Size = '504, 250'
	$tabpageStep5.TabIndex = 5
	$tabpageStep5.Text = 'Step 5 - Global Settings'
	$tabpageStep5.UseVisualStyleBackColor = $True
	#
	# buttonSelectScripts
	#
	$buttonSelectScripts.Location = '280, 197'
	$buttonSelectScripts.Name = 'buttonSelectScripts'
	$buttonSelectScripts.Size = '119, 23'
	$buttonSelectScripts.TabIndex = 46
	$buttonSelectScripts.Text = 'Select Scripts'
	$buttonSelectScripts.UseCompatibleTextRendering = $True
	$buttonSelectScripts.UseVisualStyleBackColor = $True
	$buttonSelectScripts.add_Click($buttonSelectScripts_Click)
	#
	# labelPostDeploymentScript
	#
	$labelPostDeploymentScript.AutoSize = $True
	$labelPostDeploymentScript.Location = '95, 197'
	$labelPostDeploymentScript.Name = 'labelPostDeploymentScript'
	$labelPostDeploymentScript.Size = '131, 17'
	$labelPostDeploymentScript.TabIndex = 45
	$labelPostDeploymentScript.Text = 'Post Deployment Scripts:'
	$labelPostDeploymentScript.UseCompatibleTextRendering = $True
	#
	# comboboxTimezone
	#
	$comboboxTimezone.DropDownStyle = 'DropDownList'
	$comboboxTimezone.FormattingEnabled = $True
	$comboboxTimezone.Location = '280, 157'
	$comboboxTimezone.Name = 'comboboxTimezone'
	$comboboxTimezone.Size = '208, 21'
	$comboboxTimezone.TabIndex = 44
	$comboboxTimezone.add_SelectedIndexChanged($comboboxTimezone_SelectedIndexChanged)
	#
	# labelTimezone
	#
	$labelTimezone.AutoSize = $True
	$labelTimezone.Location = '95, 157'
	$labelTimezone.Name = 'labelTimezone'
	$labelTimezone.Size = '61, 17'
	$labelTimezone.TabIndex = 43
	$labelTimezone.Text = 'Time Zone:'
	$labelTimezone.UseCompatibleTextRendering = $True
	#
	# buttonAdminRename
	#
	$buttonAdminRename.Location = '280, 9'
	$buttonAdminRename.Name = 'buttonAdminRename'
	$buttonAdminRename.Size = '75, 23'
	$buttonAdminRename.TabIndex = 42
	$buttonAdminRename.Text = 'Set'
	$buttonAdminRename.UseCompatibleTextRendering = $True
	$buttonAdminRename.UseVisualStyleBackColor = $True
	$buttonAdminRename.add_Click($buttonAdminRename_Click)
	#
	# labelAdminRename
	#
	$labelAdminRename.AutoSize = $True
	$labelAdminRename.Location = '95, 14'
	$labelAdminRename.Name = 'labelAdminRename'
	$labelAdminRename.Size = '159, 17'
	$labelAdminRename.TabIndex = 41
	$labelAdminRename.Text = 'Rename Local Admin Account:'
	$labelAdminRename.UseCompatibleTextRendering = $True
	#
	# labelAddLocalUsers
	#
	$labelAddLocalUsers.AutoSize = $True
	$labelAddLocalUsers.Location = '95, 124'
	$labelAddLocalUsers.Name = 'labelAddLocalUsers'
	$labelAddLocalUsers.Size = '90, 17'
	$labelAddLocalUsers.TabIndex = 40
	$labelAddLocalUsers.Text = 'Add Local Users:'
	$labelAddLocalUsers.UseCompatibleTextRendering = $True
	#
	# buttonAddLocalUsers
	#
	$buttonAddLocalUsers.Location = '280, 118'
	$buttonAddLocalUsers.Name = 'buttonAddLocalUsers'
	$buttonAddLocalUsers.Size = '119, 23'
	$buttonAddLocalUsers.TabIndex = 39
	$buttonAddLocalUsers.Text = 'Add Local Users'
	$buttonAddLocalUsers.UseCompatibleTextRendering = $True
	$buttonAddLocalUsers.UseVisualStyleBackColor = $True
	$buttonAddLocalUsers.add_Click($buttonAddLocalUsers_Click)
	#
	# labelDomainWorkgroupRequi
	#
	$labelDomainWorkgroupRequi.AutoSize = $True
	$labelDomainWorkgroupRequi.Location = '95, 87'
	$labelDomainWorkgroupRequi.Name = 'labelDomainWorkgroupRequi'
	$labelDomainWorkgroupRequi.Size = '162, 17'
	$labelDomainWorkgroupRequi.TabIndex = 38
	$labelDomainWorkgroupRequi.Text = 'Domain/Workgroup (Required):'
	$labelDomainWorkgroupRequi.UseCompatibleTextRendering = $True
	#
	# labelOK3
	#
	$labelOK3.AutoSize = $True
	$labelOK3.Font = 'Comic Sans MS, 10.125pt, style=Bold'
	$labelOK3.ForeColor = 'Green'
	$labelOK3.Location = '361, 81'
	$labelOK3.Name = 'labelOK3'
	$labelOK3.Size = '28, 24'
	$labelOK3.TabIndex = 37
	$labelOK3.Text = 'OK!'
	$labelOK3.UseCompatibleTextRendering = $True
	$labelOK3.Visible = $False
	#
	# labelOK2
	#
	$labelOK2.AutoSize = $True
	$labelOK2.Font = 'Comic Sans MS, 10.125pt, style=Bold'
	$labelOK2.ForeColor = 'Green'
	$labelOK2.Location = '361, 45'
	$labelOK2.Name = 'labelOK2'
	$labelOK2.Size = '28, 24'
	$labelOK2.TabIndex = 36
	$labelOK2.Text = 'OK!'
	$labelOK2.UseCompatibleTextRendering = $True
	$labelOK2.Visible = $False
	#
	# buttonSet
	#
	$buttonSet.Location = '280, 45'
	$buttonSet.Name = 'buttonSet'
	$buttonSet.Size = '75, 23'
	$buttonSet.TabIndex = 35
	$buttonSet.Text = 'Set'
	$buttonSet.UseCompatibleTextRendering = $True
	$buttonSet.UseVisualStyleBackColor = $True
	$buttonSet.add_Click($buttonSet_Click)
	#
	# labelAdministratorPasswor
	#
	$labelAdministratorPasswor.AutoSize = $True
	$labelAdministratorPasswor.Location = '95, 52'
	$labelAdministratorPasswor.Name = 'labelAdministratorPasswor'
	$labelAdministratorPasswor.Size = '184, 17'
	$labelAdministratorPasswor.TabIndex = 34
	$labelAdministratorPasswor.Text = 'Administrator Password (Required):'
	$labelAdministratorPasswor.UseCompatibleTextRendering = $True
	#
	# buttonDomainWorkgroup
	#
	$buttonDomainWorkgroup.Location = '280, 82'
	$buttonDomainWorkgroup.Name = 'buttonDomainWorkgroup'
	$buttonDomainWorkgroup.Size = '75, 23'
	$buttonDomainWorkgroup.TabIndex = 33
	$buttonDomainWorkgroup.Text = 'Set'
	$buttonDomainWorkgroup.UseCompatibleTextRendering = $True
	$buttonDomainWorkgroup.UseVisualStyleBackColor = $True
	$buttonDomainWorkgroup.add_Click($buttonDomainWorkgroup_Click)
	#
	# tabpageStep6
	#
	$tabpageStep6.Controls.Add($webbrowserVMBuildSummary)
	$tabpageStep6.Controls.Add($buttonBuildAndConfigureVMs)
	$tabpageStep6.Location = '4, 22'
	$tabpageStep6.Name = 'tabpageStep6'
	$tabpageStep6.Padding = '3, 3, 3, 3'
	$tabpageStep6.Size = '504, 250'
	$tabpageStep6.TabIndex = 3
	$tabpageStep6.Text = 'Step 6 - Execute'
	$tabpageStep6.UseVisualStyleBackColor = $True
	#
	# webbrowserVMBuildSummary
	#
	$webbrowserVMBuildSummary.Location = '0, 0'
	$webbrowserVMBuildSummary.MinimumSize = '20, 20'
	$webbrowserVMBuildSummary.Name = 'webbrowserVMBuildSummary'
	$webbrowserVMBuildSummary.Size = '327, 250'
	$webbrowserVMBuildSummary.TabIndex = 7
	#
	# buttonBuildAndConfigureVMs
	#
	$buttonBuildAndConfigureVMs.BackColor = 'Red'
	$buttonBuildAndConfigureVMs.ForeColor = 'ActiveCaptionText'
	$buttonBuildAndConfigureVMs.Location = '342, 151'
	$buttonBuildAndConfigureVMs.Name = 'buttonBuildAndConfigureVMs'
	$buttonBuildAndConfigureVMs.Size = '147, 93'
	$buttonBuildAndConfigureVMs.TabIndex = 5
	$buttonBuildAndConfigureVMs.Text = 'Build and Configure VMs'
	$buttonBuildAndConfigureVMs.UseCompatibleTextRendering = $True
	$buttonBuildAndConfigureVMs.UseVisualStyleBackColor = $False
	$buttonBuildAndConfigureVMs.add_Click($buttonBuildAndConfigureVMs_Click)
	#
	# buttonNext
	#
	$buttonNext.Anchor = 'Bottom, Right'
	$buttonNext.Enabled = $False
	$buttonNext.Location = '288, 294'
	$buttonNext.Name = 'buttonNext'
	$buttonNext.Size = '75, 23'
	$buttonNext.TabIndex = 2
	$buttonNext.Text = '&Next >'
	$buttonNext.UseCompatibleTextRendering = $True
	$buttonNext.UseVisualStyleBackColor = $True
	$buttonNext.add_Click($buttonNext_Click)
	$tabpageStep6.ResumeLayout()
	$tabpageStep5.ResumeLayout()
	$panel7.ResumeLayout()
	$tabpageStep4.ResumeLayout()
	$panel6.ResumeLayout()
	$tabpageStep3.ResumeLayout()
	$tabpageStep2.ResumeLayout()
	$panel1.ResumeLayout()
	$tabpageStep1.ResumeLayout()
	$tabcontrolWizard.ResumeLayout()
	$formVMAutomationTool.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formVMAutomationTool.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formVMAutomationTool.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formVMAutomationTool.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formVMAutomationTool.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formVMAutomationTool.ShowDialog()

}
#endregion Source: MainForm.psf

#region Source: Functions\InstallPreReqs.ps1
function Invoke-InstallPreReqs_ps1
{
	<#	
		.NOTES
		===========================================================================
		 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2018 v5.5.150
		 Created on:   	4/9/2019 5:13 PM
		 Created by:   	andy-user
		 Organization: 	
		 Filename:     	
		===========================================================================
		.DESCRIPTION
			A description of the file.
	#>
	
	function Install-PreReqs
	{
		try
		{
			# Check if the PowerCLI PoSH module is installed. If it is not, install it.
			
			if (-not (Get-InstalledModule -Name "VMware.PowerCLI" -ErrorAction SilentlyContinue))
			{
				try
				{
					Set-ExecutionPolicy Unrestricted -Force
					Write-Host "Installing PowerCLI and PendingReboot modules on" $computer -ForegroundColor Yellow
					Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force
					Set-PSRepository -Name "PSGallery" -InstallationPolicy Trusted
					Install-Module -Name "VMWare.PowerCLI" -MaximumVersion 11.5.0.14912921 -Force -Scope AllUsers
					Write-Host "All required modules successfully installed." -ForegroundColor Green
					Import-Module VMware.PowerCLI
					Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -Confirm:$false
					Set-PowerCLIConfiguration -ParticipateInCeip $false -Scope AllUsers -Confirm:$false				
				}
				catch
				{
					
					Write-Host "Unable to install one or more modules. Please install manually or resolve connectivity issues." -ForegroundColor Red
				}
			}
			elseif (-not (Get-InstalledModule -Name "VMware.PowerCLI" -MinimumVersion 11.5.0.14912921 -ErrorAction SilentlyContinue))
			{
				Write-Host "All required modules are already installed, but less than the required version. Checking for module updates." -ForegroundColor Green
				try
				{
					Set-ExecutionPolicy Unrestricted -Force
					Update-Module -Name "VMware.PowerCLI" -Force -Confirm:$false -MaximumVersion 11.5.0.14912921 -ErrorAction SilentlyContinue
					Write-Host "All required modules are up to date." -ForegroundColor Green
					Import-Module VMWare.PowerCLI
					Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -Confirm:$false
					Set-PowerCLIConfiguration -ParticipateInCeip $false -Scope AllUsers -Confirm:$false
				}
				catch
				{
					Write-Host "Unable to update one or more modules. Please install manually or resolve connectivity issues." -ForegroundColor Red
				}
			}
			
		} # End try statement.
		catch
		{
			"Unable to execute."
		} # End catch statement.
		
	}
}
#endregion Source: InstallPreReqs.ps1

#region Source: AddVMForm.psf
function Show-AddVMForm_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formAddVM = New-Object 'System.Windows.Forms.Form'
	$buttonLoadFolders = New-Object 'System.Windows.Forms.Button'
	$buttonFormReset = New-Object 'System.Windows.Forms.Button'
	$panel5 = New-Object 'System.Windows.Forms.Panel'
	$comboboxClusters = New-Object 'System.Windows.Forms.ComboBox'
	$labelVMCluster = New-Object 'System.Windows.Forms.Label'
	$labelHostConfiguration = New-Object 'System.Windows.Forms.Label'
	$labelDataCenter = New-Object 'System.Windows.Forms.Label'
	$comboboxVMHost = New-Object 'System.Windows.Forms.ComboBox'
	$comboboxDatacenter = New-Object 'System.Windows.Forms.ComboBox'
	$labelVMHost = New-Object 'System.Windows.Forms.Label'
	$labelFolder = New-Object 'System.Windows.Forms.Label'
	$vcFolderView = New-Object 'System.Windows.Forms.TreeView'
	$buttonBuildVM = New-Object 'System.Windows.Forms.Button'
	$panel3 = New-Object 'System.Windows.Forms.Panel'
	$textboxNICLabel = New-Object 'System.Windows.Forms.TextBox'
	$labelNICCardLabel = New-Object 'System.Windows.Forms.Label'
	$textboxDNS2 = New-Object 'System.Windows.Forms.TextBox'
	$labelSecondaryDNS = New-Object 'System.Windows.Forms.Label'
	$textboxDNS1 = New-Object 'System.Windows.Forms.TextBox'
	$labelDNS1 = New-Object 'System.Windows.Forms.Label'
	$checkboxStaticIP = New-Object 'System.Windows.Forms.CheckBox'
	$textboxDefaultGateway = New-Object 'System.Windows.Forms.TextBox'
	$labelDefaultGateway = New-Object 'System.Windows.Forms.Label'
	$textboxSubnetMask = New-Object 'System.Windows.Forms.TextBox'
	$labelSubnetMask = New-Object 'System.Windows.Forms.Label'
	$textboxIPAddress = New-Object 'System.Windows.Forms.TextBox'
	$comboboxVSwitch = New-Object 'System.Windows.Forms.ComboBox'
	$labelIPAddress = New-Object 'System.Windows.Forms.Label'
	$labelVirtualSwitch = New-Object 'System.Windows.Forms.Label'
	$labelNetworkingConfigurat = New-Object 'System.Windows.Forms.Label'
	$panel2 = New-Object 'System.Windows.Forms.Panel'
	$textboxTemplateLocation = New-Object 'System.Windows.Forms.TextBox'
	$textboxTemplateName = New-Object 'System.Windows.Forms.TextBox'
	$labelTemplateLocation = New-Object 'System.Windows.Forms.Label'
	$buttonSelectTemplate = New-Object 'System.Windows.Forms.Button'
	$labelOS = New-Object 'System.Windows.Forms.Label'
	$labelTemplate = New-Object 'System.Windows.Forms.Label'
	$textboxVMName = New-Object 'System.Windows.Forms.TextBox'
	$labelVirtualMachineName = New-Object 'System.Windows.Forms.Label'
	$panelCompute = New-Object 'System.Windows.Forms.Panel'
	$comboboxCoresPerSocket = New-Object 'System.Windows.Forms.ComboBox'
	$labelCoresPerSocket = New-Object 'System.Windows.Forms.Label'
	$labelCompute = New-Object 'System.Windows.Forms.Label'
	$labelMemoryGB = New-Object 'System.Windows.Forms.Label'
	$comboboxMemory = New-Object 'System.Windows.Forms.ComboBox'
	$labelNumberOfVCPUSockets = New-Object 'System.Windows.Forms.Label'
	$comboboxCPU = New-Object 'System.Windows.Forms.ComboBox'
	$panel1 = New-Object 'System.Windows.Forms.Panel'
	$labelVMLocation = New-Object 'System.Windows.Forms.Label'
	$labelDatastore = New-Object 'System.Windows.Forms.Label'
	$textboxDatastore = New-Object 'System.Windows.Forms.TextBox'
	$buttonSelectDatastore = New-Object 'System.Windows.Forms.Button'
	$label1 = New-Object 'System.Windows.Forms.Label'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	$formAddVM_Load={
		
		# Retrieve all virtual datacenters from vSphere.
		
		$datacenters = Get-Datacenter -Server $global:vcenterConnection.Name | Sort-Object
		
		foreach ($datacenter in $datacenters)
		{
			try
			{
				Update-ComboBox -Combobox $comboboxDatacenter -items $datacenter.Name			
			}
			catch
			{
				[System.Windows.Forms.MessageBox]::Show("Unable to retrieve datacenters.")
			}
		}
		
		# Define the VM build queue variable.
		#$vmBuildQueue = @()
		
		# Define template list.
		$templates = @()	
	}
	
	#region Control Helper Functions
	function Get-CheckedNode
	{
	<#
		.SYNOPSIS
			This function collects a list of checked nodes in a TreeView
	
		.DESCRIPTION
			This function collects a list of checked nodes in a TreeView
	
		.PARAMETER  $NodeCollection
			The collection of nodes to search
	
		.PARAMETER  $CheckedNodes
			The ArrayList that will contain the all the checked items
		
		.EXAMPLE
			$CheckedNodes = New-Object System.Collections.ArrayList
			Get-CheckedNode $treeview1.Nodes $CheckedNodes
			foreach($node in $CheckedNodes)
			{	
				Write-Host $node.Text
			}
	#>
		param (
				[ValidateNotNull()]
				[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
				[ValidateNotNull()]
				[System.Collections.ArrayList]$CheckedNodes
		)
		
		foreach ($Node in $NodeCollection)
		{
			if ($Node.Checked)
			{
				[void]$CheckedNodes.Add($Node)
			}
			Get-CheckedNode $Node.Nodes $CheckedNodes
		}
	}
	
	
	function Update-ListViewColumnSort
	{
	<#
		.SYNOPSIS
			Sort the ListView's item using the specified column.
		
		.DESCRIPTION
			Sort the ListView's item using the specified column.
			This function uses Add-Type to define a class that sort the items.
			The ListView's Tag property is used to keep track of the sorting.
		
		.PARAMETER ListView
			The ListView control to sort.
		
		.PARAMETER ColumnIndex
			The index of the column to use for sorting.
		
		.PARAMETER SortOrder
			The direction to sort the items. If not specified or set to None, it will toggle.
		
		.EXAMPLE
			Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListView]
			$ListView,
			[Parameter(Mandatory = $true)]
			[int]
			$ColumnIndex,
			[System.Windows.Forms.SortOrder]
			$SortOrder = 'None'
		)
		
		if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
		{
			return;
		}
		
		#region Define ListViewItemComparer
		try
		{
			[ListViewItemComparer] | Out-Null
		}
		catch
		{
			Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
		}
		#endregion
		
		if ($ListView.Tag -is [ListViewItemComparer])
		{
			#Toggle the Sort Order
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
				{
					$ListView.Tag.sortOrder = 'Descending'
				}
				else
				{
					$ListView.Tag.sortOrder = 'Ascending'
				}
			}
			else
			{
				$ListView.Tag.sortOrder = $SortOrder
			}
			
			$ListView.Tag.column = $ColumnIndex
			$ListView.Sort() #Sort the items
		}
		else
		{
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
			}
			
			#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
			$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
			$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
		}
	}
	
	
	function Add-ListViewItem
	{
	<#
		.SYNOPSIS
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.DESCRIPTION
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.PARAMETER ListView
			The ListView control to add the items to.
	
		.PARAMETER Items
			The object or objects you wish to load into the ListView's Items collection.
			
		.PARAMETER  ImageIndex
			The index of a predefined image in the ListView's ImageList.
		
		.PARAMETER  SubItems
			List of strings to add as Subitems.
		
		.PARAMETER Group
			The group to place the item(s) in.
		
		.PARAMETER Clear
			This switch clears the ListView's Items before adding the new item(s).
		
		.EXAMPLE
			Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
	#>
		
		Param( 
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.ListView]$ListView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Items,
		[int]$ImageIndex = -1,
		[string[]]$SubItems,
		$Group,
		[switch]$Clear)
		
		if($Clear)
		{
			$ListView.Items.Clear();
	    }
	    
	    $lvGroup = $null
	    if ($Group -is [System.Windows.Forms.ListViewGroup])
	    {
	        $lvGroup = $Group
	    }
	    elseif ($Group -is [string])
	    {
	        #$lvGroup = $ListView.Group[$Group] # Case sensitive
	        foreach ($groupItem in $ListView.Groups)
	        {
	            if ($groupItem.Name -eq $Group)
	            {
	                $lvGroup = $groupItem
	                break
	            }
	        }
	        
	        if ($null -eq $lvGroup)
	        {
	            $lvGroup = $ListView.Groups.Add($Group, $Group)
	        }
	    }
	    
		if($Items -is [Array])
		{
			$ListView.BeginUpdate()
			foreach ($item in $Items)
			{		
				$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
				#Store the object in the Tag
				$listitem.Tag = $item
				
				if($null -ne $SubItems)
				{
					$listitem.SubItems.AddRange($SubItems)
				}
				
				if($null -ne $lvGroup)
				{
					$listitem.Group = $lvGroup
				}
			}
			$ListView.EndUpdate()
		}
		else
		{
			#Add a new item to the ListView
			$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $Items
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
	}
	
	function Update-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
		
		.PARAMETER ComboBox
			The ComboBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ComboBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red" -Append
			Update-ComboBox $combobox1 "White" -Append
			Update-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Update-ComboBox $combobox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ComboBox]
			$ComboBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]
			$DisplayMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
	}
	#endregion
	
	$buttonSelectDatastore_Click={
		#TODO: Place custom script here
		if (Show-SelectDatastore_psf -eq 'OK')
		{
		}
	}
	
	$buttonBuildVM_Click = {
		
		$vmTemp = ($global:vmBuilds).VMName
		
		$global:existingVMList = (Get-VM).Name
		
		# Here we build our paramters from the data provided.
		if (($textboxVMName.Text -notin $global:existingVMList) -and ($textboxVMName.Text -notin $vmTemp))
		{
			try
			{
				$object = New-Object PSObject
				
				$object | Add-Member -MemberType NoteProperty -Name "VMName" -Value $textboxVMName.Text
				
				$drsConfig = Get-Cluster $comboboxClusters.Text | Select Name, DrsEnabled, DrsMode, DrsAutomationLevel | Sort-Object
				$drsConfig | Out-File "$logDirectory\drsconfig.log"
				
				if (($drsConfig.DrsEnabled) -and ($drsConfig.DrsMode -eq "FullyAutomated") -and ($drsConfig.DrsAutomationLevel -eq "FullyAutomated"))
				{
					$metrics = "mem.usage.average"
					
					$hosts = Get-VMHost -Location $comboboxClusters.Text | Sort-Object
					$stats = Get-Stat -Entity $hosts -Stat $metrics -Realtime -MaxSamples 1
					$avg = $stats | Measure-Object -Property Value -Average | Select -ExpandProperty Average
					$selectedHost = $stats | where{ $_.Value -lt $avg } | Get-Random | Select -ExpandProperty Entity
					
					$object | Add-Member -MemberType NoteProperty -Name "VM Host" -Value $selectedHost.Name
					$object | Add-Member -MemberType NoteProperty -Name "DRS" -Value "Yes"
				}
				else
				{
					$object | Add-Member -MemberType NoteProperty -Name "VM Host" -Value $comboboxVMHost.Text
					$object | Add-Member -MemberType NoteProperty -Name "DRS" -Value "No"
				}
				
				$object | Add-Member -MemberType NoteProperty -Name "Datacenter" -Value $comboboxDatacenter.Text
				$object | Add-Member -MemberType NoteProperty -Name "Datastore" -Value $textboxDatastore.Text
				$object | Add-Member -MemberType NoteProperty -Name "NumCPU" -Value $comboboxCPU.Text
				$object | Add-Member -MemberType NoteProperty -Name "CoresPerSocket" -Value $comboboxCoresPerSocket.Text
				$object | Add-Member -MemberType NoteProperty -Name "Memory" -Value $comboboxMemory.Text
				$object | Add-Member -MemberType NoteProperty -Name "Network" -Value $comboboxVSwitch.Text
				$object | Add-Member -MemberType NoteProperty -Name "Template" -Value $textboxTemplateName.Text
				$object | Add-Member -MemberType NoteProperty -Name "TemplateLocation" -Value $textboxTemplateLocation.Text
				$object | Add-Member -MemberType NoteProperty -Name "Location" -Value $vcFolderView.SelectedNode.FullPath
				
				if ($checkboxStaticIP.Checked)
				{
					$object | Add-Member -MemberType NoteProperty -Name "NICLabel" -Value $textboxNICLabel.Text
					$object | Add-Member -MemberType NoteProperty -Name "IP Type" -Value "Static"
					$object | Add-Member -MemberType NoteProperty -Name "IP Address" -Value $textboxIPAddress.Text
					$object | Add-Member -MemberType NoteProperty -Name "Subnet Mask" -Value $textboxSubnetMask.Text
					$object | Add-Member -MemberType NoteProperty -Name "Default Gateway" -Value $textboxDefaultGateway.Text
					$object | Add-Member -MemberType NoteProperty -Name "Primary DNS Server" -Value $textboxDNS1.Text
					$object | Add-Member -MemberType NoteProperty -Name "Secondary DNS Server" -Value $textboxDNS2.Text
				}
				else
				{
					$object | Add-Member -MemberType NoteProperty -Name "NICLabel" -Value $textboxNICLabel.Text
					$object | Add-Member -MemberType NoteProperty -Name "IP Type" -Value "DHCP"
					$object | Add-Member -MemberType NoteProperty -Name "IP Address" -Value ''
					$object | Add-Member -MemberType NoteProperty -Name "Subnet Mask" -Value ''
					$object | Add-Member -MemberType NoteProperty -Name "Default Gateway" -Value ''
					$object | Add-Member -MemberType NoteProperty -Name "Primary DNS Server" -Value ''
				}
				
				$allValuesSet = $true
				
				if ($object.("IP Type") -eq "Static")
				{
					# Let's check to make sure we have values in all required fields.
					
					$props = Get-Member -InputObject $object -MemberType NoteProperty
					
					foreach ($prop in $props)
					{
						$propValue = $object | Select-Object -ExpandProperty $prop.Name
						
						if (-not $propValue)
						{
							$allValuesSet = $false
						}
					}
				}
				else
				{
					$props = Get-Member -InputObject $object -MemberType NoteProperty | ?{ ($_.Name -ne "IP Address") -and ($_.Name -ne "Subnet Mask") -and ($_.Name -ne "Default Gateway") -and ($_.Name -ne "Primary DNS Server") }
					
					foreach ($prop in $props)
					{
						$propValue = $object | Select-Object -ExpandProperty $prop.Name
						
						if (-not $propValue)
						{
							$allValuesSet = $false
						}
					}
				}
				
				if ($allValuesSet)
				{
					$global:vmbuilds += @($object)
					
					$global:vmbuilds | Out-File "$logDirectory\addvm.log"
					
					If ($textboxTemplateName.Text -like "*2012*R2*")
					{
						$vmOSObject = New-Object PSObject
						$vmOSObject | Add-Member -MemberType NoteProperty -Name "VMName" -Value $textboxVMName.Text
						$vmOSObject | Add-Member -MemberType NoteProperty -Name "OS" -Value "Server2012R2"
						
						$global:vmOS = [System.Array]$global:vmOS + $vmOSObject
					}
					elseif ($textboxTemplateName.Text -like "*2016*")
					{
						$vmOSObject = New-Object PSObject
						$vmOSObject | Add-Member -MemberType NoteProperty -Name "VMName" -Value $textboxVMName.Text
						$vmOSObject | Add-Member -MemberType NoteProperty -Name "OS" -Value "Server2016"
						
						$global:vmOS = [System.Array]$global:vmOS + $vmOSObject
					}
					elseif ($textboxTemplateName.Text -like "*2019*")
					{
						$vmOSObject = New-Object PSObject
						$vmOSObject | Add-Member -MemberType NoteProperty -Name "VMName" -Value $textboxVMName.Text
						$vmOSObject | Add-Member -MemberType NoteProperty -Name "OS" -Value "Server2019"
						
						$global:vmOS = [System.Array]$global:vmOS + $vmOSObject
					}
					
					try
					{
						#$table = ConvertTo-DataTable -InputObject $global:vmbuilds
						#Update-DataGridView -DataGridView $datagridviewVMQueue -Item $table -AutoSizeColumns DisplayedCells
						
						$listviewVMsStep2.Items.Add($vmOSObject.VMName)
						
						Update-NavButtons
						
					}
					catch
					{
						"Unable to load VM build queue."
					}
					
					# Update the treeview control for Step 3
					
					$treeviewVMListStep3.BeginUpdate()
					$treeviewVMListStep3.Nodes.Clear()
					
					foreach ($vm in $global:vmbuilds)
					{
						$newNode = $treeviewVMListStep3.Nodes.Add($vm.VMName)
					}
					
					$treeviewVMListStep3.EndUpdate()
					
					# Update the treeview control for step 4.
					
					$treeviewVMListStep4.BeginUpdate()
					$treeviewVMListStep4.Nodes.Clear()
					
					foreach ($vm in $global:vmbuilds)
					{
						$newNode = $treeviewVMListStep4.Nodes.Add($vm.VMName)
					}
					
					$treeviewVMListStep4.EndUpdate()
					
					$buttonDeleteVMFromQueue.Enabled = $true
					$formAddVM.Close()
				}
				else
				{
					[System.Windows.Forms.MessageBox]::Show("All fields must be completed to continue.")
				}
				
			}
			catch
			{
				[System.Windows.Forms.MessageBox]::Show("Unable to add VM to queue.")
				$formAddVM.Close()
			}
		}
		else
		{
			[System.Windows.Forms.MessageBox]::Show("VM: $($textboxVMName.Text) already exists in queue or in environment.")
			$formAddVM.Close()
		}
	}
	
	$comboboxDatacenter_SelectedIndexChanged={
		
		if ($comboboxDatacenter.Text -ne '')
		{
			$clusters = Get-Cluster -Location $comboboxDatacenter.Text | Select Name | Sort-Object
			
			if ($clusters.Name -ne $null)
			{
				Update-ComboBox -combobox $comboboxClusters -Items $clusters.Name
			}
			
		}
	}
	
	$comboboxVMHost_SelectedIndexChanged={
		
		$textboxDatastore.Clear()
		
		# Populate the vSwitch Combobox.
		
		$drsText = "DRS host automatically selected"
		
		if ($comboboxVMHost.Text -eq $drsText)
		{
			$tmpHost = (Get-Cluster $comboboxClusters.Text | Get-VMHost | Sort-Object | select -First 1)
			$vSwitches = Get-VirtualPortGroup -Server $global:vcenterConnection.Name -Host $tmpHost | select Name | Sort-Object -Property Name
			Update-ComboBox -ComboBox $comboboxVSwitch -Items $vSwitches.Name
		}
		else
		{
			$vSwitches = Get-VirtualPortGroup -Server $global:vcenterConnection.Name -Host $comboboxVMHost.SelectedItem | select Name | Sort-Object -Property Name
			Update-ComboBox -ComboBox $comboboxVSwitch -Items $vSwitches.Name
		}
		
		$buttonSelectDatastore.Enabled = $true	
	}
	
	$checkboxStaticIP_CheckedChanged={
		
		if ($checkboxStaticIP.Checked)
		{
			$textboxIPAddress.Enabled = $true
			$textboxSubnetMask.Enabled = $true
			$textboxDefaultGateway.Enabled = $true
			$textboxDNS1.Enabled = $true
			$textboxDNS2.Enabled = $true
		}
		else
		{
			$textboxIPAddress.Enabled = $false
			$textboxSubnetMask.Enabled = $false
			$textboxDefaultGateway.Enabled = $false
			$textboxDNS1.Enabled = $false
			$textboxDNS2.Enabled = $false
		}
	}
	
	
	$comboboxClusters_SelectedIndexChanged={
		
		$drsConfig = Get-Cluster $comboboxClusters.Text | Select Name, DrsEnabled, DrsMode, DrsAutomationLevel | Sort-Object
		
		$drsConfig | Out-File "$logDirectory\drsconfig.log"
		
		if (($drsConfig.DrsEnabled) -and ($drsConfig.DrsMode -eq "FullyAutomated") -and ($drsConfig.DrsAutomationLevel -eq "FullyAutomated"))
		{
			#$comboboxVMHost.Visible = $false
			$drsText = "DRS host automatically selected"
			$comboboxVMHost.Enabled = $false
			Update-ComboBox -combobox $comboboxVMHost -Items $drsText
			$comboboxVMHost.SelectedIndex = 0
		}
		else
		{
			$hosts = Get-VMHost -Location $comboboxClusters.Text | Sort-Object
			
			if ($hosts.Name -ne $null)
			{
				Update-ComboBox -combobox $comboboxVMHost -Items $hosts.Name
			}
		}
		
	}
	
	
	$buttonSelectTemplate_Click={
		
		if (Show-SelectVMTemplate_psf -eq 'OK') {}
		
	}
	
	$buttonLoadFolders_Click={
		
		try
		{
			# Populate the folder view.
			
			$vcFolderView.Nodes.Clear()
			
			$vcFolderView.BeginUpdate()
			
			$rootNode = $vcFolderView.Nodes.Add("$($comboboxDatacenter.Text)")
			
			$folders = (Get-Folder -Location $comboboxDatacenter.Text | ?{ ($_.Type -eq "VM") -and ($_.Parent -like "VM") } | Sort-Object)
			
			#$folders | Out-File "$ScriptDirectory\folders.log"
			
			foreach ($folder in $folders)
			{
				$folderNode = $rootNode.Nodes.Add($folder.Name)
				$folderNode.Checked = $false
			}
			
			$vcFolderView.ExpandAll()
			$vcFolderView.EndUpdate()
		}
		catch
		{
			[System.Windows.Forms.MessageBox]::Show("Unable to load VM folders.")
		}
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formAddVM.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:AddVMForm_comboboxClusters = $comboboxClusters.Text
		$script:AddVMForm_comboboxClusters_SelectedItem = $comboboxClusters.SelectedItem
		$script:AddVMForm_comboboxVMHost = $comboboxVMHost.Text
		$script:AddVMForm_comboboxVMHost_SelectedItem = $comboboxVMHost.SelectedItem
		$script:AddVMForm_comboboxDatacenter = $comboboxDatacenter.Text
		$script:AddVMForm_comboboxDatacenter_SelectedItem = $comboboxDatacenter.SelectedItem
		if($vcFolderView.SelectedNode -ne $null)
		{
			$script:AddVMForm_vcFolderView = $vcFolderView.SelectedNode.Text
		}
		else
		{
			$script:AddVMForm_vcFolderView = $null
		}
		$script:AddVMForm_textboxNICLabel = $textboxNICLabel.Text
		$script:AddVMForm_textboxDNS2 = $textboxDNS2.Text
		$script:AddVMForm_textboxDNS1 = $textboxDNS1.Text
		$script:AddVMForm_checkboxStaticIP = $checkboxStaticIP.Checked
		$script:AddVMForm_textboxDefaultGateway = $textboxDefaultGateway.Text
		$script:AddVMForm_textboxSubnetMask = $textboxSubnetMask.Text
		$script:AddVMForm_textboxIPAddress = $textboxIPAddress.Text
		$script:AddVMForm_comboboxVSwitch = $comboboxVSwitch.Text
		$script:AddVMForm_comboboxVSwitch_SelectedItem = $comboboxVSwitch.SelectedItem
		$script:AddVMForm_textboxTemplateLocation = $textboxTemplateLocation.Text
		$script:AddVMForm_textboxTemplateName = $textboxTemplateName.Text
		$script:AddVMForm_textboxVMName = $textboxVMName.Text
		$script:AddVMForm_comboboxCoresPerSocket = $comboboxCoresPerSocket.Text
		$script:AddVMForm_comboboxCoresPerSocket_SelectedItem = $comboboxCoresPerSocket.SelectedItem
		$script:AddVMForm_comboboxMemory = $comboboxMemory.Text
		$script:AddVMForm_comboboxMemory_SelectedItem = $comboboxMemory.SelectedItem
		$script:AddVMForm_comboboxCPU = $comboboxCPU.Text
		$script:AddVMForm_comboboxCPU_SelectedItem = $comboboxCPU.SelectedItem
		$script:AddVMForm_textboxDatastore = $textboxDatastore.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonLoadFolders.remove_Click($buttonLoadFolders_Click)
			$buttonFormReset.remove_Click($formAddVM_Load)
			$comboboxClusters.remove_SelectedIndexChanged($comboboxClusters_SelectedIndexChanged)
			$comboboxVMHost.remove_SelectedIndexChanged($comboboxVMHost_SelectedIndexChanged)
			$comboboxDatacenter.remove_SelectedIndexChanged($comboboxDatacenter_SelectedIndexChanged)
			$buttonBuildVM.remove_Click($buttonBuildVM_Click)
			$checkboxStaticIP.remove_CheckedChanged($checkboxStaticIP_CheckedChanged)
			$buttonSelectTemplate.remove_Click($buttonSelectTemplate_Click)
			$buttonSelectDatastore.remove_Click($buttonSelectDatastore_Click)
			$formAddVM.remove_Load($formAddVM_Load)
			$formAddVM.remove_Load($Form_StateCorrection_Load)
			$formAddVM.remove_Closing($Form_StoreValues_Closing)
			$formAddVM.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formAddVM.SuspendLayout()
	$panel5.SuspendLayout()
	$panel3.SuspendLayout()
	$panel2.SuspendLayout()
	$panelCompute.SuspendLayout()
	$panel1.SuspendLayout()
	#
	# formAddVM
	#
	$formAddVM.Controls.Add($buttonLoadFolders)
	$formAddVM.Controls.Add($buttonFormReset)
	$formAddVM.Controls.Add($panel5)
	$formAddVM.Controls.Add($labelFolder)
	$formAddVM.Controls.Add($vcFolderView)
	$formAddVM.Controls.Add($buttonBuildVM)
	$formAddVM.Controls.Add($panel3)
	$formAddVM.Controls.Add($panel2)
	$formAddVM.Controls.Add($textboxVMName)
	$formAddVM.Controls.Add($labelVirtualMachineName)
	$formAddVM.Controls.Add($panelCompute)
	$formAddVM.Controls.Add($panel1)
	$formAddVM.AutoScaleDimensions = '6, 13'
	$formAddVM.AutoScaleMode = 'Font'
	$formAddVM.ClientSize = '569, 614'
	$formAddVM.FormBorderStyle = 'SizableToolWindow'
	$formAddVM.Margin = '6, 6, 6, 6'
	$formAddVM.Name = 'formAddVM'
	$formAddVM.StartPosition = 'CenterParent'
	$formAddVM.Text = 'Add Virtual Machine'
	$formAddVM.add_Load($formAddVM_Load)
	#
	# buttonLoadFolders
	#
	$buttonLoadFolders.Location = '345, 347'
	$buttonLoadFolders.Name = 'buttonLoadFolders'
	$buttonLoadFolders.Size = '94, 23'
	$buttonLoadFolders.TabIndex = 24
	$buttonLoadFolders.Text = 'Load Folders'
	$buttonLoadFolders.UseCompatibleTextRendering = $True
	$buttonLoadFolders.UseVisualStyleBackColor = $True
	$buttonLoadFolders.add_Click($buttonLoadFolders_Click)
	#
	# buttonFormReset
	#
	$buttonFormReset.Location = '393, 563'
	$buttonFormReset.Name = 'buttonFormReset'
	$buttonFormReset.Size = '75, 39'
	$buttonFormReset.TabIndex = 23
	$buttonFormReset.Text = 'Reset Form'
	$buttonFormReset.UseCompatibleTextRendering = $True
	$buttonFormReset.UseVisualStyleBackColor = $True
	$buttonFormReset.add_Click($formAddVM_Load)
	#
	# panel5
	#
	$panel5.Controls.Add($comboboxClusters)
	$panel5.Controls.Add($labelVMCluster)
	$panel5.Controls.Add($labelHostConfiguration)
	$panel5.Controls.Add($labelDataCenter)
	$panel5.Controls.Add($comboboxVMHost)
	$panel5.Controls.Add($comboboxDatacenter)
	$panel5.Controls.Add($labelVMHost)
	$panel5.BorderStyle = 'Fixed3D'
	$panel5.Location = '266, 46'
	$panel5.Name = 'panel5'
	$panel5.Size = '296, 151'
	$panel5.TabIndex = 2
	#
	# comboboxClusters
	#
	$comboboxClusters.DropDownStyle = 'DropDownList'
	$comboboxClusters.FormattingEnabled = $True
	$comboboxClusters.Location = '77, 73'
	$comboboxClusters.Name = 'comboboxClusters'
	$comboboxClusters.Size = '193, 21'
	$comboboxClusters.TabIndex = 9
	$comboboxClusters.add_SelectedIndexChanged($comboboxClusters_SelectedIndexChanged)
	#
	# labelVMCluster
	#
	$labelVMCluster.AutoSize = $True
	$labelVMCluster.Location = '12, 73'
	$labelVMCluster.Name = 'labelVMCluster'
	$labelVMCluster.Size = '43, 17'
	$labelVMCluster.TabIndex = 0
	$labelVMCluster.Text = 'Cluster:'
	$labelVMCluster.UseCompatibleTextRendering = $True
	#
	# labelHostConfiguration
	#
	$labelHostConfiguration.AutoSize = $True
	$labelHostConfiguration.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelHostConfiguration.Location = '12, 13'
	$labelHostConfiguration.Name = 'labelHostConfiguration'
	$labelHostConfiguration.Size = '102, 17'
	$labelHostConfiguration.TabIndex = 0
	$labelHostConfiguration.Text = 'Host Configuration'
	$labelHostConfiguration.UseCompatibleTextRendering = $True
	#
	# labelDataCenter
	#
	$labelDataCenter.AutoSize = $True
	$labelDataCenter.Location = '12, 40'
	$labelDataCenter.Name = 'labelDataCenter'
	$labelDataCenter.Size = '63, 17'
	$labelDataCenter.TabIndex = 0
	$labelDataCenter.Text = 'Datacenter:'
	$labelDataCenter.UseCompatibleTextRendering = $True
	#
	# comboboxVMHost
	#
	$comboboxVMHost.DropDownStyle = 'DropDownList'
	$comboboxVMHost.FormattingEnabled = $True
	$comboboxVMHost.Location = '77, 106'
	$comboboxVMHost.Name = 'comboboxVMHost'
	$comboboxVMHost.Size = '193, 21'
	$comboboxVMHost.TabIndex = 10
	$comboboxVMHost.add_SelectedIndexChanged($comboboxVMHost_SelectedIndexChanged)
	#
	# comboboxDatacenter
	#
	$comboboxDatacenter.DropDownStyle = 'DropDownList'
	$comboboxDatacenter.FormattingEnabled = $True
	$comboboxDatacenter.Location = '77, 37'
	$comboboxDatacenter.Name = 'comboboxDatacenter'
	$comboboxDatacenter.Size = '193, 21'
	$comboboxDatacenter.TabIndex = 8
	$comboboxDatacenter.add_SelectedIndexChanged($comboboxDatacenter_SelectedIndexChanged)
	#
	# labelVMHost
	#
	$labelVMHost.AutoSize = $True
	$labelVMHost.Location = '12, 109'
	$labelVMHost.Name = 'labelVMHost'
	$labelVMHost.Size = '51, 17'
	$labelVMHost.TabIndex = 0
	$labelVMHost.Text = 'VM Host:'
	$labelVMHost.UseCompatibleTextRendering = $True
	#
	# labelFolder
	#
	$labelFolder.AutoSize = $True
	$labelFolder.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelFolder.Location = '266, 351'
	$labelFolder.Name = 'labelFolder'
	$labelFolder.Size = '58, 17'
	$labelFolder.TabIndex = 0
	$labelFolder.Text = 'VM Folder'
	$labelFolder.UseCompatibleTextRendering = $True
	#
	# vcFolderView
	#
	$vcFolderView.Location = '266, 391'
	$vcFolderView.Name = 'vcFolderView'
	$vcFolderView.Size = '296, 161'
	$vcFolderView.TabIndex = 21
	#
	# buttonBuildVM
	#
	$buttonBuildVM.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$buttonBuildVM.Location = '474, 563'
	$buttonBuildVM.Name = 'buttonBuildVM'
	$buttonBuildVM.Size = '88, 39'
	$buttonBuildVM.TabIndex = 22
	$buttonBuildVM.Text = 'Add VM to build queue!'
	$buttonBuildVM.UseCompatibleTextRendering = $True
	$buttonBuildVM.UseVisualStyleBackColor = $True
	$buttonBuildVM.add_Click($buttonBuildVM_Click)
	#
	# panel3
	#
	$panel3.Controls.Add($textboxNICLabel)
	$panel3.Controls.Add($labelNICCardLabel)
	$panel3.Controls.Add($textboxDNS2)
	$panel3.Controls.Add($labelSecondaryDNS)
	$panel3.Controls.Add($textboxDNS1)
	$panel3.Controls.Add($labelDNS1)
	$panel3.Controls.Add($checkboxStaticIP)
	$panel3.Controls.Add($textboxDefaultGateway)
	$panel3.Controls.Add($labelDefaultGateway)
	$panel3.Controls.Add($textboxSubnetMask)
	$panel3.Controls.Add($labelSubnetMask)
	$panel3.Controls.Add($textboxIPAddress)
	$panel3.Controls.Add($comboboxVSwitch)
	$panel3.Controls.Add($labelIPAddress)
	$panel3.Controls.Add($labelVirtualSwitch)
	$panel3.Controls.Add($labelNetworkingConfigurat)
	$panel3.BorderStyle = 'Fixed3D'
	$panel3.Location = '12, 266'
	$panel3.Name = 'panel3'
	$panel3.Size = '230, 289'
	$panel3.TabIndex = 5
	#
	# textboxNICLabel
	#
	$textboxNICLabel.Location = '123, 100'
	$textboxNICLabel.Name = 'textboxNICLabel'
	$textboxNICLabel.Size = '93, 20'
	$textboxNICLabel.TabIndex = 29
	#
	# labelNICCardLabel
	#
	$labelNICCardLabel.AutoSize = $True
	$labelNICCardLabel.Location = '10, 104'
	$labelNICCardLabel.Name = 'labelNICCardLabel'
	$labelNICCardLabel.Size = '85, 17'
	$labelNICCardLabel.TabIndex = 28
	$labelNICCardLabel.Text = 'NIC Card Label:'
	$labelNICCardLabel.UseCompatibleTextRendering = $True
	#
	# textboxDNS2
	#
	$textboxDNS2.Enabled = $False
	$textboxDNS2.Location = '124, 255'
	$textboxDNS2.Name = 'textboxDNS2'
	$textboxDNS2.Size = '92, 20'
	$textboxDNS2.TabIndex = 34
	#
	# labelSecondaryDNS
	#
	$labelSecondaryDNS.AutoSize = $True
	$labelSecondaryDNS.Location = '10, 255'
	$labelSecondaryDNS.Name = 'labelSecondaryDNS'
	$labelSecondaryDNS.Size = '88, 17'
	$labelSecondaryDNS.TabIndex = 27
	$labelSecondaryDNS.Text = 'Secondary DNS:'
	$labelSecondaryDNS.UseCompatibleTextRendering = $True
	#
	# textboxDNS1
	#
	$textboxDNS1.Enabled = $False
	$textboxDNS1.Location = '124, 223'
	$textboxDNS1.Name = 'textboxDNS1'
	$textboxDNS1.Size = '92, 20'
	$textboxDNS1.TabIndex = 33
	#
	# labelDNS1
	#
	$labelDNS1.AutoSize = $True
	$labelDNS1.Location = '10, 223'
	$labelDNS1.Name = 'labelDNS1'
	$labelDNS1.Size = '73, 17'
	$labelDNS1.TabIndex = 25
	$labelDNS1.Text = 'Primary DNS:'
	$labelDNS1.UseCompatibleTextRendering = $True
	#
	# checkboxStaticIP
	#
	$checkboxStaticIP.Location = '10, 64'
	$checkboxStaticIP.Name = 'checkboxStaticIP'
	$checkboxStaticIP.Size = '137, 24'
	$checkboxStaticIP.TabIndex = 19
	$checkboxStaticIP.Text = 'Use Static IP Settings'
	$checkboxStaticIP.UseCompatibleTextRendering = $True
	$checkboxStaticIP.UseVisualStyleBackColor = $True
	$checkboxStaticIP.add_CheckedChanged($checkboxStaticIP_CheckedChanged)
	#
	# textboxDefaultGateway
	#
	$textboxDefaultGateway.Enabled = $False
	$textboxDefaultGateway.Location = '124, 194'
	$textboxDefaultGateway.Name = 'textboxDefaultGateway'
	$textboxDefaultGateway.Size = '92, 20'
	$textboxDefaultGateway.TabIndex = 32
	#
	# labelDefaultGateway
	#
	$labelDefaultGateway.AutoSize = $True
	$labelDefaultGateway.Location = '10, 194'
	$labelDefaultGateway.Name = 'labelDefaultGateway'
	$labelDefaultGateway.Size = '91, 17'
	$labelDefaultGateway.TabIndex = 22
	$labelDefaultGateway.Text = 'Default Gateway:'
	$labelDefaultGateway.UseCompatibleTextRendering = $True
	#
	# textboxSubnetMask
	#
	$textboxSubnetMask.Enabled = $False
	$textboxSubnetMask.Location = '124, 164'
	$textboxSubnetMask.Name = 'textboxSubnetMask'
	$textboxSubnetMask.Size = '92, 20'
	$textboxSubnetMask.TabIndex = 31
	#
	# labelSubnetMask
	#
	$labelSubnetMask.AutoSize = $True
	$labelSubnetMask.Location = '10, 164'
	$labelSubnetMask.Name = 'labelSubnetMask'
	$labelSubnetMask.Size = '73, 17'
	$labelSubnetMask.TabIndex = 20
	$labelSubnetMask.Text = 'Subnet Mask:'
	$labelSubnetMask.UseCompatibleTextRendering = $True
	#
	# textboxIPAddress
	#
	$textboxIPAddress.Enabled = $False
	$textboxIPAddress.Location = '124, 132'
	$textboxIPAddress.Name = 'textboxIPAddress'
	$textboxIPAddress.Size = '92, 20'
	$textboxIPAddress.TabIndex = 30
	#
	# comboboxVSwitch
	#
	$comboboxVSwitch.DropDownStyle = 'DropDownList'
	$comboboxVSwitch.Enabled = $False
	$comboboxVSwitch.FormattingEnabled = $True
	$comboboxVSwitch.Location = '92, 29'
	$comboboxVSwitch.Name = 'comboboxVSwitch'
	$comboboxVSwitch.Size = '121, 21'
	$comboboxVSwitch.TabIndex = 18
	#
	# labelIPAddress
	#
	$labelIPAddress.AutoSize = $True
	$labelIPAddress.Location = '10, 135'
	$labelIPAddress.Name = 'labelIPAddress'
	$labelIPAddress.Size = '63, 17'
	$labelIPAddress.TabIndex = 0
	$labelIPAddress.Text = 'IP Address:'
	$labelIPAddress.UseCompatibleTextRendering = $True
	#
	# labelVirtualSwitch
	#
	$labelVirtualSwitch.AutoSize = $True
	$labelVirtualSwitch.Location = '10, 31'
	$labelVirtualSwitch.Name = 'labelVirtualSwitch'
	$labelVirtualSwitch.Size = '76, 17'
	$labelVirtualSwitch.TabIndex = 0
	$labelVirtualSwitch.Text = 'Virtual Switch:'
	$labelVirtualSwitch.UseCompatibleTextRendering = $True
	#
	# labelNetworkingConfigurat
	#
	$labelNetworkingConfigurat.AutoSize = $True
	$labelNetworkingConfigurat.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelNetworkingConfigurat.Location = '3, 10'
	$labelNetworkingConfigurat.Name = 'labelNetworkingConfigurat'
	$labelNetworkingConfigurat.Size = '137, 17'
	$labelNetworkingConfigurat.TabIndex = 0
	$labelNetworkingConfigurat.Text = 'Networking Configuration'
	$labelNetworkingConfigurat.UseCompatibleTextRendering = $True
	#
	# panel2
	#
	$panel2.Controls.Add($textboxTemplateLocation)
	$panel2.Controls.Add($textboxTemplateName)
	$panel2.Controls.Add($labelTemplateLocation)
	$panel2.Controls.Add($buttonSelectTemplate)
	$panel2.Controls.Add($labelOS)
	$panel2.Controls.Add($labelTemplate)
	$panel2.BorderStyle = 'Fixed3D'
	$panel2.Location = '266, 203'
	$panel2.Name = 'panel2'
	$panel2.Size = '296, 126'
	$panel2.TabIndex = 4
	#
	# textboxTemplateLocation
	#
	$textboxTemplateLocation.Location = '125, 89'
	$textboxTemplateLocation.Name = 'textboxTemplateLocation'
	$textboxTemplateLocation.ReadOnly = $True
	$textboxTemplateLocation.Size = '145, 20'
	$textboxTemplateLocation.TabIndex = 22
	#
	# textboxTemplateName
	#
	$textboxTemplateName.Location = '125, 62'
	$textboxTemplateName.Name = 'textboxTemplateName'
	$textboxTemplateName.ReadOnly = $True
	$textboxTemplateName.Size = '145, 20'
	$textboxTemplateName.TabIndex = 21
	#
	# labelTemplateLocation
	#
	$labelTemplateLocation.AutoSize = $True
	$labelTemplateLocation.Location = '16, 92'
	$labelTemplateLocation.Name = 'labelTemplateLocation'
	$labelTemplateLocation.Size = '101, 17'
	$labelTemplateLocation.TabIndex = 20
	$labelTemplateLocation.Text = 'Template Location:'
	$labelTemplateLocation.UseCompatibleTextRendering = $True
	#
	# buttonSelectTemplate
	#
	$buttonSelectTemplate.Enabled = $False
	$buttonSelectTemplate.Location = '12, 32'
	$buttonSelectTemplate.Name = 'buttonSelectTemplate'
	$buttonSelectTemplate.Size = '258, 23'
	$buttonSelectTemplate.TabIndex = 19
	$buttonSelectTemplate.Text = 'Select Template'
	$buttonSelectTemplate.UseCompatibleTextRendering = $True
	$buttonSelectTemplate.UseVisualStyleBackColor = $True
	$buttonSelectTemplate.add_Click($buttonSelectTemplate_Click)
	#
	# labelOS
	#
	$labelOS.AutoSize = $True
	$labelOS.Location = '16, 66'
	$labelOS.Margin = '1, 0, 1, 0'
	$labelOS.Name = 'labelOS'
	$labelOS.Size = '88, 17'
	$labelOS.TabIndex = 18
	$labelOS.Text = 'Template Name:'
	$labelOS.UseCompatibleTextRendering = $True
	#
	# labelTemplate
	#
	$labelTemplate.AutoSize = $True
	$labelTemplate.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelTemplate.Location = '12, 7'
	$labelTemplate.Name = 'labelTemplate'
	$labelTemplate.Size = '225, 17'
	$labelTemplate.TabIndex = 0
	$labelTemplate.Text = 'Template and Operating System Selection'
	$labelTemplate.UseCompatibleTextRendering = $True
	#
	# textboxVMName
	#
	$textboxVMName.Location = '139, 20'
	$textboxVMName.Name = 'textboxVMName'
	$textboxVMName.Size = '133, 20'
	$textboxVMName.TabIndex = 1
	$textboxVMName.WordWrap = $False
	#
	# labelVirtualMachineName
	#
	$labelVirtualMachineName.AutoSize = $True
	$labelVirtualMachineName.Location = '13, 20'
	$labelVirtualMachineName.Name = 'labelVirtualMachineName'
	$labelVirtualMachineName.Size = '119, 17'
	$labelVirtualMachineName.TabIndex = 0
	$labelVirtualMachineName.Text = 'Virtual Machine Name:'
	$labelVirtualMachineName.UseCompatibleTextRendering = $True
	#
	# panelCompute
	#
	$panelCompute.Controls.Add($comboboxCoresPerSocket)
	$panelCompute.Controls.Add($labelCoresPerSocket)
	$panelCompute.Controls.Add($labelCompute)
	$panelCompute.Controls.Add($labelMemoryGB)
	$panelCompute.Controls.Add($comboboxMemory)
	$panelCompute.Controls.Add($labelNumberOfVCPUSockets)
	$panelCompute.Controls.Add($comboboxCPU)
	$panelCompute.BorderStyle = 'Fixed3D'
	$panelCompute.Location = '13, 46'
	$panelCompute.Name = 'panelCompute'
	$panelCompute.Size = '238, 114'
	$panelCompute.TabIndex = 1
	#
	# comboboxCoresPerSocket
	#
	$comboboxCoresPerSocket.FormattingEnabled = $True
	[void]$comboboxCoresPerSocket.Items.Add('1')
	[void]$comboboxCoresPerSocket.Items.Add('2')
	[void]$comboboxCoresPerSocket.Items.Add('4')
	$comboboxCoresPerSocket.Location = '162, 60'
	$comboboxCoresPerSocket.Name = 'comboboxCoresPerSocket'
	$comboboxCoresPerSocket.Size = '53, 21'
	$comboboxCoresPerSocket.TabIndex = 4
	#
	# labelCoresPerSocket
	#
	$labelCoresPerSocket.AutoSize = $True
	$labelCoresPerSocket.Location = '10, 61'
	$labelCoresPerSocket.Name = 'labelCoresPerSocket'
	$labelCoresPerSocket.Size = '95, 17'
	$labelCoresPerSocket.TabIndex = 6
	$labelCoresPerSocket.Text = 'Cores per Socket:'
	$labelCoresPerSocket.UseCompatibleTextRendering = $True
	#
	# labelCompute
	#
	$labelCompute.AutoSize = $True
	$labelCompute.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelCompute.Location = '9, 14'
	$labelCompute.Name = 'labelCompute'
	$labelCompute.Size = '125, 17'
	$labelCompute.TabIndex = 0
	$labelCompute.Text = 'Compute Configuration'
	$labelCompute.UseCompatibleTextRendering = $True
	#
	# labelMemoryGB
	#
	$labelMemoryGB.AutoSize = $True
	$labelMemoryGB.Location = '10, 88'
	$labelMemoryGB.Name = 'labelMemoryGB'
	$labelMemoryGB.Size = '75, 17'
	$labelMemoryGB.TabIndex = 0
	$labelMemoryGB.Text = 'Memory (GB):'
	$labelMemoryGB.UseCompatibleTextRendering = $True
	#
	# comboboxMemory
	#
	$comboboxMemory.FormatString = 'N2'
	$comboboxMemory.FormattingEnabled = $True
	[void]$comboboxMemory.Items.Add('1')
	[void]$comboboxMemory.Items.Add('2')
	[void]$comboboxMemory.Items.Add('4')
	[void]$comboboxMemory.Items.Add('8')
	[void]$comboboxMemory.Items.Add('16')
	[void]$comboboxMemory.Items.Add('32')
	[void]$comboboxMemory.Items.Add('64')
	$comboboxMemory.Location = '137, 86'
	$comboboxMemory.Name = 'comboboxMemory'
	$comboboxMemory.Size = '77, 21'
	$comboboxMemory.TabIndex = 5
	#
	# labelNumberOfVCPUSockets
	#
	$labelNumberOfVCPUSockets.AutoSize = $True
	$labelNumberOfVCPUSockets.Location = '9, 37'
	$labelNumberOfVCPUSockets.Name = 'labelNumberOfVCPUSockets'
	$labelNumberOfVCPUSockets.Size = '136, 17'
	$labelNumberOfVCPUSockets.TabIndex = 0
	$labelNumberOfVCPUSockets.Text = 'Number of vCPU Sockets:'
	$labelNumberOfVCPUSockets.UseCompatibleTextRendering = $True
	#
	# comboboxCPU
	#
	$comboboxCPU.FormattingEnabled = $True
	[void]$comboboxCPU.Items.Add('1')
	[void]$comboboxCPU.Items.Add('2')
	[void]$comboboxCPU.Items.Add('4')
	$comboboxCPU.Location = '162, 33'
	$comboboxCPU.Name = 'comboboxCPU'
	$comboboxCPU.Size = '53, 21'
	$comboboxCPU.TabIndex = 3
	#
	# panel1
	#
	$panel1.Controls.Add($labelVMLocation)
	$panel1.Controls.Add($labelDatastore)
	$panel1.Controls.Add($textboxDatastore)
	$panel1.Controls.Add($buttonSelectDatastore)
	$panel1.BorderStyle = 'Fixed3D'
	$panel1.Location = '13, 173'
	$panel1.Name = 'panel1'
	$panel1.Size = '229, 87'
	$panel1.TabIndex = 3
	#
	# labelVMLocation
	#
	$labelVMLocation.AutoSize = $True
	$labelVMLocation.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelVMLocation.Location = '4, 5'
	$labelVMLocation.Name = 'labelVMLocation'
	$labelVMLocation.Size = '123, 17'
	$labelVMLocation.TabIndex = 0
	$labelVMLocation.Text = 'VM Datastore Location'
	$labelVMLocation.UseCompatibleTextRendering = $True
	#
	# labelDatastore
	#
	$labelDatastore.AutoSize = $True
	$labelDatastore.Location = '5, 34'
	$labelDatastore.Name = 'labelDatastore'
	$labelDatastore.Size = '56, 17'
	$labelDatastore.TabIndex = 0
	$labelDatastore.Text = 'Datastore:'
	$labelDatastore.UseCompatibleTextRendering = $True
	#
	# textboxDatastore
	#
	$textboxDatastore.Enabled = $False
	$textboxDatastore.Location = '68, 32'
	$textboxDatastore.Name = 'textboxDatastore'
	$textboxDatastore.ReadOnly = $True
	$textboxDatastore.Size = '142, 20'
	$textboxDatastore.TabIndex = 0
	$textboxDatastore.TabStop = $False
	#
	# buttonSelectDatastore
	#
	$buttonSelectDatastore.Enabled = $False
	$buttonSelectDatastore.Location = '92, 58'
	$buttonSelectDatastore.Name = 'buttonSelectDatastore'
	$buttonSelectDatastore.Size = '118, 23'
	$buttonSelectDatastore.TabIndex = 14
	$buttonSelectDatastore.Text = 'Select Datastore...'
	$buttonSelectDatastore.UseCompatibleTextRendering = $True
	$buttonSelectDatastore.UseVisualStyleBackColor = $True
	$buttonSelectDatastore.add_Click($buttonSelectDatastore_Click)
	#
	# label1
	#
	$label1.Location = '493, 20'
	$label1.Name = 'label1'
	$label1.Size = '35, 17'
	$label1.TabIndex = 0
	$label1.Text = 'label1'
	$label1.UseCompatibleTextRendering = $True
	$panel1.ResumeLayout()
	$panelCompute.ResumeLayout()
	$panel2.ResumeLayout()
	$panel3.ResumeLayout()
	$panel5.ResumeLayout()
	$formAddVM.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formAddVM.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formAddVM.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formAddVM.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formAddVM.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formAddVM.ShowDialog()

}
#endregion Source: AddVMForm.psf

#region Source: SelectDatastore.psf
function Show-SelectDatastore_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
XAQAACODCAAAAAAABABllFmLq1oQhd8F/0NzXoVjHKPQp8E4x9kYjb45bnfiFDUO/etvTt+XC7ee
imItqGLx1adf5v1SjruUzunHu5lg3/35Rf0mfn2hyMfHpzNCALu0UWBT2mlbfl3Kpsznv/Jp7sfy
9zBVn/j/VD9epR/brwT6PMEJmwV6QRAdSRT+rZMgEuGVcMmD4C1h9ayIO3M4WwpzfvXwEq694gsw
0a/3tr5LXBvxEXt4rVl+47ENRQiyFRxX2T29nZwzTXFU1n5XLkgWWtOfjjQSnK4WIItHPZRMYhjA
4XGiCmtzz4nGbGZTwDFg+xIrvQhFGjW5SPak+XinnUnNCNIBGKJAwM6o7rbFJLzcJJLLiKpOH/Gw
P2PDQcWJSKVZB9to37Y0Q2LqRaz3AUXuBqzJB1C0vo3uVm5cQ7qvQ/WSshy4Z4F2eTJCm+5yx/pq
AF0jzr2LLD0ayaHYwZZTzWAklpVuFogXFHGswpgT6Fnbqd0XGvaam/OPdiTZVbmFDhEbBghvzKhn
+MqCa7i8UwgAESZwJSwemOYKffMJti3K3pd2JK2aXGxmcrQPWJDIZDxaYXnZhtA64lYHOAsWgJwI
YnVwVokrawFY4RAK6WwnPzmurYmX5cxzz9lDEbmsdizLVTuxujx4LwhBsy8hSeJ/Uwfv1DEZkmBo
/MpirL4beD2G5cyePFw9bw4ZqUe35HKnPw8SiuyFLbOaHqhO7pDilFwvr92vrVvWTa5xj08nLpqC
eXfTW1mXTexwQudhcrZK7utxHQrW0T1zMyQ9G5oWRfL1+AqlynO2NEsKJiH5M9FRmhcYHP19EV4C
T+7f8HRqdNWWxkoyoVC96vIwPw8uwBaTNDvgyVM4nLc7iiTVaxH5PY3ripput2uxShbr7h10NEXc
nw3HDw/vJXHRM079WqdUXlR6rigeI1zE7jh6GPatYAbF7VBAEbt6jCvPMVSqEk5X3Z0DsVVc1EU8
yxmaS67TqmXp8dCON/t1Gq0NBinu08+eb76pBdhhVBF80GNpmBkoUrEVqcKjv92W7Xia7XDGC9YQ
h/r7nNCF4oOg4YSmdqxMWWeoWKBig+udJtS4CNQ7CTnheaRoBdfJdkQRWj6YR2yWsdfQ4qGl4av4
xjbNf/gV/vz5xH+w/gFcmKayzRpYTh/4e/KJ//ebfP0DxRCgpFwEAAA=#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formSelectDatastore = New-Object 'System.Windows.Forms.Form'
	$datagridviewDatastores = New-Object 'System.Windows.Forms.DataGridView'
	$buttonExit = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	#region Control Helper Functions
	function Update-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The DataGridView control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the DataGridView's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		.PARAMETER AutoSizeColumns
		    Resizes DataGridView control's columns after loading the items.
		#>
		Param (
				[ValidateNotNull()]
				[Parameter(Mandatory = $true)]
				[System.Windows.Forms.DataGridView]$DataGridView,
				[ValidateNotNull()]
				[Parameter(Mandatory = $true)]
				$Item,
				[Parameter(Mandatory = $false)]
				[string]$DataMember,
				[System.Windows.Forms.DataGridViewAutoSizeColumnMode]$AutoSizeColumns = 'None'
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
		{
			$DataGridView.DataSource = $Item.Tables[0]
		}
		elseif ($Item -is [System.ComponentModel.IListSource]`
				-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView])
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{
				$array.Add($Item)
			}
			$DataGridView.DataSource = $array
		}
		
		if ($AutoSizeColumns -ne 'None')
		{
			$DataGridView.AutoResizeColumns($AutoSizeColumns)
		}
		
		$DataGridView.ResumeLayout()
	}
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterWMIProperties
				This switch removes WMI properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param (
				[ValidateNotNull()]
				$InputObject,
				[ValidateNotNull()]
				[System.Data.DataTable]$Table,
				[switch]$RetainColumns,
				[switch]$FilterWMIProperties)
		
		if ($null -eq $Table)
		{
			$Table = New-Object System.Data.DataTable
		}
		
		if ($InputObject -is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
		{
			$Table = $InputObject.Tables[0]
		}
		else
		{
			if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
				
				if ($null -eq $InputObject) { return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach ($item in $InputObject)
				{
					if ($null -ne $item)
					{
						$object = $item
						break
					}
				}
				
				if ($null -eq $object) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if ($null -ne $prop.Value)
						{
							try { $type = $prop.Value.GetType() }
							catch { Out-Null }
						}
						
						if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
							[void]$table.Columns.Add($prop.Name, $type)
						}
						else #Type info not found
						{
							[void]$table.Columns.Add($prop.Name)
						}
					}
				}
				
				if ($object -is [System.Data.DataRow])
				{
					foreach ($item in $InputObject)
					{
						$Table.Rows.Add($item)
					}
					return @( ,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()
			}
			
			foreach ($item in $InputObject)
			{
				$row = $table.NewRow()
				
				if ($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if ($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
		
		return @( ,$Table)
	}
	#endregion
	
	$formSelectDatastore_Load = {
		
		$dsList = @()
		
		$drsText = "DRS host automatically selected"
		
		if ($comboboxVMHost.Text -eq $drsText)
		{
			$tmpHost = (Get-Cluster $comboboxClusters.Text | Get-VMHost | Sort-Object | select -First 1)
			$datastores = Get-Datastore -Host $tmpHost -Server $global:vcenterConnection.Name | ?{ $_.State -eq 'Available' } | select Name, FreeSpaceGB, CapacityGB | Sort-Object -Property Name
		}
		else
		{
			$datastores = Get-Datastore -Host $comboboxVMHost.SelectedItem -Server $global:vcenterConnection.Name | ?{ $_.State -eq 'Available' } | select Name, FreeSpaceGB, CapacityGB | Sort-Object -Property Name
		}
		
		foreach ($ds in $datastores)
		{
			$object = New-Object PSObject
			$object | Add-Member -MemberType NoteProperty -Name Name -Value $ds.Name
			$object | Add-Member -MemberType NoteProperty -Name FreeSpaceGB -Value ([math]::Round(($ds.FreeSpaceGB), 2))
			$object | Add-Member -MemberType NoteProperty -Name CapacityGB -Value ([math]::Round(($ds.CapacityGB), 2))
				
			$dsList = $dsList + $object		
		}
		
		$table = ConvertTo-DataTable -InputObject $dsList
		
		Update-DataGridView -DataGridView $datagridviewDatastores -Item $table -AutoSizeColumns DisplayedCells
		
		foreach ($row in $datagridviewDatastores.Rows)
		{
			$percentFree = (($row.Cells[1].Value)/($row.Cells[2].Value) * 100)
			
			if ($percentFree -lt 10)
			{
				$row.DefaultCellStyle.BackColor = 'Red'
			}
			elseif (($percentFree -lt 20) -and ($percentFree -gt 10))
			{
				$row.DefaultCellStyle.BackColor = 'Yellow'
			}
		}
		
	}
	
	$buttonExit_Click={
		#TODO: Place custom script here
		$formSelectDatastore.Close()
	}
	
	$buttonLoad_Click= {
		#TODO: Place custom script here
		#	---------------------------------
		#	Sample Code to Load Grid
		#	---------------------------------
		#	$processes = Get-WmiObject Win32_Process -Namespace "Root\CIMV2"
		#	Update-DataGridView -DataGridView $datagridviewResults -Item $processes -AutoSizeColumns DisplayedCells
		#	---------------------------------
		#	Sample Code to Load Sortable Data
		#	---------------------------------
		# 	$processes = Get-WmiObject Win32_Process -Namespace "Root\CIMV2"
		#	$table = ConvertTo-DataTable -InputObject $processes -FilterWMIProperties
		#	Update-DataGridView -DataGridView $datagridviewResults -Item $table -AutoSizeColumns DisplayedCells
		
	
		
	}
	
	$datagridviewDatastores_ColumnHeaderMouseClick=[System.Windows.Forms.DataGridViewCellMouseEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellMouseEventArgs]
		if($datagridviewDatastores.DataSource -is [System.Data.DataTable])
		{
			$column = $datagridviewDatastores.Columns[$_.ColumnIndex]
			$direction = [System.ComponentModel.ListSortDirection]::Ascending
			
			if($column.HeaderCell.SortGlyphDirection -eq 'Descending')
			{
				$direction = [System.ComponentModel.ListSortDirection]::Descending
			}
	
			$datagridviewDatastores.Sort($datagridviewDatastores.Columns[$_.ColumnIndex], $direction)
		}
	}
	
	$datagridviewDatastores_CellMouseDoubleClick=[System.Windows.Forms.DataGridViewCellMouseEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellMouseEventArgs]
		
		$drsText = "DRS host automatically selected"
		
		if ($comboboxVMHost.Text -eq $drsText)
		{
			$tmpHost = (Get-Cluster $comboboxClusters.Text | Get-VMHost | Sort-Object | select -First 1)
			$dsCluster = Get-Datastore -Host $tmpHost -Server $global:vcenterConnection.Name -Name $datagridviewDatastores.CurrentRow.Cells[0].Value | Get-DatastoreCluster
		}
		else
		{
			$dsCluster = Get-Datastore -Host $comboboxVMHost.SelectedItem -Server $global:vcenterConnection.Name -Name $datagridviewDatastores.CurrentRow.Cells[0].Value | Get-DatastoreCluster
		}
		
		if ($dsCluster)
		{
			if ($dsCluster.SdrsAutomationLevel -ne "Disabled")
			{
				$textboxDatastore.Text = $dsCluster.Name
			}
			else
			{
				$textboxDatastore.Text = $datagridviewDatastores.CurrentRow.Cells[0].Value
			}
		}
		else
		{
			$textboxDatastore.Text = $datagridviewDatastores.CurrentRow.Cells[0].Value
		}
		
		$buttonSelectTemplate.Enabled = $true
		
		$formSelectDatastore.Close()
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formSelectDatastore.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:SelectDatastore_datagridviewDatastores = $datagridviewDatastores.SelectedCells
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$datagridviewDatastores.remove_CellMouseDoubleClick($datagridviewDatastores_CellMouseDoubleClick)
			$datagridviewDatastores.remove_ColumnHeaderMouseClick($datagridviewDatastores_ColumnHeaderMouseClick)
			$buttonExit.remove_Click($buttonExit_Click)
			$formSelectDatastore.remove_Load($formSelectDatastore_Load)
			$formSelectDatastore.remove_Load($Form_StateCorrection_Load)
			$formSelectDatastore.remove_Closing($Form_StoreValues_Closing)
			$formSelectDatastore.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formSelectDatastore.SuspendLayout()
	#
	# formSelectDatastore
	#
	$formSelectDatastore.Controls.Add($datagridviewDatastores)
	$formSelectDatastore.Controls.Add($buttonExit)
	$formSelectDatastore.AutoScaleDimensions = '6, 13'
	$formSelectDatastore.AutoScaleMode = 'Font'
	$formSelectDatastore.ClientSize = '584, 362'
	$formSelectDatastore.Margin = '6, 6, 6, 6'
	$formSelectDatastore.Name = 'formSelectDatastore'
	$formSelectDatastore.StartPosition = 'CenterParent'
	$formSelectDatastore.Text = 'Select Datastore'
	$formSelectDatastore.add_Load($formSelectDatastore_Load)
	#
	# datagridviewDatastores
	#
	$datagridviewDatastores.AllowUserToAddRows = $False
	$datagridviewDatastores.AllowUserToDeleteRows = $False
	$datagridviewDatastores.Anchor = 'Top, Bottom, Left, Right'
	$datagridviewDatastores.AutoSizeColumnsMode = 'Fill'
	$datagridviewDatastores.Location = '12, 12'
	$datagridviewDatastores.MultiSelect = $False
	$datagridviewDatastores.Name = 'datagridviewDatastores'
	$datagridviewDatastores.ReadOnly = $True
	$datagridviewDatastores.RowHeadersVisible = $False
	$datagridviewDatastores.RowHeadersWidthSizeMode = 'AutoSizeToDisplayedHeaders'
	$datagridviewDatastores.RowTemplate.Height = 33
	$datagridviewDatastores.SelectionMode = 'FullRowSelect'
	$datagridviewDatastores.Size = '560, 309'
	$datagridviewDatastores.TabIndex = 2
	$datagridviewDatastores.add_CellMouseDoubleClick($datagridviewDatastores_CellMouseDoubleClick)
	$datagridviewDatastores.add_ColumnHeaderMouseClick($datagridviewDatastores_ColumnHeaderMouseClick)
	#
	# buttonExit
	#
	$buttonExit.Anchor = 'Bottom, Right'
	$buttonExit.Location = '497, 327'
	$buttonExit.Name = 'buttonExit'
	$buttonExit.Size = '75, 23'
	$buttonExit.TabIndex = 1
	$buttonExit.Text = 'E&xit'
	$buttonExit.UseCompatibleTextRendering = $True
	$buttonExit.UseVisualStyleBackColor = $True
	$buttonExit.add_Click($buttonExit_Click)
	$formSelectDatastore.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formSelectDatastore.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formSelectDatastore.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formSelectDatastore.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formSelectDatastore.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formSelectDatastore.ShowDialog()

}
#endregion Source: SelectDatastore.psf

#region Source: Functions\Get-FolderByPath.ps1
function Invoke-Get-FolderByPath_ps1
{
	<#	
		.NOTES
		===========================================================================
		 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2018 v5.5.150
		 Created on:   	6/17/2019 9:54 AM
		 Created by:   	dalthakar
		 Organization: 	
		 Filename:     	Get-FolderByPath.ps1
		===========================================================================
		.DESCRIPTION
			This function was originally created by LucD and downloaded from http://www.lucd.info/2012/05/18/folder-by-path/.
			Retrieve folders by giving a path .DESCRIPTION The function will retrieve a folder by it's path. 
			The path can contain any type of leave (folder or datacenter). .NOTES Author: Luc Dekens .PARAMETER Path The path to the folder. This is a required parameter. .PARAMETER Path The path to the folder. This is a required parameter. .PARAMETER Separator The character that is used to separate the leaves in the path. The default is '/' .EXAMPLE PS> Get-FolderByPath -Path "Folder1/Datacenter/Folder2"
		
		.EXAMPLE
		  PS> Get-FolderByPath -Path "Folder1>Folder2" -Separator '>'
	#>
	
	function Get-FolderByPath
	{
	  	param (
			[CmdletBinding()]
			[parameter(Mandatory = $true)]
			[System.String[]]${Path},
			[char]${Separator} = '/'
		)
		
		process
		{
			if ((Get-PowerCLIConfiguration).DefaultVIServerMode -eq "Multiple")
			{
				$vcs = $defaultVIServers
			}
			else
			{
				$vcs = $defaultVIServers[0]
			}
			
			foreach ($vc in $vcs)
			{
				foreach ($strPath in $Path)
				{
					$root = Get-Folder -Name Datacenters -Server $vc
					$strPath.Split($Separator) | %{
						$root = Get-Inventory -Name $_ -Location $root -Server $vc -NoRecursion
						if ((Get-Inventory -Location $root -NoRecursion | Select -ExpandProperty Name) -contains "vm")
						{
							$root = Get-Inventory -Name "vm" -Location $root -Server $vc -NoRecursion
						}
					}
					$root | where { $_ -is [VMware.VimAutomation.ViCore.Impl.V1.Inventory.FolderImpl] } | %{
						Get-Folder -Name $_.Name -Location $root.Parent -NoRecursion -Server $vc
					}
				}
			}
		}
	}
}
#endregion Source: Get-FolderByPath.ps1

#region Source: WindowsRoles.psf
function Show-WindowsRoles_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
0QMAACODCAAAAAAABABlk0mPo0gUhO+W/B9KfbXUCZjFlqpLSvbVBpvF+AYmbVYDiYHEv75rai4j
zTuFniKkkELf5wnd2gnhRU5eyce3GIr2+efX9jf962u9+vj4POLiUTyTWi1qdEga9BUVz6ydh1Nb
o+F3N9w/wf8sP0G1xc0X8YoLvRjg4D0glI6yBP89EUp0HYwuU0KPbDbhJmcGXe8tZB+h1CnRq3rg
7DFI53aHCVep6i7TXtixN5tKWK/QWfQgRbFYgadwjLcy2D/zSQjA7DraCLBK2Twf6/E8s9p7NB+2
cQ639KzxLzogVa/zmVPXNM9d4SVZr25SoOOgfQGcVyqs0uSUG4W1NHMRvRcR3XwkzaE6elAAfhtt
o6mftk3BtNllOFa+rywWaG3g7MW8/+7mQC7XFlYqr947eJm9GS++adDdW/CTR5rosr1/yvqV0dQG
cwdFwyidpeHxXpz3jmiQvwUlzVs5v9f9w3c3xg8ftSLK71nRTsg+ZwvXHdihfPMYimQq5SBwClf0
slYFlPSgo0boDpdWrSyiKcca7qGNiEgsm9fXK9ZQ/TZL1J3shsnC+w02JynyXY8ipHfjuJhb+Z/F
Xt+L7VDNqqQvK5XE/Ug7WsRxW8iWk6rttD4W16urpAm5TdMTjAwk4ebcwjzsVD05z6FRAYAU96nd
+yrRIWGvd9ZPNwkjCiKL6zTGLJbHzd19DhEU6Hy9ah0CgskH+biXaIaHaagmnL3U5WQnXKc8SfTo
fcHtqirZ8AlLEysczjv5ej5csN00TFRE0LwH96snx+sVnqKdcAiDaTKLrp86ig92dpqnnD1eUutI
sTMVUrjE3HbZL8mmd81sbOQqfh9S0nVuej3umSDu0L2l0XqlAC6OmIaw4HK1ji4w9ehV6tFipMLp
5qJ9KFtANkgwOsfl7inEhTenw/WtJmyU2Xph9kbBoL284Lhcr8zIVvGkP5P5CYJXyWQ6NS335p5e
fPRmkM5SoATeJUZGbv1wA//8+QQ/OP2ABYcBNWldoOEDfH8+wX8R/voLX695n9EDAAA=#>
#endregion
param
(
	[Parameter(Mandatory = $true)]
	[string]$VMName
)

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formWindowsFeatures = New-Object 'System.Windows.Forms.Form'
	$treeviewWindowsRoles = New-Object 'System.Windows.Forms.TreeView'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	
	$formWindowsFeatures_Load={
		
		$treeviewWindowsRoles.BeginUpdate()
		
		$osVersion = $global:vmOS | ?{ $_.VMName -eq $VMName }
		
		if ($osVersion.OS -eq "Server2012R2")
		{
			$import = Import-Csv "$ScriptDirectory\rolesandfeatures\Server2012R2Features.csv"
			$formWindowsFeatures.Text = "Select Roles to install for Server 2012 R2"
		}
		elseif ($osVersion.OS -eq "Server2016")
		{
			$import = Import-Csv "$ScriptDirectory\rolesandfeatures\Server2016Features.csv"
			$formWindowsFeatures.Text = "Select Roles to install for Server 2016"
		}
		elseif ($osVersion.OS -eq "Server2019")
		{
			$import = Import-Csv "$ScriptDirectory\rolesandfeatures\Server2019Features.csv"
			$formWindowsFeatures.Text = "Select Roles to install for Server 2019"
		}
		
		$roleParents = $import | ?{ $_.FeatureType -eq "Role" }
		$roleServices = $import | ?{ $_.FeatureType -eq "Role Service" }
		#$features = $import | ?{ $_.FeatureType -eq "Feature" }
		$previousSelectedRoles = $global:vmRoles | ?{ $_.VMName -eq $VMName }
		
		$indexCounter = 0
		
		foreach ($role in $roleParents)
		{
			$parentNode = $treeviewWindowsRoles.Nodes.Add($role.DisplayName)
			$parentNode.Name = $role.Name
			$parentNode.Tag = $role.Name
			$parentNode.ToolTipText = $role.Description
			if ($role.Name -in $previousSelectedRoles.Roles) {$parentNode.Checked = $true }
			
		}
		
		$treeviewWindowsRoles.ExpandAll()
		$treeviewWindowsRoles.EndUpdate()
		
	}
	
	#region Control Helper Functions
	function Get-CheckedNode
	{
	<#
		.SYNOPSIS
			This function collects a list of checked nodes in a TreeView
	
		.DESCRIPTION
			This function collects a list of checked nodes in a TreeView
	
		.PARAMETER  $NodeCollection
			The collection of nodes to search
	
		.PARAMETER  $CheckedNodes
			The ArrayList that will contain the all the checked items
		
		.EXAMPLE
			$CheckedNodes = New-Object System.Collections.ArrayList
			Get-CheckedNode $treeview1.Nodes $CheckedNodes
			foreach($node in $CheckedNodes)
			{	
				Write-Host $node.Text
			}
	#>
		param (
				[ValidateNotNull()]
				[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
				[ValidateNotNull()]
				[System.Collections.ArrayList]$CheckedNodes
		)
		
		foreach ($Node in $NodeCollection)
		{
			if ($Node.Checked)
			{
				[void]$CheckedNodes.Add($Node)
			}
			Get-CheckedNode $Node.Nodes $CheckedNodes
		}
	}
	
	#endregion
	
	$buttonOK_Click={
		
		$tmpRoleArray = @()
		
		foreach ($node in $treeviewWindowsRoles.Nodes)
		{
			if ($node.Checked) { $tmpRoleArray += $node }
		}
		
		$roleObject = New-Object PSObject
		
		$roleObject | Add-Member -Type NoteProperty -Name "VMName" -Value $VMName
		$roleObject | Add-Member -Type NoteProperty -Name "Roles" -Value $tmpRoleArray.Name
		
		$global:vmRoles = $global:vmRoles | ?{ $_.VMName -ne $VMName }
		
		$global:vmRoles = [System.Array]$global:vmRoles + $roleObject
		
		$global:vmRoles | Out-File "$logDirectory\roles.log"
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formWindowsFeatures.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		if($treeviewWindowsRoles.SelectedNode -ne $null)
		{
			$script:WindowsRoles_treeviewWindowsRoles = $treeviewWindowsRoles.SelectedNode.Text
		}
		else
		{
			$script:WindowsRoles_treeviewWindowsRoles = $null
		}
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonOK.remove_Click($buttonOK_Click)
			$formWindowsFeatures.remove_Load($formWindowsFeatures_Load)
			$formWindowsFeatures.remove_Load($Form_StateCorrection_Load)
			$formWindowsFeatures.remove_Closing($Form_StoreValues_Closing)
			$formWindowsFeatures.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formWindowsFeatures.SuspendLayout()
	#
	# formWindowsFeatures
	#
	$formWindowsFeatures.Controls.Add($treeviewWindowsRoles)
	$formWindowsFeatures.Controls.Add($buttonOK)
	$formWindowsFeatures.AcceptButton = $buttonOK
	$formWindowsFeatures.AutoScaleDimensions = '6, 13'
	$formWindowsFeatures.AutoScaleMode = 'Font'
	$formWindowsFeatures.ClientSize = '475, 428'
	$formWindowsFeatures.FormBorderStyle = 'FixedDialog'
	$formWindowsFeatures.Margin = '6, 6, 6, 6'
	$formWindowsFeatures.MaximizeBox = $False
	$formWindowsFeatures.MinimizeBox = $False
	$formWindowsFeatures.Name = 'formWindowsFeatures'
	$formWindowsFeatures.StartPosition = 'CenterScreen'
	$formWindowsFeatures.Text = 'Select Roles to Install'
	$formWindowsFeatures.add_Load($formWindowsFeatures_Load)
	#
	# treeviewWindowsRoles
	#
	$treeviewWindowsRoles.CheckBoxes = $True
	$treeviewWindowsRoles.Location = '33, 26'
	$treeviewWindowsRoles.Name = 'treeviewWindowsRoles'
	$treeviewWindowsRoles.Size = '411, 344'
	$treeviewWindowsRoles.TabIndex = 1
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Location = '388, 393'
	$buttonOK.Name = 'buttonOK'
	$buttonOK.Size = '75, 23'
	$buttonOK.TabIndex = 0
	$buttonOK.Text = '&OK'
	$buttonOK.UseCompatibleTextRendering = $True
	$buttonOK.UseVisualStyleBackColor = $True
	$buttonOK.add_Click($buttonOK_Click)
	$formWindowsFeatures.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formWindowsFeatures.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formWindowsFeatures.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formWindowsFeatures.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formWindowsFeatures.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formWindowsFeatures.ShowDialog()

}
#endregion Source: WindowsRoles.psf

#region Source: GetAdminPassword.psf
function Show-GetAdminPassword_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
WQQAACODCAAAAAAABABllMmOo1gQRfdI/EOqtkiFGQxYykoJMDMGzGizY54fMxh/fWVnb1rqWIVC
966OTnzaWdJv2XRcoyX6+F7mqgd/fhG/sV9fMPTx8WlOVVGBqBWrNjOiLvuSsoVNuwpY0Tzv/ZT+
Hub8E/1f7Kcs9lP39ejLEvMvL4udWZY3rzz773Asj7UttuE165UrA2j38lzTWhT1QGgLNa581/GH
ofd3Z16pPTm/HMasowPYDxyGKCJzDH6JC7VURaeoyOkNDhKx8gf5QHeuc/MakR0ZnO/rizq822aC
KBAqawNmOErpO9WwU1CfL/N62mAIXI6r0b7VPWttDUVJ9TYKb/d+UyU78BDJTeyn/m6iHYwNaBST
xCkvxepGR6oMnMwJsxx1qAYhP6WMB0O0EDjJ3BjOSDhPfLzZl4qvTk6NKau3iL1KvoLwiZzrKYwK
Op/E1+7Xs+5e32Lfaq/11M1s3as0V2FtAkOScRiWrCamO66WSRxAbLDQd1nVu3Dn0q+FLkF4j06G
OBlZB2FeZR8ZoVwoJu6hJ5VbLw/ZNDGkP8ochppIdvisGh7PmRHFC5fM3eBZhsQ4hJ8clN61FHId
FN99y2LvD6XO9zdDWPb4jnj5LQAiQlU9JiCL78YwNLt6wgyHyhurhgZCdL+GY0jzxz/Mj2/mjk2T
kr2k6YVnWkLLAwuP4yPTk0DDtFLbmAUn2mzyiaOUYOigQixPtYGk+bhPWBB79wDsVJUAnBiyuZia
o+ZSP0MMkfMyauiN/EqLvXmpb1F+FlRFO8cVDajK4xYYIhVNPa5Ng+8LhessaR1UkyOh5TxJ2n4n
J26TO1FpmKMNkDCnrD7QcdHGcyo6EOy1Fjwxyvc0GXvZCGEIszUqAw+T1f1Y4kEvF/adlNS0Vg+G
R7S8fxqgY8b74ky+u9PZVnaKr09CPT/5ZEncXbyfWvSW8oRCwlCJ+CWCPIutpEMOEQDu6eWTK0bf
vPnhrIMKncrgkvkh8hSuUjyVj6TmmM4fjLoOjWxYevTUK4Q7A3SEoVoifB5Pn+vrlKRboB/1OQBe
WO9ZL3cViZqH/74pWPxIX+8GE21C5qX2ionOep82YUXNEH15c5A9lo2AIU9/b11yi/WLbwkoKSXF
OVGuu/6t7J9P9EfpH7nZec66uK2y+QP9vnyi/30lX38BpBwc3FkEAAA=#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formSetAdministratorPass = New-Object 'System.Windows.Forms.Form'
	$textboxAdminPassword = New-Object 'System.Windows.Forms.TextBox'
	$labelEnterPassword = New-Object 'System.Windows.Forms.Label'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formSetAdministratorPass_Load={
		
		if ($global:vmAdminPasswords) { $textboxAdminPassword.Text = $global:vmAdminPasswords }
		
	}
	$buttonOK_Click={
		
		
		$global:vmAdminPasswords = $textboxAdminPassword.Text
		
		$global:vmAdminPasswords | Out-File "$logDirectory\pws.log"
		
		$labelOK2.Visible = $true
		
		Update-NavButtons
		
	}
	
	$textboxAdminPassword_TextChanged={
		
		if ($textboxAdminPassword.Text.Length -gt 8) { $buttonOK.Enabled = $true }
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formSetAdministratorPass.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:GetAdminPassword_textboxAdminPassword = $textboxAdminPassword.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$textboxAdminPassword.remove_TextChanged($textboxAdminPassword_TextChanged)
			$buttonOK.remove_Click($buttonOK_Click)
			$formSetAdministratorPass.remove_Load($Form_StateCorrection_Load)
			$formSetAdministratorPass.remove_Closing($Form_StoreValues_Closing)
			$formSetAdministratorPass.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formSetAdministratorPass.SuspendLayout()
	#
	# formSetAdministratorPass
	#
	$formSetAdministratorPass.Controls.Add($textboxAdminPassword)
	$formSetAdministratorPass.Controls.Add($labelEnterPassword)
	$formSetAdministratorPass.Controls.Add($buttonOK)
	$formSetAdministratorPass.AcceptButton = $buttonOK
	$formSetAdministratorPass.AutoScaleDimensions = '6, 13'
	$formSetAdministratorPass.AutoScaleMode = 'Font'
	$formSetAdministratorPass.ClientSize = '209, 129'
	$formSetAdministratorPass.FormBorderStyle = 'FixedDialog'
	$formSetAdministratorPass.Margin = '6, 6, 6, 6'
	$formSetAdministratorPass.MaximizeBox = $False
	$formSetAdministratorPass.MinimizeBox = $False
	$formSetAdministratorPass.Name = 'formSetAdministratorPass'
	$formSetAdministratorPass.StartPosition = 'CenterScreen'
	$formSetAdministratorPass.Text = 'Set Administrator Password'
	#
	# textboxAdminPassword
	#
	$textboxAdminPassword.Location = '7, 56'
	$textboxAdminPassword.Margin = '1, 2, 1, 2'
	$textboxAdminPassword.Name = 'textboxAdminPassword'
	$textboxAdminPassword.PasswordChar = '*'
	$textboxAdminPassword.Size = '188, 20'
	$textboxAdminPassword.TabIndex = 2
	$textboxAdminPassword.add_TextChanged($textboxAdminPassword_TextChanged)
	#
	# labelEnterPassword
	#
	$labelEnterPassword.AutoSize = $True
	$labelEnterPassword.Location = '7, 18'
	$labelEnterPassword.Margin = '1, 0, 1, 0'
	$labelEnterPassword.Name = 'labelEnterPassword'
	$labelEnterPassword.Size = '201, 17'
	$labelEnterPassword.TabIndex = 1
	$labelEnterPassword.Text = 'Local Administrator Account Password:'
	$labelEnterPassword.UseCompatibleTextRendering = $True
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Enabled = $False
	$buttonOK.Location = '122, 94'
	$buttonOK.Name = 'buttonOK'
	$buttonOK.Size = '75, 23'
	$buttonOK.TabIndex = 0
	$buttonOK.Text = '&OK'
	$buttonOK.UseCompatibleTextRendering = $True
	$buttonOK.UseVisualStyleBackColor = $True
	$buttonOK.add_Click($buttonOK_Click)
	$formSetAdministratorPass.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formSetAdministratorPass.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formSetAdministratorPass.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formSetAdministratorPass.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formSetAdministratorPass.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formSetAdministratorPass.ShowDialog()

}
#endregion Source: GetAdminPassword.psf

#region Source: WindowsFeatures.psf
function Show-WindowsFeatures_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
zAMAACODCAAAAAAABABlk0mrq1oQheeB/IfDnQpX0xgV8g5su9hFYx+daWxibLa6jd2vv7nnTR68
Gi2KKliw1ne20gcc037hoyH6+ghUwOafX4ffu1/f283X19noi7xookosqlSP6vTbL5oETkhMo+Hd
p+h3i7Iz/r+rn18R9vX31Qq8HYKWMeUAcAbPgX+HBdyuSphx/wLmzNANdccmuuea7japrGPLni4/
vdjkgW/cqvvlfTSkYJHCaC9i+HZjE7Lgl0DhZ/djpmUomOIJkeBohPzK9vhpTjhsqNn99WqwiKID
bhYSCiN53ZfeFmol37tVu/lEhnK13URXw5Ok54FJnVdZAF8fgqlk2dgJPK0dRfXBR5eJUAbTJP3G
JAeEhwxksgXq1GC4js1xBg5j7EXNkrndzLI3c/owCX5XNgKrdKQ7OS0k2tfBi/IskiB1BHtjQvQt
8AtvvVB2NFkoXzEWDiXUldqQdpIiDcnqbDf6A5u9u35hnXXhLpatceFMkcqlW/sTLJUJZyXfvUIh
hwbxwI93EOFOAps7pYRcYT351r2ZjwMybbvAtpsnzlnuSfLbDGg7H70JsjMOUy83ZRocK374mxb7
SUurGTF7aw5t04RVlOSwc+LO0R50Zyagn62R7ertBvhm+z5yTJJNZHExu7DsgOxFlrIvkRgpMn54
SiSREX4iTQFSxyUcMC2+61Omkv6ew+zpmDUrSYm5wWw3wQnE5JvhjvuP8MSEvC3iC46L2IrN7Be1
q45VWUczdaJ2s+ILKs5Lkw+Ju64tI+hB3p3SELyCQd4X2w2medfZ6OwwHzticpk+rmJRWsxYNYjj
RHtE/5rDw8Ko9gnJbTbUVhmsejwr2C2uDGbvBm36CKuUWE/jdtPHWrBYyuCNIl72bTo7fSIwDBxu
Q6qGVcbmskfFPKoCIDS5cCF2y1ulae1dPRdhZ1jxWD7DZACFa8+fvuEr+UAyLvYBc0+YPh3JUSEP
B5opn/i+oTPywbWhS/1l5Yz/YPQDFEAoreOqSNEX/tmc8f/S+/0HaFFiB8wDAAA=#>
#endregion
param
(
	[Parameter(Mandatory = $true)]
	[string]$VMName
)

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formWindowsFeatures = New-Object 'System.Windows.Forms.Form'
	$treeviewWindowsFeatures = New-Object 'System.Windows.Forms.TreeView'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	
	$formWindowsFeatures_Load={
		
		$treeviewWindowsFeatures.BeginUpdate()
		
		$osVersion = $global:vmOS | ?{ $_.VMName -eq $VMName }
		
		if ($osVersion.OS -eq "Server2012R2")
		{
			$import = Import-Csv "$ScriptDirectory\rolesandfeatures\Server2012R2Features.csv"
			$formWindowsFeatures.Text = "Select Features to install for Server 2012 R2"
		}
		elseif ($osVersion.OS -eq "Server2016")
		{
			$import = Import-Csv "$ScriptDirectory\rolesandfeatures\Server2016Features.csv"
			$formWindowsFeatures.Text = "Select Features to install for Server 2016"
		}
		elseif ($osVersion.OS -eq "Server2019")
		{
			$import = Import-Csv "$ScriptDirectory\rolesandfeatures\Server2019Features.csv"
			$formWindowsFeatures.Text = "Select Features to install for Server 2019"
		}
		
		#$roleParents = $import | ?{ $_.FeatureType -eq "Role" }
		#$roleServices = $import | ?{ $_.FeatureType -eq "Role Service" }
		$features = $import | ?{ ($_.FeatureType -eq "Feature") -and ($_.Parent -eq '') }
		$previousSelectedFeatures = $global:vmFeatures | ?{ $_.VMName -eq $VMName }
		
		$indexCounter = 0
		
		foreach ($feature in $features)
		{
			$parentNode = $treeviewWindowsFeatures.Nodes.Add($feature.DisplayName)
			$parentNode.Name = $feature.Name
			$parentNode.ToolTipText = $feature.Description
			if ($feature.Name -in $previousSelectedFeatures.Roles) {$parentNode.Checked = $true }
			
		}
		
		$treeviewWindowsFeatures.ExpandAll()
		$treeviewWindowsFeatures.EndUpdate()
		
	}
	
	#region Control Helper Functions
	function Get-CheckedNode
	{
	<#
		.SYNOPSIS
			This function collects a list of checked nodes in a TreeView
	
		.DESCRIPTION
			This function collects a list of checked nodes in a TreeView
	
		.PARAMETER  $NodeCollection
			The collection of nodes to search
	
		.PARAMETER  $CheckedNodes
			The ArrayList that will contain the all the checked items
		
		.EXAMPLE
			$CheckedNodes = New-Object System.Collections.ArrayList
			Get-CheckedNode $treeview1.Nodes $CheckedNodes
			foreach($node in $CheckedNodes)
			{	
				Write-Host $node.Text
			}
	#>
		param (
				[ValidateNotNull()]
				[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
				[ValidateNotNull()]
				[System.Collections.ArrayList]$CheckedNodes
		)
		
		foreach ($Node in $NodeCollection)
		{
			if ($Node.Checked)
			{
				[void]$CheckedNodes.Add($Node)
			}
			Get-CheckedNode $Node.Nodes $CheckedNodes
		}
	}
	
	#endregion
	
	$buttonOK_Click={
		
		$tmpFeatureArray = @()
		
		foreach ($node in $treeviewWindowsFeatures.Nodes)
		{
			if ($node.Checked) { $tmpFeatureArray += $node }
		}
		
		$featureObject = New-Object PSObject
		
		$featureObject | Add-Member -Type NoteProperty -Name "VMName" -Value $VMName
		$featureObject | Add-Member -Type NoteProperty -Name "Features" -Value $tmpFeatureArray.Name
		
		$global:vmFeatures = $global:vmFeatures | ?{ $_.VMName -ne $VMName }
		
		$global:vmFeatures = [System.Array]$global:vmFeatures + $featureObject
		
		$global:vmFeatures | Out-File "$ScriptDirectory\logs\features.log"
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formWindowsFeatures.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		if($treeviewWindowsFeatures.SelectedNode -ne $null)
		{
			$script:WindowsFeatures_treeviewWindowsFeatures = $treeviewWindowsFeatures.SelectedNode.Text
		}
		else
		{
			$script:WindowsFeatures_treeviewWindowsFeatures = $null
		}
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonOK.remove_Click($buttonOK_Click)
			$formWindowsFeatures.remove_Load($formWindowsFeatures_Load)
			$formWindowsFeatures.remove_Load($Form_StateCorrection_Load)
			$formWindowsFeatures.remove_Closing($Form_StoreValues_Closing)
			$formWindowsFeatures.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formWindowsFeatures.SuspendLayout()
	#
	# formWindowsFeatures
	#
	$formWindowsFeatures.Controls.Add($treeviewWindowsFeatures)
	$formWindowsFeatures.Controls.Add($buttonOK)
	$formWindowsFeatures.AcceptButton = $buttonOK
	$formWindowsFeatures.AutoScaleDimensions = '6, 13'
	$formWindowsFeatures.AutoScaleMode = 'Font'
	$formWindowsFeatures.ClientSize = '475, 428'
	$formWindowsFeatures.FormBorderStyle = 'FixedDialog'
	$formWindowsFeatures.Margin = '6, 6, 6, 6'
	$formWindowsFeatures.MaximizeBox = $False
	$formWindowsFeatures.MinimizeBox = $False
	$formWindowsFeatures.Name = 'formWindowsFeatures'
	$formWindowsFeatures.StartPosition = 'CenterScreen'
	$formWindowsFeatures.Text = 'Select Roles to Install'
	$formWindowsFeatures.add_Load($formWindowsFeatures_Load)
	#
	# treeviewWindowsFeatures
	#
	$treeviewWindowsFeatures.CheckBoxes = $True
	$treeviewWindowsFeatures.Location = '33, 26'
	$treeviewWindowsFeatures.Name = 'treeviewWindowsFeatures'
	$treeviewWindowsFeatures.Size = '411, 344'
	$treeviewWindowsFeatures.TabIndex = 1
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Location = '388, 393'
	$buttonOK.Name = 'buttonOK'
	$buttonOK.Size = '75, 23'
	$buttonOK.TabIndex = 0
	$buttonOK.Text = '&OK'
	$buttonOK.UseCompatibleTextRendering = $True
	$buttonOK.UseVisualStyleBackColor = $True
	$buttonOK.add_Click($buttonOK_Click)
	$formWindowsFeatures.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formWindowsFeatures.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formWindowsFeatures.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formWindowsFeatures.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formWindowsFeatures.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formWindowsFeatures.ShowDialog()

}
#endregion Source: WindowsFeatures.psf

#region Source: AddLocalUsers.psf
function Show-AddLocalUsers_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
PgYAACODCAAAAAAABABllUer41gQhfcG/4emt4KWZMkK8PqBgpVztnbKwcrZ+vXj7tkMzIWCS3EK
DtThqy8rS/otm95stEQ/Pp+56rvfP5Ff8M/v6+XHjy99qoqqixquajItarNvKk2VPokad/6Ifw1z
/gX+T/N3kuun9rsKIgduSY86ZopidJah/n00xXo+D29inZhggw3gjYcFcCzNottKfmU4tUwnaLDF
kbnXdyHsTBUJyi1Eig26XmAkI5S9D1Dh6dsv24uoQDEk/DhZdSNXbwfq5AFvFgDO3aks6tY10IKq
fT6hbw7Td6XBOEz1s7wRcft6CYkgJhuDy3ZrWSUpOGN9BLAFLeD66au6V2rlKFVTZp67ZygVB7sm
WeDvKK3HmYudaPGxmkl9ZVpJ6XrhRqGd8DpLrRoIXTqnUV4eHB/giPedYf0KFHnbq5YSVK1eMxZ6
3L1+JaaiEnkOT3JfHjql10xxK5TqeqGI+jH0HUVoMXJuOvcpLx2hxD9dvRWpWOg5qIXc+lb6GzzS
LA67Yr4SDj4+TPWgkoFGzvxgzVgxx+slmGBL2e3707A99sUbuNujXrBLqAl35gzJe56qJ16q5OCQ
jzetCCMv5bH3CNz9KYvh7lvxWzpxEinDjzeOUYSm7fCeeiOIxpUFfefg3YxMOqwknIHygoCzF9Ys
8NYdNwCNqQhz32cSraMDAMHbkAStSNywARX0esHYNghnVWMUtqiNu7W3EIaN2svdhXJqy5Va7+6u
yZQm9UH7YBe54N3XyiyDaRXtS04lURXRUr2Brs5fL4XuJINBrK/RuWUPm3X5d9EXPkZpSPvHqbxY
ybmdmaUmLguIdk2eD4exBqTNaQKipCHIa/hs5cb2Pt6QzmlcUAFYNzBcFMtkXj8FZhFgOL/B6Zrm
6Z+cQ5+cDy9sDWAsB/mVeEvgjgzxUDbbbc6MTkJ1Z4KvF7Mxb+YtyF2pi/cSQpZyZyfUM5nAriAK
qjVJynQy26NsWlkLoM1gqEBdEoVJYmzTSGTDHrVjFVeaelwvsTjdWeoIoxNlO+LmAHaZijCAegYw
wAirjmkitsLyYg6gPnZNQW5HpMVPqyyoDHUwwR1P8f1s6bfwZq8XPRveHY/3MmgqLAATELaJWov6
xQgVJ2UOd5s8uLPHKkScaWaQkbs8hTgyWr2D3dcT78EpVOSDE0VLuV484e00kbe4wYDJSNj3geRx
e573ZNJXyNhGW0fVQkejBAOwsRJPQhE07KM3zslVpXn3t+IVEkns7u1nC4Fg7iFZ3vPKPUcv5Gry
OSA55tnS2qCZzeJzPQXlbpNMNEg0mpDa+cl3uLv4QDBUejISnotoRLuonV0vq4nWBpPEBzfCJHJO
YtNOadJYt2gkLP4wgwCe7ikU8rDknUCcJHVEAjgdd42FxNRUYeJuO/MC1Da9XS9gaxuTCfsZYutR
Iz0wOTtwJOSHtlO6/IVZN2mI55vwPFlooNtbQCb3F89pdmvqoVcP0uKvTft8DumtvV5YdV10i+e3
bIFrfF0Vwl355Ei3DJ2sR+LFgKXXlA0Oed5kysBF4B8gxq/GfwY7CTSHAJJu377CDMSvF0mSoH0k
c19x0Np3VNuDOtb/6O+Kv61m7mRkbup7lphq/EHz7y/wL7r/Qpya56yNmyqbf4Cfzhf433vx/Q+Y
/OrHPgYAAA==#>
#endregion
param
(
	[Parameter(Mandatory = $true)]
	[string]$VMName
)

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formAddUserAccounts = New-Object 'System.Windows.Forms.Form'
	$buttonDeleteUser = New-Object 'System.Windows.Forms.Button'
	$buttonAddUser = New-Object 'System.Windows.Forms.Button'
	$datagridviewUserList = New-Object 'System.Windows.Forms.DataGridView'
	$textboxPassword = New-Object 'System.Windows.Forms.TextBox'
	$textboxUsername = New-Object 'System.Windows.Forms.TextBox'
	$checkboxAdministrator = New-Object 'System.Windows.Forms.CheckBox'
	$labelPassword = New-Object 'System.Windows.Forms.Label'
	$labelUsername = New-Object 'System.Windows.Forms.Label'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	
	$formAddUserAccounts_Load={
		
		if ($global:vmLocalUsers)
		{
			$userList = ConvertTo-DataTable -InputObject ($global:vmLocalUsers | select Username,Administrator)
			Update-DataGridView -DataGridView $datagridviewUserList -Item $userList
			
			$buttonDeleteUser.Enabled = $true
		}
		
	}
	
	$buttonOK_Click={
		
		
	}
	
	#region Control Helper Functions
	function Update-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The DataGridView control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the DataGridView's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		.PARAMETER AutoSizeColumns
		    Resizes DataGridView control's columns after loading the items.
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Item,
		    [Parameter(Mandatory=$false)]
			[string]$DataMember,
			[System.Windows.Forms.DataGridViewAutoSizeColumnMode]$AutoSizeColumns = 'None'
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
		{
			$DataGridView.DataSource = $Item.Tables[0]
		}
		elseif ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{
				$array.Add($Item)
			}
			$DataGridView.DataSource = $array
		}
		
		if ($AutoSizeColumns -ne 'None')
		{
			$DataGridView.AutoResizeColumns($AutoSizeColumns)
		}
		
		$DataGridView.ResumeLayout()
	}
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterWMIProperties
				This switch removes WMI properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param(
		[ValidateNotNull()]
		$InputObject, 
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
		
		if($null -eq $Table)
		{
			$Table = New-Object System.Data.DataTable
		}
		
		if ($InputObject -is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
		{
			$Table = $InputObject.Tables[0]
		}
		else
		{
			if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
				
				if ($null -eq $InputObject) { return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach ($item in $InputObject)
				{
					if ($null -ne $item)
					{
						$object = $item
						break
					}
				}
				
				if ($null -eq $object) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if ($null -ne $prop.Value)
						{
							try { $type = $prop.Value.GetType() }
							catch { Out-Null }
						}
						
						if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
							[void]$table.Columns.Add($prop.Name, $type)
						}
						else #Type info not found
						{
							[void]$table.Columns.Add($prop.Name)
						}
					}
				}
				
				if ($object -is [System.Data.DataRow])
				{
					foreach ($item in $InputObject)
					{
						$Table.Rows.Add($item)
					}
					return @( ,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()
			}
			
			foreach ($item in $InputObject)
			{
				$row = $table.NewRow()
				
				if ($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if ($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
		
		return @(,$Table)	
	}
	#endregion
	
	$buttonAddUser_Click={
		
		$usersObject = New-Object PSObject
		
		#$usersObject | Add-Member -Type NoteProperty -Name "VMName" -Value $VMName
		$usersObject | Add-Member -Type NoteProperty -Name "Username" -Value $textboxUsername.Text
		$usersObject | Add-Member -Type NoteProperty -Name "Password" -Value $textboxPassword.Text
		
		if ($checkboxAdministrator.Checked) { $usersObject | Add-Member -Type NoteProperty -Name "Administrator" -Value "Yes" }
		else { $usersObject | Add-Member -Type NoteProperty -Name "Administrator" -Value "No" }
		
		$global:vmLocalUsers = $global:vmLocalUsers | ?{ $_.Username -ne $textboxUsername.Text }
		
		$global:vmLocalUsers = [System.Array]$global:vmLocalUsers + $usersObject
		
		$userList = ConvertTo-DataTable -InputObject ($global:vmLocalUsers | select Username, Administrator)
		Update-DataGridView -DataGridView $datagridviewUserList -Item $userList
		
		$global:vmLocalUsers | Out-File "$logDirectory\users.log"
		
		$textboxUsername.Clear()
		$textboxPassword.Clear()
		$checkboxAdministrator.Checked = $false
		
		$buttonDeleteUser.Enabled = $true
		
	}
	
	$datagridviewUserList_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
		
		$buttonDeleteUser.Enabled = $true
		
	}
	
	$buttonDeleteUser_Click={
		
		$global:vmLocalUsers = $global:vmLocalUsers | ?{ -not ($_.Username -eq $datagridviewUserList.CurrentRow.Cells[0].Value) }
		$datagridviewUserList.Rows.RemoveAt($datagridviewUserList.CurrentRow.Index)
		
		if ($global:vmLocalUsers)
		{
			$userList = ConvertTo-DataTable -InputObject ($global:vmLocalUsers | select Username, Administrator)
			Update-DataGridView -DataGridView $datagridviewUserList -Item $userList
			
			$buttonDeleteUser.Enabled = $true
		}
		else
		{
			$buttonDeleteUser.Enabled = $false
		}
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formAddUserAccounts.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:AddLocalUsers_datagridviewUserList = $datagridviewUserList.SelectedCells
		$script:AddLocalUsers_textboxPassword = $textboxPassword.Text
		$script:AddLocalUsers_textboxUsername = $textboxUsername.Text
		$script:AddLocalUsers_checkboxAdministrator = $checkboxAdministrator.Checked
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonDeleteUser.remove_Click($buttonDeleteUser_Click)
			$buttonAddUser.remove_Click($buttonAddUser_Click)
			$datagridviewUserList.remove_CellContentClick($datagridviewUserList_CellContentClick)
			$buttonOK.remove_Click($buttonOK_Click)
			$formAddUserAccounts.remove_Load($formAddUserAccounts_Load)
			$formAddUserAccounts.remove_Load($Form_StateCorrection_Load)
			$formAddUserAccounts.remove_Closing($Form_StoreValues_Closing)
			$formAddUserAccounts.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formAddUserAccounts.SuspendLayout()
	#
	# formAddUserAccounts
	#
	$formAddUserAccounts.Controls.Add($buttonDeleteUser)
	$formAddUserAccounts.Controls.Add($buttonAddUser)
	$formAddUserAccounts.Controls.Add($datagridviewUserList)
	$formAddUserAccounts.Controls.Add($textboxPassword)
	$formAddUserAccounts.Controls.Add($textboxUsername)
	$formAddUserAccounts.Controls.Add($checkboxAdministrator)
	$formAddUserAccounts.Controls.Add($labelPassword)
	$formAddUserAccounts.Controls.Add($labelUsername)
	$formAddUserAccounts.Controls.Add($buttonOK)
	$formAddUserAccounts.AcceptButton = $buttonOK
	$formAddUserAccounts.AutoScaleDimensions = '6, 13'
	$formAddUserAccounts.AutoScaleMode = 'Font'
	$formAddUserAccounts.ClientSize = '435, 232'
	$formAddUserAccounts.FormBorderStyle = 'FixedDialog'
	$formAddUserAccounts.Margin = '6, 6, 6, 6'
	$formAddUserAccounts.MaximizeBox = $False
	$formAddUserAccounts.MinimizeBox = $False
	$formAddUserAccounts.Name = 'formAddUserAccounts'
	$formAddUserAccounts.StartPosition = 'CenterScreen'
	$formAddUserAccounts.Text = 'Add User Accounts'
	$formAddUserAccounts.add_Load($formAddUserAccounts_Load)
	#
	# buttonDeleteUser
	#
	$buttonDeleteUser.Enabled = $False
	$buttonDeleteUser.Location = '348, 160'
	$buttonDeleteUser.Name = 'buttonDeleteUser'
	$buttonDeleteUser.Size = '75, 23'
	$buttonDeleteUser.TabIndex = 6
	$buttonDeleteUser.Text = 'Delete User'
	$buttonDeleteUser.UseCompatibleTextRendering = $True
	$buttonDeleteUser.UseVisualStyleBackColor = $True
	$buttonDeleteUser.add_Click($buttonDeleteUser_Click)
	#
	# buttonAddUser
	#
	$buttonAddUser.Location = '267, 160'
	$buttonAddUser.Name = 'buttonAddUser'
	$buttonAddUser.Size = '75, 23'
	$buttonAddUser.TabIndex = 5
	$buttonAddUser.Text = 'Add User'
	$buttonAddUser.UseCompatibleTextRendering = $True
	$buttonAddUser.UseVisualStyleBackColor = $True
	$buttonAddUser.add_Click($buttonAddUser_Click)
	#
	# datagridviewUserList
	#
	$datagridviewUserList.AllowUserToAddRows = $False
	$datagridviewUserList.AllowUserToDeleteRows = $False
	$datagridviewUserList.AllowUserToResizeColumns = $False
	$datagridviewUserList.AllowUserToResizeRows = $False
	$datagridviewUserList.AutoSizeColumnsMode = 'Fill'
	$datagridviewUserList.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridviewUserList.Location = '216, 21'
	$datagridviewUserList.MultiSelect = $False
	$datagridviewUserList.Name = 'datagridviewUserList'
	$datagridviewUserList.ReadOnly = $True
	$datagridviewUserList.RowHeadersVisible = $False
	$datagridviewUserList.RowHeadersWidthSizeMode = 'AutoSizeToDisplayedHeaders'
	$datagridviewUserList.SelectionMode = 'FullRowSelect'
	$datagridviewUserList.Size = '208, 122'
	$datagridviewUserList.TabIndex = 4
	$datagridviewUserList.add_CellContentClick($datagridviewUserList_CellContentClick)
	#
	# textboxPassword
	#
	$textboxPassword.Location = '94, 86'
	$textboxPassword.Margin = '1, 2, 1, 2'
	$textboxPassword.Name = 'textboxPassword'
	$textboxPassword.PasswordChar = '*'
	$textboxPassword.Size = '100, 20'
	$textboxPassword.TabIndex = 1
	#
	# textboxUsername
	#
	$textboxUsername.Location = '94, 41'
	$textboxUsername.Margin = '1, 2, 1, 2'
	$textboxUsername.Name = 'textboxUsername'
	$textboxUsername.Size = '100, 20'
	$textboxUsername.TabIndex = 0
	#
	# checkboxAdministrator
	#
	$checkboxAdministrator.Location = '94, 119'
	$checkboxAdministrator.Name = 'checkboxAdministrator'
	$checkboxAdministrator.Size = '104, 24'
	$checkboxAdministrator.TabIndex = 2
	$checkboxAdministrator.Text = 'Administrator'
	$checkboxAdministrator.UseCompatibleTextRendering = $True
	$checkboxAdministrator.UseVisualStyleBackColor = $True
	#
	# labelPassword
	#
	$labelPassword.AutoSize = $True
	$labelPassword.Location = '24, 86'
	$labelPassword.Margin = '1, 0, 1, 0'
	$labelPassword.Name = 'labelPassword'
	$labelPassword.Size = '57, 17'
	$labelPassword.TabIndex = 2
	$labelPassword.Text = 'Password:'
	$labelPassword.UseCompatibleTextRendering = $True
	#
	# labelUsername
	#
	$labelUsername.AutoSize = $True
	$labelUsername.Location = '24, 42'
	$labelUsername.Margin = '1, 0, 1, 0'
	$labelUsername.Name = 'labelUsername'
	$labelUsername.Size = '60, 17'
	$labelUsername.TabIndex = 1
	$labelUsername.Text = 'Username:'
	$labelUsername.UseCompatibleTextRendering = $True
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Location = '349, 197'
	$buttonOK.Name = 'buttonOK'
	$buttonOK.Size = '75, 23'
	$buttonOK.TabIndex = 3
	$buttonOK.Text = '&OK'
	$buttonOK.UseCompatibleTextRendering = $True
	$buttonOK.UseVisualStyleBackColor = $True
	$buttonOK.add_Click($buttonOK_Click)
	$formAddUserAccounts.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formAddUserAccounts.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formAddUserAccounts.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formAddUserAccounts.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formAddUserAccounts.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formAddUserAccounts.ShowDialog()

}
#endregion Source: AddLocalUsers.psf

#region Source: WorkgroupDomainJoin.psf
function Show-WorkgroupDomainJoin_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
7gUAACODCAAAAAAABABlVEer62gM3QfyHy5vGxj3BvddcOy4xy2OS3buJe6f+6+fzJvNwAgEklA5
SOJ822ncLem48+EUfn0MUHbt71/YX8ivn/Pp6+vbGMu8bMNaKOtUD5v0x+vGdz52c893TVi2Sle2
f/Ug+4b+l/mnXujG5ofa6gDhUxW74izLGTzH/itXlq8bD1nQirU2hjHRNpXpRl6U2uFi5q3CAz9N
5lNhvSmTez1eH4byTg0AbhfofIpX9annAhDVrQuLJzJkEHrJVIpm3sR8WaCrAG5Mli28cQdLJd0S
dkXAcdevUt7yjI2hgr7GoMEFhD7OJ3saoDsIGFpm9wUJaJDa5taU4pjnBCKt8vWRzB9fyF5Z6B78
BAoJn3yytt49Orz2Uej6vHVf+rrH6flULbsMOfBqFv0qdCR0vwxRUaHvEeh2cIQv7SgO9rjvYoDM
sROI2hActJ1FxadPcZPXjMFFj/KLm3tdzqeV3F4m2q8J+gxRv5Y+ag5YZ1zTJdhk9yC729LjvVjz
ujgO7Lx4N6MxXa2966KTGDUuAwMKUM4q2uR8aqJUFWF/dx0rSPArtukP12JuimGkz1nc16e/8ReW
S7Q0hi+IZzlqKSlVFFzvcRnlXKQkjl8nR4mEa3s+Ab3syLXi7AAIrsAq1mYyZUBuRnxtIjtu1uHQ
guAQOr0+iF6E4wdzCZL4wJ1n5XTDZmYtrV1npL0D9HzaiBlmCxRhCNYxbmTmpBoxPXPL5IQbScsz
GbFaC9lJLIQMTDp5M73fWSUSENeIz8fzZZPgdXg3umPDz964QQ1axiLUoWqd18SvACPt1RUk7RNb
+7DIXgm8QI2B89tb3nEXsxVZZ61sZ5nWGSqsVh33n+e98J+bGhIOsTMr2QODP0znDZmB+vRqqlTt
yV4/Y0yTZxvb5fPSyjTbzxUFKSqFhccQ4hIWIQODSrAtNuIOfD7EobrONtykF9v5OJ7WHi8lnahu
QMfqrkiEj4mEtgdNJSNI2MGOBcI+edlP240CevXHG61aYNOcNNTPJ9i/BT2l+vrMda058IL/wTpp
MELViZfoCdG+csc37B1dqrru+jHWde8DEyIvOBle1PmiNNKDRMIHqpxPPRGgUfiuEWcMo4k2Qg8r
n9cgK4090XdKKgHjCeOUmWnpqcO0c8nFKeekknRNdN/MtbBU7xE2wgF33fnk3jss0mE7UtfYei8S
DxyrCQL0odYJpt9zRSTgZLJyZqgU/x6aUmzh8pjWQCwm7iKqK6m5JXq1G5qPz6clr58tMK+0PyMy
+jZWm7wCpnwqOsFTqKfJzBJEfX1PmNZ3R7ZRyTafzRlN+gn2kyhFwsBbiAmdrMX5XKG1HfWCQUMO
GdXgZo+HW1D1SGhh2DhvdOsFjFBDP1BFN91VWiuKiqOpkanByLI7Sh8b5E1SdVChcD+fGAsVw5Kp
JqPOG3O71ZMj+FQU3lQOeS3Y/HiLuwVTd3cdHhLmGgRNWMr44HLj5SZzG7XaRMs6hQNC3s4nCFsR
m1HE40KNdpaMYKYeR3aYnYlLcYgPnb6mHxL9/Q39Idk/dMsCkDZRXabgC/pEvqH/8vvP34MD6rvu
BQAA#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formWorkgroupJoin = New-Object 'System.Windows.Forms.Form'
	$textboxDomainPassword = New-Object 'System.Windows.Forms.TextBox'
	$textboxDomainUser = New-Object 'System.Windows.Forms.TextBox'
	$textboxDomainName = New-Object 'System.Windows.Forms.TextBox'
	$labelDomainPW = New-Object 'System.Windows.Forms.Label'
	$labelDomainUser = New-Object 'System.Windows.Forms.Label'
	$labelDomainName = New-Object 'System.Windows.Forms.Label'
	$radiobuttonWorkgroup = New-Object 'System.Windows.Forms.RadioButton'
	$radiobuttonDomain = New-Object 'System.Windows.Forms.RadioButton'
	$textboxWorkgroup = New-Object 'System.Windows.Forms.TextBox'
	$labelWorkGroup = New-Object 'System.Windows.Forms.Label'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formWorkgroupJoin_Load={
		
		if ($global:vmDomainWorkgroupStep5)
		{
			if ($global:vmDomainWorkgroupStep5.IsWorkgroup -eq 'Yes')
			{
				$textboxWorkgroup.Enabled = $false
				$textboxDomainName.Enabled = $true
				$textboxDomainUser.Enabled = $true
				$textboxDomainPassword.Enabled = $true
				
				$radiobuttonDomain.Checked = $true
				$textboxDomainName.Text = $global:vmDomainWorkgroupStep5.DomainName
				$textboxDomainUser.Text = $global:vmDomainWorkgroupStep5.DomainUser
				$textboxDomainPassword.Text = $global:vmDomainWorkgroupStep5.DomainPassword
				
				$textboxWorkgroup.Text = ""
			}
			elseif ($global:vmDomainWorkgroupStep5.IsWorkgroup -eq 'No')
			{
				$textboxWorkgroup.Enabled = $true
				$textboxDomainName.Enabled = $false
				$textboxDomainUser.Enabled = $false
				$textboxDomainPassword.Enabled = $false
				
				$radiobuttonWorkgroup.Checked = $true
				$textboxDomainName.Text = ""
				$textboxDomainUser.Text = ""
				$textboxDomainPassword.Text = ""
				
				$textboxWorkgroup.Text = $global:vmDomainWorkgroupStep5.DomainName
			}
		}
		
	}
	
	$buttonOK_Click = {
		
		if ($radiobuttonDomain.Checked)
		{
			$tmpArray = $global:vmWorkgroupDomain
			
			$global:vmWorkgroupDomain = [System.Collections.ArrayList]@()
					
			foreach ($item in $tmpArray)
			{
				$domainObject = New-Object PSObject
				
				$domainObject | Add-Member -Type NoteProperty -Name "VMName" -Value $item.VMName
				$domainObject | Add-Member -Type NoteProperty -Name "DomainUser" -Value $textboxDomainUser.Text
				$domainObject | Add-Member -Type NoteProperty -Name "DomainPassword" -Value $textboxDomainPassword.Text
				$domainObject | Add-Member -Type NoteProperty -Name "DomainName" -Value $textboxDomainName.Text
				$domainObject | Add-Member -Type NoteProperty -Name "IsWorkgroup" -Value 'No'
				$domainObject | Add-Member -Type NoteProperty -Name "Hostname" -Value $item.Hostname
				
				$global:vmWorkgroupDomain = [System.Array]$global:vmWorkgroupDomain + $domainObject
			}
			
			
			$domainObject = New-Object PSObject
			
			$domainObject | Add-Member -Type NoteProperty -Name "DomainUser" -Value $textboxDomainUser.Text
			$domainObject | Add-Member -Type NoteProperty -Name "DomainPassword" -Value $textboxDomainPassword.Text
			$domainObject | Add-Member -Type NoteProperty -Name "DomainName" -Value $textboxDomainName.Text
			$domainObject | Add-Member -Type NoteProperty -Name "IsWorkgroup" -Value 'No'
			
			$global:vmWorkgroupDomain | Out-File "$logDirectory\domains.log"
		}
		elseif ($radiobuttonWorkgroup.Checked)
		{
			$tmpArray = $global:vmWorkgroupDomain
			
			$global:vmWorkgroupDomain = [System.Collections.ArrayList]@()
			
			foreach ($item in $tmpArray)
			{
				$domainObject = New-Object PSObject
				
				$domainObject | Add-Member -Type NoteProperty -Name "VMName" -Value $item.VMName
				$domainObject | Add-Member -Type NoteProperty -Name "DomainUser" -Value ''
				$domainObject | Add-Member -Type NoteProperty -Name "DomainPassword" -Value ''
				$domainObject | Add-Member -Type NoteProperty -Name "DomainName" -Value $textboxWorkgroup.Text
				$domainObject | Add-Member -Type NoteProperty -Name "IsWorkgroup" -Value 'Yes'
				$domainObject | Add-Member -Type NoteProperty -Name "Hostname" -Value $item.Hostname
				
				$global:vmWorkgroupDomain = [System.Array]$global:vmWorkgroupDomain + $domainObject
			}
			
			$domainObject = New-Object PSObject
			
			$domainObject | Add-Member -Type NoteProperty -Name "DomainUser" -Value ''
			$domainObject | Add-Member -Type NoteProperty -Name "DomainPassword" -Value ''
			$domainObject | Add-Member -Type NoteProperty -Name "DomainName" -Value $textboxWorkgroup.Text
			$domainObject | Add-Member -Type NoteProperty -Name "IsWorkgroup" -Value 'Yes'
			
			$global:vmWorkgroupDomain | Out-File "$logDirectory\domains.log"
		}
		
		$labelOK3.Visible = $true
		
		Update-NavButtons
		
	}
	$radiobuttonDomain_CheckedChanged={
		
		if ($radiobuttonDomain.Checked)
		{
			$textboxWorkgroup.Enabled = $false
			$textboxDomainName.Enabled = $true
			$textboxDomainUser.Enabled = $true
			$textboxDomainPassword.Enabled = $true
		}
		elseif ($radiobuttonWorkgroup.Checked)
		{
			$textboxWorkgroup.Enabled = $true
			$textboxDomainName.Enabled = $false
			$textboxDomainUser.Enabled = $false
			$textboxDomainPassword.Enabled = $false
		}
		
	}
	
	$textboxWorkgroup_TextChanged={
		
		if (($textboxWorkgroup.Text -ne ''))
		{
			$buttonOK.Enabled = $true
		}
		else
		{
			$buttonOK.Enabled = $false
		}
		
	}
	
	$textboxDomainName_TextChanged={
		
		If (($textboxHostname.Text -ne '') -and ($textboxDomainName.Text -ne '') -and ($textboxDomainPassword -ne '') -and ($textboxDomainName -ne ''))
		{
			$buttonOK.Enabled = $true
		}
		else
		{
			$buttonOK.Enabled = $false
		}
		
	}
	
	$textboxDomainUser_TextChanged={
		
		If (($textboxHostname.Text -ne '') -and ($textboxDomainName.Text -ne '') -and ($textboxDomainPassword -ne '') -and ($textboxDomainName -ne ''))
		{
			$buttonOK.Enabled = $true
		}
		else
		{
			$buttonOK.Enabled = $false
		}
		
	}
	
	$textboxDomainPassword_TextChanged={
		
		If (($textboxHostname.Text -ne '') -and ($textboxDomainName.Text -ne '') -and ($textboxDomainPassword -ne '') -and ($textboxDomainName -ne ''))
		{
			$buttonOK.Enabled = $true
		}
		else
		{
			$buttonOK.Enabled = $false
		}
		
	}
	
	$textboxHostname_TextChanged={
		
		if ($radiobuttonDomain.Checked)
		{
			If (($textboxHostname.Text -ne '') -and ($textboxDomainName.Text -ne '') -and ($textboxDomainPassword -ne '') -and ($textboxDomainName -ne ''))
			{
				$buttonOK.Enabled = $true
			}
		}
		elseif ($radiobuttonWorkgroup.Checked)
		{
			if (($textboxHostname.Text -ne '') -and ($textboxWorkgroup.Text -ne '')) { $buttonOK.Enabled = $true }
		}
		else
		{
			$buttonOK.Enabled = $false
		}
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formWorkgroupJoin.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:WorkgroupDomainJoin_textboxDomainPassword = $textboxDomainPassword.Text
		$script:WorkgroupDomainJoin_textboxDomainUser = $textboxDomainUser.Text
		$script:WorkgroupDomainJoin_textboxDomainName = $textboxDomainName.Text
		$script:WorkgroupDomainJoin_radiobuttonWorkgroup = $radiobuttonWorkgroup.Checked
		$script:WorkgroupDomainJoin_radiobuttonDomain = $radiobuttonDomain.Checked
		$script:WorkgroupDomainJoin_textboxWorkgroup = $textboxWorkgroup.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$textboxDomainPassword.remove_TextChanged($textboxDomainPassword_TextChanged)
			$textboxDomainUser.remove_TextChanged($textboxDomainUser_TextChanged)
			$textboxDomainName.remove_TextChanged($textboxDomainName_TextChanged)
			$radiobuttonDomain.remove_CheckedChanged($radiobuttonDomain_CheckedChanged)
			$textboxWorkgroup.remove_TextChanged($textboxWorkgroup_TextChanged)
			$buttonOK.remove_Click($buttonOK_Click)
			$formWorkgroupJoin.remove_Load($formWorkgroupJoin_Load)
			$formWorkgroupJoin.remove_Load($Form_StateCorrection_Load)
			$formWorkgroupJoin.remove_Closing($Form_StoreValues_Closing)
			$formWorkgroupJoin.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formWorkgroupJoin.SuspendLayout()
	#
	# formWorkgroupJoin
	#
	$formWorkgroupJoin.Controls.Add($textboxDomainPassword)
	$formWorkgroupJoin.Controls.Add($textboxDomainUser)
	$formWorkgroupJoin.Controls.Add($textboxDomainName)
	$formWorkgroupJoin.Controls.Add($labelDomainPW)
	$formWorkgroupJoin.Controls.Add($labelDomainUser)
	$formWorkgroupJoin.Controls.Add($labelDomainName)
	$formWorkgroupJoin.Controls.Add($radiobuttonWorkgroup)
	$formWorkgroupJoin.Controls.Add($radiobuttonDomain)
	$formWorkgroupJoin.Controls.Add($textboxWorkgroup)
	$formWorkgroupJoin.Controls.Add($labelWorkGroup)
	$formWorkgroupJoin.Controls.Add($buttonOK)
	$formWorkgroupJoin.AcceptButton = $buttonOK
	$formWorkgroupJoin.AutoScaleDimensions = '6, 13'
	$formWorkgroupJoin.AutoScaleMode = 'Font'
	$formWorkgroupJoin.ClientSize = '360, 204'
	$formWorkgroupJoin.FormBorderStyle = 'FixedDialog'
	$formWorkgroupJoin.Margin = '6, 6, 6, 6'
	$formWorkgroupJoin.MaximizeBox = $False
	$formWorkgroupJoin.MinimizeBox = $False
	$formWorkgroupJoin.Name = 'formWorkgroupJoin'
	$formWorkgroupJoin.StartPosition = 'CenterScreen'
	$formWorkgroupJoin.Text = 'Join Workgroup/Domain'
	$formWorkgroupJoin.add_Load($formWorkgroupJoin_Load)
	#
	# textboxDomainPassword
	#
	$textboxDomainPassword.Enabled = $False
	$textboxDomainPassword.Location = '128, 173'
	$textboxDomainPassword.Margin = '1, 2, 1, 2'
	$textboxDomainPassword.Name = 'textboxDomainPassword'
	$textboxDomainPassword.PasswordChar = '*'
	$textboxDomainPassword.Size = '100, 20'
	$textboxDomainPassword.TabIndex = 6
	$textboxDomainPassword.add_TextChanged($textboxDomainPassword_TextChanged)
	#
	# textboxDomainUser
	#
	$textboxDomainUser.Enabled = $False
	$textboxDomainUser.Location = '128, 143'
	$textboxDomainUser.Margin = '1, 2, 1, 2'
	$textboxDomainUser.Name = 'textboxDomainUser'
	$textboxDomainUser.Size = '100, 20'
	$textboxDomainUser.TabIndex = 5
	$textboxDomainUser.add_TextChanged($textboxDomainUser_TextChanged)
	#
	# textboxDomainName
	#
	$textboxDomainName.Enabled = $False
	$textboxDomainName.Location = '128, 107'
	$textboxDomainName.Margin = '1, 2, 1, 2'
	$textboxDomainName.Name = 'textboxDomainName'
	$textboxDomainName.Size = '100, 20'
	$textboxDomainName.TabIndex = 4
	$textboxDomainName.add_TextChanged($textboxDomainName_TextChanged)
	#
	# labelDomainPW
	#
	$labelDomainPW.AutoSize = $True
	$labelDomainPW.Location = '26, 179'
	$labelDomainPW.Margin = '1, 0, 1, 0'
	$labelDomainPW.Name = 'labelDomainPW'
	$labelDomainPW.Size = '99, 17'
	$labelDomainPW.TabIndex = 7
	$labelDomainPW.Text = 'Domain Password:'
	$labelDomainPW.UseCompatibleTextRendering = $True
	#
	# labelDomainUser
	#
	$labelDomainUser.AutoSize = $True
	$labelDomainUser.Location = '26, 143'
	$labelDomainUser.Margin = '1, 0, 1, 0'
	$labelDomainUser.Name = 'labelDomainUser'
	$labelDomainUser.Size = '102, 17'
	$labelDomainUser.TabIndex = 6
	$labelDomainUser.Text = 'Domain Username:'
	$labelDomainUser.UseCompatibleTextRendering = $True
	#
	# labelDomainName
	#
	$labelDomainName.AutoSize = $True
	$labelDomainName.Location = '26, 109'
	$labelDomainName.Margin = '1, 0, 1, 0'
	$labelDomainName.Name = 'labelDomainName'
	$labelDomainName.Size = '80, 17'
	$labelDomainName.TabIndex = 5
	$labelDomainName.Text = 'Domain Name:'
	$labelDomainName.UseCompatibleTextRendering = $True
	#
	# radiobuttonWorkgroup
	#
	$radiobuttonWorkgroup.Location = '165, 15'
	$radiobuttonWorkgroup.Name = 'radiobuttonWorkgroup'
	$radiobuttonWorkgroup.Size = '133, 24'
	$radiobuttonWorkgroup.TabIndex = 2
	$radiobuttonWorkgroup.TabStop = $True
	$radiobuttonWorkgroup.Text = 'Join a Workgroup'
	$radiobuttonWorkgroup.UseCompatibleTextRendering = $True
	$radiobuttonWorkgroup.UseVisualStyleBackColor = $True
	#
	# radiobuttonDomain
	#
	$radiobuttonDomain.Location = '40, 15'
	$radiobuttonDomain.Name = 'radiobuttonDomain'
	$radiobuttonDomain.Size = '104, 24'
	$radiobuttonDomain.TabIndex = 1
	$radiobuttonDomain.TabStop = $True
	$radiobuttonDomain.Text = 'Join a Domain'
	$radiobuttonDomain.UseCompatibleTextRendering = $True
	$radiobuttonDomain.UseVisualStyleBackColor = $True
	$radiobuttonDomain.add_CheckedChanged($radiobuttonDomain_CheckedChanged)
	#
	# textboxWorkgroup
	#
	$textboxWorkgroup.Enabled = $False
	$textboxWorkgroup.Location = '172, 54'
	$textboxWorkgroup.Margin = '1, 2, 1, 2'
	$textboxWorkgroup.Name = 'textboxWorkgroup'
	$textboxWorkgroup.Size = '136, 20'
	$textboxWorkgroup.TabIndex = 3
	$textboxWorkgroup.add_TextChanged($textboxWorkgroup_TextChanged)
	#
	# labelWorkGroup
	#
	$labelWorkGroup.AutoSize = $True
	$labelWorkGroup.Location = '26, 55'
	$labelWorkGroup.Margin = '1, 0, 1, 0'
	$labelWorkGroup.Name = 'labelWorkGroup'
	$labelWorkGroup.Size = '145, 17'
	$labelWorkGroup.TabIndex = 1
	$labelWorkGroup.Text = 'Enter the Workgroup Name:'
	$labelWorkGroup.UseCompatibleTextRendering = $True
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Enabled = $False
	$buttonOK.Location = '273, 170'
	$buttonOK.Name = 'buttonOK'
	$buttonOK.Size = '75, 23'
	$buttonOK.TabIndex = 7
	$buttonOK.Text = '&OK'
	$buttonOK.UseCompatibleTextRendering = $True
	$buttonOK.UseVisualStyleBackColor = $True
	$buttonOK.add_Click($buttonOK_Click)
	$formWorkgroupJoin.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formWorkgroupJoin.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formWorkgroupJoin.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formWorkgroupJoin.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formWorkgroupJoin.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formWorkgroupJoin.ShowDialog()

}
#endregion Source: WorkgroupDomainJoin.psf

#region Source: Functions\Test-TCPport.ps1
function Invoke-Test-TCPport_ps1
{
	function Test-TCPport 
	{
	    Param([parameter(Mandatory=$true,ValueFromPipeline=$True)][string[]]$ComputerName,
	            [parameter(Mandatory=$true,ValueFromPipeline=$True)]$TCPport
	    )
	
	    $requestCallback = $state = $null
	    $client = New-Object System.Net.Sockets.TcpClient
	    $beginConnect = $client.BeginConnect($ComputerName,$TCPport,$requestCallback,$state)
	    Start-Sleep -Milliseconds 500
	    if ($client.Connected) 
	    {
	        $open = $true
	    } 
	    else
	    {
	        $open = $false            
	    }
	
	    $client.Close()
	        
	    [pscustomobject]@{hostname=$ComputerName;port=$TCPport;open=$open}
	}
}
#endregion Source: Test-TCPport.ps1

#region Source: Functions\CustomizeOS.ps1
function Invoke-CustomizeOS_ps1
{
	<#
		.SYNOPSIS
			A brief description of the Invoke-CustomizeOS_ps1 file.
		
		.DESCRIPTION
			A description of the file.
		
		.PARAMETER Scripts
			A description of the Scripts parameter.
		
		.PARAMETER VMName
			A description of the VMName parameter.
		
		.PARAMETER GuestCredential
			A description of the GuestCredential parameter.
		
		.NOTES
			===========================================================================
			Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2018 v5.5.150
			Created on:   	7/9/2019 9:38 AM
			Created by:   	dalthakar
			Organization:
			Filename:     	CustomizeOS.ps1
			===========================================================================
	#>
	
	function Customize-OS
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[string]$VMName,
			[Parameter(Mandatory = $true)]
			[pscredential]$GuestCredential,
			[Parameter(Mandatory = $true)]
			[array]$Scripts
		)
		
		foreach ($script in $Scripts)
		{
			Invoke-VMScript -VM $VMName -GuestCredential $GuestCredential -ScriptText "$($script.Command)" | Out-File "$ScriptDirectory\logs\scriptcommand.log" -Append
			
		}
	}
}
#endregion Source: CustomizeOS.ps1

#region Source: AddVirtualDisk.psf
function Show-AddVirtualDisk_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
swYAACODCAAAAAAABABlVVnrq/oOfS/0O2zOq3DUWq3C/2xwrvM8vtU6/Zznqp/+lH25cOEGFoSQ
PCRZyfqxs3e/ZdPBvZbXr68zg7775y/sb/Sv39fLr18/xgQK0L0aATSZ/mqz33Sa+mBa1lfDgbn+
e5jzH/j/kv6UCv3U/s6ooUO1QgFAomnW4Fj6P8bQnB/4zSbVbyvvIQ8+OSClg3Qwn5t/kyo1oydm
WOnTifE5HuNgOaeufXjITeeul7y7jQP5VNfcndXNFpuBfo7bON2J9TXGk7tCfEcKvgfDdXeeMyrg
xKta+RnBKZGdlYrDree98oi1pI/rRZepOKF0MwhIWhsVtsORN577Odpuoqt5zllVvFMqAZVMey08
YWZMsHvZ3W8J40hOAPvsw6tqsggJtLleTB5nbZOQ8AdiFuVL70ZDw0/KFurCO09L8FHlo8h6BOD4
NtiA83UjxrotLx/CuPO9bA4pM9o4yegudr1ETnRzaXdNKjlLOtxKuoezDHolf4cWpSyQQm6R7cE+
u1GIsM2viqLwHhT9xJJRZ2ph2iYkRK3er6Fvp+EkvDGlrWeKtrSCi33UaPus4DUJ8CAVDNwiYoTh
drFVWNDbwiysAjlZ4wKDeHSgNiVSJdzFYQUKuF7AOtZ6xa+EQm90XhpYuEYKg+7ii1C7CS4c18AX
wDFz05rQuLkhKyEoVaZPKcazgzQ/FBloAmfVmyVcL1tjVQTK4/jNlSQdBDMWCMvGyiB8LIax+Moe
jfIiTGUz9OIih85c4VQ6vWpROjYjYiRaU3V720tGhK+X+smR6/lU50c4SZHSsto7YukjM8foCdh5
eN7CkTqVmynKdI+Dz8Ddk/1JrSxI6nRDhaqVVVImsdK09usFCkRhrDrOD7d26QvQ4JJIf8Ytg9Kt
EOmKeS6MJqBLYo/f7bniqnnl9lFYMQJrIRFZ3caD0Z7O2+TH60VINNUOznZ/jYJb/PdC4NkhK+9z
JE81th+E8U5jVJ/6spsQBY5VJ20nNs3OJA9kv5ij+zApwfL58i3ihjWsLHXsE7gWkpGNX0QZEQum
bHBqiqMUQsBNKBPfOlOu8gEzsx3wxL2CtACSUZhwGwYg2R2qyeuFdFQ5PaYj7HQym5Uu4PdasVGU
xaqHinaoYyKIGL2lWoO7JHPR/maBBEWi9tDL0KE73flYIqUF7GjP14vk3gtVipYcfA5tECaz5CGk
Rev5NEyAqKopIDgXthWR5Givd9tKPnqnB0Ddbw773Kc9oDuR7t/iFmfXi6reRbEf5HstP3fubDwk
UlUsjOLV9GBdPabxRkneUFbY+ghQcFvbWTt6OVYUFg4sfAihbm3zkD2YzLlekOyJscJGwZzT1fan
CM+S2zpHzA1Pg9I+JkvYqEXoLSVZKoXZW0pJwnrgZ7nsaLkdnQY52ReQBtmP6yUmC/P8fqEvYIM3
oWPvDuxbAKMN41ZkHhSoH/d2kp+4qT/uPtKjm3F7H/PBcpIg3FsSC6bwfMsmWK4XDxUTTnouuWMD
cfWXQV3mgVklfFh8AmnaLEP9pW6j/v0auzThR2MM380rmTSYN1Qhy1kvyOxJzrA8/rLXDLD8dUB5
d44Lzw81nTXuwrc2sXlaGL88IieF1NmDiV89LYsoyfzgI6um240wbb9cTahGH7NepEN5vaDrNjTn
J3i75rZis9Un3p1Lj7pHx6VoPtPQYGZACCQVqNmr3vDMobb4fTICLKsP4bi3JpmgOcmBPqOvl7fU
g68c/PMD/5GLP8JBz3PWJg3I5l/wN/ID/69I/f4XcFShOLMGAAA=#>
#endregion
param
(
	[Parameter(Mandatory = $true)]
	[string]$VMName
)

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formAddDisks = New-Object 'System.Windows.Forms.Form'
	$buttonDeleteDrive = New-Object 'System.Windows.Forms.Button'
	$datagridviewDiskList = New-Object 'System.Windows.Forms.DataGridView'
	$buttonAddDrive = New-Object 'System.Windows.Forms.Button'
	$numericupdownDriveSize = New-Object 'System.Windows.Forms.NumericUpDown'
	$comboboxDriveMount = New-Object 'System.Windows.Forms.ComboBox'
	$labelDriveSizeGB = New-Object 'System.Windows.Forms.Label'
	$labelDriveLetter = New-Object 'System.Windows.Forms.Label'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	
	$formAddDisks_Load={
		
		$formAddDisks.Text = "Add Disks to $VMName"
		
		if ($global:vmAdditionalDisks | ?{ $_.VMName -eq $VMName })
		{
			$diskTmp = $global:vmAdditionalDisks | ?{ $_.VMName -eq $VMName } | select DriveLetter, DriveSize
			
			$driveList = ConvertTo-DataTable -InputObject $diskTmp
			Update-DataGridView -DataGridView $datagridviewDiskList -Item $driveList
			
			foreach ($disk in $diskTmp)
			{
				$comboboxDriveMount.Items.Remove($disk.DriveLetter)
			}
			
			$buttonDeleteDrive.Enabled = $true
		}
	}
	
	#region Control Helper Functions
	function Add-ListViewItem
	{
	<#
		.SYNOPSIS
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.DESCRIPTION
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.PARAMETER ListView
			The ListView control to add the items to.
	
		.PARAMETER Items
			The object or objects you wish to load into the ListView's Items collection.
			
		.PARAMETER  ImageIndex
			The index of a predefined image in the ListView's ImageList.
		
		.PARAMETER  SubItems
			List of strings to add as Subitems.
		
		.PARAMETER Group
			The group to place the item(s) in.
		
		.PARAMETER Clear
			This switch clears the ListView's Items before adding the new item(s).
		
		.EXAMPLE
			Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
	#>
		
		Param( 
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.ListView]$ListView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Items,
		[int]$ImageIndex = -1,
		[string[]]$SubItems,
		$Group,
		[switch]$Clear)
		
		if($Clear)
		{
			$ListView.Items.Clear();
	    }
	    
	    $lvGroup = $null
	    if ($Group -is [System.Windows.Forms.ListViewGroup])
	    {
	        $lvGroup = $Group
	    }
	    elseif ($Group -is [string])
	    {
	        #$lvGroup = $ListView.Group[$Group] # Case sensitive
	        foreach ($groupItem in $ListView.Groups)
	        {
	            if ($groupItem.Name -eq $Group)
	            {
	                $lvGroup = $groupItem
	                break
	            }
	        }
	        
	        if ($null -eq $lvGroup)
	        {
	            $lvGroup = $ListView.Groups.Add($Group, $Group)
	        }
	    }
	    
		if($Items -is [Array])
		{
			$ListView.BeginUpdate()
			foreach ($item in $Items)
			{		
				$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
				#Store the object in the Tag
				$listitem.Tag = $item
				
				if($null -ne $SubItems)
				{
					$listitem.SubItems.AddRange($SubItems)
				}
				
				if($null -ne $lvGroup)
				{
					$listitem.Group = $lvGroup
				}
			}
			$ListView.EndUpdate()
		}
		else
		{
			#Add a new item to the ListView
			$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $Items
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
	}
	
	
	function Update-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The DataGridView control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the DataGridView's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		.PARAMETER AutoSizeColumns
		    Resizes DataGridView control's columns after loading the items.
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Item,
		    [Parameter(Mandatory=$false)]
			[string]$DataMember,
			[System.Windows.Forms.DataGridViewAutoSizeColumnMode]$AutoSizeColumns = 'None'
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
		{
			$DataGridView.DataSource = $Item.Tables[0]
		}
		elseif ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{
				$array.Add($Item)
			}
			$DataGridView.DataSource = $array
		}
		
		if ($AutoSizeColumns -ne 'None')
		{
			$DataGridView.AutoResizeColumns($AutoSizeColumns)
		}
		
		$DataGridView.ResumeLayout()
	}
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterWMIProperties
				This switch removes WMI properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param(
		[ValidateNotNull()]
		$InputObject, 
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
		
		if($null -eq $Table)
		{
			$Table = New-Object System.Data.DataTable
		}
		
		if ($InputObject -is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
		{
			$Table = $InputObject.Tables[0]
		}
		else
		{
			if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
				
				if ($null -eq $InputObject) { return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach ($item in $InputObject)
				{
					if ($null -ne $item)
					{
						$object = $item
						break
					}
				}
				
				if ($null -eq $object) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if ($null -ne $prop.Value)
						{
							try { $type = $prop.Value.GetType() }
							catch { Out-Null }
						}
						
						if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
							[void]$table.Columns.Add($prop.Name, $type)
						}
						else #Type info not found
						{
							[void]$table.Columns.Add($prop.Name)
						}
					}
				}
				
				if ($object -is [System.Data.DataRow])
				{
					foreach ($item in $InputObject)
					{
						$Table.Rows.Add($item)
					}
					return @( ,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()
			}
			
			foreach ($item in $InputObject)
			{
				$row = $table.NewRow()
				
				if ($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if ($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
		
		return @(,$Table)	
	}
	
	function Update-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
		
		.PARAMETER ComboBox
			The ComboBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ComboBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red" -Append
			Update-ComboBox $combobox1 "White" -Append
			Update-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Update-ComboBox $combobox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ComboBox]
			$ComboBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]
			$DisplayMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	function Update-ListViewColumnSort
	{
	<#
		.SYNOPSIS
			Sort the ListView's item using the specified column.
		
		.DESCRIPTION
			Sort the ListView's item using the specified column.
			This function uses Add-Type to define a class that sort the items.
			The ListView's Tag property is used to keep track of the sorting.
		
		.PARAMETER ListView
			The ListView control to sort.
		
		.PARAMETER ColumnIndex
			The index of the column to use for sorting.
		
		.PARAMETER SortOrder
			The direction to sort the items. If not specified or set to None, it will toggle.
		
		.EXAMPLE
			Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListView]
			$ListView,
			[Parameter(Mandatory = $true)]
			[int]
			$ColumnIndex,
			[System.Windows.Forms.SortOrder]
			$SortOrder = 'None'
		)
		
		if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
		{
			return;
		}
		
		#region Define ListViewItemComparer
		try
		{
			[ListViewItemComparer] | Out-Null
		}
		catch
		{
			Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
		}
		#endregion
		
		if ($ListView.Tag -is [ListViewItemComparer])
		{
			#Toggle the Sort Order
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
				{
					$ListView.Tag.sortOrder = 'Descending'
				}
				else
				{
					$ListView.Tag.sortOrder = 'Ascending'
				}
			}
			else
			{
				$ListView.Tag.sortOrder = $SortOrder
			}
			
			$ListView.Tag.column = $ColumnIndex
			$ListView.Sort() #Sort the items
		}
		else
		{
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
			}
			
			#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
			$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
			$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
		}
	}
	
	$comboboxDriveMount_SelectedIndexChanged={
		
		if (($comboboxDriveMount.Text -ne '') -and ($numericupdownDriveSize.Text -gt '0'))
		{
			$buttonAddDrive.Enabled = $true
		}
		
	}
	
	$buttonAddDrive_Click={
		
		$driveObject = New-Object PSObject
		
		$driveObject | Add-Member -MemberType NoteProperty -Name "VMName" -Value $VMName
		$driveObject | Add-Member -MemberType NoteProperty -Name "DriveLetter" -Value $comboboxDriveMount.Text
		$driveObject | Add-Member -MemberType NoteProperty -Name "DriveSize" -Value $numericupdownDriveSize.Text
		
		$global:vmAdditionalDisks = [System.Array]$global:vmAdditionalDisks + $driveObject
		
		$driveRecord = ConvertTo-DataTable ($global:vmAdditionalDisks | ?{ $_.VMName -eq $VMName } | select DriveLetter,DriveSize)
		Update-DataGridView -DataGridView $datagridviewDiskList -Item $driveRecord
		
		$comboboxDriveMount.Items.Remove($comboboxDriveMount.Text)
		
		$buttonDeleteDrive.Enabled = $true
		
	}
	
	$numericupdownDriveSize_ValueChanged={
		
		if (($comboboxDriveMount.Text -ne '') -and ($numericupdownDriveSize.Text -ne '0') -and ($numericupdownDriveSize.Text -ne ''))
		{
			$buttonAddDrive.Enabled = $true
		}
		
	}
	
	$buttonDeleteDrive_Click={
		
		$global:vmAdditionalDisks = $global:vmAdditionalDisks | ?{ -not (($_.VMName -eq $VMName) -and ($_.DriveLetter -eq $datagridviewDiskList.CurrentRow.Cells[0].Value)) }
		$datagridviewDiskList.Rows.RemoveAt($datagridviewDiskList.CurrentRow.Index)
		
		if (-not ($global:vmAdditionalDisks | ?{ $_.VMName -eq $VMName})) { $buttonDeleteDrive.Enabled = $false }
		
	}
	
	$numericupdownDriveSize_KeyDown=[System.Windows.Forms.KeyEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
		#TODO: Place custom script here
		
	}
	
	$numericupdownDriveSize_KeyPress=[System.Windows.Forms.KeyPressEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.KeyPressEventArgs]
		
		if (($comboboxDriveMount.Text -ne '') -and ($numericupdownDriveSize.Text -ne '0') -and ($numericupdownDriveSize.Text -ne ''))
		{
			$buttonAddDrive.Enabled = $true
		}
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formAddDisks.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:AddVirtualDisk_datagridviewDiskList = $datagridviewDiskList.SelectedCells
		$script:AddVirtualDisk_numericupdownDriveSize = $numericupdownDriveSize.Value
		$script:AddVirtualDisk_comboboxDriveMount = $comboboxDriveMount.Text
		$script:AddVirtualDisk_comboboxDriveMount_SelectedItem = $comboboxDriveMount.SelectedItem
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonDeleteDrive.remove_Click($buttonDeleteDrive_Click)
			$buttonAddDrive.remove_Click($buttonAddDrive_Click)
			$numericupdownDriveSize.remove_ValueChanged($numericupdownDriveSize_ValueChanged)
			$numericupdownDriveSize.remove_KeyDown($numericupdownDriveSize_KeyDown)
			$numericupdownDriveSize.remove_KeyPress($numericupdownDriveSize_KeyPress)
			$comboboxDriveMount.remove_SelectedIndexChanged($comboboxDriveMount_SelectedIndexChanged)
			$formAddDisks.remove_Load($formAddDisks_Load)
			$formAddDisks.remove_Load($Form_StateCorrection_Load)
			$formAddDisks.remove_Closing($Form_StoreValues_Closing)
			$formAddDisks.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formAddDisks.SuspendLayout()
	$numericupdownDriveSize.BeginInit()
	#
	# formAddDisks
	#
	$formAddDisks.Controls.Add($buttonDeleteDrive)
	$formAddDisks.Controls.Add($datagridviewDiskList)
	$formAddDisks.Controls.Add($buttonAddDrive)
	$formAddDisks.Controls.Add($numericupdownDriveSize)
	$formAddDisks.Controls.Add($comboboxDriveMount)
	$formAddDisks.Controls.Add($labelDriveSizeGB)
	$formAddDisks.Controls.Add($labelDriveLetter)
	$formAddDisks.Controls.Add($buttonOK)
	$formAddDisks.AcceptButton = $buttonOK
	$formAddDisks.AutoScaleDimensions = '6, 13'
	$formAddDisks.AutoScaleMode = 'Font'
	$formAddDisks.ClientSize = '284, 262'
	$formAddDisks.FormBorderStyle = 'FixedDialog'
	$formAddDisks.MaximizeBox = $False
	$formAddDisks.MinimizeBox = $False
	$formAddDisks.Name = 'formAddDisks'
	$formAddDisks.StartPosition = 'CenterScreen'
	$formAddDisks.Text = 'Form'
	$formAddDisks.add_Load($formAddDisks_Load)
	#
	# buttonDeleteDrive
	#
	$buttonDeleteDrive.Enabled = $False
	$buttonDeleteDrive.Location = '93, 87'
	$buttonDeleteDrive.Name = 'buttonDeleteDrive'
	$buttonDeleteDrive.Size = '75, 23'
	$buttonDeleteDrive.TabIndex = 19
	$buttonDeleteDrive.Text = '&Delete Drive'
	$buttonDeleteDrive.UseCompatibleTextRendering = $True
	$buttonDeleteDrive.UseVisualStyleBackColor = $True
	$buttonDeleteDrive.add_Click($buttonDeleteDrive_Click)
	#
	# datagridviewDiskList
	#
	$datagridviewDiskList.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridviewDiskList.Location = '12, 128'
	$datagridviewDiskList.MultiSelect = $False
	$datagridviewDiskList.Name = 'datagridviewDiskList'
	$datagridviewDiskList.ReadOnly = $True
	$datagridviewDiskList.SelectionMode = 'FullRowSelect'
	$datagridviewDiskList.Size = '260, 93'
	$datagridviewDiskList.TabIndex = 18
	#
	# buttonAddDrive
	#
	$buttonAddDrive.Enabled = $False
	$buttonAddDrive.Location = '12, 87'
	$buttonAddDrive.Name = 'buttonAddDrive'
	$buttonAddDrive.Size = '75, 23'
	$buttonAddDrive.TabIndex = 17
	$buttonAddDrive.Text = '&Add Drive'
	$buttonAddDrive.UseCompatibleTextRendering = $True
	$buttonAddDrive.UseVisualStyleBackColor = $True
	$buttonAddDrive.add_Click($buttonAddDrive_Click)
	#
	# numericupdownDriveSize
	#
	$numericupdownDriveSize.Increment = 5
	$numericupdownDriveSize.Location = '113, 58'
	$numericupdownDriveSize.Maximum = 5000
	$numericupdownDriveSize.Minimum = 5
	$numericupdownDriveSize.Name = 'numericupdownDriveSize'
	$numericupdownDriveSize.Size = '49, 20'
	$numericupdownDriveSize.TabIndex = 16
	$numericupdownDriveSize.Value = 5
	$numericupdownDriveSize.add_ValueChanged($numericupdownDriveSize_ValueChanged)
	$numericupdownDriveSize.add_KeyDown($numericupdownDriveSize_KeyDown)
	$numericupdownDriveSize.add_KeyPress($numericupdownDriveSize_KeyPress)
	#
	# comboboxDriveMount
	#
	$comboboxDriveMount.DropDownStyle = 'DropDownList'
	$comboboxDriveMount.FormattingEnabled = $True
	[void]$comboboxDriveMount.Items.Add('E')
	[void]$comboboxDriveMount.Items.Add('F')
	[void]$comboboxDriveMount.Items.Add('G')
	[void]$comboboxDriveMount.Items.Add('H')
	[void]$comboboxDriveMount.Items.Add('I')
	[void]$comboboxDriveMount.Items.Add('J')
	[void]$comboboxDriveMount.Items.Add('K')
	[void]$comboboxDriveMount.Items.Add('L')
	[void]$comboboxDriveMount.Items.Add('M')
	[void]$comboboxDriveMount.Items.Add('N')
	[void]$comboboxDriveMount.Items.Add('O')
	[void]$comboboxDriveMount.Items.Add('P')
	[void]$comboboxDriveMount.Items.Add('Q')
	[void]$comboboxDriveMount.Items.Add('R')
	[void]$comboboxDriveMount.Items.Add('S')
	[void]$comboboxDriveMount.Items.Add('T')
	[void]$comboboxDriveMount.Items.Add('U')
	[void]$comboboxDriveMount.Items.Add('V')
	[void]$comboboxDriveMount.Items.Add('W')
	[void]$comboboxDriveMount.Items.Add('X')
	[void]$comboboxDriveMount.Items.Add('Y')
	[void]$comboboxDriveMount.Items.Add('Z')
	$comboboxDriveMount.Location = '113, 20'
	$comboboxDriveMount.Name = 'comboboxDriveMount'
	$comboboxDriveMount.Size = '49, 21'
	$comboboxDriveMount.TabIndex = 15
	$comboboxDriveMount.add_SelectedIndexChanged($comboboxDriveMount_SelectedIndexChanged)
	#
	# labelDriveSizeGB
	#
	$labelDriveSizeGB.AutoSize = $True
	$labelDriveSizeGB.Location = '12, 61'
	$labelDriveSizeGB.Name = 'labelDriveSizeGB'
	$labelDriveSizeGB.Size = '86, 17'
	$labelDriveSizeGB.TabIndex = 14
	$labelDriveSizeGB.Text = 'Drive Size (GB):'
	$labelDriveSizeGB.UseCompatibleTextRendering = $True
	#
	# labelDriveLetter
	#
	$labelDriveLetter.AutoSize = $True
	$labelDriveLetter.Location = '12, 24'
	$labelDriveLetter.Name = 'labelDriveLetter'
	$labelDriveLetter.Size = '66, 17'
	$labelDriveLetter.TabIndex = 13
	$labelDriveLetter.Text = 'Drive Letter:'
	$labelDriveLetter.UseCompatibleTextRendering = $True
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Location = '197, 227'
	$buttonOK.Name = 'buttonOK'
	$buttonOK.Size = '75, 23'
	$buttonOK.TabIndex = 0
	$buttonOK.Text = '&OK'
	$buttonOK.UseCompatibleTextRendering = $True
	$buttonOK.UseVisualStyleBackColor = $True
	$numericupdownDriveSize.EndInit()
	$formAddDisks.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formAddDisks.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formAddDisks.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formAddDisks.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formAddDisks.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formAddDisks.ShowDialog()

}
#endregion Source: AddVirtualDisk.psf

#region Source: AddNicCard.psf
function Show-AddNicCard_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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#>
#endregion
param
(
	[Parameter(Mandatory = $true)]
	[string]$VMName
)

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formAddNic = New-Object 'System.Windows.Forms.Form'
	$textboxNICLabel = New-Object 'System.Windows.Forms.TextBox'
	$labelNICLabelName = New-Object 'System.Windows.Forms.Label'
	$datagridviewAdditionalNics = New-Object 'System.Windows.Forms.DataGridView'
	$buttonDeleteNIC = New-Object 'System.Windows.Forms.Button'
	$buttonAddNic = New-Object 'System.Windows.Forms.Button'
	$textboxDNS1AddNic = New-Object 'System.Windows.Forms.TextBox'
	$labelDNS1AddNic = New-Object 'System.Windows.Forms.Label'
	$checkboxStaticIPAddNic = New-Object 'System.Windows.Forms.CheckBox'
	$textboxDefaultGatewayAddNic = New-Object 'System.Windows.Forms.TextBox'
	$labelDefaultGatewayAddNic = New-Object 'System.Windows.Forms.Label'
	$textboxSubnetMaskAddNic = New-Object 'System.Windows.Forms.TextBox'
	$labelSubnetMaskAddNic = New-Object 'System.Windows.Forms.Label'
	$textboxIPAddressAddNic = New-Object 'System.Windows.Forms.TextBox'
	$comboboxVSwitchAddNic = New-Object 'System.Windows.Forms.ComboBox'
	$labelIPAddressAddNic = New-Object 'System.Windows.Forms.Label'
	$labelVirtualSwitchAddNic = New-Object 'System.Windows.Forms.Label'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	
	$formAddNic_Load = {
		
		$vmHost = $global:vmbuilds | ?{ $_.VMName -eq $VMName }
		$formAddNic.Text = "Additional NICs for $VMName"
		
		$script:vSwitchesAddNic = Get-VirtualPortGroup -Server $global:vcenterConnection.Name -Host $vmHost.("VM Host") | select Name | Sort-Object -Property Name
		Update-ComboBox -ComboBox $comboboxVSwitchAddNic -Items $script:vSwitchesAddNic.Name
		
		if ($global:vmAdditionalNICs | ?{ $_.VMName -eq $VMName })
		{
			$nicList = ConvertTo-DataTable -InputObject ($global:vmAdditionalNICs | ?{ $_.VMName -eq $VMName } | select NICLabel, VLAN, "IP Type", "IP Address", "Subnet Mask", "Default Gateway", "Primary DNS Server",NicGUID)
			Update-DataGridView -DataGridView $datagridviewAdditionalNics -Item $nicList
			
			$buttonDeleteNIC.Enabled = $true
			
			$Path = $env:TEMP
			
			if (-not (Get-Item "$Path\VcenterHistory" -ErrorAction SilentlyContinue))
			{
				New-Item -Name VcenterHistory -Path $Path -ItemType Directory
			}
			
			$global:vmAdditionalNICs | Export-Csv "$Path\vcenterhistory\nicCard.csv" -NoTypeInformation
		}
		
		
		
	}
	
	#region Control Helper Functions
	function Update-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The DataGridView control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the DataGridView's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		.PARAMETER AutoSizeColumns
		    Resizes DataGridView control's columns after loading the items.
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Item,
		    [Parameter(Mandatory=$false)]
			[string]$DataMember,
			[System.Windows.Forms.DataGridViewAutoSizeColumnMode]$AutoSizeColumns = 'None'
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
		{
			$DataGridView.DataSource = $Item.Tables[0]
		}
		elseif ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{
				$array.Add($Item)
			}
			$DataGridView.DataSource = $array
		}
		
		if ($AutoSizeColumns -ne 'None')
		{
			$DataGridView.AutoResizeColumns($AutoSizeColumns)
		}
		
		$DataGridView.ResumeLayout()
	}
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterWMIProperties
				This switch removes WMI properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param(
		[ValidateNotNull()]
		$InputObject, 
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
		
		if($null -eq $Table)
		{
			$Table = New-Object System.Data.DataTable
		}
		
		if ($InputObject -is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
		{
			$Table = $InputObject.Tables[0]
		}
		else
		{
			if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
				
				if ($null -eq $InputObject) { return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach ($item in $InputObject)
				{
					if ($null -ne $item)
					{
						$object = $item
						break
					}
				}
				
				if ($null -eq $object) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if ($null -ne $prop.Value)
						{
							try { $type = $prop.Value.GetType() }
							catch { Out-Null }
						}
						
						if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
							[void]$table.Columns.Add($prop.Name, $type)
						}
						else #Type info not found
						{
							[void]$table.Columns.Add($prop.Name)
						}
					}
				}
				
				if ($object -is [System.Data.DataRow])
				{
					foreach ($item in $InputObject)
					{
						$Table.Rows.Add($item)
					}
					return @( ,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()
			}
			
			foreach ($item in $InputObject)
			{
				$row = $table.NewRow()
				
				if ($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if ($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
		
		return @(,$Table)	
	}
	
	function Update-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
		
		.PARAMETER ComboBox
			The ComboBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ComboBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red" -Append
			Update-ComboBox $combobox1 "White" -Append
			Update-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Update-ComboBox $combobox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ComboBox]
			$ComboBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]
			$DisplayMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
	}
	#endregion
	
	$checkboxStaticIPAddNic_CheckedChanged={
		
		if ($checkboxStaticIPAddNic.Checked)
		{
			$textboxIPAddressAddNic.Text = ''
			$textboxSubnetMaskAddNic.Text = ''
			$textboxDefaultGatewayAddNic.Text = ''
			$textboxDNS1AddNic.Text = ''
			
			$textboxIPAddressAddNic.Enabled = $true
			$textboxSubnetMaskAddNic.Enabled = $true
			$textboxDefaultGatewayAddNic.Enabled = $true
			$textboxDNS1AddNic.Enabled = $true
			
			$buttonAddNic.Enabled = $false
		}
		else
		{
			$textboxIPAddressAddNic.Enabled = $false
			$textboxSubnetMaskAddNic.Enabled = $false
			$textboxDefaultGatewayAddNic.Enabled = $false
			$textboxDNS1AddNic.Enabled = $false
		}
		
	}
	
	$buttonAddNic_Click = {
		
		if ($checkboxStaticIPAddNic.Checked)
		{
			if ($textboxIPAddressAddNic.Text -and $textboxSubnetMaskAddNic.Text -and $textboxNICLabel.Text)
			{
				$complete = $true
			}
			else
			{
				$complete = $false
			}
		}
		else
		{
			if ($textboxNICLabel.Text)
			{
				$complete = $true
			}
			else
			{
				$complete = $false
			}
		}
		
		if ($complete)
		{
			$object = New-Object PSObject
			
			$object | Add-Member -MemberType NoteProperty -Name "VMName" -Value $VMName
			
			if ($checkboxStaticIPAddNic.Checked)
			{
				$object | Add-Member -MemberType NoteProperty -Name "NICLabel" -Value $textboxNICLabel.Text
				$object | Add-Member -MemberType NoteProperty -Name "IP Type" -Value "Static"
				$object | Add-Member -MemberType NoteProperty -Name "VLAN" -Value $comboboxVSwitchAddNic.Text
				$object | Add-Member -MemberType NoteProperty -Name "IP Address" -Value $textboxIPAddressAddNic.Text
				$object | Add-Member -MemberType NoteProperty -Name "Subnet Mask" -Value $textboxSubnetMaskAddNic.Text
				$object | Add-Member -MemberType NoteProperty -Name "Default Gateway" -Value $textboxDefaultGatewayAddNic.Text
				$object | Add-Member -MemberType NoteProperty -Name "Primary DNS Server" -Value $textboxDNS1AddNic.Text
				$object | Add-Member -MemberType NoteProperty -Name "NicGUID" -Value (New-GUID).GUID
			}
			else
			{
				$object | Add-Member -MemberType NoteProperty -Name "NICLabel" -Value $textboxNICLabel.Text
				$object | Add-Member -MemberType NoteProperty -Name "IP Type" -Value "DHCP"
				$object | Add-Member -MemberType NoteProperty -Name "VLAN" -Value $comboboxVSwitchAddNic.Text
				$object | Add-Member -MemberType NoteProperty -Name "IP Address" -Value ''
				$object | Add-Member -MemberType NoteProperty -Name "Subnet Mask" -Value ''
				$object | Add-Member -MemberType NoteProperty -Name "Default Gateway" -Value ''
				$object | Add-Member -MemberType NoteProperty -Name "Primary DNS Server" -Value ''
				$object | Add-Member -MemberType NoteProperty -Name "NicGUID" -Value (New-GUID).GUID
			}
			
			$nicExists = $false
			
			if ($object.("IP Type") -ne "DHCP")
			{
				if ($global:vmAdditionalNICs)
				{
					foreach ($item in ($global:vmAdditionalNICs | select VLAN, "IP Type", "IP Address", "Subnet Mask", "Default Gateway"))
					{
						$hash = Get-Hash -text $item
						if ($hash -eq (Get-Hash -text ($object | select VLAN, "IP Type", "IP Address", "Subnet Mask", "Default Gateway")))
						{
							[System.Windows.Forms.MessageBox]::Show("NIC Configuration already exists in build!")
							$nicExists = $true
						}
					}
				}
			}
			
			if (-not $nicExists)
			{
				$global:vmAdditionalNICs = [System.Array]$global:vmAdditionalNICs + $object
				
				$Path = $env:TEMP
				$global:vmAdditionalNICs | Export-Csv "$Path\vcenterhistory\nicCard.csv" -NoTypeInformation
				
				$nicList = ConvertTo-DataTable -InputObject ($global:vmAdditionalNICs | ?{ $_.VMName -eq $VMName } | select NICLabel, VLAN, "IP Type", "IP Address", "Subnet Mask", "Default Gateway", "Primary DNS Server", NicGUID)
				Update-DataGridView -DataGridView $datagridviewAdditionalNics -Item $nicList
				
				$buttonDeleteNIC.Enabled = $true
			}
			
			$textboxIPAddressAddNic.Clear()
			$textboxSubnetMaskAddNic.Clear()
			$textboxDefaultGatewayAddNic.Clear()
			$textboxDNS1AddNic.Clear()
			$checkboxStaticIPAddNic.Checked = $false
			$textboxNICLabel.Clear()
		}
		else
		{
			if ($checkboxStaticIPAddNic.Checked)
			{
				[System.Windows.Forms.MessageBox]::Show("Please ensure IP address, Subnet Mask and NIC Label are specifiedin order to continue.")
			}
			else
			{
				[System.Windows.Forms.MessageBox]::Show("Please ensure NIC Label is specified in order to continue.")
			}
		}
	}
	
	$buttonDeleteNIC_Click={
		
		$Path = $env:TEMP
		$tmpArray = Import-Csv "$Path\vcenterhistory\nicCard.csv"
		
		if ($tmpArray.Count -eq 1)
		{
			$global:vmAdditionalNICs = @()
		}
		else
		{
			$global:vmAdditionalNICs = $tmpArray | ? { $_.NicGUID -ne $datagridviewAdditionalNics.CurrentRow.Cells["NicGUID"].Value }
		}
		
		$datagridviewAdditionalNics.Rows.RemoveAt($datagridviewAdditionalNics.CurrentRow.Index)
		$global:vmAdditionalNICs | Export-Csv "$Path\vcenterhistory\nicCard.csv" -NoTypeInformation
	}
	
	$buttonOK_Click={
		
		
	}
	
	$comboboxVSwitchAddNic_SelectedIndexChanged={
		
		if (-not $checkboxStaticIPAddNic.Checked)
		{
			$buttonAddNic.Enabled = $true
		}
		
	}
	
	$textboxIPAddressAddNic_TextChanged={
		
		$buttonAddNic.Enabled = $true
	}
	
	$datagridviewAdditionalNics_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
		
		$buttonDeleteNIC.Enabled = $true
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formAddNic.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:AddNicCard_textboxNICLabel = $textboxNICLabel.Text
		$script:AddNicCard_datagridviewAdditionalNics = $datagridviewAdditionalNics.SelectedCells
		$script:AddNicCard_textboxDNS1AddNic = $textboxDNS1AddNic.Text
		$script:AddNicCard_checkboxStaticIPAddNic = $checkboxStaticIPAddNic.Checked
		$script:AddNicCard_textboxDefaultGatewayAddNic = $textboxDefaultGatewayAddNic.Text
		$script:AddNicCard_textboxSubnetMaskAddNic = $textboxSubnetMaskAddNic.Text
		$script:AddNicCard_textboxIPAddressAddNic = $textboxIPAddressAddNic.Text
		$script:AddNicCard_comboboxVSwitchAddNic = $comboboxVSwitchAddNic.Text
		$script:AddNicCard_comboboxVSwitchAddNic_SelectedItem = $comboboxVSwitchAddNic.SelectedItem
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$datagridviewAdditionalNics.remove_CellContentClick($datagridviewAdditionalNics_CellContentClick)
			$buttonDeleteNIC.remove_Click($buttonDeleteNIC_Click)
			$buttonAddNic.remove_Click($buttonAddNic_Click)
			$checkboxStaticIPAddNic.remove_CheckedChanged($checkboxStaticIPAddNic_CheckedChanged)
			$textboxIPAddressAddNic.remove_TextChanged($textboxIPAddressAddNic_TextChanged)
			$comboboxVSwitchAddNic.remove_SelectedIndexChanged($comboboxVSwitchAddNic_SelectedIndexChanged)
			$buttonOK.remove_Click($buttonOK_Click)
			$formAddNic.remove_Load($formAddNic_Load)
			$formAddNic.remove_Load($Form_StateCorrection_Load)
			$formAddNic.remove_Closing($Form_StoreValues_Closing)
			$formAddNic.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formAddNic.SuspendLayout()
	#
	# formAddNic
	#
	$formAddNic.Controls.Add($textboxNICLabel)
	$formAddNic.Controls.Add($labelNICLabelName)
	$formAddNic.Controls.Add($datagridviewAdditionalNics)
	$formAddNic.Controls.Add($buttonDeleteNIC)
	$formAddNic.Controls.Add($buttonAddNic)
	$formAddNic.Controls.Add($textboxDNS1AddNic)
	$formAddNic.Controls.Add($labelDNS1AddNic)
	$formAddNic.Controls.Add($checkboxStaticIPAddNic)
	$formAddNic.Controls.Add($textboxDefaultGatewayAddNic)
	$formAddNic.Controls.Add($labelDefaultGatewayAddNic)
	$formAddNic.Controls.Add($textboxSubnetMaskAddNic)
	$formAddNic.Controls.Add($labelSubnetMaskAddNic)
	$formAddNic.Controls.Add($textboxIPAddressAddNic)
	$formAddNic.Controls.Add($comboboxVSwitchAddNic)
	$formAddNic.Controls.Add($labelIPAddressAddNic)
	$formAddNic.Controls.Add($labelVirtualSwitchAddNic)
	$formAddNic.Controls.Add($buttonOK)
	$formAddNic.AcceptButton = $buttonOK
	$formAddNic.AutoScaleDimensions = '6, 13'
	$formAddNic.AutoScaleMode = 'Font'
	$formAddNic.ClientSize = '444, 454'
	$formAddNic.FormBorderStyle = 'FixedDialog'
	$formAddNic.MaximizeBox = $False
	$formAddNic.MinimizeBox = $False
	$formAddNic.Name = 'formAddNic'
	$formAddNic.StartPosition = 'CenterScreen'
	$formAddNic.Text = 'masked'
	$formAddNic.add_Load($formAddNic_Load)
	#
	# textboxNICLabel
	#
	$textboxNICLabel.Location = '357, 30'
	$textboxNICLabel.Name = 'textboxNICLabel'
	$textboxNICLabel.Size = '75, 20'
	$textboxNICLabel.TabIndex = 42
	#
	# labelNICLabelName
	#
	$labelNICLabelName.AutoSize = $True
	$labelNICLabelName.Location = '253, 31'
	$labelNICLabelName.Name = 'labelNICLabelName'
	$labelNICLabelName.Size = '91, 17'
	$labelNICLabelName.TabIndex = 41
	$labelNICLabelName.Text = 'NIC Label Name:'
	$labelNICLabelName.UseCompatibleTextRendering = $True
	#
	# datagridviewAdditionalNics
	#
	$datagridviewAdditionalNics.AllowUserToAddRows = $False
	$datagridviewAdditionalNics.AllowUserToDeleteRows = $False
	$datagridviewAdditionalNics.AllowUserToResizeColumns = $False
	$datagridviewAdditionalNics.AllowUserToResizeRows = $False
	$datagridviewAdditionalNics.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridviewAdditionalNics.Location = '31, 203'
	$datagridviewAdditionalNics.Name = 'datagridviewAdditionalNics'
	$datagridviewAdditionalNics.ReadOnly = $True
	$datagridviewAdditionalNics.RowHeadersVisible = $False
	$datagridviewAdditionalNics.SelectionMode = 'FullRowSelect'
	$datagridviewAdditionalNics.Size = '401, 210'
	$datagridviewAdditionalNics.TabIndex = 40
	$datagridviewAdditionalNics.add_CellContentClick($datagridviewAdditionalNics_CellContentClick)
	#
	# buttonDeleteNIC
	#
	$buttonDeleteNIC.Enabled = $False
	$buttonDeleteNIC.Location = '265, 174'
	$buttonDeleteNIC.Name = 'buttonDeleteNIC'
	$buttonDeleteNIC.Size = '75, 23'
	$buttonDeleteNIC.TabIndex = 38
	$buttonDeleteNIC.Text = 'Delete NIC'
	$buttonDeleteNIC.UseCompatibleTextRendering = $True
	$buttonDeleteNIC.UseVisualStyleBackColor = $True
	$buttonDeleteNIC.add_Click($buttonDeleteNIC_Click)
	#
	# buttonAddNic
	#
	$buttonAddNic.Enabled = $False
	$buttonAddNic.Location = '265, 145'
	$buttonAddNic.Name = 'buttonAddNic'
	$buttonAddNic.Size = '75, 23'
	$buttonAddNic.TabIndex = 37
	$buttonAddNic.Text = 'Add NIC'
	$buttonAddNic.UseCompatibleTextRendering = $True
	$buttonAddNic.UseVisualStyleBackColor = $True
	$buttonAddNic.add_Click($buttonAddNic_Click)
	#
	# textboxDNS1AddNic
	#
	$textboxDNS1AddNic.Enabled = $False
	$textboxDNS1AddNic.Location = '146, 173'
	$textboxDNS1AddNic.Name = 'textboxDNS1AddNic'
	$textboxDNS1AddNic.Size = '92, 20'
	$textboxDNS1AddNic.TabIndex = 35
	#
	# labelDNS1AddNic
	#
	$labelDNS1AddNic.AutoSize = $True
	$labelDNS1AddNic.Location = '32, 173'
	$labelDNS1AddNic.Name = 'labelDNS1AddNic'
	$labelDNS1AddNic.Size = '110, 17'
	$labelDNS1AddNic.TabIndex = 36
	$labelDNS1AddNic.Text = 'Primary DNS Server:'
	$labelDNS1AddNic.UseCompatibleTextRendering = $True
	#
	# checkboxStaticIPAddNic
	#
	$checkboxStaticIPAddNic.Location = '32, 51'
	$checkboxStaticIPAddNic.Name = 'checkboxStaticIPAddNic'
	$checkboxStaticIPAddNic.Size = '137, 24'
	$checkboxStaticIPAddNic.TabIndex = 29
	$checkboxStaticIPAddNic.Text = 'Use Static IP Settings'
	$checkboxStaticIPAddNic.UseCompatibleTextRendering = $True
	$checkboxStaticIPAddNic.UseVisualStyleBackColor = $True
	$checkboxStaticIPAddNic.add_CheckedChanged($checkboxStaticIPAddNic_CheckedChanged)
	#
	# textboxDefaultGatewayAddNic
	#
	$textboxDefaultGatewayAddNic.Enabled = $False
	$textboxDefaultGatewayAddNic.Location = '146, 144'
	$textboxDefaultGatewayAddNic.Name = 'textboxDefaultGatewayAddNic'
	$textboxDefaultGatewayAddNic.Size = '92, 20'
	$textboxDefaultGatewayAddNic.TabIndex = 33
	#
	# labelDefaultGatewayAddNic
	#
	$labelDefaultGatewayAddNic.AutoSize = $True
	$labelDefaultGatewayAddNic.Location = '32, 144'
	$labelDefaultGatewayAddNic.Name = 'labelDefaultGatewayAddNic'
	$labelDefaultGatewayAddNic.Size = '91, 17'
	$labelDefaultGatewayAddNic.TabIndex = 34
	$labelDefaultGatewayAddNic.Text = 'Default Gateway:'
	$labelDefaultGatewayAddNic.UseCompatibleTextRendering = $True
	#
	# textboxSubnetMaskAddNic
	#
	$textboxSubnetMaskAddNic.Enabled = $False
	$textboxSubnetMaskAddNic.Location = '146, 114'
	$textboxSubnetMaskAddNic.Name = 'textboxSubnetMaskAddNic'
	$textboxSubnetMaskAddNic.Size = '92, 20'
	$textboxSubnetMaskAddNic.TabIndex = 32
	#
	# labelSubnetMaskAddNic
	#
	$labelSubnetMaskAddNic.AutoSize = $True
	$labelSubnetMaskAddNic.Location = '32, 114'
	$labelSubnetMaskAddNic.Name = 'labelSubnetMaskAddNic'
	$labelSubnetMaskAddNic.Size = '73, 17'
	$labelSubnetMaskAddNic.TabIndex = 30
	$labelSubnetMaskAddNic.Text = 'Subnet Mask:'
	$labelSubnetMaskAddNic.UseCompatibleTextRendering = $True
	#
	# textboxIPAddressAddNic
	#
	$textboxIPAddressAddNic.Enabled = $False
	$textboxIPAddressAddNic.Location = '146, 82'
	$textboxIPAddressAddNic.Name = 'textboxIPAddressAddNic'
	$textboxIPAddressAddNic.Size = '92, 20'
	$textboxIPAddressAddNic.TabIndex = 31
	$textboxIPAddressAddNic.add_TextChanged($textboxIPAddressAddNic_TextChanged)
	#
	# comboboxVSwitchAddNic
	#
	$comboboxVSwitchAddNic.DropDownStyle = 'DropDownList'
	$comboboxVSwitchAddNic.FormattingEnabled = $True
	$comboboxVSwitchAddNic.Location = '114, 28'
	$comboboxVSwitchAddNic.Name = 'comboboxVSwitchAddNic'
	$comboboxVSwitchAddNic.Size = '121, 21'
	$comboboxVSwitchAddNic.TabIndex = 28
	$comboboxVSwitchAddNic.add_SelectedIndexChanged($comboboxVSwitchAddNic_SelectedIndexChanged)
	#
	# labelIPAddressAddNic
	#
	$labelIPAddressAddNic.AutoSize = $True
	$labelIPAddressAddNic.Location = '32, 85'
	$labelIPAddressAddNic.Name = 'labelIPAddressAddNic'
	$labelIPAddressAddNic.Size = '63, 17'
	$labelIPAddressAddNic.TabIndex = 26
	$labelIPAddressAddNic.Text = 'IP Address:'
	$labelIPAddressAddNic.UseCompatibleTextRendering = $True
	#
	# labelVirtualSwitchAddNic
	#
	$labelVirtualSwitchAddNic.AutoSize = $True
	$labelVirtualSwitchAddNic.Location = '32, 30'
	$labelVirtualSwitchAddNic.Name = 'labelVirtualSwitchAddNic'
	$labelVirtualSwitchAddNic.Size = '76, 17'
	$labelVirtualSwitchAddNic.TabIndex = 27
	$labelVirtualSwitchAddNic.Text = 'Virtual Switch:'
	$labelVirtualSwitchAddNic.UseCompatibleTextRendering = $True
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Location = '357, 419'
	$buttonOK.Name = 'buttonOK'
	$buttonOK.Size = '75, 23'
	$buttonOK.TabIndex = 0
	$buttonOK.Text = '&OK'
	$buttonOK.UseCompatibleTextRendering = $True
	$buttonOK.UseVisualStyleBackColor = $True
	$buttonOK.add_Click($buttonOK_Click)
	$formAddNic.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formAddNic.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formAddNic.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formAddNic.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formAddNic.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formAddNic.ShowDialog()

}
#endregion Source: AddNicCard.psf

#region Source: SetHostname.psf
function Show-SetHostname_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
eAQAACODCAAAAAAABABlVMeuo1gU3FvyPzz1FmlIJlh6/SSCCcZkbMLOYDIXMJf89ePp2Yw0tSqV
zllV+HbSpJvTYROf4/PrQ2DZtb9/kX/hv36Oh6+vb3Mo87J9NlLZpMYTpD9uOiodHNsP/6uH2Tf6
v4s/f1I3gJ+STWm8LjyYQ44TTFHg/gXPCfgD4DNRcTZaUT3KKlpBEtpWw1ujURetd9738+hwKUQe
HbVzC6pUYGtzlKSPh/ZuRF28Xzy5K51A2vYzSTFDzQQLUwasAEuPQlTT2SaXJ+r7pZUFQi8yr+ap
9IoA3Ix7x2xYxGas7nE81HVmF+Ucmd7UTxWs58ceBhdDscEJl1yJ2mSLJ1wMrqCTYWGS/uDxMsSf
CGrr7ykb80v5NOGYz1tRHQ+kq+ax3ktdc6FpoelHRwXadZVeK4JttRiv9gzLSlFjMSUfEDzES2ec
3CRvoXzzpUUV5ZN4b+r+/V6w44F5mYm/P8qHzuEeJtPeU/X2SLx7M1Gctzev3gbeipwy7TRxFCyE
XxT8Weo18wj7dfLzN2kLKbCDpWnL4yHBysl0Hu97/kZ60kw/Dk2gNG0ht5qLQFtFsO5IuPt1M2my
BN5MqG+kogVYQcl8limGysE1pIo4H4fjIbohFFoZ7+wqo/fdi1iTuWYxgJKoDrYCeFLS95y1o5X9
JwX+JwX+DQcqfqZBpNg2XlkmL6kwl6eRPR5MrIpLgeKMnj8PUUCs49I7/etqiazhxmTPBbIjatqw
J1AcaS/aYXHqFDmKhpDsvS5ncScB6rKh17U/HnRNyO6ZRIzniifoK/bEAz2+kW/VQwD7SCNOilzG
3wJE7C0lDmzLA3yks1N7ji7G3DJOE2TNS0euSWAdDwbqzjernYMFJw0uXpnmnrfXAI1u52HHfKIq
o21OeyMSyULQSokXlIlOyLKKcOpCo45TWbGK6DnDhO3xQMS0P7W3dsmtlbxzFr3UlZSPCyvIuZWQ
TXRBuYrOwmSkUZN9pd6CK9h92t7p5Abho7PE3EB8l7YyhPx4mkyUZbsimcfOyQhFrE/uIbVDmX0q
QNqGNkxrP3sByu18snPgyQGAgf6SnTzs2UNJ2VHHsGZIJbtzPMTG1p96OW7VoWwMv4mNyDuNXBKY
CJlqVAXP2WI5wcBtOBHHEm28pGwTCEgN6u1T69/f6J/a/xkADsIUxE2Zwi/0o3yj/12an78BeJhu
DHgEAAA=#>
#endregion
param
(
	[Parameter(Mandatory = $true)]
	[string]$VMName
)

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$SetHostname = New-Object 'System.Windows.Forms.Form'
	$maskedtextboxHostname = New-Object 'System.Windows.Forms.MaskedTextBox'
	$labelHostname = New-Object 'System.Windows.Forms.Label'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	$SetHostname_Load={
		
		if ($VMName -in $global:vmWorkgroupDomain.VMName)
		{
			$maskedtextboxHostname.Text = ($global:vmWorkgroupDomain | ? {$_.VMName -eq $VMName}).Hostname
		}
	}
	
	$buttonOK_Click={
		
		if ($maskedtextboxHostname.Text -match " ")
		{
			[System.Windows.Forms.MessageBox]::Show("Spaces are not allowed for hostnames.")
		}
		else
		{
			
			$domainObject = New-Object PSObject
			$domainObject | Add-Member -Type NoteProperty -Name "VMName" -Value $VMName
			$domainObject | Add-Member -Type NoteProperty -Name "Hostname" -Value $maskedtextboxHostname.Text
			
			$global:vmWorkgroupDomain = $global:vmWorkgroupDomain | ?{ $_.VMName -ne $VMName }
			
			$global:vmWorkgroupDomain = [System.Array]$global:vmWorkgroupDomain + $domainObject
			
			$global:vmWorkgroupDomain | Out-File "$logDirectory\hostnames.log"
			
			$labelOK1.Visible = $true
			
			Update-NavButtons
		}
	}
	
	$maskedtextboxHostname_TextChanged={
		
		if ($maskedtextboxHostname.Text -ne '')
		{
			$buttonOK.Enabled = $true
		}
		else
		{
			$buttonOK.Enabled = $false
		}
		
	}
	
	$maskedtextboxHostname_Enter={
		
		if ($maskedtextboxHostname.Text -eq '')
		{
			$maskedtextboxHostname.SelectionStart
		}
	}
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$SetHostname.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$maskedtextboxHostname.remove_TextChanged($maskedtextboxHostname_TextChanged)
			$maskedtextboxHostname.remove_Enter($maskedtextboxHostname_Enter)
			$buttonOK.remove_Click($buttonOK_Click)
			$SetHostname.remove_Load($SetHostname_Load)
			$SetHostname.remove_Load($Form_StateCorrection_Load)
			$SetHostname.remove_Closing($Form_StoreValues_Closing)
			$SetHostname.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$SetHostname.SuspendLayout()
	#
	# SetHostname
	#
	$SetHostname.Controls.Add($maskedtextboxHostname)
	$SetHostname.Controls.Add($labelHostname)
	$SetHostname.Controls.Add($buttonOK)
	$SetHostname.AcceptButton = $buttonOK
	$SetHostname.AutoScaleDimensions = '6, 13'
	$SetHostname.AutoScaleMode = 'Font'
	$SetHostname.ClientSize = '205, 97'
	$SetHostname.FormBorderStyle = 'FixedDialog'
	$SetHostname.MaximizeBox = $False
	$SetHostname.MinimizeBox = $False
	$SetHostname.Name = 'SetHostname'
	$SetHostname.StartPosition = 'CenterScreen'
	$SetHostname.Text = 'Set Hostname'
	$SetHostname.add_Load($SetHostname_Load)
	#
	# maskedtextboxHostname
	#
	$maskedtextboxHostname.AsciiOnly = $True
	$maskedtextboxHostname.BeepOnError = $True
	$maskedtextboxHostname.Location = '83, 26'
	$maskedtextboxHostname.Mask = 'AAAAAAAAAAAAAAA'
	$maskedtextboxHostname.Name = 'maskedtextboxHostname'
	$maskedtextboxHostname.PromptChar = ' '
	$maskedtextboxHostname.Size = '100, 20'
	$maskedtextboxHostname.TabIndex = 14
	$maskedtextboxHostname.add_TextChanged($maskedtextboxHostname_TextChanged)
	$maskedtextboxHostname.add_Enter($maskedtextboxHostname_Enter)
	#
	# labelHostname
	#
	$labelHostname.AutoSize = $True
	$labelHostname.Location = '20, 26'
	$labelHostname.Margin = '1, 0, 1, 0'
	$labelHostname.Name = 'labelHostname'
	$labelHostname.Size = '59, 17'
	$labelHostname.TabIndex = 13
	$labelHostname.Text = 'Hostname:'
	$labelHostname.UseCompatibleTextRendering = $True
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Enabled = $False
	$buttonOK.Location = '118, 62'
	$buttonOK.Name = 'buttonOK'
	$buttonOK.Size = '75, 23'
	$buttonOK.TabIndex = 0
	$buttonOK.Text = '&OK'
	$buttonOK.UseCompatibleTextRendering = $True
	$buttonOK.UseVisualStyleBackColor = $True
	$buttonOK.add_Click($buttonOK_Click)
	$SetHostname.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $SetHostname.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$SetHostname.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$SetHostname.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$SetHostname.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $SetHostname.ShowDialog()

}
#endregion Source: SetHostname.psf

#region Source: RenameAdminAccount.psf
function Show-RenameAdminAccount_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
FQQAACODCAAAAAAABABlVEmvo2gMvEfKf3jqK1ITwi6lnwQEwhZ2EsKN5WPf15Bf38yby0jji62S
XQeXyxcLRO0Chu0aTMHXXox52/z5hf5Gfn0fD19fF33I07wJKiGvgBbU4NsCzZ6YuM4bJorauZl+
d2Nygf/X+DMutEP9TUmfArnNgrC2DMPpV475N1iGQx6VsJwLxkw66ASfr9XLpS3JZTPU7cuyJ+2H
2uYvDSlwJ/MokR3xaxqTWrIcD2V2Zevef4t5XypCOM+fJaHpU1zBSRaemZpyaEjS7U1nuQ9Kqa8n
WB0GFn11wwrajvAZ4Qm1w2YAzs7xYL9xRkY+MgW4sYaRiO8drmOHG18pRe9dZZU5CT4JVo9otU3k
sdskfOKCPKlLeyVEAoqkvLy7PmQ29Od42DRiabtMbfJroIhoxathLU2SFJtSVTxeeZSo93sC/Ee1
mH4Dr1HkvsL7qdTcUD6lwYQvDJ/f4vXOTDtbCk9hhlqKhaO2i6MNoqRCuyozMNdt/vD13bNlhAQi
2peSaFA3kuYkzjTFwAopdVUJL4WLWEVu7j2UjgdLLyX6ro6WFSjkxhF4ZbcP28CKGccKg6+DNmaU
TG6znFVVm4cpvcHih4muGbgFheZwTvSPoMwuaHU81GZgFnFakTsknEU5QXl5K4NqIMWNtMpCNFjH
CgwCYaHPBwexKHB5/R6Hba0HGiJo32H1XvTxrSiF4yGELXfyZOf9zKxIoWGyU6FWUFq9l5P34DJC
N6BZh6ugOqnQ5moLNUqudKOVBorTVCbN/nViDXGOpXTcVSiFEwkaCT9VoAseeuh2xJrRermQUj0Q
HogHB8eQ1ddKXp9kr3nSiOF/1P75DsrcO79NlbxjAvN+zDubxaVphFlToexHhTw0KZ6HDkkpciMS
DO562VpkpGxJuDSz25TgjQI/EV/w3pZHvlZM9ucFo0kwsVoyHA8vizIyOlAUgq6H0LSuvQViE8Cy
Yw+9L6mkpWsTAk1lXU5DFceGwZSdva83MxSt5e3bU0Agzagyg/KOh7Puv5YxoeCbFDfRgOMCB8kL
Brdt8kTekbKb7c8F/jHjjy2ZcQR1WOVg/IJ35AL/9w18/wU4/fgJFQQAAA==#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formRenameAdministratorA = New-Object 'System.Windows.Forms.Form'
	$textboxAdminName = New-Object 'System.Windows.Forms.TextBox'
	$labelAccountName = New-Object 'System.Windows.Forms.Label'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formRenameAdministratorA_Load={
		
		if ($global:vmAdminAccount) { $textboxAdminName.Text = $global:vmAdminAccount }
	}
	
	$buttonOK_Click={
		
		$global:vmAdminAccount = $textboxAdminName.Text
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formRenameAdministratorA.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:RenameAdminAccount_textboxAdminName = $textboxAdminName.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonOK.remove_Click($buttonOK_Click)
			$formRenameAdministratorA.remove_Load($formRenameAdministratorA_Load)
			$formRenameAdministratorA.remove_Load($Form_StateCorrection_Load)
			$formRenameAdministratorA.remove_Closing($Form_StoreValues_Closing)
			$formRenameAdministratorA.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formRenameAdministratorA.SuspendLayout()
	#
	# formRenameAdministratorA
	#
	$formRenameAdministratorA.Controls.Add($textboxAdminName)
	$formRenameAdministratorA.Controls.Add($labelAccountName)
	$formRenameAdministratorA.Controls.Add($buttonOK)
	$formRenameAdministratorA.AcceptButton = $buttonOK
	$formRenameAdministratorA.AutoScaleDimensions = '6, 13'
	$formRenameAdministratorA.AutoScaleMode = 'Font'
	$formRenameAdministratorA.ClientSize = '312, 101'
	$formRenameAdministratorA.FormBorderStyle = 'FixedDialog'
	$formRenameAdministratorA.MaximizeBox = $False
	$formRenameAdministratorA.MinimizeBox = $False
	$formRenameAdministratorA.Name = 'formRenameAdministratorA'
	$formRenameAdministratorA.StartPosition = 'CenterScreen'
	$formRenameAdministratorA.Text = 'Rename Administrator Account'
	$formRenameAdministratorA.add_Load($formRenameAdministratorA_Load)
	#
	# textboxAdminName
	#
	$textboxAdminName.Location = '135, 34'
	$textboxAdminName.Name = 'textboxAdminName'
	$textboxAdminName.Size = '161, 20'
	$textboxAdminName.TabIndex = 2
	#
	# labelAccountName
	#
	$labelAccountName.AutoSize = $True
	$labelAccountName.Location = '12, 37'
	$labelAccountName.Name = 'labelAccountName'
	$labelAccountName.Size = '117, 17'
	$labelAccountName.TabIndex = 1
	$labelAccountName.Text = 'Admin Account Name:'
	$labelAccountName.UseCompatibleTextRendering = $True
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Location = '221, 66'
	$buttonOK.Name = 'buttonOK'
	$buttonOK.Size = '75, 23'
	$buttonOK.TabIndex = 0
	$buttonOK.Text = '&OK'
	$buttonOK.UseCompatibleTextRendering = $True
	$buttonOK.UseVisualStyleBackColor = $True
	$buttonOK.add_Click($buttonOK_Click)
	$formRenameAdministratorA.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formRenameAdministratorA.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formRenameAdministratorA.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formRenameAdministratorA.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formRenameAdministratorA.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formRenameAdministratorA.ShowDialog()

}
#endregion Source: RenameAdminAccount.psf

#region Source: Functions\ActivateWindows.ps1
function Invoke-ActivateWindows_ps1
{
	<#
		.SYNOPSIS
			A brief description of the Invoke-ActivateWindows_ps1 file.
		
		.DESCRIPTION
			A description of the file.
		
		.PARAMETER KMSHost
			A description of the KMSHost parameter.
		
		.PARAMETER LicenseKey
			A description of the LicenseKey parameter.
		
		.NOTES
			===========================================================================
			Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2018 v5.5.150
			Created on:   	9/20/2019 1:31 PM
			Created by:   	dalthakar
			Organization:
			Filename:     	ActivateWindows.ps1
			===========================================================================
	#>
	function Activate-Windows
	{
		param
		(
			[string]$KMSHost,
			[Parameter(Mandatory = $true)]
			[string]$LicenseKey
		)
		
	}
}
#endregion Source: ActivateWindows.ps1

#region Source: EnterRetailKey.psf
function Show-EnterRetailKey_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
TwQAACODCAAAAAAABABllMmOo1oMQPeR8g+l3iI1EGapqiTCFELCHELY3YTLlMsQZvj6zqu3aam9
sixbsnV0/OnCRz3CdpFBDz7eSZfX1dcv6jf563u7+fj4tNo8zSuA1BxBE5TwW6l62LqwBzky4PK7
6ZJP/J+mn1G1bstv4bZAkqvvY1qLomTJkvh/7EWJRL0wlqvozAJfcSE2QTP1AWEAU6tCV2tqgyAb
tDRP6moi2mzosw8WP0q67aYV+H2e1PK5m2VlQtlg4TGWrHOZmAy2f9+wwMSe1SVMWX0HblNcG73Z
iA/8queowgniHly8EJFeTLTbDRIWmXguxiPB6hIXYrpMHpHYamJhFMYhOYZutKgdmQ6M2yqWOVmG
J4ODnFcuR9V+x8a3PJUuEeYehHC7mWoJ7HdF+9QKFRqzQ9uZp0lXJq4b/gzP3DEwnajt/fDpuI0G
gObZKpWCXh1F/aULaTTfrvvRipy14bYbl9kJDWHB82LJ+cGgI7HUkyN7m3V0GjWTY8HuPEXoQc8T
MH2m0pVVxF9GSmJkUZlsfYm8cSK9l6a66XbTF5M9+zdnT0z845peKEE3vVWGgcY43qncPWXZDUZd
bnnuyTk6ladHGd1Lv8zK64nt7MH3dFXf16TEZNvNjZmPym09i/RxpKfJbSeS+493/ObtQZvKfe4p
8zyXxQgS3IzuLwQdZq3SMGT5085XTeXspiNqqgO+3QRWT+qLCVBftcPVd1rSa4psEeL8FmIQb1Mw
qIgxzmCsr5dsKl+JGgYyej5xca1iXT+wD8M0skpQ23i7oYqro4ajqdHMgxh6sJOEBlMpJbV8in3N
SUc6TiBDKsNOpsXq7DE47VKTchQ7P6R8uBq2mfa0Ch7khXgzBSfFY4IAIxw/l4m7ogyKUSNwwmmd
FOh7jxpu5QELFHUseSzKIFvtM3w/5y/lcNAriZdSqR+Z1DN2b6bsgzd87FFFydpnl0VHzZGSYz+/
tjyL8qkhQ5Ix1tcpqxBfPvdaa6tDh4MJ3swwPAI7dmziDpKyCJ7v3aaDd7dsfO8bbYxcUagvJevD
NlJbOYBjXg3lmR+O7Y14Fb0nMGMpHQRD4PSKS11rCPmCuNC4QEwIytsNDnYQF+1ipQTpx1nx6+sT
/1H5R2qx62B5RznsPvB35RP/+4F8/wGCBlsPTwQAAA==#>
#endregion
param
(
	[Parameter(Mandatory = $true)]
	[string]$VMName
)

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formEnterOSKey = New-Object 'System.Windows.Forms.Form'
	$maskedtextboxOSKey = New-Object 'System.Windows.Forms.MaskedTextBox'
	$labelOSProductKey = New-Object 'System.Windows.Forms.Label'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	$formEnterOSKey_Load={
		
		$formEnterOSKey.Text = "Enter OS Product Key - $VMName"
		
		$vmTemp = $global:vmOSKeys | ?{ ($_.VMName -eq $VMName) }
		
		if ($vmTemp.UseKMS -eq "No")
		{
			$maskedtextboxOSKey.Text = $vmTemp.ProductKey
		}
		
	}
	
	$buttonOK_Click={
		
		$global:vmOSKeys = $global:vmOSKeys | ?{ -not ($_.VMName -eq $VMName) }
			
		$object = New-Object PSObject
		
		$object | Add-Member -MemberType NoteProperty -Name "VMName" -Value $VMName
		$object | Add-Member -MemberType NoteProperty -Name "ProductKey" -Value $maskedtextboxOSKey.Text
		$object | Add-Member -MemberType NoteProperty -Name "UseKMS" -Value "No"
		$object | Add-Member -MemberType NoteProperty -Name "KMSServer" -Value ""
		$object | Add-Member -MemberType NoteProperty -Name "KMSServerPort" -Value ""
		
		$global:vmOSKeys = [System.Array]$global:vmOSKeys + $object
		
		$global:vmOSKeys | Out-File "$logDirectory\oskeys.txt"
	}
	
	$maskedtextboxOSKey_Enter={
		
		$maskedtextboxOSKey.SelectionStart = 1
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formEnterOSKey.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$maskedtextboxOSKey.remove_Enter($maskedtextboxOSKey_Enter)
			$buttonOK.remove_Click($buttonOK_Click)
			$formEnterOSKey.remove_Load($formEnterOSKey_Load)
			$formEnterOSKey.remove_Load($Form_StateCorrection_Load)
			$formEnterOSKey.remove_Closing($Form_StoreValues_Closing)
			$formEnterOSKey.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formEnterOSKey.SuspendLayout()
	#
	# formEnterOSKey
	#
	$formEnterOSKey.Controls.Add($maskedtextboxOSKey)
	$formEnterOSKey.Controls.Add($labelOSProductKey)
	$formEnterOSKey.Controls.Add($buttonOK)
	$formEnterOSKey.AcceptButton = $buttonOK
	$formEnterOSKey.AutoScaleDimensions = '6, 13'
	$formEnterOSKey.AutoScaleMode = 'Font'
	$formEnterOSKey.ClientSize = '204, 128'
	$formEnterOSKey.FormBorderStyle = 'FixedSingle'
	$formEnterOSKey.MaximizeBox = $False
	$formEnterOSKey.MinimizeBox = $False
	$formEnterOSKey.Name = 'formEnterOSKey'
	$formEnterOSKey.StartPosition = 'CenterScreen'
	$formEnterOSKey.Text = 'Enter OS Product Key'
	$formEnterOSKey.add_Load($formEnterOSKey_Load)
	#
	# maskedtextboxOSKey
	#
	$maskedtextboxOSKey.Location = '12, 54'
	$maskedtextboxOSKey.Mask = 'AAAAA-AAAAA-AAAAA-AAAAA-AAAAA'
	$maskedtextboxOSKey.Name = 'maskedtextboxOSKey'
	$maskedtextboxOSKey.PromptChar = ' '
	$maskedtextboxOSKey.Size = '178, 20'
	$maskedtextboxOSKey.TabIndex = 2
	$maskedtextboxOSKey.add_Enter($maskedtextboxOSKey_Enter)
	#
	# labelOSProductKey
	#
	$labelOSProductKey.AutoSize = $True
	$labelOSProductKey.Location = '12, 24'
	$labelOSProductKey.Name = 'labelOSProductKey'
	$labelOSProductKey.Size = '88, 17'
	$labelOSProductKey.TabIndex = 1
	$labelOSProductKey.Text = 'OS Product Key:'
	$labelOSProductKey.UseCompatibleTextRendering = $True
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Location = '117, 93'
	$buttonOK.Name = 'buttonOK'
	$buttonOK.Size = '75, 23'
	$buttonOK.TabIndex = 0
	$buttonOK.Text = '&OK'
	$buttonOK.UseCompatibleTextRendering = $True
	$buttonOK.UseVisualStyleBackColor = $True
	$buttonOK.add_Click($buttonOK_Click)
	$formEnterOSKey.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formEnterOSKey.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formEnterOSKey.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formEnterOSKey.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formEnterOSKey.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formEnterOSKey.ShowDialog()

}
#endregion Source: EnterRetailKey.psf

#region Source: Functions\Get-WebRequestTable.ps1
function Invoke-Get-WebRequestTable_ps1
{
	<#	
		.NOTES
		===========================================================================
		 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2018 v5.5.150
		 Created on:   	9/30/2019 10:37 AM
		 Created by:   	dalthakar
		 Organization: 	
		 Filename:     	Get-WebRequestTable.ps1
		===========================================================================
		.DESCRIPTION
			A description of the file.
	#>
	
	function Get-WebRequestTable
	{
		param (
			
			[Parameter(Mandatory = $true)]
			[Microsoft.PowerShell.Commands.HtmlWebResponseObject]$WebRequest,
			[Parameter(Mandatory = $true)]
			[int]$TableNumber
			
		)
		
		## Extract the tables out of the web request
		
		$tables = @($WebRequest.ParsedHtml.getElementsByTagName("TABLE"))
		
		$table = $tables[$TableNumber]
		
		$titles = @()
		
		$rows = @($table.Rows)
		
		## Go through all of the rows in the table
		
		foreach ($row in $rows)
		{
			
			$cells = @($row.Cells)
			
			
			
			## If we've found a table header, remember its titles
			
			if ($cells[0].tagName -eq "TH")
			{
				
				$titles = @($cells | % { ("" + $_.InnerText).Trim() })
				
				continue
				
			}
			
			## If we haven't found any table headers, make up names "P1", "P2", etc.
			
			if (-not $titles)
			{
				
				$titles = @(1 .. ($cells.Count + 2) | % { "P$_" })
				
			}
			
			## Now go through the cells in the the row. For each, try to find the
			
			## title that represents that column and create a hashtable mapping those
			
			## titles to content
			
			$resultObject = [Ordered] @{ }
			
			for ($counter = 0; $counter -lt $cells.Count; $counter++)
			{
				
				$title = $titles[$counter]
				
				if (-not $title) { continue }
				
				
				
				$resultObject[$title] = ("" + $cells[$counter].InnerText).Trim()
				
			}
			
			## And finally cast that hashtable to a PSCustomObject
			
			[PSCustomObject]$resultObject
			
		}
	}
}
#endregion Source: Get-WebRequestTable.ps1

#region Source: EnterKMSKey.psf
function Show-EnterKMSKey_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
KgUAACODCAAAAAAABABllEmrqwgQhfeC/+HxtkIbNWqE+y44xtk4G3fG2TjP+us7fXvT0LUqilO1
qXO+LyuNuzUdDy6ao1+fZiq79s9v7C/k9zcI/Pr1ZYxlXrZRLZR1qkdN+s23czoqmq2kx1/9lH3B
/1P87And2HwTmaUjsMBNu0TTrMGx9L/F0Jzu69SKVrSZ9dAFvonKhuOmlO2NcsnrV+QP5LOTiJ2w
3sjJRKhU7Zi9rRjZgkAvMApdlclRDu9S5shMgJd1XE7jhZ1Zd1+vM9k6Vzvuq4RX/cyck70eWZqA
4voqiaQo4wlrLQ1iPaQUBOo4pw45l7EBzbyH3Vryjg/G016Ks7FnZbPo8FRRB9LtXbwWwhVBFyTS
9FU3EGM0CS+Z4rLlXx1kigEILBCt4A9/Tm9uVvDBTTEnrrQ4lfd2mY9DfytynCPsZ+45aggdIXnT
NSpNFPZFHGY0FQ+aK7MgR2+7wn2uoYtaC7Fae/FIej0+ds542TnDN614PRo7kiMpcAwR6zp61K/1
OulMxWjHVevrbGfMiGq7HnFhVldCECDoKcxFx9Nme0FphY0vIac5b2kdXFUY7vBa5/lbeu6i9NyC
wjnEiPJf5yow6H3pakm3tM29XGvElPQEBIJN3XIqt1TZ8Wxqsyg+O0TveruG46NkZiY/TnnKSHyW
t+dYs6J9CckdLm8p5XaUYchMICWs0qKIu6EgYFYZ26N1Tjq9sjR1u43a+I4g6j4xtpXEpOwp810u
H4OYCfSFwfWX1iv/2Ov2sVfm5tkj0Qq9U63JFEAAMq0Dpw9FPpz+zjdvq1VSNeqpe7T72lMMvZEf
81f9rjK9Q1EsacyunhqhbEN7UufIFS7C52kPMso5CAT4p1Z1RXvftpkZT5On2C1soU0KMb64ZkNq
8KEHUb3lN1xv8Qwf8LvaFLLH1jCc14ZmP+i7m7xRZ2AMEECRwltetu55/twRwyC/sc7yfLyc4Ymw
Cb4RTOmTsdZea946lIDgqkcyrHsGc+mEEWEHP5MFkWZMrHwQcCSsvkRXj6za8COD2l63pSaKq5n5
3MuextAv0fJ8VXM8nWbiDWTROaod372Peay7HdCY5D+5ooS0Bwhoo2KsG0WVOI0mgsi8PQ0Rz/aV
TWh98fMA686GaL0TXYpuvGaaPgb7PuuwaK+9m2XJBPfHkyVdYcxhEBASdaBMv+x2KZym1g1FI2zr
UuRZ/TVgCfYymZBEsaMiBLJOooVA9duOFMOA0k+bOD1TcsMzYpGtOy8g0HB2pp52lDla6ZKVirP4
fkISzoUafH+MboZZ/CAYN5akQoErAjhOg5v0Ce55ESbxfkLFiMG50uVRZYLAD5HoP3++4B9Q/SCL
nqa0edVlOv2CP5Mv+L9s/P4bvuUtbyoFAAA=#>
#endregion
param
(
	[Parameter(Mandatory = $true)]
	[string]$VMName
)

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formEnterKMSInfo = New-Object 'System.Windows.Forms.Form'
	$textboxKMSPort = New-Object 'System.Windows.Forms.TextBox'
	$labelKMSServerTCPPort = New-Object 'System.Windows.Forms.Label'
	$comboboxKMSClientKeys = New-Object 'System.Windows.Forms.ComboBox'
	$labelKMSClientKey = New-Object 'System.Windows.Forms.Label'
	$labelKMSServer = New-Object 'System.Windows.Forms.Label'
	$textboxKMSServer = New-Object 'System.Windows.Forms.TextBox'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	$formEnterKMSInfo_Load = {
		
		$formEnterKMSInfo.Text = "Enter KMS Info for $VMName"
		
		$kmsClientKeys = Import-Csv "$ScriptDirectory\reference\KMSClientKeys.csv"
		
		$comboboxKMSClientKeys.Items.AddRange($kmsClientKeys.OSEdition)
		
		$vmTemp = $global:vmOSKeys | ?{ ($_.VMName -eq $VMName) }
		
		if ($vmTemp.UseKMS -eq "Yes")
		{
			$textboxKMSServer.Text = $vmTemp.KMSServer
			$textboxKMSPort.Text = $vmTemp.KMSServerPort
			$previousKey = $kmsClientKeys | ?{$_.KMSClientKey -eq $vmTemp.ProductKey}
			$comboboxKMSClientKeys.Text = $previousKey.OSEdition
		}
		
	}
	
	#region Control Helper Functions
	function Update-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
		
		.PARAMETER ComboBox
			The ComboBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ComboBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red" -Append
			Update-ComboBox $combobox1 "White" -Append
			Update-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Update-ComboBox $combobox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ComboBox]
			$ComboBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]
			$DisplayMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
	}
	#endregion
	
	$textboxKMSServer_TextChanged={
		
		if (($textboxKMSServer.Text -ne "") -and ($comboboxKMSClientKeys.Text -ne ""))
		{
			$buttonOK.Enabled = $true
		}
		else
		{
			$buttonOK.Enabled = $false
		}
		
	}
	
	$buttonOK_Click={
		
		$global:vmOSKeys = $global:vmOSKeys | ?{ -not ($_.VMName -eq $VMName) }
		
		$object = New-Object PSObject
		
		$object | Add-Member -MemberType NoteProperty -Name "VMName" -Value $VMName
		
		$kmsClientKeys = Import-Csv "$ScriptDirectory\reference\KMSClientKeys.csv"
		$prodKey = $kmsClientKeys | ?{$_.OSEdition -eq $comboboxKMSClientKeys.Text}
		
		$object | Add-Member -MemberType NoteProperty -Name "ProductKey" -Value $prodKey.KMSClientKey
		$object | Add-Member -MemberType NoteProperty -Name "UseKMS" -Value "Yes"
		$object | Add-Member -MemberType NoteProperty -Name "KMSServer" -Value $textboxKMSServer.Text
		$object | Add-Member -MemberType NoteProperty -Name "KMSServerPort" -Value $textboxKMSPort.Text
		
		$global:vmOSKeys = [System.Array]$global:vmOSKeys + $object
		
		$global:vmOSKeys | Out-File "$logDirectory\oskeys.txt"
		
	}
	
	$comboboxKMSClientKeys_SelectedIndexChanged={
		
		if (($textboxKMSServer.Text -ne "") -and ($comboboxKMSClientKeys.Text -ne ""))
		{
			$buttonOK.Enabled = $true
		}
		else
		{
			$buttonOK.Enabled = $false
		}
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formEnterKMSInfo.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:EnterKMSKey_textboxKMSPort = $textboxKMSPort.Text
		$script:EnterKMSKey_comboboxKMSClientKeys = $comboboxKMSClientKeys.Text
		$script:EnterKMSKey_comboboxKMSClientKeys_SelectedItem = $comboboxKMSClientKeys.SelectedItem
		$script:EnterKMSKey_textboxKMSServer = $textboxKMSServer.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$comboboxKMSClientKeys.remove_SelectedIndexChanged($comboboxKMSClientKeys_SelectedIndexChanged)
			$textboxKMSServer.remove_TextChanged($textboxKMSServer_TextChanged)
			$buttonOK.remove_Click($buttonOK_Click)
			$formEnterKMSInfo.remove_Load($formEnterKMSInfo_Load)
			$formEnterKMSInfo.remove_Load($Form_StateCorrection_Load)
			$formEnterKMSInfo.remove_Closing($Form_StoreValues_Closing)
			$formEnterKMSInfo.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formEnterKMSInfo.SuspendLayout()
	#
	# formEnterKMSInfo
	#
	$formEnterKMSInfo.Controls.Add($textboxKMSPort)
	$formEnterKMSInfo.Controls.Add($labelKMSServerTCPPort)
	$formEnterKMSInfo.Controls.Add($comboboxKMSClientKeys)
	$formEnterKMSInfo.Controls.Add($labelKMSClientKey)
	$formEnterKMSInfo.Controls.Add($labelKMSServer)
	$formEnterKMSInfo.Controls.Add($textboxKMSServer)
	$formEnterKMSInfo.Controls.Add($buttonOK)
	$formEnterKMSInfo.AcceptButton = $buttonOK
	$formEnterKMSInfo.AutoScaleDimensions = '6, 13'
	$formEnterKMSInfo.AutoScaleMode = 'Font'
	$formEnterKMSInfo.ClientSize = '371, 174'
	$formEnterKMSInfo.FormBorderStyle = 'FixedDialog'
	$formEnterKMSInfo.MaximizeBox = $False
	$formEnterKMSInfo.MinimizeBox = $False
	$formEnterKMSInfo.Name = 'formEnterKMSInfo'
	$formEnterKMSInfo.StartPosition = 'CenterScreen'
	$formEnterKMSInfo.Text = 'Enter KMS Info'
	$formEnterKMSInfo.add_Load($formEnterKMSInfo_Load)
	#
	# textboxKMSPort
	#
	$textboxKMSPort.Location = '146, 61'
	$textboxKMSPort.Name = 'textboxKMSPort'
	$textboxKMSPort.Size = '49, 20'
	$textboxKMSPort.TabIndex = 6
	#
	# labelKMSServerTCPPort
	#
	$labelKMSServerTCPPort.AutoSize = $True
	$labelKMSServerTCPPort.Location = '22, 64'
	$labelKMSServerTCPPort.Name = 'labelKMSServerTCPPort'
	$labelKMSServerTCPPort.Size = '118, 17'
	$labelKMSServerTCPPort.TabIndex = 5
	$labelKMSServerTCPPort.Text = 'KMS Server TCP Port:'
	$labelKMSServerTCPPort.UseCompatibleTextRendering = $True
	#
	# comboboxKMSClientKeys
	#
	$comboboxKMSClientKeys.FormattingEnabled = $True
	$comboboxKMSClientKeys.Location = '111, 98'
	$comboboxKMSClientKeys.Name = 'comboboxKMSClientKeys'
	$comboboxKMSClientKeys.Size = '248, 21'
	$comboboxKMSClientKeys.TabIndex = 4
	$comboboxKMSClientKeys.add_SelectedIndexChanged($comboboxKMSClientKeys_SelectedIndexChanged)
	#
	# labelKMSClientKey
	#
	$labelKMSClientKey.AutoSize = $True
	$labelKMSClientKey.Location = '22, 102'
	$labelKMSClientKey.Name = 'labelKMSClientKey'
	$labelKMSClientKey.Size = '83, 17'
	$labelKMSClientKey.TabIndex = 3
	$labelKMSClientKey.Text = 'KMS Client Key'
	$labelKMSClientKey.UseCompatibleTextRendering = $True
	#
	# labelKMSServer
	#
	$labelKMSServer.AutoSize = $True
	$labelKMSServer.Location = '22, 31'
	$labelKMSServer.Name = 'labelKMSServer'
	$labelKMSServer.Size = '173, 17'
	$labelKMSServer.TabIndex = 2
	$labelKMSServer.Text = 'KMS Server Name or IP Address:'
	$labelKMSServer.UseCompatibleTextRendering = $True
	#
	# textboxKMSServer
	#
	$textboxKMSServer.Location = '201, 28'
	$textboxKMSServer.Name = 'textboxKMSServer'
	$textboxKMSServer.Size = '158, 20'
	$textboxKMSServer.TabIndex = 1
	$textboxKMSServer.add_TextChanged($textboxKMSServer_TextChanged)
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Enabled = $False
	$buttonOK.Location = '284, 139'
	$buttonOK.Name = 'buttonOK'
	$buttonOK.Size = '75, 23'
	$buttonOK.TabIndex = 0
	$buttonOK.Text = '&OK'
	$buttonOK.UseCompatibleTextRendering = $True
	$buttonOK.UseVisualStyleBackColor = $True
	$buttonOK.add_Click($buttonOK_Click)
	$formEnterKMSInfo.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formEnterKMSInfo.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formEnterKMSInfo.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formEnterKMSInfo.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formEnterKMSInfo.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formEnterKMSInfo.ShowDialog()

}
#endregion Source: EnterKMSKey.psf

#region Source: Functions\Get-Hash.ps1
function Invoke-Get-Hash_ps1
{
	<#
	.SYNOPSIS
	Gets the hash value of a file or string
	
	.DESCRIPTION
	Gets the hash value of a file or string
	It uses System.Security.Cryptography.HashAlgorithm (http://msdn.microsoft.com/en-us/library/system.security.cryptography.hashalgorithm.aspx)
	and FileStream Class (http://msdn.microsoft.com/en-us/library/system.io.filestream.aspx)
	Based on: http://blog.brianhartsock.com/2008/12/13/using-powershell-for-md5-checksums/ and some ideas on Microsoft Online Help
	
	Be aware, to avoid confusions, that if you use the pipeline, the behaviour is the same as using -Text, not -File
	
	.PARAMETER File
	File to get the hash from.
	
	.PARAMETER Text
	Text string to get the hash from
	
	.PARAMETER Algorithm
	Type of hash algorithm to use. Default is SHA1
	
	.EXAMPLE
	C:\PS> Get-Hash "hello_world.txt"
	Gets the SHA1 from myFile.txt file. When there's no explicit parameter, it uses -File
	
	.EXAMPLE
	Get-Hash -File "C:\temp\hello_world.txt"
	Gets the SHA1 from myFile.txt file
	
	.EXAMPLE
	C:\PS> Get-Hash -Algorithm "MD5" -Text "Hello Wold!"
	Gets the MD5 from a string
	
	.EXAMPLE
	C:\PS> "Hello Wold!" | Get-Hash
	We can pass a string throught the pipeline
	
	.EXAMPLE
	Get-Content "c:\temp\hello_world.txt" | Get-Hash
	It gets the string from Get-Content
	
	.EXAMPLE
	Get-ChildItem "C:\temp\*.txt" | %{ Write-Output "File: $($_)   has this hash: $(Get-Hash $_)" }
	This is a more complex example gets the hash of all "*.tmp" files
	
	.NOTES
	DBA daily stuff (http://dbadailystuff.com) by Josep Martínez Vilà
	Licensed under a Creative Commons Attribution 3.0 Unported License
	
	.LINK
	Original post: https://dbadailystuff.com/2013/03/11/get-hash-a-powershell-hash-function/
	#>
	function Get-Hash
	{
		Param
		(
			[parameter(Mandatory = $true, ValueFromPipeline = $true, ParameterSetName = "set1")]
			[String]$text,
			[parameter(Position = 0, Mandatory = $true,
					   ValueFromPipeline = $false, ParameterSetName = "set2")]
			[String]$file = "",
			[parameter(Mandatory = $false, ValueFromPipeline = $false)]
			[ValidateSet("MD5", "SHA", "SHA1", "SHA-256", "SHA-384", "SHA-512")]
			[String]$algorithm = "SHA1"
		)
		Begin
		{
			$hashAlgorithm = [System.Security.Cryptography.HashAlgorithm]::Create($algorithm)
		}
		Process
		{
			$md5StringBuilder = New-Object System.Text.StringBuilder 50
			$ue = New-Object System.Text.UTF8Encoding
			
			if ($file)
			{
				try
				{
					if (!(Test-Path -literalpath $file))
					{
						throw "Test-Path returned false."
					}
				}
				catch
				{
					throw "Get-Hash - File not found or without permisions: [$file]. $_"
				}
				try
				{
					[System.IO.FileStream]$fileStream = [System.IO.File]::Open($file, [System.IO.FileMode]::Open);
					$hashAlgorithm.ComputeHash($fileStream) |
					% { [void]$md5StringBuilder.Append($_.ToString("x2")) }
				}
				catch
				{
					throw "Get-Hash - Error reading or hashing the file: [$file]"
				}
				finally
				{
					$fileStream.Close()
					$fileStream.Dispose()
				}
			}
			else
			{
				$hashAlgorithm.ComputeHash($ue.GetBytes($text)) |
				% { [void]$md5StringBuilder.Append($_.ToString("x2")) }
			}
			
			return $md5StringBuilder.ToString()
		}
	}
}
#endregion Source: Get-Hash.ps1

#region Source: AddPostInstallScripts.psf
function Show-AddPostInstallScripts_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
OgYAACODCAAAAAAABABlldfK6+gOhs8DuYfFnBrGvcE/C9x7L0l85p64fW5xbF/9hLXZsGHrSAhJ
CF7p0Y9f5mAr50NM1/TX11leYPjnL/xv9K/f18uvXz/O/KpfQ9rJr6600778zRWFC5ZVG5Y17bog
n1/juvw9LtUP/H+5fzrIYO5/3zBvClGa7X2L4wRHFLj/GM+Jca+gG9HU3s5C22rD/AG2GPcG35uU
CNvT8ePGGOrl00NdNoO0rF2u1HMdnetFoDaaEUvHo6uifevIShWZFsgarDNJgzNliGtEvyE2KBR2
xRjNufvwS+67nPeteB25aIPMV9SUVDXp10usDfQ8yvaKza0w+n30PFBq3rDocMRGX61PonCn0Bgp
5B09Lt2GRZ+MnuVUC6HUAjgY/LbpjjCLGqKuF86XEC9nz1XM+WaS86BHIKFHAEnaHh8ElvJgogA4
vCwl+gwsJgcnGy1t1MltbANalGQzPInDfzSIcr34BPoUp9oFfo0dn9IKa+dYzhRZ6CRKmvbMn3og
ts6tNrlzf4lYSgU7eTBst0vS5jv5B83sWrS8ZDGg6wUYYpwVsbbQW9HGmL91nj9pXZKXb8MMpNRa
5u4xbcQgkEm90VQOOuFo4qU7eT++GzyOKFtm9PjxKr+zGdP6fK6trPaCk5vGk3vy2Rrbj34SB5w3
524PHMEf66lQpUA0HfvZUMSesbKcObqGGzrOr9kOv0nNQK+XctswZ7JOwoCgjW5QYkoozcMBCSex
kHtk0zmxG+PDSGinEht4AJA+G533kwl55obl6qK/BuhToVZTXi/zUhFGgrIyL9VrgFWI/8iX9iTo
c+q0mNTk29Nbcd5tiZ6nxFiywrjVQ/vYcX9pYyPRVJ9XIl0wFfR+vZAk+LS3BUpIjgd3R1IE5onq
QRhpgPzvhtPJgg7idPvqq737hy9pLXYk+87ya8iXwT3cc7HttPB6gSEgLHa6ApIzlppvCESoyhsC
HtNIn+4RPoFsIcKR5Rk/KpzTh6GyG5Za51bl0wsETextE2dohiQ7v17M2noD9v6BkfEsPpCZZ+7a
VHZ4siSnQiKJDHvKjnCD3VbkXj8L3/Lo0QJLJvr7fveV8k4w7K0jLJL/dpsGk/0whqljOrEcfYHC
fZER8xsmN5E4Gsqtn2uQIg6RoVn20Wg6B5I9I/qu8lC0nW8J7hqMXwMPZqPvbOb4yt1q4qUMZJrq
ZKuS9IyXIHvMu06S471EobH/MpbHI+kGmKXOG11q94MpCFmlRuMFp4p8kiavptdLUfog/wg5hHtp
SuMotfji2NlOvItkPwhv98PLlRupD20haNgxI26m4xKpMTVpIKF65QGesNjgnqNEfDVtQFmd0Bvu
D+VsLWh/9zYvs2SG63mvl/0uIXaOasyI3b4nGuNoxuh0KZaZGcxFqtgDhfkLgJ3ui6svkRQ7S6sl
QKPebgQcVV/dcVIUgYRqCsScmj0fS7/lI1rRwNFGqrx3e1428t6QTPVy9HdHz5gIMbS7Xy9Sgrkw
9lGLJBAcRcX8x1hgaK7KtXVnW2k8VpSls9PAJ+nTtGwTCAB9RPsyuFOFQ+B8v5X4zF3swxFfTR93
1iPeeIrf4Ych7hoGTwO9IeYEiZGXtOEXx//8wH9w/Qfc3LKUfda9yuUX/I38wP/7K37/C2yWFog6
BgAA#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formSelectPostInstallScr = New-Object 'System.Windows.Forms.Form'
	$labelScriptNotes = New-Object 'System.Windows.Forms.Label'
	$buttonDeleteScript = New-Object 'System.Windows.Forms.Button'
	$buttonAddScript = New-Object 'System.Windows.Forms.Button'
	$datagridviewScriptList = New-Object 'System.Windows.Forms.DataGridView'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$openfiledialogAddScript = New-Object 'System.Windows.Forms.OpenFileDialog'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formSelectPostInstallScr_Load={
		
		if ($global:postInstallScripts)
		{
			$scriptList = ConvertTo-DataTable -InputObject $global:postInstallScripts
			Update-DataGridView -DataGridView $datagridviewScriptList -Item $scriptList
			
			$buttonDeleteScript.Enabled = $true
		}
		else
		{
			$buttonDeleteScript.Enabled = $false
		}
		
	}
	
	#region Control Helper Functions
	function Update-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The DataGridView control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the DataGridView's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		.PARAMETER AutoSizeColumns
		    Resizes DataGridView control's columns after loading the items.
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Item,
		    [Parameter(Mandatory=$false)]
			[string]$DataMember,
			[System.Windows.Forms.DataGridViewAutoSizeColumnMode]$AutoSizeColumns = 'None'
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
		{
			$DataGridView.DataSource = $Item.Tables[0]
		}
		elseif ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{
				$array.Add($Item)
			}
			$DataGridView.DataSource = $array
		}
		
		if ($AutoSizeColumns -ne 'None')
		{
			$DataGridView.AutoResizeColumns($AutoSizeColumns)
		}
		
		$DataGridView.ResumeLayout()
	}
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterWMIProperties
				This switch removes WMI properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param(
		[ValidateNotNull()]
		$InputObject, 
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
		
		if($null -eq $Table)
		{
			$Table = New-Object System.Data.DataTable
		}
		
		if ($InputObject -is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
		{
			$Table = $InputObject.Tables[0]
		}
		else
		{
			if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
				
				if ($null -eq $InputObject) { return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach ($item in $InputObject)
				{
					if ($null -ne $item)
					{
						$object = $item
						break
					}
				}
				
				if ($null -eq $object) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if ($null -ne $prop.Value)
						{
							try { $type = $prop.Value.GetType() }
							catch { Out-Null }
						}
						
						if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
							[void]$table.Columns.Add($prop.Name, $type)
						}
						else #Type info not found
						{
							[void]$table.Columns.Add($prop.Name)
						}
					}
				}
				
				if ($object -is [System.Data.DataRow])
				{
					foreach ($item in $InputObject)
					{
						$Table.Rows.Add($item)
					}
					return @( ,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()
			}
			
			foreach ($item in $InputObject)
			{
				$row = $table.NewRow()
				
				if ($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if ($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
		
		return @(,$Table)	
	}
	#endregion
	
	$buttonAddScript_Click={
		
		$openfiledialogAddScript.ShowDialog()
		
	}
	
	$openfiledialogAddScript_FileOk=[System.ComponentModel.CancelEventHandler]{
	#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		
		if ($openfiledialogAddScript.FileName -in $global:postInstallScripts.Script)
		{
			[System.Windows.Forms.MessageBox]::Show("Script already exists in the queue. Omitting double entry.")
		}
		else
		{
			$scriptObject = New-Object PSObject
			
			$scriptObject | Add-Member -MemberType NoteProperty -Name "Script" -Value $openfiledialogAddScript.FileName
			
			$global:postInstallScripts = [System.Array]$global:postInstallScripts + $scriptObject
			
			$scriptList = ConvertTo-DataTable -InputObject $global:postInstallScripts
			Update-DataGridView -DataGridView $datagridviewScriptList -Item $scriptList
			
			$buttonDeleteScript.Enabled = $true
		}
	}
	
	$buttonDeleteScript_Click={
		
		$global:postInstallScripts = $global:postInstallScripts | ?{ -not ($_.Script -eq $datagridviewScriptList.CurrentRow.Cells[0].Value) }
		$datagridviewScriptList.Rows.RemoveAt($datagridviewScriptList.CurrentRow.Index)
		
		if ($global:postInstallScripts)
		{
			$scriptList = ConvertTo-DataTable -InputObject $global:postInstallScripts
			Update-DataGridView -DataGridView $datagridviewScriptList -Item $scriptList
			
			$buttonDeleteScript.Enabled = $true
		}
		else
		{
			$buttonDeleteScript.Enabled = $false
		}
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formSelectPostInstallScr.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:AddPostInstallScripts_datagridviewScriptList = $datagridviewScriptList.SelectedCells
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonDeleteScript.remove_Click($buttonDeleteScript_Click)
			$buttonAddScript.remove_Click($buttonAddScript_Click)
			$formSelectPostInstallScr.remove_Load($formSelectPostInstallScr_Load)
			$openfiledialogAddScript.remove_FileOk($openfiledialogAddScript_FileOk)
			$formSelectPostInstallScr.remove_Load($Form_StateCorrection_Load)
			$formSelectPostInstallScr.remove_Closing($Form_StoreValues_Closing)
			$formSelectPostInstallScr.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formSelectPostInstallScr.SuspendLayout()
	#
	# formSelectPostInstallScr
	#
	$formSelectPostInstallScr.Controls.Add($labelScriptNotes)
	$formSelectPostInstallScr.Controls.Add($buttonDeleteScript)
	$formSelectPostInstallScr.Controls.Add($buttonAddScript)
	$formSelectPostInstallScr.Controls.Add($datagridviewScriptList)
	$formSelectPostInstallScr.Controls.Add($buttonOK)
	$formSelectPostInstallScr.AcceptButton = $buttonOK
	$formSelectPostInstallScr.AutoScaleDimensions = '6, 13'
	$formSelectPostInstallScr.AutoScaleMode = 'Font'
	$formSelectPostInstallScr.ClientSize = '494, 293'
	$formSelectPostInstallScr.FormBorderStyle = 'FixedDialog'
	$formSelectPostInstallScr.MaximizeBox = $False
	$formSelectPostInstallScr.MinimizeBox = $False
	$formSelectPostInstallScr.Name = 'formSelectPostInstallScr'
	$formSelectPostInstallScr.StartPosition = 'CenterScreen'
	$formSelectPostInstallScr.Text = 'Select Post Install Scripts to Run'
	$formSelectPostInstallScr.add_Load($formSelectPostInstallScr_Load)
	#
	# labelScriptNotes
	#
	$labelScriptNotes.AutoSize = $True
	$labelScriptNotes.Location = '12, 19'
	$labelScriptNotes.Name = 'labelScriptNotes'
	$labelScriptNotes.Size = '468, 30'
	$labelScriptNotes.TabIndex = 4
	$labelScriptNotes.Text = 'Select the scripts that you wish to run against all VMs in the queue after initial configuration.
Scripts should reside on a file share (UNC path) that the VMs can get to in order to run.'
	$labelScriptNotes.UseCompatibleTextRendering = $True
	#
	# buttonDeleteScript
	#
	$buttonDeleteScript.Location = '93, 225'
	$buttonDeleteScript.Name = 'buttonDeleteScript'
	$buttonDeleteScript.Size = '86, 23'
	$buttonDeleteScript.TabIndex = 3
	$buttonDeleteScript.Text = 'Delete Script'
	$buttonDeleteScript.UseCompatibleTextRendering = $True
	$buttonDeleteScript.UseVisualStyleBackColor = $True
	$buttonDeleteScript.add_Click($buttonDeleteScript_Click)
	#
	# buttonAddScript
	#
	$buttonAddScript.Location = '12, 225'
	$buttonAddScript.Name = 'buttonAddScript'
	$buttonAddScript.Size = '75, 23'
	$buttonAddScript.TabIndex = 2
	$buttonAddScript.Text = 'Add Script'
	$buttonAddScript.UseCompatibleTextRendering = $True
	$buttonAddScript.UseVisualStyleBackColor = $True
	$buttonAddScript.add_Click($buttonAddScript_Click)
	#
	# datagridviewScriptList
	#
	$datagridviewScriptList.AllowUserToAddRows = $False
	$datagridviewScriptList.AllowUserToDeleteRows = $False
	$datagridviewScriptList.AllowUserToResizeRows = $False
	$datagridviewScriptList.AutoSizeColumnsMode = 'AllCells'
	$datagridviewScriptList.AutoSizeRowsMode = 'DisplayedCells'
	$datagridviewScriptList.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridviewScriptList.ColumnHeadersVisible = $False
	$datagridviewScriptList.Location = '12, 69'
	$datagridviewScriptList.MultiSelect = $False
	$datagridviewScriptList.Name = 'datagridviewScriptList'
	$datagridviewScriptList.ReadOnly = $True
	$datagridviewScriptList.RowHeadersVisible = $False
	$datagridviewScriptList.SelectionMode = 'FullRowSelect'
	$datagridviewScriptList.Size = '470, 150'
	$datagridviewScriptList.TabIndex = 1
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Location = '407, 258'
	$buttonOK.Name = 'buttonOK'
	$buttonOK.Size = '75, 23'
	$buttonOK.TabIndex = 0
	$buttonOK.Text = '&OK'
	$buttonOK.UseCompatibleTextRendering = $True
	$buttonOK.UseVisualStyleBackColor = $True
	#
	# openfiledialogAddScript
	#
	$openfiledialogAddScript.Filter = 'Batch Files|*.bat'
	$openfiledialogAddScript.add_FileOk($openfiledialogAddScript_FileOk)
	$formSelectPostInstallScr.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formSelectPostInstallScr.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formSelectPostInstallScr.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formSelectPostInstallScr.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formSelectPostInstallScr.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formSelectPostInstallScr.ShowDialog()

}
#endregion Source: AddPostInstallScripts.psf

#region Source: SelectVMTemplate.psf
function Show-SelectVMTemplate_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
7QQAACODCAAAAAAABABllNmqq2gQhe8DeYfNuRWOc1TYvcExahzinHjnPP0OUeP09B1O09DQdVUU
VbBqUfV921nSL9m4C9EcfX2Sqeq7v37hv9FfP+fT19e3OVZF1UVAqkBmRG3242QgS2Zfd7N2ANGc
/R6m/Bv+X9ufYakf25/Z6FGkJS7GirAsbwo8+09wLI/6M7NgNWvlA4TAtHxbSeK57O3INQWYzcWb
QGQhSX5TjbxC46tNxXaTw8j7fEpsri+TOPR5SeLMCwXhB46HiGzQcy5yPQMtFdcoEqM4YboyfDww
A/vQmFoZlOXdEaUf7Lnx0PpxG8LzqTBUvWqvOD6tkJEpHc5bt7JQnH6vliadm90HBBc0RYewOoAR
iHoGTMOEw7AuhnZJMtF1rzsL9/FKJOfTy9lbNrFHt0AJVVo3uWrFLCY8u2nfS7ii9Ej6SYHfPoog
TZB2GSimuEXCLlTlxWuNWXgJ2xwhgvDyzyfxUdU8sXnVch145XoXMbPBJJV/bQ3NGorRu1xMFnF3
xZ40MleX2/IwrlZxhBRku1rKBJWZPl60Bwy/Pp80yROjlnS6EhNih490fQTPHRBOnUxbV9ZvTyxI
e7wp3uaV+cEOR3LxzdK5GJsVBhcQ9iGA8ud2x2vrfPLYq+K1K3uFTCMWq71VtdpKoBwJIO49PBGz
ObD7Mo+IXhkzXe/q+GodSFjwxqMrTFG5fXkmFpVFL++jTQ7lUUMF9YI4DAcOrTFG59/rsW5rVJcq
Rl/ZcF6WpxJhUIGjLGAYibvVj7lf0KU9dH6JgEWszflUWdHuik0zudpqJu7rLsibc/sYY1gpfIc9
Qp+JOgBCzoUT15Rm/6TrwKaRUR8Tw83KsiNdTerXTAb4+XTxvCfFXYV7YK5xSCJ2CjYN0Ku2v6wQ
FRGLjGV7escY2wWHzsIrlhWeX0Gk2EzwlAq2pUr75m8V+hDPJ1PO2WBagWc496Vwsbf+wkvY257h
q1o71bzdqNuRbkcUIUPVx+GjE+FpQFgOf9SFSpVJQIsuiXaSEX18c4wrf4mOAVe7dy8nk/6a02RM
fYsRtzq13YodBAC3PrlO7sO2KMJeBcyH0g2FcCwxOQwDftvR8phnn027FUrcPTDfYgPhyza9S2RA
c6TEKDh4Qg81dJiAOi4H82I6YEWfB0ydLDI3WziyOkjD/QDeKlHyxAX2+TQe2eUdjV6tIu+0Nbu1
pdIuIUM3RxNXDRBS12RqVu+GRMJpZLuZO2WpcjU6wGcPopYN+eDNEPjjY6fOJ2pEpwUabZkOk6pQ
cMFi2W/4D2b+AIedpqyNQZVNX/Cn8g3/F28/fwNFpCSS7QQAAA==#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formSelectVMTemplate = New-Object 'System.Windows.Forms.Form'
	$labelSelectTheVMTemplateT = New-Object 'System.Windows.Forms.Label'
	$datagridviewTemplates = New-Object 'System.Windows.Forms.DataGridView'
	$buttonExit = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formSelectVMTemplate_Load={
		
		$localTemplates = (Get-Template -Server $global:vcenterConnection.Name -ErrorAction SilentlyContinue)
		
		if ($localTemplates)
		{
			foreach ($item in $localTemplates)
			{
				$object = New-Object PSObject
				$object | Add-Member -MemberType NoteProperty -Name "Name" -Value $item.Name
				$object | Add-Member -MemberType NoteProperty -Name "Location" -Value "vCenter"
				
				$templates = [System.Array]$templates + $object
			}
		}
		
		<#
		$contLibTemplates = (Get-ContentLibraryItem -Server $global:vcenterConnection.Name -ErrorAction SilentlyContinue | ?{ ($_.ItemType -eq "ovf") -or ($_.ItemType -eq "ova") })
		
		if ($contLibTemplates)
		{
			foreach ($item in $contLibTemplates)
			{
				$object2 = New-Object PSObject
				$object2 | Add-Member -MemberType NoteProperty -Name "Name" -Value $item.Name
				$object2 | Add-Member -MemberType NoteProperty -Name "Location" -Value "Content Library"
				
				$templates = [System.Array]$templates + $object2
			}
		}
		/#>
		#$templates = [System.Array]$templates + $object
		
		$templates = $templates | Sort-Object Name
		
		$templates | Export-CSV "$logDirectory\templates.log" -NoTypeInformation
		
		$table = ConvertTo-DataTable -InputObject $templates
		
		Update-DataGridView -DataGridView $datagridviewTemplates -Item $table -AutoSizeColumns DisplayedCells
		
	}
	
	#region Control Helper Functions
	function Update-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The DataGridView control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the DataGridView's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		.PARAMETER AutoSizeColumns
		    Resizes DataGridView control's columns after loading the items.
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Item,
		    [Parameter(Mandatory=$false)]
			[string]$DataMember,
			[System.Windows.Forms.DataGridViewAutoSizeColumnMode]$AutoSizeColumns = 'None'
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
		{
			$DataGridView.DataSource = $Item.Tables[0]
		}
		elseif ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{
				$array.Add($Item)
			}
			$DataGridView.DataSource = $array
		}
		
		if ($AutoSizeColumns -ne 'None')
		{
			$DataGridView.AutoResizeColumns($AutoSizeColumns)
		}
		
		$DataGridView.ResumeLayout()
	}
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterWMIProperties
				This switch removes WMI properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param(
		[ValidateNotNull()]
		$InputObject, 
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
		
		if($null -eq $Table)
		{
			$Table = New-Object System.Data.DataTable
		}
		
		if ($InputObject -is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
		{
			$Table = $InputObject.Tables[0]
		}
		else
		{
			if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
				
				if ($null -eq $InputObject) { return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach ($item in $InputObject)
				{
					if ($null -ne $item)
					{
						$object = $item
						break
					}
				}
				
				if ($null -eq $object) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if ($null -ne $prop.Value)
						{
							try { $type = $prop.Value.GetType() }
							catch { Out-Null }
						}
						
						if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
							[void]$table.Columns.Add($prop.Name, $type)
						}
						else #Type info not found
						{
							[void]$table.Columns.Add($prop.Name)
						}
					}
				}
				
				if ($object -is [System.Data.DataRow])
				{
					foreach ($item in $InputObject)
					{
						$Table.Rows.Add($item)
					}
					return @( ,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()
			}
			
			foreach ($item in $InputObject)
			{
				$row = $table.NewRow()
				
				if ($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if ($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
		
		return @(,$Table)	
	}
	#endregion
	
	$datagridviewTemplates_CellMouseDoubleClick=[System.Windows.Forms.DataGridViewCellMouseEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellMouseEventArgs]
		
		$textboxTemplateName.Text = $datagridviewTemplates.CurrentRow.Cells[0].Value
		$textboxTemplateLocation.Text = $datagridviewTemplates.CurrentRow.Cells[1].Value
		
		$formSelectVMTemplate.Close()
		
		$comboboxVSwitch.Enabled = $true
	}
	
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formSelectVMTemplate.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:SelectVMTemplate_datagridviewTemplates = $datagridviewTemplates.SelectedCells
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$datagridviewTemplates.remove_CellMouseDoubleClick($datagridviewTemplates_CellMouseDoubleClick)
			$formSelectVMTemplate.remove_Load($formSelectVMTemplate_Load)
			$formSelectVMTemplate.remove_Load($Form_StateCorrection_Load)
			$formSelectVMTemplate.remove_Closing($Form_StoreValues_Closing)
			$formSelectVMTemplate.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formSelectVMTemplate.SuspendLayout()
	#
	# formSelectVMTemplate
	#
	$formSelectVMTemplate.Controls.Add($labelSelectTheVMTemplateT)
	$formSelectVMTemplate.Controls.Add($datagridviewTemplates)
	$formSelectVMTemplate.Controls.Add($buttonExit)
	$formSelectVMTemplate.AutoScaleDimensions = '6, 13'
	$formSelectVMTemplate.AutoScaleMode = 'Font'
	$formSelectVMTemplate.CancelButton = $buttonExit
	$formSelectVMTemplate.ClientSize = '429, 355'
	$formSelectVMTemplate.FormBorderStyle = 'FixedDialog'
	$formSelectVMTemplate.MaximizeBox = $False
	$formSelectVMTemplate.MinimizeBox = $False
	$formSelectVMTemplate.Name = 'formSelectVMTemplate'
	$formSelectVMTemplate.StartPosition = 'CenterScreen'
	$formSelectVMTemplate.Text = 'Select VM Template'
	$formSelectVMTemplate.add_Load($formSelectVMTemplate_Load)
	#
	# labelSelectTheVMTemplateT
	#
	$labelSelectTheVMTemplateT.AutoSize = $True
	$labelSelectTheVMTemplateT.Location = '12, 20'
	$labelSelectTheVMTemplateT.Name = 'labelSelectTheVMTemplateT'
	$labelSelectTheVMTemplateT.Size = '279, 17'
	$labelSelectTheVMTemplateT.TabIndex = 2
	$labelSelectTheVMTemplateT.Text = 'Select the VM Template to use by double-clicking on it.'
	$labelSelectTheVMTemplateT.UseCompatibleTextRendering = $True
	#
	# datagridviewTemplates
	#
	$datagridviewTemplates.AllowUserToAddRows = $False
	$datagridviewTemplates.AllowUserToDeleteRows = $False
	$datagridviewTemplates.AllowUserToResizeColumns = $False
	$datagridviewTemplates.AllowUserToResizeRows = $False
	$datagridviewTemplates.AutoSizeColumnsMode = 'Fill'
	$datagridviewTemplates.ColumnHeadersHeightSizeMode = 'DisableResizing'
	$datagridviewTemplates.Location = '12, 57'
	$datagridviewTemplates.MultiSelect = $False
	$datagridviewTemplates.Name = 'datagridviewTemplates'
	$datagridviewTemplates.ReadOnly = $True
	$datagridviewTemplates.RowHeadersVisible = $False
	$datagridviewTemplates.RowHeadersWidthSizeMode = 'AutoSizeToDisplayedHeaders'
	$datagridviewTemplates.SelectionMode = 'FullRowSelect'
	$datagridviewTemplates.Size = '405, 231'
	$datagridviewTemplates.TabIndex = 1
	$datagridviewTemplates.add_CellMouseDoubleClick($datagridviewTemplates_CellMouseDoubleClick)
	#
	# buttonExit
	#
	$buttonExit.Anchor = 'Bottom, Right'
	$buttonExit.DialogResult = 'OK'
	$buttonExit.Location = '342, 320'
	$buttonExit.Name = 'buttonExit'
	$buttonExit.Size = '75, 23'
	$buttonExit.TabIndex = 0
	$buttonExit.Text = '&Exit'
	$buttonExit.UseCompatibleTextRendering = $True
	$buttonExit.UseVisualStyleBackColor = $True
	$formSelectVMTemplate.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formSelectVMTemplate.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formSelectVMTemplate.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formSelectVMTemplate.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formSelectVMTemplate.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formSelectVMTemplate.ShowDialog()

}
#endregion Source: SelectVMTemplate.psf

#region Source: Functions\Get-TaskPlus.ps1
function Invoke-Get-TaskPlus_ps1
{
	function Get-TaskPlus
	{
	<#  
	.SYNOPSIS  Returns vSphere Task information   
	.DESCRIPTION The function will return vSphere task info. The
	available parameters allow server-side filtering of the
	results
	.NOTES  Author:  Luc Dekens  
	.PARAMETER Alarm
	When specified the function returns tasks triggered by
	specified alarm
	.PARAMETER Entity
	When specified the function returns tasks for the
	specific vSphere entity
	.PARAMETER Recurse
	Is used with the Entity. The function returns tasks
	for the Entity and all it's children
	.PARAMETER State
	Specify the State of the tasks to be returned. Valid
	values are: error, queued, running and success
	.PARAMETER Start
	The start date of the tasks to retrieve
	.PARAMETER Finish
	The end date of the tasks to retrieve.
	.PARAMETER UserName
	Only return tasks that were started by a specific user
	.PARAMETER MaxSamples
	Specify the maximum number of tasks to return
	.PARAMETER Reverse
	When true, the tasks are returned newest to oldest. The
	default is oldest to newest
	.PARAMETER Server
	The vCenter instance(s) for which the tasks should
	be returned
	.PARAMETER Realtime
	A switch, when true the most recent tasks are also returned.
	.PARAMETER Details
	A switch, when true more task details are returned
	.PARAMETER Keys
	A switch, when true all the keys are returned
	.EXAMPLE
	PS> Get-TaskPlus -Start (Get-Date).AddDays(-1)
	.EXAMPLE
	PS> Get-TaskPlus -Alarm $alarm -Details
	#>
		param (
			[CmdletBinding()]
			[VMware.VimAutomation.ViCore.Impl.V1.Alarm.AlarmDefinitionImpl]$Alarm,
			[VMware.VimAutomation.ViCore.Impl.V1.Inventory.InventoryItemImpl]$Entity,
			[switch]$Recurse = $false,
			[VMware.Vim.TaskInfoState[]]$State,
			[DateTime]$Start,
			[DateTime]$Finish,
			[string]$UserName,
			[int]$MaxSamples = 100,
			[switch]$Reverse = $true,
			[VMware.VimAutomation.ViCore.Impl.V1.VIServerImpl[]]$Server = $global:DefaultVIServer,
			[switch]$Realtime,
			[switch]$Details,
			[switch]$Keys,
			[int]$WindowSize = 100
		)
		begin
		{
			function Get-TaskDetails
			{
				param (
					[VMware.Vim.TaskInfo[]]$Tasks
				)
				begin
				{
					$psV3 = $PSversionTable.PSVersion.Major -ge 3
				}
				process
				{
					$tasks | %{
						if ($psV3)
						{
							$object = [ordered]@{ }
						}
						else
						{
							$object = @{ }
						}
						$object.Add("Name", $_.Name)
						$object.Add("Description", $_.Description.Message)
						if ($Details) { $object.Add("DescriptionId", $_.DescriptionId) }
						if ($Details) { $object.Add("Task Created", $_.QueueTime) }
						$object.Add("Task Started", $_.StartTime)
						if ($Details) { $object.Add("Task Ended", $_.CompleteTime) }
						$object.Add("State", $_.State)
						$object.Add("Result", $_.Result)
						$object.Add("Entity", $_.EntityName)
						$object.Add("VIServer", $VIObject.Name)
						$object.Add("Error", $_.Error.ocalizedMessage)
						if ($Details)
						{
							$object.Add("Cancelled", (&{ if ($_.Cancelled) { "Y" }
										else { "N" } }))
							$object.Add("Reason", $_.Reason.GetType().Name.Replace("TaskReason", ""))
							$object.Add("AlarmName", $_.Reason.AlarmName)
							$object.Add("AlarmEntity", $_.Reason.EntityName)
							$object.Add("ScheduleName", $_.Reason.Name)
							$object.Add("User", $_.Reason.UserName)
						}
						if ($keys)
						{
							$object.Add("Key", $_.Key)
							$object.Add("ParentKey", $_.ParentTaskKey)
							$object.Add("RootKey", $_.RootTaskKey)
						}
						New-Object PSObject -Property $object
					}
				}
			}
			$filter = New-Object VMware.Vim.TaskFilterSpec
			if ($Alarm)
			{
				$filter.Alarm = $Alarm.ExtensionData.MoRef
			}
			if ($Entity)
			{
				$filter.Entity = New-Object VMware.Vim.TaskFilterSpecByEntity
				$filter.Entity.entity = $Entity.ExtensionData.MoRef
				if ($Recurse)
				{
					$filter.Entity.Recursion = [VMware.Vim.TaskFilterSpecRecursionOption]::all
				}
				else
				{
					$filter.Entity.Recursion = [VMware.Vim.TaskFilterSpecRecursionOption]::self
				}
			}
			if ($State)
			{
				$filter.State = $State
			}
			if ($Start -or $Finish)
			{
				$filter.Time = New-Object VMware.Vim.TaskFilterSpecByTime
				$filter.Time.beginTime = $Start
				$filter.Time.endTime = $Finish
				$filter.Time.timeType = [vmware.vim.taskfilterspectimeoption]::startedTime
			}
			if ($UserName)
			{
				$userNameFilterSpec = New-Object VMware.Vim.TaskFilterSpecByUserName
				$userNameFilterSpec.UserList = $UserName
				$filter.UserName = $userNameFilterSpec
			}
			$nrTasks = 0
		}
		process
		{
			foreach ($viObject in $Server)
			{
				$si = Get-View ServiceInstance -Server $viObject
				$tskMgr = Get-View $si.Content.TaskManager -Server $viObject
				if ($Realtime -and $tskMgr.recentTask)
				{
					$tasks = Get-View $tskMgr.recentTask
					$selectNr = [Math]::Min($tasks.Count, $MaxSamples - $nrTasks)
					Get-TaskDetails -Tasks [0..($selectNr - 1)]
					$nrTasks += $selectNr
				}
				$tCollector = Get-View ($tskMgr.CreateCollectorForTasks($filter))
				if ($Reverse)
				{
					$tCollector.ResetCollector()
					$taskReadOp = $tCollector.ReadPreviousTasks
				}
				else
				{
					$taskReadOp = $tCollector.ReadNextTasks
				}
				do
				{
					$tasks = $taskReadOp.Invoke($WindowSize)
					if (!$tasks) { return }
					$selectNr = [Math]::Min($tasks.Count, $MaxSamples - $nrTasks)
					Get-TaskDetails -Tasks $tasks[0..($selectNr - 1)]
					$nrTasks += $selectNr
				}
				while ($nrTasks -lt $MaxSamples)
			}
			$tCollector.DestroyCollector()
		}
	}
}
#endregion Source: Get-TaskPlus.ps1

#region Source: DuplicateVM.psf
function Show-DuplicateVM_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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
NGFdJNOv57Xz8/zfPuf3fwAoTNmx9ggAAA==#>
#endregion
param
(
	[Parameter(Mandatory = $true)]
	[string]$VMName
)

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formDuplicateVM = New-Object 'System.Windows.Forms.Form'
	$comboboxVMHostDup = New-Object 'System.Windows.Forms.ComboBox'
	$labelVMHost = New-Object 'System.Windows.Forms.Label'
	$labelEnterTheVMNameAndIPC = New-Object 'System.Windows.Forms.Label'
	$panel3 = New-Object 'System.Windows.Forms.Panel'
	$textboxNICLabelDup = New-Object 'System.Windows.Forms.TextBox'
	$labelNICCardLabelDup = New-Object 'System.Windows.Forms.Label'
	$textboxDNS2Dup = New-Object 'System.Windows.Forms.TextBox'
	$labelSecondaryDNSDup = New-Object 'System.Windows.Forms.Label'
	$textboxDNS1Dup = New-Object 'System.Windows.Forms.TextBox'
	$labelDNS1Dup = New-Object 'System.Windows.Forms.Label'
	$checkboxStaticIPDup = New-Object 'System.Windows.Forms.CheckBox'
	$textboxDefaultGatewayDup = New-Object 'System.Windows.Forms.TextBox'
	$labelDefaultGatewayDup = New-Object 'System.Windows.Forms.Label'
	$textboxSubnetMaskDup = New-Object 'System.Windows.Forms.TextBox'
	$labelSubnetMaskDup = New-Object 'System.Windows.Forms.Label'
	$textboxIPAddressDup = New-Object 'System.Windows.Forms.TextBox'
	$comboboxVSwitchDup = New-Object 'System.Windows.Forms.ComboBox'
	$labelIPAddressDup = New-Object 'System.Windows.Forms.Label'
	$labelVirtualSwitchDup = New-Object 'System.Windows.Forms.Label'
	$labelNetworkingDup = New-Object 'System.Windows.Forms.Label'
	$textboxVMNameDup = New-Object 'System.Windows.Forms.TextBox'
	$labelNewVMName = New-Object 'System.Windows.Forms.Label'
	$buttonAddVM = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	$formDuplicateVM_Load={
		
		if ($VMName)
		{
			$vmHostTemp = $global:vmBuilds | ?{ $_.VMName -eq "$VMName" }
			
			if ($vmHostTemp.DRS -eq "Yes")
			{
				$drsText = "DRS host automatically selected"
				$comboboxVMHostDup.Enabled = $false
				Update-ComboBox -combobox $comboboxVMHostDup -Items $drsText
				$comboboxVMHostDup.SelectedIndex = 0
			}
			else
			{
				$hostsDup = Get-VMHost -Location (Get-Cluster -VMHost "$($vmHostTemp.("VM Host"))")
				
				if ($hostsDup.Name -ne $null)
				{
					Update-ComboBox -combobox $comboboxVMHostDup -Items $hostsDup.Name
				}
			}
			
			$vSwitchesDup = Get-VirtualPortGroup -Server $global:vcenterConnection.Name -Host $vmHostTemp.("VM Host") | select Name | Sort-Object -Property Name
			Update-ComboBox -ComboBox $comboboxVSwitchDup -Items $vSwitchesDup.Name		
		}
	}
	
	#region Control Helper Functions
	function Update-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
		
		.PARAMETER ComboBox
			The ComboBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ComboBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red" -Append
			Update-ComboBox $combobox1 "White" -Append
			Update-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Update-ComboBox $combobox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ComboBox]
			$ComboBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]
			$DisplayMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
	}
	#endregion
	
	$checkboxStaticIPDup_CheckedChanged={
		
		if ($checkboxStaticIPDup.Checked)
		{
			$textboxIPAddressDup.Enabled = $true
			$textboxSubnetMaskDup.Enabled = $true
			$textboxDefaultGatewayDup.Enabled = $true
			$textboxDNS1Dup.Enabled = $true
			$textboxDNS2Dup.Enabled = $true
		}
		else
		{
			$textboxIPAddressDup.Enabled = $false
			$textboxSubnetMaskDup.Enabled = $false
			$textboxDefaultGatewayDup.Enabled = $false
			$textboxDNS1Dup.Enabled = $false
			$textboxDNS2Dup.Enabled = $false
		}
		
	}
	
	$buttonAddVM_Click={
		
		$vmTemp = $global:vmBuilds | ?{ $_.VMName -eq "$VMName" }
		
		if (($textboxVMNameDup.Text -ne $VMName) -and ($textboxVMNameDup.Text -notin $global:existingVMList))
		{
			try
			{
				
				$object = New-Object PSObject
				
				$object | Add-Member -MemberType NoteProperty -Name "VMName" -Value $textboxVMNameDup.Text
				
				if ($vmTemp.DRS -eq "Yes")
				{
					$object | Add-Member -MemberType NoteProperty -Name "VM Host" -Value $vmTemp.("VM Host")
					$object | Add-Member -MemberType NoteProperty -Name "DRS" -Value "Yes"
				}
				else
				{
					$object | Add-Member -MemberType NoteProperty -Name "VM Host" -Value $comboboxVMHostDup.Text
					$object | Add-Member -MemberType NoteProperty -Name "DRS" -Value "No"
				}
				$object | Add-Member -MemberType NoteProperty -Name "Datacenter" -Value $vmTemp.Datacenter
				$object | Add-Member -MemberType NoteProperty -Name "Datastore" -Value $vmTemp.Datastore
				$object | Add-Member -MemberType NoteProperty -Name "NumCPU" -Value $vmTemp.NumCPU
				$object | Add-Member -MemberType NoteProperty -Name "CoresPerSocket" -Value $vmTemp.CoresPerSocket
				$object | Add-Member -MemberType NoteProperty -Name "Memory" -Value $vmTemp.Memory
				$object | Add-Member -MemberType NoteProperty -Name "Network" -Value $comboboxVSwitchDup.Text
				$object | Add-Member -MemberType NoteProperty -Name "Template" -Value $vmTemp.Template
				$object | Add-Member -MemberType NoteProperty -Name "TemplateLocation" -Value $vmTemp.TemplateLocation
				$object | Add-Member -MemberType NoteProperty -Name "Location" -Value $vmTemp.Location
				
				if ($checkboxStaticIPDup.Checked)
				{
					$object | Add-Member -MemberType NoteProperty -Name "NICLabel" -Value $textboxNICLabelDup.Text
					$object | Add-Member -MemberType NoteProperty -Name "IP Type" -Value "Static"
					$object | Add-Member -MemberType NoteProperty -Name "IP Address" -Value $textboxIPAddressDup.Text
					$object | Add-Member -MemberType NoteProperty -Name "Subnet Mask" -Value $textboxSubnetMaskDup.Text
					$object | Add-Member -MemberType NoteProperty -Name "Default Gateway" -Value $textboxDefaultGatewayDup.Text
					$object | Add-Member -MemberType NoteProperty -Name "Primary DNS Server" -Value $textboxDNS1Dup.Text
					$object | Add-Member -MemberType NoteProperty -Name "Secondary DNS Server" -Value $textboxDNS2Dup.Text
				}
				else
				{
					$object | Add-Member -MemberType NoteProperty -Name "NICLabel" -Value $textboxNICLabelDup.Text
					$object | Add-Member -MemberType NoteProperty -Name "IP Type" -Value "DHCP"
					$object | Add-Member -MemberType NoteProperty -Name "IP Address" -Value ''
					$object | Add-Member -MemberType NoteProperty -Name "Subnet Mask" -Value ''
					$object | Add-Member -MemberType NoteProperty -Name "Default Gateway" -Value ''
					$object | Add-Member -MemberType NoteProperty -Name "Primary DNS Server" -Value ''
				}
				
				$allValuesSet = $true
				
				if ($object.("IP Type") -eq "Static")
				{
					# Let's check to make sure we have values in all required fields.
					
					$props = Get-Member -InputObject $object -MemberType NoteProperty
					
					foreach ($prop in $props)
					{
						$propValue = $object | Select-Object -ExpandProperty $prop.Name
						
						if (-not $propValue)
						{
							$allValuesSet = $false
						}
					}
				}
				else
				{
					$props = Get-Member -InputObject $object -MemberType NoteProperty | ?{ ($_.Name -ne "IP Address") -and ($_.Name -ne "Subnet Mask") -and ($_.Name -ne "Default Gateway") -and ($_.Name -ne "Primary DNS Server") }
					
					foreach ($prop in $props)
					{
						$propValue = $object | Select-Object -ExpandProperty $prop.Name
						
						if (-not $propValue)
						{
							$allValuesSet = $false
						}
					}
				}
				
				if ($allValuesSet)
				{
					$global:vmbuilds += @($object)
					
					$global:vmbuilds | Out-File "$logDirectory\addvm.log"
					
					If ($vmTemp.Template -like "*2012*R2*")
					{
						$vmOSObject = New-Object PSObject
						$vmOSObject | Add-Member -MemberType NoteProperty -Name "VMName" -Value $textboxVMNameDup.Text
						$vmOSObject | Add-Member -MemberType NoteProperty -Name "OS" -Value "Server2012R2"
						
						$global:vmOS = [System.Array]$global:vmOS + $vmOSObject
					}
					elseif ($vmTemp.Template -like "*2016*")
					{
						$vmOSObject = New-Object PSObject
						$vmOSObject | Add-Member -MemberType NoteProperty -Name "VMName" -Value $textboxVMNameDup.Text
						$vmOSObject | Add-Member -MemberType NoteProperty -Name "OS" -Value "Server2016"
						
						$global:vmOS = [System.Array]$global:vmOS + $vmOSObject					
					}
					elseif ($vmTemp.Template -like "*2019*")
					{
						$vmOSObject = New-Object PSObject
						$vmOSObject | Add-Member -MemberType NoteProperty -Name "VMName" -Value $textboxVMNameDup.Text
						$vmOSObject | Add-Member -MemberType NoteProperty -Name "OS" -Value "Server2019"
						
						$global:vmOS = [System.Array]$global:vmOS + $vmOSObject
					}
					
					try
					{
						#$table = ConvertTo-DataTable -InputObject $global:vmbuilds
						#Update-DataGridView -DataGridView $datagridviewVMQueue -Item $table -AutoSizeColumns DisplayedCells
						
						$listviewVMsStep2.Items.Add($vmOSObject.VMName)
						
						Update-NavButtons
						
					}
					catch
					{
						[System.Windows.Forms.MessageBox]::Show("Unable to load VM build queue.")
					}				
					
					# Update the treeview control for Step 3
					
					$treeviewVMListStep3.BeginUpdate()
					$treeviewVMListStep3.Nodes.Clear()
					
					foreach ($vm in $global:vmbuilds)
					{
						$newNode = $treeviewVMListStep3.Nodes.Add($vm.VMName)
					}
					
					$treeviewVMListStep3.EndUpdate()
					
					# Update the treeview control for step 4.
					
					$treeviewVMListStep4.BeginUpdate()
					$treeviewVMListStep4.Nodes.Clear()
					
					foreach ($vm in $global:vmbuilds)
					{
						$newNode = $treeviewVMListStep4.Nodes.Add($vm.VMName)
					}
					
					$treeviewVMListStep4.EndUpdate()
					
					$buttonDeleteVMFromQueue.Enabled = $true
					$formDuplicateVM.Close()
				}
				else
				{
					#$formAddVM.Close()
					[System.Windows.Forms.MessageBox]::Show("All fields must be completed to continue.")
				}
				
			}
			catch
			{
				[System.Windows.Forms.MessageBox]::Show("Unable to add VM to queue.")
			}
		}
		else
		{
			[System.Windows.Forms.MessageBox]::Show("VM: $VMName already exists in queue or in environment.")
		}
	}
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formDuplicateVM.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:DuplicateVM_comboboxVMHostDup = $comboboxVMHostDup.Text
		$script:DuplicateVM_comboboxVMHostDup_SelectedItem = $comboboxVMHostDup.SelectedItem
		$script:DuplicateVM_textboxNICLabelDup = $textboxNICLabelDup.Text
		$script:DuplicateVM_textboxDNS2Dup = $textboxDNS2Dup.Text
		$script:DuplicateVM_textboxDNS1Dup = $textboxDNS1Dup.Text
		$script:DuplicateVM_checkboxStaticIPDup = $checkboxStaticIPDup.Checked
		$script:DuplicateVM_textboxDefaultGatewayDup = $textboxDefaultGatewayDup.Text
		$script:DuplicateVM_textboxSubnetMaskDup = $textboxSubnetMaskDup.Text
		$script:DuplicateVM_textboxIPAddressDup = $textboxIPAddressDup.Text
		$script:DuplicateVM_comboboxVSwitchDup = $comboboxVSwitchDup.Text
		$script:DuplicateVM_comboboxVSwitchDup_SelectedItem = $comboboxVSwitchDup.SelectedItem
		$script:DuplicateVM_textboxVMNameDup = $textboxVMNameDup.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$checkboxStaticIPDup.remove_CheckedChanged($checkboxStaticIPDup_CheckedChanged)
			$buttonAddVM.remove_Click($buttonAddVM_Click)
			$formDuplicateVM.remove_Load($formDuplicateVM_Load)
			$formDuplicateVM.remove_Load($Form_StateCorrection_Load)
			$formDuplicateVM.remove_Closing($Form_StoreValues_Closing)
			$formDuplicateVM.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formDuplicateVM.SuspendLayout()
	$panel3.SuspendLayout()
	#
	# formDuplicateVM
	#
	$formDuplicateVM.Controls.Add($comboboxVMHostDup)
	$formDuplicateVM.Controls.Add($labelVMHost)
	$formDuplicateVM.Controls.Add($labelEnterTheVMNameAndIPC)
	$formDuplicateVM.Controls.Add($panel3)
	$formDuplicateVM.Controls.Add($textboxVMNameDup)
	$formDuplicateVM.Controls.Add($labelNewVMName)
	$formDuplicateVM.Controls.Add($buttonAddVM)
	$formDuplicateVM.AcceptButton = $buttonAddVM
	$formDuplicateVM.AutoScaleDimensions = '6, 13'
	$formDuplicateVM.AutoScaleMode = 'Font'
	$formDuplicateVM.ClientSize = '266, 466'
	$formDuplicateVM.FormBorderStyle = 'FixedDialog'
	$formDuplicateVM.Margin = '6, 6, 6, 6'
	$formDuplicateVM.MaximizeBox = $False
	$formDuplicateVM.MinimizeBox = $False
	$formDuplicateVM.Name = 'formDuplicateVM'
	$formDuplicateVM.StartPosition = 'CenterScreen'
	$formDuplicateVM.Text = 'Duplicate VM'
	$formDuplicateVM.add_Load($formDuplicateVM_Load)
	#
	# comboboxVMHostDup
	#
	$comboboxVMHostDup.DropDownStyle = 'DropDownList'
	$comboboxVMHostDup.FormattingEnabled = $True
	$comboboxVMHostDup.Location = '101, 114'
	$comboboxVMHostDup.Name = 'comboboxVMHostDup'
	$comboboxVMHostDup.Size = '147, 21'
	$comboboxVMHostDup.TabIndex = 2
	#
	# labelVMHost
	#
	$labelVMHost.AutoSize = $True
	$labelVMHost.Location = '12, 118'
	$labelVMHost.Name = 'labelVMHost'
	$labelVMHost.Size = '51, 17'
	$labelVMHost.TabIndex = 8
	$labelVMHost.Text = 'VM Host:'
	$labelVMHost.UseCompatibleTextRendering = $True
	#
	# labelEnterTheVMNameAndIPC
	#
	$labelEnterTheVMNameAndIPC.AutoSize = $True
	$labelEnterTheVMNameAndIPC.Location = '12, 9'
	$labelEnterTheVMNameAndIPC.Name = 'labelEnterTheVMNameAndIPC'
	$labelEnterTheVMNameAndIPC.Size = '245, 55'
	$labelEnterTheVMNameAndIPC.TabIndex = 7
	$labelEnterTheVMNameAndIPC.Text = 'Enter the VM name and IP configuration.

All other settings will be equal to the previously
selected VM.'
	$labelEnterTheVMNameAndIPC.UseCompatibleTextRendering = $True
	#
	# panel3
	#
	$panel3.Controls.Add($textboxNICLabelDup)
	$panel3.Controls.Add($labelNICCardLabelDup)
	$panel3.Controls.Add($textboxDNS2Dup)
	$panel3.Controls.Add($labelSecondaryDNSDup)
	$panel3.Controls.Add($textboxDNS1Dup)
	$panel3.Controls.Add($labelDNS1Dup)
	$panel3.Controls.Add($checkboxStaticIPDup)
	$panel3.Controls.Add($textboxDefaultGatewayDup)
	$panel3.Controls.Add($labelDefaultGatewayDup)
	$panel3.Controls.Add($textboxSubnetMaskDup)
	$panel3.Controls.Add($labelSubnetMaskDup)
	$panel3.Controls.Add($textboxIPAddressDup)
	$panel3.Controls.Add($comboboxVSwitchDup)
	$panel3.Controls.Add($labelIPAddressDup)
	$panel3.Controls.Add($labelVirtualSwitchDup)
	$panel3.Controls.Add($labelNetworkingDup)
	$panel3.BorderStyle = 'Fixed3D'
	$panel3.Location = '12, 141'
	$panel3.Name = 'panel3'
	$panel3.Size = '230, 279'
	$panel3.TabIndex = 6
	#
	# textboxNICLabelDup
	#
	$textboxNICLabelDup.Location = '123, 86'
	$textboxNICLabelDup.Name = 'textboxNICLabelDup'
	$textboxNICLabelDup.Size = '93, 20'
	$textboxNICLabelDup.TabIndex = 31
	#
	# labelNICCardLabelDup
	#
	$labelNICCardLabelDup.AutoSize = $True
	$labelNICCardLabelDup.Location = '10, 90'
	$labelNICCardLabelDup.Name = 'labelNICCardLabelDup'
	$labelNICCardLabelDup.Size = '85, 17'
	$labelNICCardLabelDup.TabIndex = 30
	$labelNICCardLabelDup.Text = 'NIC Card Label:'
	$labelNICCardLabelDup.UseCompatibleTextRendering = $True
	#
	# textboxDNS2Dup
	#
	$textboxDNS2Dup.Enabled = $False
	$textboxDNS2Dup.Location = '124, 240'
	$textboxDNS2Dup.Name = 'textboxDNS2Dup'
	$textboxDNS2Dup.Size = '92, 20'
	$textboxDNS2Dup.TabIndex = 36
	#
	# labelSecondaryDNSDup
	#
	$labelSecondaryDNSDup.AutoSize = $True
	$labelSecondaryDNSDup.Location = '10, 240'
	$labelSecondaryDNSDup.Name = 'labelSecondaryDNSDup'
	$labelSecondaryDNSDup.Size = '88, 17'
	$labelSecondaryDNSDup.TabIndex = 27
	$labelSecondaryDNSDup.Text = 'Secondary DNS:'
	$labelSecondaryDNSDup.UseCompatibleTextRendering = $True
	#
	# textboxDNS1Dup
	#
	$textboxDNS1Dup.Enabled = $False
	$textboxDNS1Dup.Location = '124, 208'
	$textboxDNS1Dup.Name = 'textboxDNS1Dup'
	$textboxDNS1Dup.Size = '92, 20'
	$textboxDNS1Dup.TabIndex = 35
	#
	# labelDNS1Dup
	#
	$labelDNS1Dup.AutoSize = $True
	$labelDNS1Dup.Location = '10, 208'
	$labelDNS1Dup.Name = 'labelDNS1Dup'
	$labelDNS1Dup.Size = '73, 17'
	$labelDNS1Dup.TabIndex = 25
	$labelDNS1Dup.Text = 'Primary DNS:'
	$labelDNS1Dup.UseCompatibleTextRendering = $True
	#
	# checkboxStaticIPDup
	#
	$checkboxStaticIPDup.Location = '10, 52'
	$checkboxStaticIPDup.Name = 'checkboxStaticIPDup'
	$checkboxStaticIPDup.Size = '137, 24'
	$checkboxStaticIPDup.TabIndex = 19
	$checkboxStaticIPDup.Text = 'Use Static IP Settings'
	$checkboxStaticIPDup.UseCompatibleTextRendering = $True
	$checkboxStaticIPDup.UseVisualStyleBackColor = $True
	$checkboxStaticIPDup.add_CheckedChanged($checkboxStaticIPDup_CheckedChanged)
	#
	# textboxDefaultGatewayDup
	#
	$textboxDefaultGatewayDup.Enabled = $False
	$textboxDefaultGatewayDup.Location = '124, 179'
	$textboxDefaultGatewayDup.Name = 'textboxDefaultGatewayDup'
	$textboxDefaultGatewayDup.Size = '92, 20'
	$textboxDefaultGatewayDup.TabIndex = 34
	#
	# labelDefaultGatewayDup
	#
	$labelDefaultGatewayDup.AutoSize = $True
	$labelDefaultGatewayDup.Location = '10, 179'
	$labelDefaultGatewayDup.Name = 'labelDefaultGatewayDup'
	$labelDefaultGatewayDup.Size = '91, 17'
	$labelDefaultGatewayDup.TabIndex = 22
	$labelDefaultGatewayDup.Text = 'Default Gateway:'
	$labelDefaultGatewayDup.UseCompatibleTextRendering = $True
	#
	# textboxSubnetMaskDup
	#
	$textboxSubnetMaskDup.Enabled = $False
	$textboxSubnetMaskDup.Location = '124, 149'
	$textboxSubnetMaskDup.Name = 'textboxSubnetMaskDup'
	$textboxSubnetMaskDup.Size = '92, 20'
	$textboxSubnetMaskDup.TabIndex = 33
	#
	# labelSubnetMaskDup
	#
	$labelSubnetMaskDup.AutoSize = $True
	$labelSubnetMaskDup.Location = '10, 149'
	$labelSubnetMaskDup.Name = 'labelSubnetMaskDup'
	$labelSubnetMaskDup.Size = '73, 17'
	$labelSubnetMaskDup.TabIndex = 20
	$labelSubnetMaskDup.Text = 'Subnet Mask:'
	$labelSubnetMaskDup.UseCompatibleTextRendering = $True
	#
	# textboxIPAddressDup
	#
	$textboxIPAddressDup.Enabled = $False
	$textboxIPAddressDup.Location = '124, 117'
	$textboxIPAddressDup.Name = 'textboxIPAddressDup'
	$textboxIPAddressDup.Size = '92, 20'
	$textboxIPAddressDup.TabIndex = 32
	#
	# comboboxVSwitchDup
	#
	$comboboxVSwitchDup.DropDownStyle = 'DropDownList'
	$comboboxVSwitchDup.FormattingEnabled = $True
	$comboboxVSwitchDup.Location = '92, 29'
	$comboboxVSwitchDup.Name = 'comboboxVSwitchDup'
	$comboboxVSwitchDup.Size = '121, 21'
	$comboboxVSwitchDup.TabIndex = 3
	#
	# labelIPAddressDup
	#
	$labelIPAddressDup.AutoSize = $True
	$labelIPAddressDup.Location = '10, 120'
	$labelIPAddressDup.Name = 'labelIPAddressDup'
	$labelIPAddressDup.Size = '63, 17'
	$labelIPAddressDup.TabIndex = 0
	$labelIPAddressDup.Text = 'IP Address:'
	$labelIPAddressDup.UseCompatibleTextRendering = $True
	#
	# labelVirtualSwitchDup
	#
	$labelVirtualSwitchDup.AutoSize = $True
	$labelVirtualSwitchDup.Location = '10, 31'
	$labelVirtualSwitchDup.Name = 'labelVirtualSwitchDup'
	$labelVirtualSwitchDup.Size = '76, 17'
	$labelVirtualSwitchDup.TabIndex = 0
	$labelVirtualSwitchDup.Text = 'Virtual Switch:'
	$labelVirtualSwitchDup.UseCompatibleTextRendering = $True
	#
	# labelNetworkingDup
	#
	$labelNetworkingDup.AutoSize = $True
	$labelNetworkingDup.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelNetworkingDup.Location = '3, 10'
	$labelNetworkingDup.Name = 'labelNetworkingDup'
	$labelNetworkingDup.Size = '137, 17'
	$labelNetworkingDup.TabIndex = 0
	$labelNetworkingDup.Text = 'Networking Configuration'
	$labelNetworkingDup.UseCompatibleTextRendering = $True
	#
	# textboxVMNameDup
	#
	$textboxVMNameDup.Location = '101, 74'
	$textboxVMNameDup.Name = 'textboxVMNameDup'
	$textboxVMNameDup.Size = '147, 20'
	$textboxVMNameDup.TabIndex = 1
	#
	# labelNewVMName
	#
	$labelNewVMName.AutoSize = $True
	$labelNewVMName.Location = '12, 77'
	$labelNewVMName.Name = 'labelNewVMName'
	$labelNewVMName.Size = '83, 17'
	$labelNewVMName.TabIndex = 1
	$labelNewVMName.Text = 'New VM Name:'
	$labelNewVMName.UseCompatibleTextRendering = $True
	#
	# buttonAddVM
	#
	$buttonAddVM.Anchor = 'Bottom, Right'
	$buttonAddVM.DialogResult = 'OK'
	$buttonAddVM.Location = '179, 431'
	$buttonAddVM.Name = 'buttonAddVM'
	$buttonAddVM.Size = '75, 23'
	$buttonAddVM.TabIndex = 50
	$buttonAddVM.Text = '&Add VM'
	$buttonAddVM.UseCompatibleTextRendering = $True
	$buttonAddVM.UseVisualStyleBackColor = $True
	$buttonAddVM.add_Click($buttonAddVM_Click)
	$panel3.ResumeLayout()
	$formDuplicateVM.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formDuplicateVM.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formDuplicateVM.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formDuplicateVM.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formDuplicateVM.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formDuplicateVM.ShowDialog()

}
#endregion Source: DuplicateVM.psf

#Start the application
Main ($CommandLine)
