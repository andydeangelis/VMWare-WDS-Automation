<File version="3.1">
  <FileID>4dee3778-5d7e-48ff-b7fd-c671faf8b7f0</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAAHYcAAB2HAY/l8WUAAGNySURBVHhe7d0HdFTnmibqmTvr3jXTq9ed2zN9
uk+fnj7ntH1snI4z2eRoMMnkHIxNsjE20QYDxmCTc85BIBACAUpIQjnnLJRzRgFlIcJ7v2+XCgSW
bLABY9X7rPUuSrt27dr5//5du4r/QkRERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERNS8lf/yhz84LliwyHHzlh2O6zdsYRiGYRjm
d5YNG7c4btu+y3H48OGO/9d//a+OjW18y/7wv/+39449hxCRUoi4rHLEZpQyDMMwzGNNjCQuqwzx
2eVGW/M0E5tZZvpX3v9pxfy+T3V55b0ScisRHJeO8eMnorGZb9l86flHphbBNyYLnhGpDMMwDPPY
4xWZDpfAq7BxCjLFOfjJxikYZxyDYO8VA/ewZFzyCJWEPJVcdA+Go28kPMJScM41FGeexvJK9H30
/YISC+HiFfTzBYBeLkjKq4R3ZBp8otIZhmEY5rHHPy4bZy+HwMU/Dp7hKfAITXrCSYa3vM85Z2mU
PcPgGZKAQJkH/5jMJ57g+BxZziicdwvFxSsR8NEiSObHHJ0/z7vRv+89Z8q95+793fRfU+5NxzQN
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
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
EZEF+C//5f8HYmOQMVhPIZMAAAAASUVORK5CYII=</Preview>
  <Form>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
80QhDj48/DP88f+zuhAXTNkAAA==</Form>
  <Code><![CDATA[
#-------------------------------------------------------
# NOTE: When new TabPage added place the validation code
# 		in the Test-WizardPage function.
#-------------------------------------------------------
function Test-WizardPage
{
<#
	Add TabPages and place the validation code in this function
#>
	[OutputType([boolean])]
	param([System.Windows.Forms.TabPage]$tabPage)
	
	if($tabPage -eq $tabpageStep1)
	{
		#TODO: Enter Validation Code here for Step 1
		if(-not $global:vcenterConnection.IsConnected)
		{
			return $false
		}
		else
		{
			return $true
		}
		
	}
	elseif ($tabPage -eq $tabpageStep2)
	{
		#TODO: Enter Validation Code here for Step 2
		if($global:vmbuilds -ne $null)
		{
			return $true
		}
		
		return $false
	}
	elseif ($tabPage -eq $tabpageStep3)
	{
		#TODO: Enter Validation Code here for Step 2
		if ($global:vmbuilds -ne $null)
		{
			return $true
		}
		
		return $false
	}
	elseif ($tabPage -eq $tabpageStep4)
	{
		$hostnameComplete = $true
		
		foreach ($node in $treeviewVMListStep4.Nodes)
		{
			if ($node.Text -notin $global:vmWorkgroupDomain.VMName)
			{
				$hostnameComplete = $false
			}
		}
		
		if ($hostnameComplete)
		{
			return $true
		}
		
		return $false
		
	}
	elseif ($tabPage -eq $tabpageStep5)
	{
		[System.Array]$timeZones = (Get-TimeZone -ListAvailable).DisplayName
		
		foreach ($timeZone in $timeZones)
		{
			$comboboxTimezone.Items.Add($timeZone)
		}
		
		if ($global:vmAdminPasswords)
		{
			return $false
		}
		
		return $true
	}
	elseif ($tabPage -eq $tabpageStep6)
	{
		$datetime = get-date -Format "MMddyyy_mmhhss"
		$string = ""
		if (Get-ChildItem -Path "$logDirectory\build_$datetime.html" -ErrorAction Ignore) { Remove-Item "$logDirectory\build_$datetime.html" -Force}		
		foreach ($vm in $global:vmBuilds)
		{
			$totalCoreCount = [int]($vm.NumCPU) * [int]($vm.CoresPerSocket)
			
			$string = "
						<p>
							<font size=3><b>VMName: <font color=red>$($vm.VMName)</font></b></font><br>
							<font size=2>
							&nbsp;&nbsp;&nbsp;<b>VM Host:</b> $($vm."VM Host")<br>
							&nbsp;&nbsp;&nbsp;<b>Datacenter:</b> $($vm.Datacenter)<br>
							&nbsp;&nbsp;&nbsp;<b>Datastore:</b> $($vm.Datastore)<br>
							&nbsp;&nbsp;&nbsp;<b>CPU Count:</b> $($vm.NumCPU)<br>
							&nbsp;&nbsp;&nbsp;<b>Cores Per Socket:</b> $($vm.CoresPerSocket)<br>
							&nbsp;&nbsp;&nbsp;<b>Total CPU Cores:</b> $totalCoreCount <br>
							&nbsp;&nbsp;&nbsp;<b>Memory:</b> $($vm.Memory)<br>
							&nbsp;&nbsp;&nbsp;<b>Template:</b> $($vm.Template)<br>
							&nbsp;&nbsp;&nbsp;<b>Location:</b> $($vm.Location)<br>
					"
			
			$domain = $global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }
			
			$string = $string + "&nbsp;&nbsp;&nbsp;<b>Hostname:</b> $($domain.Hostname)<br>"
			$string = $string + "&nbsp;&nbsp;&nbsp;<b>Domain/Workgroup:</b> $($domain.DomainName)<br>"
			
			$roles = $global:vmRoles | ?{ $_.VMName -eq $vm.VMName }
			
			if ($roles -ne '')
			{
				$string = $string + "&nbsp;&nbsp;&nbsp;<b>Roles:</b><br>"
				
				foreach ($role in $roles.Roles)
				{
					$string = $string + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$role<br>"
				}
			}
			
			$vmKeyTemp = $global:vmOSKeys | ?{ $_.VMName -eq $vm.VMName }
			
			$tzArray = Import-Csv "$ScriptDirectory\reference\timezones.csv"
			
			$tz = ($tzArray | ?{ $_.TimeZoneCode -eq $global:vmTimeZones}).Description
			
			$string = $string + "&nbsp;&nbsp;&nbsp;<b>Time Zone:</b> $tz<br>"
			
			if ($vmKeyTemp.UseKMS -eq 'Yes')
			{
				$string = $string + "&nbsp;&nbsp;&nbsp;<b>License Type:</b> Using KMS<br>"
			}
			elseif ($vmKeyTemp.UseKMS -eq "No")
			{
				$string = $string + "
										&nbsp;&nbsp;&nbsp;<b>License Type:</b> Product Key<br>
										&nbsp;&nbsp;&nbsp;<b>License Key:</b> $($vmKeyTemp.ProductKey)<br>
									"
			}
			
			if ($vm."IP Type" -eq "Static")
			{
				$string = $string + "
										&nbsp;&nbsp;&nbsp;<b>IP Type:</b> $($vm."IP Type")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Network:</b> $($vm.Network)<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>IP Address:</b> $($vm."IP Address")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Subnet Mask:</b> $($vm."Subnet Mask")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Default Gateway:</b> $($vm."Default Gateway")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Primary DNS Server:</b> $($vm."Primary DNS Server")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Secondary DNS Server:</b> $($vm."Secondary DNS Server")<br>
										"
			}
			else
			{
				$string = $string + "&nbsp;&nbsp;&nbsp;<b>IP Type:</b> $($vm."IP Type")<br>"
				$string = $string + "&nbsp;&nbsp;&nbsp;<b>Network:</b> $($vm.Network)<br>"
			}
			
			$disks = $global:vmAdditionalDisks | ?{ $_.VMName -eq $vm.VMName }
			
			
			foreach ($disk in $disks)
			{
				$string = $string + "&nbsp;&nbsp;&nbsp;<b>Additional Disk:</b> $($disk.DriveLetter) - $($disk.DriveSize)GB <br>"				
			}
			
			foreach ($nic in ($global:vmAdditionalNICs | ?{ $_.VMName -eq $vmName }))
			{
				if ($nic."IP Type" -eq "Static")
				{
					$string = $string + "
										&nbsp;&nbsp;&nbsp;<b>Additional NIC:</b> $($nic."IP Type")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Network:</b> $($nic.VLAN)<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>IP Address:</b> $($nic."IP Address")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Subnet Mask:</b> $($nic."Subnet Mask")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Default Gateway:</b> $($nic."Default Gateway")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Primary DNS Server:</b> $($nic."Primary DNS Server")<br>
										"
				}
				else
				{
					$string = $string + "
										&nbsp;&nbsp;&nbsp;<b>Additional NIC:</b> $($nic."IP Type")<br>"					
				}
			}
			
			if ($global:vmLocalUsers -ne '')
			{
				$string = $string + "&nbsp;&nbsp;&nbsp;<b>Additional Users:</b><br>"
				
				foreach ($user in $global:vmLocalUsers)
				{
					$string = $string + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$($user.Username)<br>"
				}
			}
			
			$string = $string + "</font></p>"
			
			ConvertTo-Html -Body $string | Out-File "$logDirectory\build_$datetime.html" -Append
		}
			
		$webbrowserVMBuildSummary.Url = "$logDirectory\build_$datetime.html"
		
		return $true
	}
	#Add more pages here
	
	return $false
}



$buttonFinish_Click={
	#-------------------------------------------------------
	# TODO: Place finalization script here
	#-------------------------------------------------------
	
}

#region Events and Functions
$formVMAutomationTool_Load = {
	
	Update-NavButtons
	
	$Path = $env:TEMP
	
	if (Get-Item "$Path\VcenterHistory\vcenterhistory.log")
	{
		$autoCompleteArray = (Import-Csv "$Path\VcenterHistory\vcenterhistory.log").vcenter
		
		$vcenterTextbox.AutoCompleteCustomSource.AddRange($autoCompleteArray)
	}
	
}

function Update-NavButtons
{
	<# 
		.DESCRIPTION
		Validates the current tab and Updates the Next, Prev and Finish buttons.
	#>
	$enabled = Test-WizardPage $tabcontrolWizard.SelectedTab
	$buttonNext.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	$buttonBack.Enabled = $tabcontrolWizard.SelectedIndex -gt 0
	$buttonFinish.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)	
	#Uncomment to Hide Buttons
	#$buttonNext.Visible = ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	#$buttonFinish.Visible = ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)
}

$script:DeselectedIndex = -1
$tabcontrolWizard_Deselecting=[System.Windows.Forms.TabControlCancelEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
	# Store the previous tab index
	$script:DeselectedIndex = $_.TabPageIndex
}

$tabcontrolWizard_Selecting=[System.Windows.Forms.TabControlCancelEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
	# We only validate if we are moving to the Next TabPage. 
	# Users can move back without validating
	if($script:DeselectedIndex -ne -1 -and $script:DeselectedIndex -lt $_.TabPageIndex)
	{
		#Validate each page until we reach the one we want
		for($index = $script:DeselectedIndex; $index -lt $_.TabPageIndex; $index++)
		{
			$_.Cancel = -not (Test-WizardPage $tabcontrolWizard.TabPages[$index])
			
			if($_.Cancel) 
			{
				# Cancel and Return if validation failed.
				return;
			}
		}
	}
	
	Update-NavButtons
}

$buttonBack_Click={
	#Go to the previous tab page
	if($tabcontrolWizard.SelectedIndex -gt 0)
	{
		$tabcontrolWizard.SelectedIndex--
	}
}

$buttonNext_Click={	
	#Go to the next tab page
	if($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	{
		$tabcontrolWizard.SelectedIndex++
	}	
}

#endregion

#------------------------------------------------------
# NOTE: When a Control State changes you should call
# 		Update-NavButtons to trigger validation
#------------------------------------------------------

$radiobuttonOption_CheckedChanged={
	
	if($this.Checked)
	{
		Update-NavButtons
	}
}

$buttonEnterCredentials_Click={
	
	try
	{
		$pictureboxLoading.Visible = $true
		if ($global:vcenterConnection.IsConnected)
		{
			Disconnect-VIServer -Server * -Force -Confirm:$false
			$labelVCenterServerNotConn.Text = "vCenter Server: Not Connected"
			$labelUsernameNotConnected.Text = "Username: Not Connected"
			$labelConnectionStatusNotC.Text = "Connection Status: Not Connected"
		}
		$global:vcCredential = $null
		$global:vcenterConnection = $null
		$global:vcCredential = Get-Credential -ErrorAction Stop
		$global:vcenterConnection = Connect-VIServer -Server $vcenterTextbox.Text -Credential $global:vcCredential -ErrorAction Stop
		$buttonEnterCredentials.Enabled = $false
		$pictureboxLoading.Visible = $false
	}
	catch
	{
		"Unable to connect."
	}
	
	If ($global:vcenterConnection.IsConnected)
	{
		$labelVCenterServerNotConn.Text = "vCenter Server: $($vcenterTextbox.Text)"
		$labelUsernameNotConnected.Text = "Username: $($global:vcenterConnection.User)"
		$labelConnectionStatusNotC.Text = "Connection Status: Connected"
		$labelOKStep1.Visible = $true
		
		$Path = $env:TEMP
		
		if (-not (Get-Item "$Path\VcenterHistory" -ErrorAction SilentlyContinue))
		{
			New-Item -Name VcenterHistory -Path $Path -ItemType Directory
		}
		
		if (Get-Item "$Path\VcenterHistory\vcenterhistory.log" -ErrorAction SilentlyContinue)
		{
			$vcHistoryArray = Import-Csv "$Path\VcenterHistory\vcenterhistory.log"
			
			$vcHistoryArray = $vcHistoryArray | ?{ $_.vcenter -ne "$($vcenterTextbox.Text)" }
			
			$object = New-Object PSObject
			
			$object | Add-Member -MemberType NoteProperty -Name vcenter -Value $vcenterTextbox.Text
			
			$vcHistoryArray = [System.Array]$vcHistoryArray + $object
			
			$vcHistoryArray | Export-CSV "$Path\VcenterHistory\vcenterhistory.log" -NoTypeInformation
		}
		else
		{
			$vcHistoryArray = @()
			
			$object = New-Object PSObject
			
			$object | Add-Member -MemberType NoteProperty -Name vcenter -Value $vcenterTextbox.Text
			
			$vcHistoryArray = [System.Array]$vcHistoryArray + $object
			
			$vcHistoryArray | Export-CSV "$Path\VcenterHistory\vcenterhistory.log" -NoTypeInformation
		}
		
		Update-NavButtons
		
	}
	else
	{
		[System.Windows.Forms.MessageBox]::Show("Unable to connect to $($vcenterTextbox.Text). Please try logging on again.")
		$labelOKStep1.Visible = $false
		Update-NavButtons
	}
}

#region Control Helper Functions
function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]
		$DisplayMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}

function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}

function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	[ValidateNotNull()]
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterWMIProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)	
}

function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}


function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}


function Get-CheckedNode
{
<#
	.SYNOPSIS
		This function collects a list of checked nodes in a TreeView

	.DESCRIPTION
		This function collects a list of checked nodes in a TreeView

	.PARAMETER  $NodeCollection
		The collection of nodes to search

	.PARAMETER  $CheckedNodes
		The ArrayList that will contain the all the checked items
	
	.EXAMPLE
		$CheckedNodes = New-Object System.Collections.ArrayList
		Get-CheckedNode $treeview1.Nodes $CheckedNodes
		foreach($node in $CheckedNodes)
		{	
			Write-Host $node.Text
		}
#>
	param (
			[ValidateNotNull()]
			[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
			[ValidateNotNull()]
			[System.Collections.ArrayList]$CheckedNodes
	)
	
	foreach ($Node in $NodeCollection)
	{
		if ($Node.Checked)
		{
			[void]$CheckedNodes.Add($Node)
		}
		Get-CheckedNode $Node.Nodes $CheckedNodes
	}
}

#endregion


$vcenterTextbox_TextChanged={
	#TODO: Place custom script here
	if ($vcenterTextbox.Text -ne "")
	{
		$buttonEnterCredentials.Enabled = $true
	}
	else
	{
		$buttonEnterCredentials.Enabled = $false
	}
}

$buttonAddVirtualMachine_Click={
	#TODO: Place custom script here
	if ((Show-AddVMForm_psf) -eq 'OK')
	{
	}
}


$buttonOpenRolesSelection_Click={
	
	$global:vmSelectedStep4 | Out-File "$logDirectory\vmselectedstep4.log" -Append
	
	if ((Show-WindowsRoles_psf -VMName $global:vmSelectedStep4) -eq 'OK')
	{
		#$selectedRoles = $global:vmRoles | ?{ $_.VMName -eq $vm.VMName } | Select -ExpandProperty Roles		
	}
	
}

$buttonBuildAndConfigureVMs_Click={
	
	#$progressbarVMBuild.Visible = $true
	$buttonBuildAndConfigureVMs.Enabled = $false
	
	try
	{
		#$progressbarVMBuild.Maximum = ($global:vmBuilds).Count
		#$progressbarVMBuild.Value = 0
		#$progressbarVMBuild.Step = 1
		
		foreach ($vm in $global:vmbuilds)
		{
			while (@(Get-Job | ?{ $_.State -eq "Running" }).Count -ge 5)
			{
				# We're going to iterate through the running jobs and kill any that have been running for X minutes.
				# This block is ignored if there are less than 5 total builds. We'll handle that part later.
				
				foreach ($job in (Get-Job))
				{
					$runTime = ((Get-Date) - $job.PSBeginTime).Minutes
					if ($runtime -gt 30)
					{
						try
						{
							Stop-Job $job.Name -Confirm:$false
						}
						catch
						{
							"Unable to stop job."
						}
					}
				}
			
				Write-Host "Waiting for open thread...($NumJobs Maximum)"
				Start-Sleep -Seconds 3
			}
			
			# Let's combine all the OS specific data we gathered for the VM into one variable.
			$osConfigObject = New-Object PSObject
			
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "VMName" -Value $vm.VMName
			
			# Add the data for the domain/workgroup
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "Hostname" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).Hostname
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "DomainName" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).DomainName
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "DomainUser" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).DomainUser
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "DomainPassword" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).DomainPassword
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "IsWorkgroup" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).IsWorkgroup
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "LocalAdminPassword" -Value $global:vmAdminPasswords
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "Roles" -Value ($global:vmRoles | ?{ $_.VMName -eq $vm.VMName }).Roles
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "Features" -Value ($global:vmFeatures | ?{ $_.VMName -eq $vm.VMName }).Features
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "AdminPassword" -Value ($global:vmAdminPasswords | ?{ $_.VMName -eq $vm.VMName }).Password
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "LocalUsers" -Value $global:vmLocalUsers
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "Disks" -Value ($global:vmAdditionalDisks | ?{ $_.VMName -eq $vm.VMName })
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "NICs" -Value ($global:vmAdditionalNICs | ?{ $_.VMName -eq $vm.VMName })
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "OSKeys" -Value ($global:vmOSKeys | ?{ $_.VMName -eq $vm.VMName })
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "TimeZone" -Value $global:vmTimeZones
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "PostInstallScripts" -Value $global:postInstallScripts
			
			if ($global:vmAdminAccount -ne "")
			{
				$osConfigObject | Add-Member -MemberType NoteProperty -Name "AdminAccount" -Value $global:vmAdminAccount
			}
			else
			{
				$osConfigObject | Add-Member -MemberType NoteProperty -Name "AdminAccount" -Value ""
			}
			
			#$global:vmFullOSConfig = [System.Array]$global:vmFullOSConfig + $osConfigObject
			
			$osConfigObject | Out-File "$logDirectory\osobject.log" -Append
			$vm | Out-File "$logDirectory\vmobject.log" -Append
			# Define and start the build job for the VM.
			
			Start-Job -Name $vm.VMName -ArgumentList $vcenterTextbox.Text, $global:vcCredential, $vm, $ScriptDirectory, $osConfigObject, $logDirectory -Verbose -ScriptBlock {
				. "$($args[3])\Functions\Get-FolderbyPath.ps1"
				
				Import-Module VMware.PowerCLI
				
				Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -ParticipateInCeip $false -DisplayDeprecationWarnings $false -Confirm:$false -WebOperationTimeoutSeconds 3600 -ErrorAction Stop
				
				$connection = Connect-VIServer -Server $args[0] -Credential $args[1] -ErrorAction Stop
				
				if ($args[4].IsWorkgroup -eq 'No')
				{
					
					$password = ConvertTo-SecureString "$($args[4].DomainPassword)" -AsPlainText -Force
					$domainCredential = New-Object System.Management.Automation.PSCredential ("$($args[4].DomainUser)", $password)
					
					$osSpec = New-OSCustomizationSpec -OSType "Windows" -Name $args[2].VMName -Type NonPersistent `
													  -FullName "Administrator" `
													  -AdminPassword "$($args[4].LocalAdminPassword)" `
													  -AutoLogonCount 1 `
													  -OrgName "Org1" `
													  -Description "Temporary Spec for $($args[2].VMName)" `
													  -ChangeSid `
													  -Domain "$($args[4].DomainName)" `
													  -DomainCredentials $domainCredential `
													  -NamingScheme fixed `
													  -NamingPrefix $args[4].Hostname `
													  -ErrorAction Stop
					
				}
				else
				{
					
					$osSpec = New-OSCustomizationSpec -OSType "Windows" -Name $args[2].VMName -Type NonPersistent `
													  -FullName "Administrator" `
													  -AdminPassword "$($args[4].LocalAdminPassword)" `
													  -AutoLogonCount 1 `
													  -OrgName "Org1" `
													  -Description "Temporary Spec for $($args[2].VMName)" `
													  -ChangeSid `
													  -Workgroup "$($args[4].DomainName)" `
													  -NamingScheme fixed `
													  -NamingPrefix $args[4].Hostname `
													  -ErrorAction Stop
					
				}
				
				
				if ($args[2].("IP Type") -eq "DHCP")
				{
					
					Get-OSCustomizationNicMapping -OSCustomizationSpec $osSpec | Set-OSCustomizationNicMapping -IpMode UseDHCP -ErrorAction Stop					
				}
				else
				{
					Get-OSCustomizationNicMapping -OSCustomizationSpec $osSpec | Set-OSCustomizationNicMapping -IpMode UseStaticIP `
																											   -IpAddress $args[2].("IP Address") `
																											   -SubnetMask $args[2].("Subnet Mask") `
																											   -DefaultGateway $args[2].("Default Gateway") `
																											   -Dns $args[2].("Primary DNS Server"), $args[2].("Secondary DNS Server") `
																											   -ErrorAction Stop				
				}
				
				# Here, we pull in the template depending on if it's in vCenter or in a Content Library.
				
				#if ($args[2].TemplateLocation -eq "vCenter")
				#{
					$vmTemplate = Get-Template -Name $args[2].Template
				
					$destFolder = Get-FolderbyPath -Path "$($args[2].Location)" -Separator "\"
					$tmpCommand = "New-VM -VMHost "$($args[2].("VM Host"))" -Name "$($args[2].VMName)" -Datastore "$($args[2].Datastore)" -Template "$vmTemplate" -Location "$destFolder" -OSCustomizationSpec $osSpec -ErrorAction Stop"
					# Now, let's actually build the VM with the configuration spec we defined above.
					$invoke = New-VM -VMHost "$($args[2].("VM Host"))" -Name "$($args[2].VMName)" -Datastore "$($args[2].Datastore)" -Template "$vmTemplate" -Location "$destFolder" -OSCustomizationSpec $osSpec -ErrorAction Stop
					
				#}
				<#
				elseif ($args[2].TemplateLocation -eq "Content Library")
				{					
					if ($connection.Version -ge 6.5)
					{
						$vmTemplate = Get-ContentLibraryItem -Name $args[2].Template
						
						$destFolder = Get-FolderbyPath -Path "$($args[2].Location)" -Separator "\"
						
						# Now, let's actually build the VM with the configuration spec we defined above.
						$invokeTask = New-VM -VMHost $args[2].("VM Host") -Name $args[2].VMName -Datastore $args[2].Datastore -Location $destFolder -ContentLibraryItem $vmTemplate -RunAsync -ErrorAction Stop
						
						do
						{
							Write-Host $invokeTask
							Start-Sleep -Seconds 5
						}
						while ($invokeTask.State -eq "Running")
						
						
						$applySpec = Get-VM -Name $args[2].VMName | Set-VM -OSCustomizationSpec $osSpec -Confirm:$false -ErrorAction Stop
					}
					else
					{
						$vmTemplate = Get-ContentLibraryItem -Name $args[2].Template
					}					
				} /#>
				
				# Now that the VM is built, we need to modify the network adapter and assign it to the specified vSwitch before powering it on.
				$totalCPUs = [int]($args[2].NumCPU) * [int]($args[2].CoresPerSocket)
				Get-VM -Name $args[2].VMName | Set-VM -MemoryGB $args[2].Memory -NumCpu $totalCPUs -CoresPerSocket $args[2].CoresPerSocket -Confirm:$false -ErrorAction Stop
				
				Get-NetworkAdapter -VM $args[2].VMName | Set-NetworkAdapter -NetworkName $args[2].Network -StartConnected $true -Confirm:$false -ErrorAction Stop
				
				Start-VM -VM $args[2].VMName -RunAsync
				
				# Now we wait for the VM to power up and auto log in before continuing.
				$vmstatus = (Get-VM -Name "$($args[2].VMName)").extensionData.Guest.interactiveGuestOperationsReady
				
				do
				{
					Start-Sleep -Seconds 1
					$vmstatus = (Get-VM -Name "$($args[2].VMName)").extensionData.Guest.interactiveGuestOperationsReady
					Write-Host $vmStatus -ForegroundColor Red
				}
				while ($vmStatus -ne $True)
				
				Write-Host $vmStatus -ForegroundColor Green
				
				#Get-VM $args[2].VMName -ErrorAction Stop | Restart-VMGuest -Confirm:$false -ErrorAction Stop
				
				# Now that our VM is built, let's finish customizing it. We'll start by creating the credential object to run Invoke-VMScript.
				
				$vmAdminPass = $args[4].LocalAdminPassword
				
				$localAdmin = "Administrator"
				$password = ConvertTo-SecureString $args[4].LocalAdminPassword -AsPlainText -Force
				$localAdminCred = New-Object System.Management.Automation.PSCredential ($localAdmin, $password)
				
				# Declare the array that will house each command to run.
				
				$customizeOSScripts = [System.Collections.ArrayList]@()
				
				# Now, build the commands to add the additional user accounts to the new VMs. Add the commands to the command array.
				
				foreach ($user in $args[4].LocalUsers)
				{
					if ($user.Administrator -eq "Yes")
					{
						$userCreate = New-Object PSObject
						$userCreate | Add-Member -MemberType NoteProperty -Name "Command" -Value "NET USER $($user.Username) $($user.Password) /add"
						
						$userAdmin = New-Object PSObject
						$userAdmin | Add-Member -MemberType NoteProperty -Name "Command" -Value "NET LOCALGROUP Administrators $($user.Username) /add"
						
						$date = Get-Date -Format "M-d-yyyy"
						$desc = "Admin user created on $date."
						$userTmp = $user.Username
						$userDescription = New-Object PSObject
						$userDescription | Add-Member -MemberType NoteProperty -Name "Command" -Value "Set-LocalUser -Name $userTmp -Description ""$desc"""
						
						$customizeOSScripts = [System.Array]$customizeOSScripts + $userCreate
						$customizeOSScripts = [System.Array]$customizeOSScripts + $userAdmin
						$customizeOSScripts = [System.Array]$customizeOSScripts + $userDescription
					}
					else
					{
						$userCreate = New-Object PSObject
						$userCreate | Add-Member -MemberType NoteProperty -Name "Command" -Value "NET USER $($user.Username) $($user.Password) /add"
						
						$date = Get-Date -Format "M-d-yyyy"
						$desc = "Standard user created on $date."
						$userTmp = $user.Username
						$userDescription = New-Object PSObject
						$userDescription | Add-Member -MemberType NoteProperty -Name "Command" -Value "Set-LocalUser -Name $userTmp -Description ""$desc"""
						
						$customizeOSScripts = [System.Array]$customizeOSScripts + $userCreate
						$customizeOSScripts = [System.Array]$customizeOSScripts + $userDescription
					}
				}
				
				# Build the command to install the selected Roles.
				
				foreach ($role in $args[4].Roles)
				{
					$object = New-Object PSObject
					$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Install-WindowsFeature -Name $role -IncludeManagementTools"
					$customizeOSScripts = [System.Array]$customizeOSScripts + $object
				}
				
				# Now, we add, format and partition additional specified disks.
				
				foreach ($disk in $args[4].Disks)
				{
					$driveLetter = $disk.DriveLetter
					$driveLabel = "Drive-$($disk.DriveLetter)"
					$driveSize = [int]($disk.DriveSize)
					$confirm = '$false'
					New-HardDisk -VM $args[2].VMName -CapacityGB $driveSize -Persistence persistent -Confirm:$false -ErrorAction Stop
					$object = New-Object PSObject
					$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-Disk | Where-Object PartitionStyle -eq ""RAW"" | Initialize-Disk -PartitionStyle GPT -PassThru | New-Partition -DriveLetter $driveLetter -UseMaximumSize | Format-Volume -FileSystem NTFS -NewFileSystemLabel $driveLabel -AllocationUnitSize 65536 -Confirm:$confirm"
					#$customizeOSScripts = [System.Array]$customizeOSScripts + $object
					Invoke-VMScript -VM $args[2].VMName -GuestCredential $localAdminCred -ScriptText "$($object.Command)" -ErrorAction Stop
				}
				
				# Now, we need to rename the original adapter.
				
				$prNICLabelObject = New-Object PSObject
				$prNICLabel = $args[2].NICLabel
				$prMacAddress = (Get-VM -Name $args[2].VMName | Get-NetworkAdapter | ?{ $_.Name -eq "Network Adapter 1" }).MacAddress
				
				$prMacAddress = "$prMacAddress" -replace ":", "-"
				
				$prNICLabelObject | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$prMacAddress"" | Rename-NetAdapter -NewName $prNICLabel"
				
				$customizeOSScripts = [System.Array]$customizeOSScripts + $prNICLabelObject
				
				# Let's customize additional network adapters.
				
				foreach ($nic in $args[4].NICs)
				{
					$newNic = New-NetworkAdapter -VM $nic.VMName -NetworkName $nic.VLAN -StartConnected -Type Vmxnet3
					
					$macAddress = "$($newNic.MacAddress)" -replace ":", "-"
					
					if ($nic.("IP Type") -eq "Static")
					{
						$newIP = $nic.("IP Address")
						$newMask = $nic.("Subnet Mask")
						$newGateway = $nic.("Default Gateway")
						$newDNSServer = $nic.("Primary DNS Server")
						$newNICLabel = $nic.NICLabel
						
						# Determine the CIDR notation for subnet mask. We'll need this later.'
						$subnetMasks = Import-Csv "$($args[3])\reference\cidrlist.csv"
						
						$cidrNotation = ($subnetMasks | ?{ $_.SubnetMask -eq $newMask }).CIDR
						
						if ($newGateway -ne '')
						{
							if ($newDNSServer -ne '')
							{
								$object = New-Object PSObject
								$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$macAddress"" | New-NetIPAddress -IPAddress $newIP -DefaultGateway $newGateway -PrefixLength $cidrNotation | Set-DNSClientServerAddress -ServerAddresses $newDNSServer"
								$customizeOSScripts = [System.Array]$customizeOSScripts + $object
								$object2 = New-Object PSObject
								$object2 | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$macAddress"" | Rename-NetAdapter -NewName $newNICLabel"
								$customizeOSScripts = [System.Array]$customizeOSScripts + $object2
							}
							else
							{
								$object = New-Object PSObject
								$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$macAddress"" | New-NetIPAddress -IPAddress $newIP -DefaultGateway $newGateway -PrefixLength $cidrNotation"
								$customizeOSScripts = [System.Array]$customizeOSScripts + $object
								$object2 = New-Object PSObject
								$object2 | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$macAddress"" | Rename-NetAdapter -NewName $newNICLabel"
								$customizeOSScripts = [System.Array]$customizeOSScripts + $object2
							}
							
							$customizeOSScripts = [System.Array]$customizeOSScripts + $object
						}
						else
						{
							if ($newDNSServer -ne '')
							{
								$object = New-Object PSObject
								$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$macAddress"" | New-NetIPAddress -IPAddress $newIP -PrefixLength $cidrNotation | Set-DNSClientServerAddress -ServerAddresses $newDNSServer"
								$customizeOSScripts = [System.Array]$customizeOSScripts + $object
								$object2 = New-Object PSObject
								$object2 | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$macAddress"" | Rename-NetAdapter -NewName $newNICLabel"
								$customizeOSScripts = [System.Array]$customizeOSScripts + $object2
							}
							else
							{
								$object = New-Object PSObject
								$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$macAddress"" | New-NetIPAddress -IPAddress $newIP -PrefixLength $cidrNotation"
								$customizeOSScripts = [System.Array]$customizeOSScripts + $object
								$object2 = New-Object PSObject
								$object2 | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$macAddress"" | Rename-NetAdapter -NewName $newNICLabel"
								$customizeOSScripts = [System.Array]$customizeOSScripts + $object2
							}
						}
					}
					else
					{
						$newNICLabel = $nic.NICLabel
						$object2 = New-Object PSObject
						$object2 | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$macAddress"" | Rename-NetAdapter -NewName $newNICLabel"
						$customizeOSScripts = [System.Array]$customizeOSScripts + $object2
					}
				}
				
				# Let's set the product key and activate Windows.
				
				foreach ($key in $args[4].OSKeys)
				{
					if ($key.UseKMS -eq "Yes")
					{
						[string]$kmsServerCmd = "cscript C:\Windows\System32\slmgr.vbs /skms $($key.KMSServer):$($key.KMSServerPort)"
						
						$object = New-Object PSObject
						$object | Add-Member -MemberType NoteProperty -Name "Command" -Value $kmsServerCmd
						
						$customizeOSScripts = [System.Array]$customizeOSScripts + $object
					}
					elseif ($key.UseKMS -eq "No")
					{
						[string]$productKeyCmd = "cscript C:\Windows\System32\slmgr.vbs /ipk $($key.ProductKey)"
						[string]$activationCmd = "cscript C:\Windows\System32\slmgr.vbs /ato"
						
						$object = New-Object PSObject
						$object | Add-Member -MemberType NoteProperty -Name "Command" -Value $productKeyCmd
						
						$customizeOSScripts = [System.Array]$customizeOSScripts + $object
						
						Clear-Variable object
						
						$object = New-Object PSObject
						$object | Add-Member -MemberType NoteProperty -Name "Command" -Value $activationCmd
						
						$customizeOSScripts = [System.Array]$customizeOSScripts + $object
					}
				}
				
				# Now we'll set the time zone
				
				foreach ($tz in $args[4].TimeZone)
				{
					$setTZID = (Get-TimeZone -ListAvailable | Where-Object DisplayName -eq $tz).Id
					
					$newTZCommand = "Set-TimeZone -Id '$setTZID'"
					
					$object = New-Object PSObject
					$object | Add-Member -MemberType NoteProperty -Name "Command" -Value $newTZCommand
					
					$customizeOSScripts = [System.Array]$customizeOSScripts + $object
				}
				
				if ($args[4].AdminAccount -ne "")
				{
					$newAdminCommand = "Get-LocalUser Administrator | Rename-LocalUser -NewName $($args[4].AdminAccount)"
					
					$object = New-Object PSObject
					$object | Add-Member -MemberType NoteProperty -Name "Command" -Value $newAdminCommand
					
					$customizeOSScripts = [System.Array]$customizeOSScripts + $object
				}
				
				# Let's output the commands to verify.
				$customizeOSScripts | Out-File "$($args[5])\scriptsarray_$($args[2].VMName).log"
				
				# Now, we run all the customization commands.
				
				foreach ($script in $customizeOSScripts)
				{
					$script.Command | Out-File "$($args[5])\$($args[2].VMName)_scriptcommand.log" -Append
					Invoke-VMScript -VM $args[2].VMName -GuestCredential $localAdminCred -ScriptText "$($script.Command)" -ErrorAction Ignore | Out-File "$($args[5])\$($args[2].VMName)_scriptcommand.log" -Append
					
				}
				
				$newLocalAdmin = $($args[4].AdminAccount)
				$password = ConvertTo-SecureString $args[4].LocalAdminPassword -AsPlainText -Force
				$newLocalAdminCred = New-Object System.Management.Automation.PSCredential ($newLocalAdmin, $password)
				
				foreach ($postInstallScript in $args[4].PostInstallScripts)
				{
					$postInstallScript.Script | Out-File "$($args[5])\$($args[2].VMName)_scriptcommand.log" -Append
					Invoke-VMScript -VM $args[2].VMName -GuestCredential $newLocalAdminCred -ScriptText "$($postInstallScript.Script)" -ErrorAction Ignore | Out-File "$($args[5])\$($args[2].VMName)_scriptcommand.log" -Append
				}
				
				Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -ParticipateInCeip $false -DisplayDeprecationWarnings $false -Confirm:$false -WebOperationTimeoutSeconds 300 -ErrorAction Stop
				
				Disconnect-VIServer -Server $args[0] -Force -Confirm:$false -ErrorAction Stop
			
				
			} # End job block
			
		} # End foreach statement
		
		# Let's wait for all the build jobs to finish. We'll also kill any jobs that have been running for longer than X minutes.
		# For each job returned that has not completed, we'll check to see if it has been running longer than X minutes. If it has, kill the job.
		
		do
		{
			Start-Sleep -Milliseconds 1000
			
			foreach ($job in (Get-Job))
			{
				$runTime = ((Get-Date) - $job.PSBeginTime).Minutes
				if ($runtime -gt 30)
				{
					try
					{
						Stop-Job $job.Name -Confirm:$false
					}
					catch
					{
						"Unable to stop job."
					}
				}
			}
			
		}
		while ((Get-Job -State Running).Count -gt 0)
		
		$datetime = Get-Date -Format "MMddyyyy_HHmmss"
		
		# Get the completed jobs.
		$jobs = Get-Job | ?{ $_.State -eq "Completed" }
		
		# Get the failed jobs.
		$failedJobs = Get-Job | ?{ $_.State -ne "Completed" }
		
		# Output the job results to a separate log file for each VM.		
		$data = @()
		
		foreach ($job in $jobs)
		{
			$data += Get-Job $job.Name | Receive-Job
			Remove-Job $job
			
			Get-VM $job.Name | Restart-VMGuest -Confirm:$false
			
			$data | Out-File "$logDirectory\jobresult.log" -Append
		}
		
		$failedData = @()
		
		foreach ($failedJob in $failedJobs)
		{
			$failedData += Get-Job $failedJob.Name | Receive-Job
			Remove-Job $failedJob
			
			Get-VM $job.VMName | Stop-VM -RunAsync -Confirm:$false
			
			do { Start-Sleep -Milliseconds 500 }
			while ((Get-VM $job.Name).PowerState -eq "PoweredOff")
			
			Remove-VM $job.Name -RunAsync -DeletePermanently -Confirm:$false
		}
		
		$data | Out-File "$logDirectory\jobtext.log" -Append
		
		if (-not $failedData)
		{
			[System.Windows.Forms.MessageBox]::Show("All requested virtual machines are available.")
		}
		else
		{
			$failedData | Out-File "$logDirectory\failedjobtext.log" -Append
			[System.Windows.Forms.MessageBox]::Show("The following virtual machine builds failed: $failedData")
		}
		
		$datetime = Get-Date -Format "MMddyyyy_HH_mm_ss"
		$userName = $env:USERNAME
		[string]$archiveName = "vmbuild__$userName_$datetime.zip"
		Compress-Archive -Path $logDirectory -DestinationPath "$logParentDirectory\$archiveName" -Verbose
		Remove-Item -Path $logDirectory -Recurse -Confirm:$false
		
	} # End try statement
	catch
	{
		[System.Windows.Forms.MessageBox]::Show("Unable to build virtual machines.")
	}
}

$datagridviewVMQueue_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	$buttonDeleteVMFromQueue.Enabled = $true	
	
}

$buttonDeleteVMFromQueue_Click={
	
	$global:vmBuilds = $global:vmBuilds | ?{ $_.VMName -ne $listviewVMsStep2.SelectedItems.Text }
	
	$listviewVMsStep2.Clear()
	$buttonDuplicateVMBuild.Enabled = $false
	
	$labelStep2CPU.Text = "CPU:"
	$labelStep2Memory.Text = "Memory:"
	$labelStep2Network.Text = "Network:"
	$labelStep2VMName.Text = "VM Name:"
	
	foreach ($item in $global:vmBuilds)
	{
		$listviewVMsStep2.Items.Add($item.VMName)
	}
	
	# Update the treeview control for Step 3
	
	$treeviewVMListStep3.BeginUpdate()
	$treeviewVMListStep3.Nodes.Clear()
	
	foreach ($vm in $global:vmbuilds)
	{
		$newNode = $treeviewVMListStep3.Nodes.Add($vm.VMName)
	}
	
	$treeviewVMListStep3.EndUpdate()
	
	# Update the treeview control for step 4.
	
	$treeviewVMListStep4.BeginUpdate()
	$treeviewVMListStep4.Nodes.Clear()
	
	foreach ($vm in $global:vmbuilds)
	{
		$newNode = $treeviewVMListStep4.Nodes.Add($vm.VMName)
	}
	
	# Determine if we should be resetting all the variables.
	if ($global:vmBuilds -eq $null)
	{
		$vmFeatures = [System.Collections.ArrayList]@()
		$vmRoles = [System.Collections.ArrayList]@()
		$vmDomainInfo = [System.Collections.ArrayList]@()
		$vmOS = [System.Collections.ArrayList]@()
		$vmAdminPasswords = [System.Collections.ArrayList]@()
		$vmLocalUsers = [System.Collections.ArrayList]@()
		$vmWorkgroupDomain = [System.Collections.ArrayList]@()
		$vmFullOSConfig = [System.Collections.ArrayList]@()
		$vmTimeZones = [System.Collections.ArrayList]@()
		$vmAdditionalDisks = [System.Collections.ArrayList]@()
		$vmAdditionalNICs = [System.Collections.ArrayList]@()
		$vmOSKeys = [System.Collections.ArrayList]@()
		$vmAdminAccount = $null
		
		$buttonDeleteVMFromQueue.Enabled = $false
		$buttonDuplicateVMBuild.Enabled = $false
		
		foreach ($item in (Get-ChildItem -Path "$logDirectory"))
		{
			$item | Remove-Item -Force -Recurse
		}
	}
	
	$treeviewVMListStep4.EndUpdate()
	
	Update-NavButtons
	
	
}

$treeviewVMListStep4_AfterSelect=[System.Windows.Forms.TreeViewEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.TreeViewEventArgs]
	
	$global:vmSelectedStep4 = $treeviewVMListStep4.SelectedNode.Text
	
	$labelVMNameStep4.Text = "VM: $($global:vmSelectedStep4)"
	
	if ($treeviewVMListStep4.SelectedNode.Text -in $global:vmWorkgroupDomain.VMName)
	{
		$labelOK1.Visible = $true		
	}
	else
	{
		$labelOK1.Visible = $false
	}
	
	if ($treeviewVMListStep4.SelectedNode.Text -in $global:vmOSKeys.VMName)
	{
		$vmTemp = $global:vmOSKeys | ?{ $_.VMName -eq $treeviewVMListStep4.SelectedNode.Text }
		
		if ($vmTemp.UseKMS -eq "Yes")
		{
			$radiobuttonKMSKey.Checked = $true
			$buttonProductKey.Text = "KMS Key"
		}
		elseif ($vmTemp.UseKMS -eq "No")
		{
			$radiobuttonRetailKey.Checked = $true
			$buttonProductKey.Text = "Retail Key"
		}
	}
	else
	{
		$radiobuttonKMSKey.Checked = $false
		$radiobuttonRetailKey.Checked = $false
		$buttonProductKey.Text = "Product Key"
		$buttonProductKey.Enabled = $false
	}
	
}

$radiobuttonDomain_CheckedChanged={
	
	if ($radiobuttonDomain.Checked) { $buttonDomainWorkgroup.Enabled = $true; $buttonSetWorkgroup.Enabled = $false }
	elseif ($radiobuttonWorkgroup.Checked) { $buttonDomainWorkgroup.Enabled = $false; $buttonSetWorkgroup.Enabled = $true }
	
}

$buttonOpenFeatureSelection_Click={
	
	if ((Show-WindowsFeatures_psf -VMName $global:vmSelectedStep4) -eq 'OK')
	{
	}
}

$buttonAddLocalUsers_Click={
	
	if ((Show-AddLocalUsers_psf -VMName $global:vmSelectedStep4) -eq 'OK'){}
	
}

$comboboxTimezone_SelectedIndexChanged={
	
	$global:vmTimeZones = $comboboxTimezone.Text
	
	$global:vmTimeZones | Out-File "$logDirectory\tz.log"
		
}

$treeviewVMListStep3_AfterSelect=[System.Windows.Forms.TreeViewEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TreeViewEventArgs]
				
	$global:vmSelectedStep3 = $treeviewVMListStep3.SelectedNode.Text
	
	$labelVMStep3.Text = "VM: $($global:vmSelectedStep3)"
	
}

$listviewVMsStep2_SelectedIndexChanged={
				
	$rowTmp = $global:vmBuilds | ?{ $_.VMName -eq $listviewVMsStep2.SelectedItems.Text }
	
	$labelStep2CPU.Text = "CPU: $($rowTmp.NumCPU)"
	$labelStep2Memory.Text = "Memory: $($rowTmp.Memory)"
	$labelStep2Network.Text = "Network: $($rowTmp.Network)"
	$labelStep2VMName.Text = "VM Name: $($rowTmp.VMName)"
	
	$buttonDuplicateVMBuild.Enabled = $true
	
}
$buttonVDiskAdd_Click={
	
	if ((Show-AddVirtualDisk_psf -VMName $treeviewVMListStep3.SelectedNode.Text) -eq 'OK')
	{ }
	
}

$buttonVNICAdd_Click={
	
	if ((Show-AddNicCard_psf -VMName $treeviewVMListStep3.SelectedNode.Text) -eq 'OK')
	{ }
	
}



$maskedtextboxHostname_Enter={
	#TODO: Place custom script here
	$maskedtextboxHostname.Select(0,0)
}

$buttonSetHostname_Click={
	
	if ((Show-SetHostname_psf -VMName $treeviewVMListStep4.SelectedNode.Text) -eq 'OK')
	{ }
}

$buttonDomainWorkgroup_Click={
	
	if ((Show-WorkgroupDomainJoin_psf) -eq 'OK')
	{ }	
}

$buttonSet_Click={
	
	if ((Show-GetAdminPassword_psf) -eq 'OK')
	{ }
}

$buttonAdminRename_Click={
	#TODO: Place custom script here
	if ((Show-RenameAdminAccount_psf) -eq 'OK')
	{ }
}

$buttonProductKey_Click={
	
	if ($radiobuttonRetailKey.Checked)
	{
		if ((Show-EnterRetailKey_psf -VMName $treeviewVMListStep4.SelectedNode.Text) -eq 'OK')
		{ }
	}
	elseif ($radiobuttonKMSKey.Checked)
	{
		if ((Show-EnterKMSKey_psf -VMName $treeviewVMListStep4.SelectedNode.Text) -eq 'OK')
		{ }
	}
	
}

$radiobuttonRetailKey_CheckedChanged={
	
	if ($radiobuttonRetailKey.Checked)
	{
		$buttonProductKey.Text = "Retail Key"
		$buttonProductKey.Enabled = $true
	}
	
}

$radiobuttonKMSKey_CheckedChanged={
	
	if ($radiobuttonKMSKey.Checked)
	{
		$buttonProductKey.Text = "KMS Key"
		$buttonProductKey.Enabled = $true
	}
}


$buttonSelectScripts_Click={
	
	if ((Show-AddPostInstallScripts_psf) -eq 'OK')
	{ }
}

$buttonDuplicateVMBuild_Click={
	
	$listviewVMsStep2.SelectedItems.Text | Out-File "$logDirectory\step2.txt"
	
	if ((Show-DuplicateVM_psf -VMName $listviewVMsStep2.SelectedItems.Text) -eq 'OK')
	{ }
}
]]></Code>
  <Bookmarks />
  <BreakPoints />
  <TracePoints />
  <Mode>1</Mode>
  <Assemblies />
</File>