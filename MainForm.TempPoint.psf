<File version="3.1">
  <FileID>4dee3778-5d7e-48ff-b7fd-c671faf8b7f0</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAHz9SURBVHhe7f0FmFTnni587znfzPt+17zfdc47
Z845M3v2+GyLhyRECPEQkpBAcHd3dxpo3N2dbmhX2pV2d3cp6a52F/T+/s+qbmhIEyA7ZJNd9y/X
/wKqltVTa63nflatqvyKiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIjoL1amlOlv/uZvTP/7f/9v0+jRo00TJkwwTZw4
SWoii8VisVis57bMffUkqX/+59+Y/vqv/9qk+nSpYtXB/6C/+qu/avif//N/YuAXX2DuvPmwc3JH
ek4ZCkqrkF9SyWKxWCwW67ktE/KLjYiMiceadevw5ZdfQgbz+G//7b/d7OrmH00CgGngwIHYuWsv
4tILEZ5ajIi0UkSmlyKCxWKxWCzWc1vdfXV4WgkyCo04dvwUBg0ahL/+679u6ermH01d9p81ey7i
pfOPSC9DmASA6ylFLBaLxWL96ApLK0ZkhnRQGWVdfz6rMi//4b5LdYgPd5bPqtS6eq5bbUvPbXt2
9eBrD0stQVZRJdavt8Kvf/3rxweAUSNHmi5fdTa/CFlImFoIi8VisVg/siKlQwyIyYGDTxyuXouB
ndezK7V8R794BMfnIULWG662Qfoy74hUuAbG/izlI+vq7j/VNgTJtjj6xv8sr93BNw6BsTnaes3r
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
6xZQG4otS7fimHuO9tHL7a798OFlq5+d7j4eVRv+cIjvWeZ9ybw/d8r7LduoHVvmdtW+NixBoaPr
ODXvM3IMqHuHZL+6oba1+ziQfannPqCOU7Us83HwcND8/nmt+3X1PCepqxSqrdV9L9r5Q30MprZX
az/zNt4/D6hzhvlYu3nnDnJcT2Hsp2/LsfY2Xv9uJqyCi1GjQoZ235Pablleizqm72/XswsApKi7
9NX/B8DDw0P7H/SojvlJSk3r7e0NT0/Pe/9HwN6me1Sp+dT59LkMAOokry5TqACg/q52wj+5GutQ
XVWLelm++oWxXqf5iUudLBrqa1ElozTt52RZD5R6b+urK1Feav5fj5YaTNpo7uH3XH21RSVcFQLU
33s+92OL782zL3Usq/dVBYGf5jiWQNNUj5rqGtTWNWhXI3qfjvVwqfZvqDbdO9ZK9HKsSch73Pui
nmcAeHbUz/Wq40Nd0n/aUjcCqnDd23NPUmq9D/e9j6qfNQCojVPpRP1PDnp+9eFPKjlp1KlLTtW9
PPcMq7pG3qjaGgkfvT9v6aXap75eRirqCofs0LW9vD/q8y0VBtWJqOd3Yf/U0t6bOr43z6rUVTz1
K2Xqz5/sOK6qNp/Aan6q5VlOPXCs1atj7fFtqN439VOzDADPhvqYSB0f6rz2c5U6froDXm/9b2/1
swQAtUFq49QOp/6HBioEqD9ZLFXcH355xffsl1/qc2P1nXL66akrLGpw01u7P6tS/asKd89lAFAJ
Re1wRERE9NNSH6eqbwMwABAREVkQBgAiIiILxABARERkgRgAiIiILBADABERkQViACAiIrJADABE
REQWiAGAiIjIAjEAEBERWSAGACIiIgvEAEBERGSBGACIiIgsEAMAERGRBWIAICIiskAMAERERBaI
AYCIiMgCMQAQERFZIAYAIiIiC8QAQEREZIEYAIiIiCwQAwAREZEFYgAgIiKyQAwAREREFogBgIiI
yAIxABAREVkgBgAiIiILxABARERkgRgAiIiILBADABERkQViACAiIrJADABEREQWiAGAiIjIAjEA
EBERWSAGACIiIgvEAEBERGSBGACIiIgsEAMAERGRBWIAICIiskAMAERERBaIAYCIiMgCMQAQERFZ
IAYAIiIiC8QAQEREZIEYAIiIiCwQAwAREZEFYgAgIiKyQAwAREREFogBgIiIyAIxABAREVkgBgAi
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
kpSUhLi4OK1TUp2gpZbqmBkAGACIiCxGamoqXFxcEBgYqHWAllyqHWpra7ta5tlgACAioudCe3u7
NupVpc7/llrq9avO/9atW10t82wwABAREVkgBgAiIiILxABARERkgRgAiIiILBADABERkQViACAi
IrJADABEREQWiAGAiIjIAjEAEBERWSAGACIiIgvEAEBERGSBGACIiIgsEAMAERGRBWIAICIiskAM
AERERBaIAYCIiMgCMQAQERFZIAYAIiIiC8QAQEREZIEYAIiIiCwQAwAREZEFYgAgIiKyQAwARERE
FogBgIiIyAIxABAREVkgBgAiIiILxABARERkgRgAiIiILBADABERkQViACAiIrJADABEREQWiAGA
iIjIAjEAEBERWSAGACIiIgvEAEBERGSBGACIiIgsEAMAERGRBWIAICIiskAMAERERBaIAYCIiMgC
MQAQERFZIAYAIiIiC8QAQEREZIEYAIiIiCwQAwAREZEFYgAgIiKyQAwAREREFogBgIiIyAIxABAR
EVkgBgAiIiILxABARERkgRgAiIiILBADABERkQViACAiIrJADABEREQWiAGAiIjIAjEAEBERWSAG
ACIiIgvEAEBERGSBGACIiIgsEAMAERGRBWIAICIiskAMAERERBaIAYCIiMgCMQAQERFZIAYAIiIi
C8QAQEREZIEYAIiIiCwQAwAREZEFYgAgIiKyQAwAREREFogBgIiIyAI99wFAp9N1bSoRERH9VCoq
Kp7fAFBbW4vCwkJtI1ksFovFYv10pfpXk8n0/AUAVQ0NDdrG9bbhLBaLxWKxfnyp0X99fX2v/e+j
6mcLAKqam5tZLBaLxWI9g+qt3/2h+lkDAIvFYrFYrOejGABYLBaLxbLAYgBgsVgsFssCiwGAxWKx
WCwLrJ81AKivJ7S1taG1tdXiS7XDj7lpg8X6pVb3fv/wsWBp1d0GvbVRd7W0tLCtpJ6krdR5lG1l
LtUOz+XXAHv+FkB+fj5LSn1142neLBbrl1ylpaW9HgeWWOpXUXtrI1XqnKB+NK23+SyxSkpKtK+R
93auVI+p82hv81liqf5V9bNP2q/8bAFAJdqysjK4uLggKCjIoiskJAQeHh6IiYnREltv7cVi/aWU
Ohmp7ydfu3YN/v7+CA4O7vW4sIRSr93X1xd+fn5au/R2olbnSjWtt7e3dq54eBmWUqqtAgICtHNl
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
x79/6mIAYFlS/dQBQHU0NjY2947lntV9jM+YMUM736gOtOfx/ciP7Xo5DzyL+rkCgBoEqf9Bzr22
6Xke7H5MKiQ0VDtf9nYe7L3MH4M8fH588vmfvNQyf+4AoIKL6hvMbXa/nXqW2o9ramp6nb+3MrfN
TxciH1UMAF2lLn+pJKfW+ahSB5aarrf5n3UxALAsqX7qAKCOW9Uh9HZcd5daZ2/z/rnr5woAqo3U
vA+3y8OlzkV/rvPg4+rPEQCepN1U3/I8thkDwC+kGABYllQ/dQD4JdfPFQD+EurPEQB+yfWLCQDq
jVIba6mlLjMlJCQwALAsonoGgOLiYq1T6+24sIRS5768vLwnCgDZ2dnaaLO35VhCqf1EjbSfJACo
86k6r/a2HEsptW891wFApRRXV1dtIy25AgMD4e7ujri4OAYA1l98qU6uvr4eXl5e8PX11fb/3o4L
Syj12r29vbW//1AACA4OxrVr1yy+rVTn7+npqd2n8KgAoM6j6nxqyW3VXap/Vf3scxcA1I6uRgEq
0anLOqwSLbH2dgJgsf4SS41SejsOLLHU6La3NlKlzglqNNfbfJZY6qMA9W2OR7WVOo/2Np8llupf
VT/7pP3KzxYAVKmNam1tZXVVb4mWxfpLLTUq6e04sMR63AiNbXW/HtdW6jza23yWWk8zqPxZAwCL
xWKxWKznoxgAWCwWi8WywGIAYLFYLBbLAosBgMVisVgsCywGABaLxWKxLLAYAFgsFovFssBiAGCx
WCwWywKLAYDFYrFYLAssBgAWi8VisSyw/qQAoGZmsVgsFov1y6vm5h8RAPSmBpTUdGozslgsFovF
+uVVmVRRVTtMde1PFgDGjx9fZ5AAUFXfqaUGFovFYrFYv8xSnX91fRumT5/R2dXNP9rgwYOLZ8yc
1TJTSiUGFovFYrFYv8yaOVNq1uyWIUOGmLq6eSIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIior8ov/rV/x+4mrve0zum
1AAAAABJRU5ErkJggg==</Preview>
  <Form>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
CGSCn8L/CdpHLx7/G3/9fyd/6g8HrAAA</Form>
  <Code><![CDATA[
#-------------------------------------------------------
# NOTE: When new TabPage added place the validation code
# 		in the Test-WizardPage function.
#-------------------------------------------------------
function Test-WizardPage
{
<#
	Add TabPages and place the validation code in this function
#>
	[OutputType([boolean])]
	param([System.Windows.Forms.TabPage]$tabPage)
	
	if($tabPage -eq $tabpageStep1)
	{
		#TODO: Enter Validation Code here for Step 1
		if(-not $global:vcenterConnection.IsConnected)
		{
			return $false
		}
		else
		{
			return $true
		}
		
	}
	elseif ($tabPage -eq $tabpageStep2)
	{
		#TODO: Enter Validation Code here for Step 2
		if($global:vmbuilds -ne $null)
		{
			return $true
		}
		
		return $false
	}
	elseif ($tabPage -eq $tabpageStep3)
	{
		#TODO: Enter Validation Code here for Step 2
		if ($global:vmbuilds -ne $null)
		{
			return $true
		}
		
		return $false
	}
	elseif ($tabPage -eq $tabpageStep4)
	{
		$hostnameComplete = $true
		
		foreach ($node in $treeviewVMListStep4.Nodes)
		{
			if ($node.Text -notin $global:vmWorkgroupDomain.VMName)
			{
				$hostnameComplete = $false
			}
		}
		
		if ($hostnameComplete)
		{
			return $true
		}
		
		return $false
		
	}
	elseif ($tabPage -eq $tabpageStep5)
	{
		if (($global:vmAdminPasswords -ne $null) -and ($global:vmWorkgroupDomain -ne $null))
		{
			return $true
		}
		
		return $false
	}
	elseif ($tabPage -eq $tabpageStep6)
	{
		foreach ($vm in $global:vmBuilds)
		{
			#$string = "<b>This is my test page.</b>"
			$string = "$($vm.VMName)<br>"
			ConvertTo-Html -Body $string | Out-File "$ScriptDirectory\logs\test.html"
			$webbrowserVMBuildSummary.Url = "$ScriptDirectory\logs\test.html"
		}
		
		return $true
	}
	#Add more pages here
	
	return $false
}



$buttonFinish_Click={
	#-------------------------------------------------------
	# TODO: Place finalization script here
	#-------------------------------------------------------
	
}

#region Events and Functions
$formVMAutomationTool_Load={
	Update-NavButtons
	
	$timeZones = Get-TimeZone -ListAvailable | select DisplayName
	
	foreach ($timeZone in $timeZones)
	{
		$comboboxTimezone.Items.Add($timeZone.DisplayName)
	}
	
}

function Update-NavButtons
{
	<# 
		.DESCRIPTION
		Validates the current tab and Updates the Next, Prev and Finish buttons.
	#>
	$enabled = Test-WizardPage $tabcontrolWizard.SelectedTab
	$buttonNext.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	$buttonBack.Enabled = $tabcontrolWizard.SelectedIndex -gt 0
	$buttonFinish.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)	
	#Uncomment to Hide Buttons
	#$buttonNext.Visible = ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	#$buttonFinish.Visible = ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)
}

$script:DeselectedIndex = -1
$tabcontrolWizard_Deselecting=[System.Windows.Forms.TabControlCancelEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
	# Store the previous tab index
	$script:DeselectedIndex = $_.TabPageIndex
}

$tabcontrolWizard_Selecting=[System.Windows.Forms.TabControlCancelEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
	# We only validate if we are moving to the Next TabPage. 
	# Users can move back without validating
	if($script:DeselectedIndex -ne -1 -and $script:DeselectedIndex -lt $_.TabPageIndex)
	{
		#Validate each page until we reach the one we want
		for($index = $script:DeselectedIndex; $index -lt $_.TabPageIndex; $index++)
		{
			$_.Cancel = -not (Test-WizardPage $tabcontrolWizard.TabPages[$index])
			
			if($_.Cancel) 
			{
				# Cancel and Return if validation failed.
				return;
			}
		}
	}
	
	Update-NavButtons
}

$buttonBack_Click={
	#Go to the previous tab page
	if($tabcontrolWizard.SelectedIndex -gt 0)
	{
		$tabcontrolWizard.SelectedIndex--
	}
}

$buttonNext_Click={	
	#Go to the next tab page
	if($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	{
		$tabcontrolWizard.SelectedIndex++
	}	
}

#endregion

#------------------------------------------------------
# NOTE: When a Control State changes you should call
# 		Update-NavButtons to trigger validation
#------------------------------------------------------

$radiobuttonOption_CheckedChanged={
	
	if($this.Checked)
	{
		Update-NavButtons
	}
}

$buttonEnterCredentials_Click={
	
	try
	{
		$pictureboxLoading.Visible = $true
		if ($global:vcenterConnection.IsConnected)
		{
			Disconnect-VIServer -Server * -Force -Confirm:$false
			$labelVCenterServerNotConn.Text = "vCenter Server: Not Connected"
			$labelUsernameNotConnected.Text = "Username: Not Connected"
			$labelConnectionStatusNotC.Text = "Connection Status: Not Connected"
		}
		$global:vcCredential = $null
		$global:vcenterConnection = $null
		$global:vcCredential = Get-Credential -ErrorAction Stop
		Connect-VIServer -Server $vcenterTextbox.Text -Credential $global:vcCredential -ErrorAction Stop
		$global:vcenterConnection = Get-VIServer -Server $vcenterTextbox.Text -ErrorAction Stop
		$buttonEnterCredentials.Enabled = $false
		$pictureboxLoading.Visible = $false
	}
	catch
	{
		"Unable to connect."
	}
	
	If ($global:vcenterConnection.IsConnected)
	{
		$labelVCenterServerNotConn.Text = "vCenter Server: $($vcenterTextbox.Text)"
		$labelUsernameNotConnected.Text = "Username: $($global:vcenterConnection.User)"
		$labelConnectionStatusNotC.Text = "Connection Status: Connected"
		
		Update-NavButtons
		
	}
	else
	{
		[System.Windows.Forms.MessageBox]::Show("Unable to connect to $($vcenterTextbox.Text). Please try logging on again.")
		Update-NavButtons
	}
}

#region Control Helper Functions
function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]
		$DisplayMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}

function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}

function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	[ValidateNotNull()]
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterWMIProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)	
}

function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}


function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}


function Get-CheckedNode
{
<#
	.SYNOPSIS
		This function collects a list of checked nodes in a TreeView

	.DESCRIPTION
		This function collects a list of checked nodes in a TreeView

	.PARAMETER  $NodeCollection
		The collection of nodes to search

	.PARAMETER  $CheckedNodes
		The ArrayList that will contain the all the checked items
	
	.EXAMPLE
		$CheckedNodes = New-Object System.Collections.ArrayList
		Get-CheckedNode $treeview1.Nodes $CheckedNodes
		foreach($node in $CheckedNodes)
		{	
			Write-Host $node.Text
		}
#>
	param (
			[ValidateNotNull()]
			[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
			[ValidateNotNull()]
			[System.Collections.ArrayList]$CheckedNodes
	)
	
	foreach ($Node in $NodeCollection)
	{
		if ($Node.Checked)
		{
			[void]$CheckedNodes.Add($Node)
		}
		Get-CheckedNode $Node.Nodes $CheckedNodes
	}
}

#endregion


$vcenterTextbox_TextChanged={
	#TODO: Place custom script here
	if ($vcenterTextbox.Text -ne "")
	{
		$buttonEnterCredentials.Enabled = $true
	}
	else
	{
		$buttonEnterCredentials.Enabled = $false
	}
}

$buttonAddVirtualMachine_Click={
	#TODO: Place custom script here
	if (Show-AddVMForm_psf -eq 'OK')
	{
	}
}


$buttonOpenRolesSelection_Click={
	
	$global:vmSelectedStep4 | Out-File "$ScriptDirectory\logs\vmselectedstep4.log" -Append
	
	if ((Show-WindowsRoles_psf -VMName $global:vmSelectedStep4) -eq 'OK')
	{
		#$selectedRoles = $global:vmRoles | ?{ $_.VMName -eq $vm.VMName } | Select -ExpandProperty Roles		
	}
	
}

$buttonBuildVMs_Click={
	
	try
	{
		foreach ($vm in $global:vmbuilds)
		{
			while (@(Get-Job | ?{ $_.State -eq "Running" }).Count -ge 5)
			{
				Write-Host "Waiting for open thread...($NumJobs Maximum)"
				Start-Sleep -Seconds 3
			}
			
			# Let's combine all the OS specific data we gathered for the VM into one variable.
			$osConfigObject = New-Object PSObject
			
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "VMName" -Value $vm.VMName
			
			# Add the data for the domain/workgroup
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "Hostname" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).Hostname
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "DomainName" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).DomainName
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "DomainUser" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).DomainUser
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "DomainPassword" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).DomainPassword
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "IsWorkgroup" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).IsWorkgroup
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "LocalAdminPassword" -Value ($global:vmAdminPasswords | ?{ $_.VMName -eq $vm.VMName }).Password
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "Roles" -Value ($global:vmRoles | ?{ $_.VMName -eq $vm.VMName }).Roles
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "Features" -Value ($global:vmFeatures | ?{ $_.VMName -eq $vm.VMName }).Features
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "Timezone" -Value ($global:vmTimeZones | ?{$_.VMName -eq $vm.VMName}).Timezone
			
			$global:vmFullOSConfig = [System.Array]$global:vmFullOSConfig + $osConfigObject
			
			$osConfigObject | Out-File "$ScriptDirectory\logs\osobject.log" -Append
			
			Start-Job -Name $vm.VMName -ArgumentList $vcenterTextbox.Text, $global:vcCredential, $vm, $ScriptDirectory, $osConfigObject -ScriptBlock {
				
				. "$($args[3])\Functions\Get-FolderbyPath.ps1"
				
				Import-Module VMware.PowerCLI
				
				Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -ParticipateInCeip $false -DisplayDeprecationWarnings $false -Confirm:$false
				
				Connect-VIServer -Server $args[0] -Credential $args[1]
				
				$password = ConvertTo-SecureString "$($args[4].DomainPassword)" -AsPlainText -Force
				$domainCredential = New-Object System.Management.Automation.PSCredential ("$($args[4].DomainUser)", $password)
				
				if ($args[4].IsWorkgroup -eq 'No')
				{
					$osSpec = New-OSCustomizationSpec -OSType "Windows" -Name $args[2].VMName -Type NonPersistent `
													  -FullName "Administrator" `
													  -AdminPassword "$($args[4].LocalAdminPassword)" `
													  -AutoLogonCount 1 `
													  -OrgName "Org1" `
													  -Description "Temporary Spec for $($args[2].VMName)" `
													  -ChangeSid `
													  -DeleteAccounts `
													  -Domain "$($args[4].DomainName)" `
													  -DomainCredentials $domainCredential `
													  -NamingScheme fixed `
													  -NamingPrefix $args[4].Hostname `
													  -ErrorAction Stop
				}
				else
				{
					$osSpec = New-OSCustomizationSpec -OSType "Windows" -Name $args[2].VMName -Type NonPersistent `
													  -FullName "Administrator" `
													  -AdminPassword "$($args[4].LocalAdminPassword)" `
													  -AutoLogonCount 1 `
													  -OrgName "Org1" `
													  -Description "Temporary Spec for $($args[2].VMName)" `
													  -ChangeSid `
													  -DeleteAccounts `
													  -Workgroup "$($args[4].DomainName)" `
													  -NamingScheme fixed `
													  -NamingPrefix $args[4].Hostname `
													  -ErrorAction Stop
				}
				
				if ($args[2].("IP Type") -eq "DHCP")
				{
					Get-OSCustomizationNicMapping -OSCustomizationSpec $osSpec | Set-OSCustomizationNicMapping -IpMode UseDHCP
				}
				else
				{
					Get-OSCustomizationNicMapping -OSCustomizationSpec $osSpec | Set-OSCustomizationNicMapping -IpMode UseStaticIP `
																											   -IpAddress $args[2].("IP Address") `
																											   -SubnetMask $args[2].("Subnet Mask") `
																											   -DefaultGateway $args[2].("Default Gateway") `
																											   -Dns $args[2].("Primary DNS Server")
				}
				
				$vmTemplate = Get-Template -Name $args[2].Template
				
				$destFolder = Get-FolderbyPath -Path "$($args[2].Location)" -Separator "\"
				
				$invoke = New-VM -VMHost $args[2].("VM Host") -Name $args[2].VMName -Datastore $args[2].Datastore -Template $vmTemplate -Location $destFolder -OSCustomizationSpec $osSpec -ErrorAction Stop
				$invoke | Out-File "$ScriptDirectory\logs\invoke.log"
				
				Disconnect-VIServer -Server $args[0]
				
			}
			
		}
		
		do
		{
			Start-Sleep -Milliseconds 5000
		}
		while ((Get-Job -State Running).Count -gt 0)
		
		foreach ($item in $global:vmbuilds)
		{
			Get-VM -Name $item.VMName | Set-VM -MemoryGB $item.Memory -NumCpu $item.NumCPU -Confirm:$false -ErrorAction Stop
			
			Get-NetworkAdapter -VM $item.VMName | Set-NetworkAdapter -NetworkName $item.Network -StartConnected $true -Confirm:$false -ErrorAction Stop
			
			Start-VM -VM $item.VMName | Wait-Tools
		}
		
		#Start-Sleep -Seconds 300
		
		#[System.Windows.Forms.MessageBox]::Show("5 minute timer passed.")
		
	}
	catch
	{
		[System.Windows.Forms.MessageBox]::Show("Unable to build virtual machines.")
	}
}

$datagridviewVMQueue_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	$buttonDeleteVMFromQueue.Enabled = $true	
	
}

$buttonDeleteVMFromQueue_Click={
	
	$global:vmBuilds = $global:vmBuilds | ?{ $_.VMName -ne $listviewVMsStep2.SelectedItems.Text }
	
	$listviewVMsStep2.Clear()
	
	foreach ($item in $global:vmBuilds)
	{
		$listviewVMsStep2.Items.Add($item.VMName)
	}
	
	# Update the treeview control for Step 3
	
	$treeviewVMListStep3.BeginUpdate()
	$treeviewVMListStep3.Nodes.Clear()
	
	foreach ($vm in $global:vmbuilds)
	{
		$newNode = $treeviewVMListStep3.Nodes.Add($vm.VMName)
	}
	
	$treeviewVMListStep3.EndUpdate()
	
	# Update the treeview control for step 4.
	
	$treeviewVMListStep4.BeginUpdate()
	$treeviewVMListStep4.Nodes.Clear()
	
	foreach ($vm in $global:vmbuilds)
	{
		$newNode = $treeviewVMListStep4.Nodes.Add($vm.VMName)
	}
	
	$treeviewVMListStep4.EndUpdate()
	
	Update-NavButtons
	
	
}

$treeviewVMListStep4_AfterSelect=[System.Windows.Forms.TreeViewEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.TreeViewEventArgs]
	
	$global:vmSelectedStep4 = $treeviewVMListStep4.SelectedNode.Text
	
	$labelVMNameStep4.Text = "VM: $($global:vmSelectedStep4)"
	
	if ($treeviewVMListStep4.SelectedNode.Text -in $global:vmWorkgroupDomain.VMName)
	{
		$labelOK1.Visible = $true		
	}
	else
	{
		$labelOK1.Visible = $false		
	}
	
}

$radiobuttonDomain_CheckedChanged={
	
	if ($radiobuttonDomain.Checked) { $buttonDomainWorkgroup.Enabled = $true; $buttonSetWorkgroup.Enabled = $false }
	elseif ($radiobuttonWorkgroup.Checked) { $buttonDomainWorkgroup.Enabled = $false; $buttonSetWorkgroup.Enabled = $true }
	
}

$buttonOpenFeatureSelection_Click={
	
	if ((Show-WindowsFeatures_psf -VMName $global:vmSelectedStep4) -eq 'OK')
	{
	}
}

$buttonAddLocalUsers_Click={
	
	if ((Show-AddLocalUsers_psf -VMName $global:vmSelectedStep4) -eq 'OK'){}
	
}

$comboboxTimezone_SelectedIndexChanged={
	
	if ($global:vmSelectedStep4 -in $global:vmTimeZones.VMName)
	{
		$global:vmTimeZones = $global:vmTimeZones | ?{ $_.VMName -ne $global:vmTimeZones.VMName }
		$tzobject = New-Object PSOBject
		
		$tzobject | Add-Member -MemberType NoteProperty -Name "VMName" -Value $treeviewVMListStep4.SelectedNode.Text
		$tzobject | Add-Member -MemberType NoteProperty -Name "Timezone" -Value $comboboxTimezone.Text
	}
	else
	{
		$tzobject = New-Object PSOBject
		
		$tzobject | Add-Member -MemberType NoteProperty -Name "VMName" -Value $treeviewVMListStep4.SelectedNode.Text
		$tzobject | Add-Member -MemberType NoteProperty -Name "Timezone" -Value $comboboxTimezone.Text
	}
}

$buttonCustomizeOS_Click={
	
	foreach ($admin in $global:vmAdminPasswords)
	{
		# First, let's create the PSCredential object
		
		$password = ConvertTo-SecureString $admin.Password -AsPlainText -Force
		$localAdminCred = New-Object System.Management.Automation.PSCredential ("Administrator", $password)
		
		# Declare the array that will house each command to run.
		
		$customizeOSScripts = [System.Collections.ArrayList]@()
		
		# Now, let's build the scripts.
		# We'll start with creating the users.
		
		foreach ($user in $global:vmLocalUsers)
		{
			#if ($user.VMName -eq $admin.VMName)
			#{
				if ($user.Administrator -eq "Yes")
				{
					$userCreate = New-Object PSObject
					$userCreate | Add-Member -MemberType NoteProperty -Name "Command" -Value "NET USER $($user.Username) $($user.Password) /add"					
					
					$userAdmin = New-Object PSObject
					$userAdmin | Add-Member -MemberType NoteProperty -Name "Command" -Value "NET LOCALGROUP Administrators $($user.Username) /add"
					
					$date = Get-Date -Format "M-d-yyyy"
					$desc = "Admin user created on $date."
					$userTmp = $user.Username
					$userDescription = New-Object PSObject
					$userDescription | Add-Member -MemberType NoteProperty -Name "Command" -Value "Set-LocalUser -Name $userTmp -Description ""$desc"""
					
					$customizeOSScripts = [System.Array]$customizeOSScripts + $userCreate
					$customizeOSScripts = [System.Array]$customizeOSScripts + $userAdmin
					$customizeOSScripts = [System.Array]$customizeOSScripts + $userDescription
				}
				else
				{
					$userCreate = New-Object PSObject
					$userCreate | Add-Member -MemberType NoteProperty -Name "Command" -Value "NET USER $($user.Username) $($user.Password) /add"
					
					$date = Get-Date -Format "M-d-yyyy"
					$desc = "Standard user created on $date."
					$userTmp = $user.Username
					$userDescription = New-Object PSObject
					$userDescription | Add-Member -MemberType NoteProperty -Name "Command" -Value "Set-LocalUser -Name $userTmp -Description ""$desc"""
					
					$customizeOSScripts = [System.Array]$customizeOSScripts + $userCreate
					$customizeOSScripts = [System.Array]$customizeOSScripts + $userDescription
				}
				
			#}
			
		}
		
		# Let's install all selected roles.
		
		foreach ($vm in ($global:vmRoles | ?{ $_.VMName -eq $admin.VMName }))
		{
			foreach ($role in $vm.Roles)
			{
				$object = New-Object PSObject
				$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Install-WindowsFeature -Name $role -IncludeManagementTools"
				$customizeOSScripts = [System.Array]$customizeOSScripts + $object
			}
		}
		
		# Let's customize additional disks.
		
		foreach ($disk in ($global:vmAdditionalDisks | ?{ $_.VMName -eq $admin.VMName }))
		{
			$driveLetter = $disk.DriveLetter
			$driveLabel = "Drive-$($disk.DriveLetter)"
			$driveSize = [int]($disk.DriveSize)
			New-HardDisk -VM $admin.VMName -CapacityGB $driveSize -Persistence persistent
			$object = New-Object PSObject
			$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-Disk | Where-Object PartitionStyle -eq ""RAW"" | Initialize-Disk -PartitionStyle GPT -PassThru | New-Partition -DriveLetter $driveLetter -UseMaximumSize | Format-Volume -FileSystem NTFS -NewFileSystemLabel $driveLabel"
			#$customizeOSScripts = [System.Array]$customizeOSScripts + $object
			Invoke-VMScript -VM $admin.VMName -GuestCredential $localAdminCred -ScriptText "$($object.Command)" | Out-File "$ScriptDirectory\logs\$($admin.VMName)_scriptcommand.log" -Append
		}
		
		# Let's customize additional network adapters.
		
		foreach ($nic in ($global:vmAdditionalNICs | ?{ $_.VMName -eq $admin.VMName }))
		{
			$newNic = New-NetworkAdapter -VM $nic.VMName -NetworkName $nic.VLAN -StartConnected -Type Vmxnet3
			
			$newNic | Out-File "$ScriptDirectory\logs\newnic.log" -Append
			$macAddress = "$($newNic.MacAddress)" -replace ":", "-"
			
			if ($nic.("IP Type") -eq "Static")
			{
				$newIP = $nic.("IP Address")
				$newMask = $nic.("Subnet Mask")
				$newGateway = $nic.("Default Gateway")
				$newDNSServer = $nic.("Primary DNS Server")
				
				# Determine the CIDR notation for subnet mask
				$subnetMasks = Import-Csv "$ScriptDirectory\reference\cidrlist.csv"
				
				$cidrNotation = ($subnetMasks | ?{$_.SubnetMask -eq $newMask}).CIDR
				
				if ($newGateway -ne '')
				{
					$object = New-Object PSObject
					$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$macAddress"" | New-NetIPAddress -IPAddress $newIP -DefaultGateway $newGateway -PrefixLength $cidrNotation | Set-DNSClientServerAddress -ServerAddresses $newDNSServer"
					$customizeOSScripts = [System.Array]$customizeOSScripts + $object
				}
				else
				{
					$object = New-Object PSObject
					$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$macAddress"" | New-NetIPAddress -IPAddress $newIP -DefaultGateway $newGateway -PrefixLength $cidrNotation | Set-DNSClientServerAddress -ServerAddresses $newDNSServer"
					$customizeOSScripts = [System.Array]$customizeOSScripts + $object
				}
				
			}
		}
		
		$customizeOSScripts | Out-File "$ScriptDirectory\logs\scriptsarray_$($admin.VMName).log"
		#Customize-OS -VMName $admin.VMName -GuestCredential $localAdminCred -Scripts $customizeOSScripts
		
		foreach ($script in $customizeOSScripts)
		{
			$script.Command | Out-File "$ScriptDirectory\logs\$($admin.VMName)_scriptcommand.log" -Append
			Invoke-VMScript -VM $admin.VMName -GuestCredential $localAdminCred -ScriptText "$($script.Command)" | Out-File "$ScriptDirectory\logs\$($admin.VMName)_scriptcommand.log" -Append
			
			sleep -Seconds 3
		}
		
	}
	
}


$treeviewVMListStep3_AfterSelect=[System.Windows.Forms.TreeViewEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TreeViewEventArgs]
				
	$global:vmSelectedStep3 = $treeviewVMListStep3.SelectedNode.Text
	
	$labelVMStep3.Text = "VM: $($global:vmSelectedStep3)"
}

$listviewVMsStep2_SelectedIndexChanged={
				
	$rowTmp = $global:vmBuilds | ?{ $_.VMName -eq $listviewVMsStep2.SelectedItems.Text }
	
	$labelStep2CPU.Text = "CPU: $($rowTmp.NumCPU)"
	$labelStep2Memory.Text = "Memory: $($rowTmp.Memory)"
	$labelStep2Network.Text = "Network: $($rowTmp.Network)"
	$labelStep2VMName.Text = "VM Name: $($rowTmp.VMName)"
	
}
$buttonVDiskAdd_Click={
	
	if ((Show-AddVirtualDisk_psf -VMName $treeviewVMListStep3.SelectedNode.Text) -eq 'OK')
	{}
	
}

$buttonVNICAdd_Click={
	
	if ((Show-AddNicCard_psf -VMName $treeviewVMListStep3.SelectedNode.Text) -eq 'OK')
	{}
}



$maskedtextboxHostname_Enter={
	#TODO: Place custom script here
	$maskedtextboxHostname.Select(0,0)
}

$buttonSetHostname_Click={
	
	if ((Show-SetHostname_psf -VMName $treeviewVMListStep4.SelectedNode.Text) -eq 'OK')
	{ }
}

$button2_Click={
	
	if ((Show-WorkgroupDomainJoin_psf) -eq 'OK')
	{ }	
}

$buttonSet_Click={
	
	if ((Show-GetAdminPassword_psf) -eq 'OK')
	{ }
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>