<File version="3.1">
  <FileID>4dee3778-5d7e-48ff-b7fd-c671faf8b7f0</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAMTYSURBVHhe7J0FeBZX1sdZ6eq3XZfqbrvdulO0
RqFABXd3d3cIGiBocE0CIe7u7u7u7u4h8P/OmTeBJIRCJV3Cnt/znOcdvfbeued/79yZ6SUIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIjy0xZIVPPPFE4V//+tfCyZMnF86YMaNw5sxZZDPFxMTExMTEHllT
+epZZM8++0zhz3/+80L26WRp7OC/kZ/85CcVf/rTnzB82DAsXbYc+sYWiIrPRHJGEZLSC8TExMTE
xMQeWStEUloefPyDsGXbNnzxxRegzjx++tOfNre6+ftDAqBw+PDhOHjoCAKjUuAVkQbvyAz4RGXA
W0xMTExMTOyRtTZf7RWZjuiUPJw5ewFff/01fv7zn9e0uvn7w8P+ixYvRRA5f++oTHiSAPAITxUT
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
z0FW9ikW666WLFfVNfYhp4mIjObYsWM4c+aMZx0FIIlFBjAgIiKin8fxrYDjf48IALIPQGhoKKqq
qtS0jGQkOzPIGQJlmOC0tDR1XzlcUC6fO3dOjR4o01JWq1WdUVCmk5KS1G0PHTqkLufm5qr24uLi
1GPX1NSo8ZId7cjvt452jhw5oo5IkJ275Prz58/DbDar62JjY9W3FGfPnlWXk5OTb2nn5Mlc9VuM
o53a2lpUVFSoafmtWNrJyspSt5VjNZ3bKS4uVgM4ONqRN66goOCWduR3HXs7J9WbK6FJ7itfQevb
yczMVLeVNCjtJCQkqOtLSkrUfHduR9KiXD5w4IBqJzU1VV0+derUzXbkspysqby87JZ2MjIyXLZT
WlqKxsbGm+3Iuanl2NRb20lRl/Py8m5pp6GhQZ3MQh5n3759Ksmmp6er644fP64uy9/l+gsXLvxV
O3IyDLksPylJO/K/XJa/y/VyO0c78jyd25HHl+ukPbksr1Oul+cjr1+uk+cpjyPP27kdeV1yWV6n
czvy/PTtyPxytCPz8XbtyHyR90Euy/si7cjyIJflfZP3z9GOvK/y/srjyPsg7chyJtfJ+yTtyPIu
18vyIsunTEs7stzKciW3leXMuR1ZDmW5d7Qjy6msF67akeXudu3IeiHtyProaEeWGVlff6wdWU/k
trJ+ynWyHjm3I+uzczuyvjvakfVTXo+jHVl/pb+QaSlZv6U/kWlHO9LfyGXpF6QfcqzT0j9VV1ff
0o78DCS3lR2Z5b7SR8n10h8591EyLQOeyXVyG7mt3Eeuk8dw7qOkDed25Dk42pHnJveV5yqX5TEd
fZSjHWnbVTsnTpz4q77Q0ec62nHucx3tyPUyj5z7QpmHjr5Q5q3c9nZ9rrw3+j7X0RfKeyrLkKPv
kPfcuS+UZeKH+kJZpmQZdrTj6Asd7Tj6Qkef62hH+lznvlDacfSFP9aO9Lnl5eW3tOPoC6Ud59fz
S/tcR18ofYQ8rqMvlD5ELjv6QuljpE8bNWqUek5XrlzxnAAgT17eEHnz5TeM4OBg9eRlBsnOgTLj
ZOHcsmWLuuz47VWmpWRGyQIl0xEREeq2u3btUpflTZQ3NygoSD22vCGy0sh0SEiI6qzlDZfbyoyX
5ybtyPWyIMtKItcFBASoGSwLlFyOjIy8pR1Z+GWlcLQjr0lWRJmWcCNvrKwojnZkgQoPD1fXywLm
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
DhlvQu6rvWZbczus2vxrbm7R5oNZhQmrjArYO2/btXmqDrO0avNX3U9+arLCps0/m1kOUf3r53On
5d0BQFcyDKW08+abb+Ktt95yqjfV36Ty8vLUQiULmf6rfPU3p8t3uxgAWN5UdzsAyIYmKirq5rrs
XI51fPz48aq/kQ2o8/p925/tXPQD7qi+CgDyIUhOOHZz3jj3g46/aZWekaH6S1f9oOuy/wyi7x/v
/P53XvKYfR0AJLjItsE+z76fT84ly3F7e7vL+7sq+7y5eyHSVTEAOJV8/SVJTtq8XcmKJbdzdX93
FwMAy5vqbgcAWW9lg+BqvXaUtOnqvr929VUAkHkk99XPF31JX/Rr9YM/Vr9GALiT+SbblnttnjEA
eFAxALC8qe52APDk6qsAYIT6qQEgPq8euGjGJW1j6G0lr/v1CC0AeMLZAGUDKCuCt5Z8zXTmzBkG
AJZXlHMAqKurUxs1V+uFN5T0fZWVlXcUAMrKytSnTVeP4w0ly4l80v6xADBBAsDUC3gioApvbavB
cG1D6G0lr/v+pZW4b9Y9HAAk1SUkJKgQ4M119OhRJCYmIj8/nwGAZfiSjVxXVxdSUlJw6NAhtfy7
Wi+8oeS1p6amqukfCgDHjx/HgQMHvH5eycY/OTlZ7adwuwDwaZwWAKZcwH0+5don4DLcN90LS163
tvG/b3YZ0ivuwQAgC7p8CpBEJ1/rsOrVNwGuOgAWy4gln+pcrQfeWPLp1tU8kpI+Qb4pcHU/byz5
KUCO5nA1ry73XERJUyeOX2jD8fJ2VnkbrO3d9kGfXMwvffVZAJCSBfvKlSus3nKVaFkso5Z8snW1
HnhjybxwNY8cxXn1ff3QvOruvoivr1zCd1+zHCUb/24X88pV9WkAYLFYLBaLdW8UAwCLxWKxWF5Y
DAAsFovFYnlhMQCwWCwWi+WFxQDAYrFYLJYXFgMAi8VisVheWAwALBaLxWJ5YTEAsFgsFovlhcUA
wGKxWCyWF9YvCgByZxaLxWKxWJ5XPT0/IwCYW7pR335d3ZHFYrFYLJbnVaNWta3X0NJ57c4CwKhR
ozotWgBo7bquUgOLxWKxWCzPLNn4t3Vdxbhx46/3buZv7/XXX68bP2Hi5QlaSWJgsVgsFovlmTVh
glYTJ10eMWJES+9mnoiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIyFDuu+//A0GhIuMuKgkHAAAAAElFTkSuQmCC</Preview>
  <Form>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</Form>
  <Code><![CDATA[
#-------------------------------------------------------
# NOTE: When new TabPage added place the validation code
# 		in the Test-WizardPage function.
#-------------------------------------------------------
function Test-WizardPage
{
<#
	Add TabPages and place the validation code in this function
#>
	[OutputType([boolean])]
	param([System.Windows.Forms.TabPage]$tabPage)
	
	if($tabPage -eq $tabpageStep1)
	{
		#TODO: Enter Validation Code here for Step 1
		if(-not $global:vcenterConnection.IsConnected)
		{
			return $false
		}
		else
		{
			return $true
		}
		
	}
	elseif ($tabPage -eq $tabpageStep2)
	{
		#TODO: Enter Validation Code here for Step 2
		if($global:vmbuilds -ne $null)
		{
			return $true
		}
		
		return $false
	}
	elseif ($tabPage -eq $tabpageStep3)
	{
		#TODO: Enter Validation Code here for Step 2
		if ($global:vmbuilds -ne $null)
		{
			return $true
		}
		
		return $false
	}
	elseif ($tabPage -eq $tabpageStep4)
	{
		$hostnameComplete = $true
		
		foreach ($node in $treeviewVMListStep4.Nodes)
		{
			if ($node.Text -notin $global:vmWorkgroupDomain.VMName)
			{
				$hostnameComplete = $false
			}
		}
		
		if ($hostnameComplete)
		{
			return $true
		}
		
		return $false
		
	}
	elseif ($tabPage -eq $tabpageStep5)
	{
		if (($global:vmAdminPasswords -ne $null) -and ($global:vmWorkgroupDomain -ne $null))
		{
			return $true
		}
		
		return $false
	}
	elseif ($tabPage -eq $tabpageStep6)
	{
		$string = ""
		if (Get-ChildItem -Path "$ScriptDirectory\logs\test.html" -ErrorAction Ignore) { Remove-Item "$ScriptDirectory\logs\test.html" -Force}		
		foreach ($vm in $global:vmBuilds)
		{
			#$string = "<b>This is my test page.</b>"
			$string = "
						<p>
							<font size=3><b>VMName: <font color=red>$($vm.VMName)</font></b></font><br>
							<font size=2>
							&nbsp;&nbsp;&nbsp;<b>VM Host:</b> $($vm."VM Host")<br>
							&nbsp;&nbsp;&nbsp;<b>Datacenter:</b> $($vm.Datacenter)<br>
							&nbsp;&nbsp;&nbsp;<b>Datastore:</b> $($vm.Datastore)<br>
							&nbsp;&nbsp;&nbsp;<b>CPU Count:</b> $($vm.NumCPU)<br>
							&nbsp;&nbsp;&nbsp;<b>Memory:</b> $($vm.Memory)<br>
							&nbsp;&nbsp;&nbsp;<b>Network:</b> $($vm.Network)<br>
							&nbsp;&nbsp;&nbsp;<b>Template:</b> $($vm.Template)<br>
							&nbsp;&nbsp;&nbsp;<b>Location:</b> $($vm.Location)<br>
					"
			
			$vmKeyTemp = $global:vmOSKeys | ?{ $_.VMName -eq $vm.VMName }
			
			if ($vmKeyTemp.UseKMS -eq "Yes")
			{
				$string = $string + "&nbsp;&nbsp;&nbsp;<b>License Type:</b> Using KMS<br>"
			}
			elseif ($vmKeyTemp.UseKMS -eq "No")
			{
				$string = $string + "
										&nbsp;&nbsp;&nbsp;<b>License Type:</b> Product Key<br>
										&nbsp;&nbsp;&nbsp;<b>License Key:</b> $($vmKeyTemp.ProductKey)<br>
									"
			}
			
			if ($vm."IP Type" -eq "Static")
			{
				$string = $string + "
										&nbsp;&nbsp;&nbsp;<b>IP Type:</b> $($vm."IP Type")<br>
										&nbsp;&nbsp;&nbsp;<b>IP Address:</b> $($vm."IP Address")<br>
										&nbsp;&nbsp;&nbsp;<b>Subnet Mask:</b> $($vm."Subnet Mask")<br>
										&nbsp;&nbsp;&nbsp;<b>Default Gateway:</b> $($vm."Default Gateway")<br>
										&nbsp;&nbsp;&nbsp;<b>Primary DNS Server:</b> $($vm."Primary DNS Server")<br>
										</font>
									</p>
								"
			}
			else
			{
				$string = $string + "&nbsp;&nbsp;&nbsp;<b>IP Type:</b> $($vm."IP Type")<br></font></p>"
			}
			
			ConvertTo-Html -Body $string | Out-File "$ScriptDirectory\logs\test.html" -Append
		}
			
		$webbrowserVMBuildSummary.Url = "$ScriptDirectory\logs\test.html"
		
		return $true
	}
	#Add more pages here
	
	return $false
}



$buttonFinish_Click={
	#-------------------------------------------------------
	# TODO: Place finalization script here
	#-------------------------------------------------------
	
}

#region Events and Functions
$formVMAutomationTool_Load = {
	
	Update-NavButtons
	
	$timeZones = Import-Csv "$ScriptDirectory\reference\timezones.csv"
	
	foreach ($timeZone in $timeZones)
	{
		$comboboxTimezone.Items.Add($timeZone.Description)
	}
	
	$index = 1
	
	$comboboxTimezone.SelectedIndex = $index
	
	$Path = $env:TEMP
	
	if (Get-Item "$Path\VcenterHistory\vcenterhistory.log")
	{
		$autoCompleteArray = (Import-Csv "$Path\VcenterHistory\vcenterhistory.log").vcenter
		
		$vcenterTextbox.AutoCompleteCustomSource.AddRange($autoCompleteArray)
	}
	
}

function Update-NavButtons
{
	<# 
		.DESCRIPTION
		Validates the current tab and Updates the Next, Prev and Finish buttons.
	#>
	$enabled = Test-WizardPage $tabcontrolWizard.SelectedTab
	$buttonNext.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	$buttonBack.Enabled = $tabcontrolWizard.SelectedIndex -gt 0
	$buttonFinish.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)	
	#Uncomment to Hide Buttons
	#$buttonNext.Visible = ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	#$buttonFinish.Visible = ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)
}

$script:DeselectedIndex = -1
$tabcontrolWizard_Deselecting=[System.Windows.Forms.TabControlCancelEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
	# Store the previous tab index
	$script:DeselectedIndex = $_.TabPageIndex
}

$tabcontrolWizard_Selecting=[System.Windows.Forms.TabControlCancelEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
	# We only validate if we are moving to the Next TabPage. 
	# Users can move back without validating
	if($script:DeselectedIndex -ne -1 -and $script:DeselectedIndex -lt $_.TabPageIndex)
	{
		#Validate each page until we reach the one we want
		for($index = $script:DeselectedIndex; $index -lt $_.TabPageIndex; $index++)
		{
			$_.Cancel = -not (Test-WizardPage $tabcontrolWizard.TabPages[$index])
			
			if($_.Cancel) 
			{
				# Cancel and Return if validation failed.
				return;
			}
		}
	}
	
	Update-NavButtons
}

$buttonBack_Click={
	#Go to the previous tab page
	if($tabcontrolWizard.SelectedIndex -gt 0)
	{
		$tabcontrolWizard.SelectedIndex--
	}
}

$buttonNext_Click={	
	#Go to the next tab page
	if($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	{
		$tabcontrolWizard.SelectedIndex++
	}	
}

#endregion

#------------------------------------------------------
# NOTE: When a Control State changes you should call
# 		Update-NavButtons to trigger validation
#------------------------------------------------------

$radiobuttonOption_CheckedChanged={
	
	if($this.Checked)
	{
		Update-NavButtons
	}
}

$buttonEnterCredentials_Click={
	
	try
	{
		$pictureboxLoading.Visible = $true
		if ($global:vcenterConnection.IsConnected)
		{
			Disconnect-VIServer -Server * -Force -Confirm:$false
			$labelVCenterServerNotConn.Text = "vCenter Server: Not Connected"
			$labelUsernameNotConnected.Text = "Username: Not Connected"
			$labelConnectionStatusNotC.Text = "Connection Status: Not Connected"
		}
		$global:vcCredential = $null
		$global:vcenterConnection = $null
		$global:vcCredential = Get-Credential -ErrorAction Stop
		Connect-VIServer -Server $vcenterTextbox.Text -Credential $global:vcCredential -ErrorAction Stop
		$global:vcenterConnection = Get-VIServer -Server $vcenterTextbox.Text -ErrorAction Stop
		$buttonEnterCredentials.Enabled = $false
		$pictureboxLoading.Visible = $false
	}
	catch
	{
		"Unable to connect."
	}
	
	If ($global:vcenterConnection.IsConnected)
	{
		$labelVCenterServerNotConn.Text = "vCenter Server: $($vcenterTextbox.Text)"
		$labelUsernameNotConnected.Text = "Username: $($global:vcenterConnection.User)"
		$labelConnectionStatusNotC.Text = "Connection Status: Connected"
		$labelOKStep1.Visible = $true
		
		$Path = $env:TEMP
		
		if (-not (Get-Item "$Path\VcenterHistory" -ErrorAction SilentlyContinue))
		{
			New-Item -Name VcenterHistory -Path $Path -ItemType Directory
		}
		
		if (Get-Item "$Path\VcenterHistory\vcenterhistory.log" -ErrorAction SilentlyContinue)
		{
			$vcHistoryArray = Import-Csv "$Path\VcenterHistory\vcenterhistory.log"
			
			$vcHistoryArray = $vcHistoryArray | ?{ $_.vcenter -ne "$($vcenterTextbox.Text)" }
			
			$object = New-Object PSObject
			
			$object | Add-Member -MemberType NoteProperty -Name vcenter -Value $vcenterTextbox.Text
			
			$vcHistoryArray = [System.Array]$vcHistoryArray + $object
			
			$vcHistoryArray | Export-CSV "$Path\VcenterHistory\vcenterhistory.log" -NoTypeInformation
		}
		else
		{
			$vcHistoryArray = @()
			
			$object = New-Object PSObject
			
			$object | Add-Member -MemberType NoteProperty -Name vcenter -Value $vcenterTextbox.Text
			
			$vcHistoryArray = [System.Array]$vcHistoryArray + $object
			
			$vcHistoryArray | Export-CSV "$Path\VcenterHistory\vcenterhistory.log" -NoTypeInformation
		}
		
		Update-NavButtons
		
	}
	else
	{
		[System.Windows.Forms.MessageBox]::Show("Unable to connect to $($vcenterTextbox.Text). Please try logging on again.")
		$labelOKStep1.Visible = $false
		Update-NavButtons
	}
}

#region Control Helper Functions
function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]
		$DisplayMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}

function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}

function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	[ValidateNotNull()]
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterWMIProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)	
}

function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}


function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}


function Get-CheckedNode
{
<#
	.SYNOPSIS
		This function collects a list of checked nodes in a TreeView

	.DESCRIPTION
		This function collects a list of checked nodes in a TreeView

	.PARAMETER  $NodeCollection
		The collection of nodes to search

	.PARAMETER  $CheckedNodes
		The ArrayList that will contain the all the checked items
	
	.EXAMPLE
		$CheckedNodes = New-Object System.Collections.ArrayList
		Get-CheckedNode $treeview1.Nodes $CheckedNodes
		foreach($node in $CheckedNodes)
		{	
			Write-Host $node.Text
		}
#>
	param (
			[ValidateNotNull()]
			[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
			[ValidateNotNull()]
			[System.Collections.ArrayList]$CheckedNodes
	)
	
	foreach ($Node in $NodeCollection)
	{
		if ($Node.Checked)
		{
			[void]$CheckedNodes.Add($Node)
		}
		Get-CheckedNode $Node.Nodes $CheckedNodes
	}
}

#endregion


$vcenterTextbox_TextChanged={
	#TODO: Place custom script here
	if ($vcenterTextbox.Text -ne "")
	{
		$buttonEnterCredentials.Enabled = $true
	}
	else
	{
		$buttonEnterCredentials.Enabled = $false
	}
}

$buttonAddVirtualMachine_Click={
	#TODO: Place custom script here
	if (Show-AddVMForm_psf -eq 'OK')
	{
	}
}


$buttonOpenRolesSelection_Click={
	
	$global:vmSelectedStep4 | Out-File "$ScriptDirectory\logs\vmselectedstep4.log" -Append
	
	if ((Show-WindowsRoles_psf -VMName $global:vmSelectedStep4) -eq 'OK')
	{
		#$selectedRoles = $global:vmRoles | ?{ $_.VMName -eq $vm.VMName } | Select -ExpandProperty Roles		
	}
	
}

$buttonBuildAndConfigureVMs_Click={
	
	#$progressbarVMBuild.Visible = $true
	$buttonBuildAndConfigureVMs.Enabled = $false
	
	try
	{
		#$progressbarVMBuild.Maximum = ($global:vmBuilds).Count
		#$progressbarVMBuild.Value = 0
		#$progressbarVMBuild.Step = 1
		
		foreach ($vm in $global:vmbuilds)
		{
			while (@(Get-Job | ?{ $_.State -eq "Running" }).Count -ge 5)
			{
				Write-Host "Waiting for open thread...($NumJobs Maximum)"
				Start-Sleep -Seconds 3
			}
			
			# Let's combine all the OS specific data we gathered for the VM into one variable.
			$osConfigObject = New-Object PSObject
			
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "VMName" -Value $vm.VMName
			
			# Add the data for the domain/workgroup
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "Hostname" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).Hostname
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "DomainName" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).DomainName
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "DomainUser" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).DomainUser
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "DomainPassword" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).DomainPassword
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "IsWorkgroup" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).IsWorkgroup
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "LocalAdminPassword" -Value $global:vmAdminPasswords
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "Roles" -Value ($global:vmRoles | ?{ $_.VMName -eq $vm.VMName }).Roles
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "Features" -Value ($global:vmFeatures | ?{ $_.VMName -eq $vm.VMName }).Features
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "AdminPassword" -Value ($global:vmAdminPasswords | ?{ $_.VMName -eq $vm.VMName }).Password
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "LocalUsers" -Value $global:vmLocalUsers
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "Disks" -Value ($global:vmAdditionalDisks | ?{ $_.VMName -eq $vm.VMName })
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "NICs" -Value ($global:vmAdditionalNICs | ?{ $_.VMName -eq $vm.VMName })
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "OSKeys" -Value ($global:vmOSKeys | ?{ $_.VMName -eq $vm.VMName })
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "AdminAccount" -Value $global:vmAdminAccount
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "TimeZone" -Value $global:vmTimeZones
			
			$global:vmFullOSConfig = [System.Array]$global:vmFullOSConfig + $osConfigObject
			
			$osConfigObject | Out-File "$ScriptDirectory\logs\osobject.log" -Append
			
			# Define and start the build job for the VM.
			
			Start-Job -Name $vm.VMName -ArgumentList $vcenterTextbox.Text, $global:vcCredential, $vm, $ScriptDirectory, $osConfigObject -ScriptBlock {
				. "$($args[3])\Functions\Get-FolderbyPath.ps1"
				
				Import-Module VMware.PowerCLI
				
				Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -ParticipateInCeip $false -DisplayDeprecationWarnings $false -Confirm:$false
				
				Connect-VIServer -Server $args[0] -Credential $args[1]
				
				if ($args[4].IsWorkgroup -eq 'No')
				{
					$password = ConvertTo-SecureString "$($args[4].DomainPassword)" -AsPlainText -Force
					$domainCredential = New-Object System.Management.Automation.PSCredential ("$($args[4].DomainUser)", $password)
				
					$osSpec = New-OSCustomizationSpec -OSType "Windows" -Name $args[2].VMName -Type NonPersistent `
													  -FullName "Administrator" `
													  -AdminPassword "$($args[4].LocalAdminPassword)" `
													  -AutoLogonCount 2 `
													  -OrgName "Org1" `
													  -Description "Temporary Spec for $($args[2].VMName)" `
													  -ChangeSid `
													  -DeleteAccounts `
													  -Domain "$($args[4].DomainName)" `
													  -DomainCredentials $domainCredential `
													  -NamingScheme fixed `
													  -NamingPrefix $args[4].Hostname `
													  -TimeZone $args[4].TimeZone `
													  -ErrorAction Stop
					
				}
				else
				{
					$osSpec = New-OSCustomizationSpec -OSType "Windows" -Name $args[2].VMName -Type NonPersistent `
													  -FullName "Administrator" `
													  -AdminPassword "$($args[4].LocalAdminPassword)" `
													  -AutoLogonCount 2 `
													  -OrgName "Org1" `
													  -Description "Temporary Spec for $($args[2].VMName)" `
													  -ChangeSid `
													  -DeleteAccounts `
													  -Workgroup "$($args[4].DomainName)" `
													  -NamingScheme fixed `
													  -NamingPrefix $args[4].Hostname `
													  -TimeZone $args[4].TimeZone `
													  -ErrorAction Stop
					
				}
				
				if ($args[2].("IP Type") -eq "DHCP")
				{
					Get-OSCustomizationNicMapping -OSCustomizationSpec $osSpec | Set-OSCustomizationNicMapping -IpMode UseDHCP
				}
				else
				{
					Get-OSCustomizationNicMapping -OSCustomizationSpec $osSpec | Set-OSCustomizationNicMapping -IpMode UseStaticIP `
																											   -IpAddress $args[2].("IP Address") `
																											   -SubnetMask $args[2].("Subnet Mask") `
																											   -DefaultGateway $args[2].("Default Gateway") `
																											   -Dns $args[2].("Primary DNS Server"), $args[2].("Secondary DNS Server")
				}
				
				$vmTemplate = Get-Template -Name $args[2].Template
				
				$destFolder = Get-FolderbyPath -Path "$($args[2].Location)" -Separator "\"
				
				# Now, let's actually build the VM with the configuration spec we defined above.
				$invoke = New-VM -VMHost $args[2].("VM Host") -Name $args[2].VMName -Datastore $args[2].Datastore -Template $vmTemplate -Location $destFolder -OSCustomizationSpec $osSpec -ErrorAction Stop
				
				# Now that the VM is built, we need to modify the network adapter and assign it to the specified vSwitch before powering it on.
				Get-VM -Name $args[2].VMName | Set-VM -MemoryGB $args[2].Memory -NumCpu $args[2].NumCPU -Confirm:$false -ErrorAction Stop
				
				Get-NetworkAdapter -VM $args[2].VMName | Set-NetworkAdapter -NetworkName $args[2].Network -StartConnected $true -Confirm:$false -ErrorAction Stop
				
				Start-VM -VM $args[2].VMName -RunAsync
				
				# Now we wait for the VM to power up and auto log in before continuing.
				$vmstatus = (Get-VM -Name "$($args[2].VMName)").extensionData.Guest.interactiveGuestOperationsReady
				
				do
				{
					Start-Sleep -Seconds 5
					$vmstatus = (Get-VM -Name "$($args[2].VMName)").extensionData.Guest.interactiveGuestOperationsReady
					Write-Host $vmStatus -ForegroundColor Red
				}
				while ($vmStatus -ne $True)
				
				Write-Host $vmStatus -ForegroundColor Green
				
				# Now that our VM is built, let's finish customizing it. We'll start by setting the local Administrator password.
				
				$vmAdminPass = $args[4].LocalAdminPassword
				
				$password = ConvertTo-SecureString $args[4].LocalAdminPassword -AsPlainText -Force
				$localAdminCred = New-Object System.Management.Automation.PSCredential ("Administrator", $password)
				
				# Declare the array that will house each command to run.
				
				$customizeOSScripts = [System.Collections.ArrayList]@()
				
				# Now, build the commands to add the additional user accounts to the new VMs. Add the commands to the command array.
				
				foreach ($user in $args[4].LocalUsers)
				{
					if ($user.Administrator -eq "Yes")
					{
						$userCreate = New-Object PSObject
						$userCreate | Add-Member -MemberType NoteProperty -Name "Command" -Value "NET USER $($user.Username) $($user.Password) /add"
						
						$userAdmin = New-Object PSObject
						$userAdmin | Add-Member -MemberType NoteProperty -Name "Command" -Value "NET LOCALGROUP Administrators $($user.Username) /add"
						
						$date = Get-Date -Format "M-d-yyyy"
						$desc = "Admin user created on $date."
						$userTmp = $user.Username
						$userDescription = New-Object PSObject
						$userDescription | Add-Member -MemberType NoteProperty -Name "Command" -Value "Set-LocalUser -Name $userTmp -Description ""$desc"""
						
						$customizeOSScripts = [System.Array]$customizeOSScripts + $userCreate
						$customizeOSScripts = [System.Array]$customizeOSScripts + $userAdmin
						$customizeOSScripts = [System.Array]$customizeOSScripts + $userDescription
					}
					else
					{
						$userCreate = New-Object PSObject
						$userCreate | Add-Member -MemberType NoteProperty -Name "Command" -Value "NET USER $($user.Username) $($user.Password) /add"
						
						$date = Get-Date -Format "M-d-yyyy"
						$desc = "Standard user created on $date."
						$userTmp = $user.Username
						$userDescription = New-Object PSObject
						$userDescription | Add-Member -MemberType NoteProperty -Name "Command" -Value "Set-LocalUser -Name $userTmp -Description ""$desc"""
						
						$customizeOSScripts = [System.Array]$customizeOSScripts + $userCreate
						$customizeOSScripts = [System.Array]$customizeOSScripts + $userDescription
					}
				}
				
				# Build the command to install the selected Roles.
				
				foreach ($role in $args[4].Roles)
				{
					$object = New-Object PSObject
					$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Install-WindowsFeature -Name $role -IncludeManagementTools"
					$customizeOSScripts = [System.Array]$customizeOSScripts + $object
				}				
				
				# Now, we add, format and partition additional specified disks.
				
				foreach ($disk in $args[4].Disks)
				{
					$driveLetter = $disk.DriveLetter
					$driveLabel = "Drive-$($disk.DriveLetter)"
					$driveSize = [int]($disk.DriveSize)
					$confirm = '$false'
					New-HardDisk -VM $args[2].VMName -CapacityGB $driveSize -Persistence persistent -Confirm:$false
					$object = New-Object PSObject
					$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-Disk | Where-Object PartitionStyle -eq ""RAW"" | Initialize-Disk -PartitionStyle GPT -PassThru | New-Partition -DriveLetter $driveLetter -UseMaximumSize | Format-Volume -FileSystem NTFS -NewFileSystemLabel $driveLabel -Confirm:$confirm"
					#$customizeOSScripts = [System.Array]$customizeOSScripts + $object
					Invoke-VMScript -VM $args[2].VMName -GuestCredential $localAdminCred -ScriptText "$($object.Command)"
				}
				
				# Let's customize additional network adapters.
				
				foreach ($nic in $args[4].NICs)
				{
					$newNic = New-NetworkAdapter -VM $nic.VMName -NetworkName $nic.VLAN -StartConnected -Type Vmxnet3
					
					$macAddress = "$($newNic.MacAddress)" -replace ":", "-"
					
					if ($nic.("IP Type") -eq "Static")
					{
						$newIP = $nic.("IP Address")
						$newMask = $nic.("Subnet Mask")
						$newGateway = $nic.("Default Gateway")
						$newDNSServer = $nic.("Primary DNS Server")
						
						# Determine the CIDR notation for subnet mask. We'll need this later.'
						$subnetMasks = Import-Csv "$($args[3])\reference\cidrlist.csv"
						
						$cidrNotation = ($subnetMasks | ?{ $_.SubnetMask -eq $newMask }).CIDR
						
						if ($newGateway -ne '')
						{
							$object = New-Object PSObject
							$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$macAddress"" | New-NetIPAddress -IPAddress $newIP -DefaultGateway $newGateway -PrefixLength $cidrNotation | Set-DNSClientServerAddress -ServerAddresses $newDNSServer"
							$customizeOSScripts = [System.Array]$customizeOSScripts + $object
						}
						else
						{
							$object = New-Object PSObject
							$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$macAddress"" | New-NetIPAddress -IPAddress $newIP -DefaultGateway $newGateway -PrefixLength $cidrNotation | Set-DNSClientServerAddress -ServerAddresses $newDNSServer"
							$customizeOSScripts = [System.Array]$customizeOSScripts + $object
						}
						
					}
				}
				
				# Let's set the product key and activate Windows.
				
				foreach ($key in $args[4].OSKeys)
				{
					if ($key.UseKMS -eq "Yes")
					{
						[string]$kmsServerCmd = "cscript C:\Windows\System32\slmgr.vbs /skms $($key.KMSServer):$($key.KMSServerPort)"
						
						$object = New-Object PSObject
						$object | Add-Member -MemberType NoteProperty -Name "Command" -Value $kmsServerCmd
						
						$customizeOSScripts = [System.Array]$customizeOSScripts + $object
					}
					elseif ($key.UseKMS -eq "No")
					{
						[string]$productKeyCmd = "cscript C:\Windows\System32\slmgr.vbs /ipk $($key.ProductKey)"
						[string]$activationCmd = "cscript C:\Windows\System32\slmgr.vbs /ato"
						
						$object = New-Object PSObject
						$object | Add-Member -MemberType NoteProperty -Name "Command" -Value $productKeyCmd
						
						$customizeOSScripts = [System.Array]$customizeOSScripts + $object
						
						Clear-Variable object
						
						$object = New-Object PSObject
						$object | Add-Member -MemberType NoteProperty -Name "Command" -Value $activationCmd
						
						$customizeOSScripts = [System.Array]$customizeOSScripts + $object
					}
				}
				
				# Let's output the commands to verify.
				$customizeOSScripts | Out-File "$($args[3])\logs\scriptsarray_$($args[2].VMName).log"
				
				# Now, we run all the customization commands.
				
				foreach ($script in $customizeOSScripts)
				{
					$script.Command | Out-File "$($args[3])\logs\$($args[2].VMName)_scriptcommand.log" -Append
					Invoke-VMScript -VM $args[2].VMName -GuestCredential $localAdminCred -ScriptText "$($script.Command)" | Out-File "$($args[3])\logs\$($args[2].VMName)_scriptcommand.log" -Append
					
					sleep -Seconds 3
				}
				
				Get-VM $args[2].VMName | Restart-VMGuest -Confirm:$false
				
				Disconnect-VIServer -Server $args[0] -Force -Confirm:$false
				
			} # End job block
			
		}
		
		# Let's wait for all the build jobs to finish.
		
		do
		{
			Start-Sleep -Milliseconds 1000
		}
		while ((Get-Job -State Running).Count -gt 0)
		
		# Output the job results to a separate log file for each VM.
		
		$datetime = Get-Date -Format "MM/dd/yyyy_HH:mm"
		$jobs = Get-Job
		
		$data = @()
		
		foreach ($job in $jobs)
		{
			$data += Get-Job $job.Name | Receive-Job
			Remove-Job $job
		}
		
		$data | Out-File "$ScriptDirectory\logs\jobtext.log" -Append
		
		#[System.Windows.Forms.MessageBox]::Show("All requested virtual machines are available.")
		
	}
	catch
	{
		[System.Windows.Forms.MessageBox]::Show("Unable to build virtual machines.")
	}
	
	# Now, we will rename the local admin account.
	
	$password = ConvertTo-SecureString $global:vmAdminPasswords -AsPlainText -Force
	$localAdminCred = New-Object System.Management.Automation.PSCredential ("Administrator", $password)
	
	foreach ($vm in $global:vmbuilds)
	{
		$vmstatus = (Get-VM -Name $vm.VMName).extensionData.Guest.interactiveGuestOperationsReady
		
		do
		{
			Start-Sleep -Seconds 1
			$vmstatus = (Get-VM -Name $vm.VMName).extensionData.Guest.interactiveGuestOperationsReady
		}
		while ($vmStatus -ne $True)
		
		if ($global:vmAdminAccount)
		{
			$newAdminName = $global:vmAdminAccount
			
			$renameCommand = "Get-LocalUser Administrator | Rename-LocalUser -NewName $newAdminName"
			$renameCommand | Out-File "$ScriptDirectory\logs\$($vm.VMName)_scriptcommand.log" -Append
			
			Invoke-VMScript -VM $vm.VMName -GuestCredential $localAdminCred -ScriptText "Get-LocalUser Administrator | Rename-LocalUser -NewName $newAdminName" -ErrorAction Continue
		}
		
		do
		{
			Start-Sleep -Seconds 1
			$vmstatus = (Get-VM -Name $vm.VMName).extensionData.Guest.interactiveGuestOperationsReady
		}
		while ($vmStatus -ne $True)
		
		Get-VM $vm.VMName | Restart-VMGuest -Confirm:$false
	}
	
	[System.Windows.Forms.MessageBox]::Show("All requested virtual machines are available.")
}

$datagridviewVMQueue_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	$buttonDeleteVMFromQueue.Enabled = $true	
	
}

$buttonDeleteVMFromQueue_Click={
	
	$global:vmBuilds = $global:vmBuilds | ?{ $_.VMName -ne $listviewVMsStep2.SelectedItems.Text }
	
	$listviewVMsStep2.Clear()
	
	foreach ($item in $global:vmBuilds)
	{
		$listviewVMsStep2.Items.Add($item.VMName)
	}
	
	# Update the treeview control for Step 3
	
	$treeviewVMListStep3.BeginUpdate()
	$treeviewVMListStep3.Nodes.Clear()
	
	foreach ($vm in $global:vmbuilds)
	{
		$newNode = $treeviewVMListStep3.Nodes.Add($vm.VMName)
	}
	
	$treeviewVMListStep3.EndUpdate()
	
	# Update the treeview control for step 4.
	
	$treeviewVMListStep4.BeginUpdate()
	$treeviewVMListStep4.Nodes.Clear()
	
	foreach ($vm in $global:vmbuilds)
	{
		$newNode = $treeviewVMListStep4.Nodes.Add($vm.VMName)
	}
	
	# Determine if we should be resetting all the variables.
	if ($global:vmBuilds -eq $null)
	{
		$vmFeatures = [System.Collections.ArrayList]@()
		$vmRoles = [System.Collections.ArrayList]@()
		$vmDomainInfo = [System.Collections.ArrayList]@()
		$vmOS = [System.Collections.ArrayList]@()
		$vmAdminPasswords = [System.Collections.ArrayList]@()
		$vmLocalUsers = [System.Collections.ArrayList]@()
		$vmWorkgroupDomain = [System.Collections.ArrayList]@()
		$vmFullOSConfig = [System.Collections.ArrayList]@()
		$vmTimeZones = [System.Collections.ArrayList]@()
		$vmAdditionalDisks = [System.Collections.ArrayList]@()
		$vmAdditionalNICs = [System.Collections.ArrayList]@()
		$vmOSKeys = [System.Collections.ArrayList]@()
		$vmAdminAccount = $null
		
		foreach ($item in (Get-ChildItem -Path "$ScriptDirectory\logs\"))
		{
			$item | Remove-Item -Force -Recurse
		}
	}
	
	$treeviewVMListStep4.EndUpdate()
	
	Update-NavButtons
	
	
}

$treeviewVMListStep4_AfterSelect=[System.Windows.Forms.TreeViewEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.TreeViewEventArgs]
	
	$global:vmSelectedStep4 = $treeviewVMListStep4.SelectedNode.Text
	
	$labelVMNameStep4.Text = "VM: $($global:vmSelectedStep4)"
	
	if ($treeviewVMListStep4.SelectedNode.Text -in $global:vmWorkgroupDomain.VMName)
	{
		$labelOK1.Visible = $true		
	}
	else
	{
		$labelOK1.Visible = $false
	}
	
	if ($treeviewVMListStep4.SelectedNode.Text -in $global:vmOSKeys.VMName)
	{
		$vmTemp = $global:vmOSKeys | ?{ $_.VMName -eq $treeviewVMListStep4.SelectedNode.Text }
		
		if ($vmTemp.UseKMS -eq "Yes")
		{
			$radiobuttonKMSKey.Checked = $true
			$buttonProductKey.Text = "KMS Key"
		}
		elseif ($vmTemp.UseKMS -eq "No")
		{
			$radiobuttonRetailKey.Checked = $true
			$buttonProductKey.Text = "Retail Key"
		}
	}
	else
	{
		$radiobuttonKMSKey.Checked = $false
		$radiobuttonRetailKey.Checked = $false
		$buttonProductKey.Text = "Product Key"
		$buttonProductKey.Enabled = $false
	}
	
}

$radiobuttonDomain_CheckedChanged={
	
	if ($radiobuttonDomain.Checked) { $buttonDomainWorkgroup.Enabled = $true; $buttonSetWorkgroup.Enabled = $false }
	elseif ($radiobuttonWorkgroup.Checked) { $buttonDomainWorkgroup.Enabled = $false; $buttonSetWorkgroup.Enabled = $true }
	
}

$buttonOpenFeatureSelection_Click={
	
	if ((Show-WindowsFeatures_psf -VMName $global:vmSelectedStep4) -eq 'OK')
	{
	}
}

$buttonAddLocalUsers_Click={
	
	if ((Show-AddLocalUsers_psf -VMName $global:vmSelectedStep4) -eq 'OK'){}
	
}

$comboboxTimezone_SelectedIndexChanged={
	
	$global:vmTimeZones = (Import-Csv "$ScriptDirectory\reference\timezones.csv" | ? { $_.Description -eq $comboboxTimezone.Text }).TimeZoneCode
	
	$global:vmTimeZones | Out-File "$ScriptDirectory\logs\tz.log"
		
}

$treeviewVMListStep3_AfterSelect=[System.Windows.Forms.TreeViewEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TreeViewEventArgs]
				
	$global:vmSelectedStep3 = $treeviewVMListStep3.SelectedNode.Text
	
	$labelVMStep3.Text = "VM: $($global:vmSelectedStep3)"
	
}

$listviewVMsStep2_SelectedIndexChanged={
				
	$rowTmp = $global:vmBuilds | ?{ $_.VMName -eq $listviewVMsStep2.SelectedItems.Text }
	
	$labelStep2CPU.Text = "CPU: $($rowTmp.NumCPU)"
	$labelStep2Memory.Text = "Memory: $($rowTmp.Memory)"
	$labelStep2Network.Text = "Network: $($rowTmp.Network)"
	$labelStep2VMName.Text = "VM Name: $($rowTmp.VMName)"
	
}
$buttonVDiskAdd_Click={
	
	if ((Show-AddVirtualDisk_psf -VMName $treeviewVMListStep3.SelectedNode.Text) -eq 'OK')
	{ }
	
}

$buttonVNICAdd_Click={
	
	if ((Show-AddNicCard_psf -VMName $treeviewVMListStep3.SelectedNode.Text) -eq 'OK')
	{ }
	
}



$maskedtextboxHostname_Enter={
	#TODO: Place custom script here
	$maskedtextboxHostname.Select(0,0)
}

$buttonSetHostname_Click={
	
	if ((Show-SetHostname_psf -VMName $treeviewVMListStep4.SelectedNode.Text) -eq 'OK')
	{ }
}

$buttonDomainWorkgroup_Click={
	
	if ((Show-WorkgroupDomainJoin_psf) -eq 'OK')
	{ }	
}

$buttonSet_Click={
	
	if ((Show-GetAdminPassword_psf) -eq 'OK')
	{ }
}

$buttonAdminRename_Click={
	#TODO: Place custom script here
	if ((Show-RenameAdminAccount_psf) -eq 'OK')
	{ }
}

$buttonProductKey_Click={
	
	if ($radiobuttonRetailKey.Checked)
	{
		if ((Show-EnterRetailKey_psf -VMName $treeviewVMListStep4.SelectedNode.Text) -eq 'OK')
		{ }
	}
	elseif ($radiobuttonKMSKey.Checked)
	{
		if ((Show-EnterKMSKey_psf -VMName $treeviewVMListStep4.SelectedNode.Text) -eq 'OK')
		{ }
	}
	
}

$radiobuttonRetailKey_CheckedChanged={
	
	if ($radiobuttonRetailKey.Checked)
	{
		$buttonProductKey.Text = "Retail Key"
		$buttonProductKey.Enabled = $true
	}
	
}

$radiobuttonKMSKey_CheckedChanged={
	
	if ($radiobuttonKMSKey.Checked)
	{
		$buttonProductKey.Text = "KMS Key"
		$buttonProductKey.Enabled = $true
	}
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>