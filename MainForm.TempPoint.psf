<File version="3.1">
  <FileID>4dee3778-5d7e-48ff-b7fd-c671faf8b7f0</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAFfySURBVHhe7d0FeFRn+gXweru73e1W9t922227
W8etWKG4u7tDIFgEQgIkgSS4Q3B3d3eHQHAnJIS4C3EDzv99Jxma0GkbWtpC7/ntc54lo3fuzNzv
fPfOTJ8jIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiL607oiiWAYhmEY5k+T25KfFS8BwzAMwzB/mmRKfpY2BUtXZhiG
YRjm2UyS5GexADAMwzDMnyssAAzDMAxjwLAAMAzDMIwBwwLAMAzDMAYMCwDDMAzDGDAsAAzDMAxj
wPzyAvDmF+XQqEFtfPHO8w9Pe/5/5dG8Wgm8804JNOraGS0q/jfPdTQvfVAUDTr3RLPSH+L1R84z
nf+P91CtaSfULf7uD857avL82yhUqw3aNyyJ91+ycP5j5H8VW6KnzSDY2/VDn9590M/OAQOsO6Ja
gX9YvLzlvIy3P6qAhq2q4PO/WjqfYRiGYfLklxeAVz+tjr42vVGr4BsPT/uymSNsGxfG++9WgcN8
T4x16Iyib+S+3hsoVN8WMzevgHPjAnjr4enmvIZ3izaC+7QJGNi9IT7/y6PnP5rn8fq/yqJJ5wYo
kud+nnRewN//rxyadqmPwv/Qv1/FWx99ji8++Rf++sKjl328vPHBFyhcrBTKVuwCV89RsK5fBiWK
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
sQAQEREZEAsAERGRAbEAEBERGRALABERkQGxABARERkQCwAREZEBsQAQEREZEAsAERGRAbEAEBER
GRALABERkQGxABARERkQCwAREZEBsQAQEREZEAsAERGRAbEAEBERGRALABERkQGxABARERkQCwAR
EZEBsQAQEREZEAsAERGRAbEAEBERGRALABERkQGxABARERkQCwAREZEBsQAQEREZEAsAERGRAbEA
EBERGRALABERkQGxABARERkQCwAREZEBsQAQEREZEAsAERGRAbEAEBERGRALABERkQGxABARERkQ
CwAREZEBsQAQEREZEAsAERGRAbEAEBERGRALABERkQGxABARERkQCwAREZEBsQAQEREZEAsAERGR
AbEAEBERGRALABERkQGxABARERkQCwAREZEBsQAQEREZEAsAERGRAbEAEBERGRALABERkQGxABAR
ERkQCwAREZEBsQAQEREZEAsAERGRAbEAEBERGRALABERkQGxABARERkQCwAREZEBsQAQEREZEAsA
ERGRAbEAEBERGRALABERkQGxABARERkQCwAREZEBsQAQEREZEAsAERGRAbEAEBERGRALABERkQGx
ABARERkQCwAREZEBsQAQEREZEAsAERGRAbEAEBERGRALABERkQGxABARERkQCwAREZEBsQAQEREZ
EAsAERGRAbEAEBERGRALABERkQGxABARERkQCwAREZEBsQAQEREZEAsAERGRAbEAEBERGRALABER
kQGxABARERkQCwAREZEBsQAQEREZEAsAERGRAbEAEBERGRALABERkQGxABARERkQCwAREZEBsQAQ
EREZEAsAERGRAbEAEBERGRALABERkQGxABARERkQCwAREZEBsQAQEREZEAsAERGRAbEAEBERGRAL
ABERkQGxABARERkQCwAREZEBsQAQEREZEAsAERGRAbEAEBERGRALABERkQGxABARERkQCwAREZEB
sQAQEREZEAsAERGRAbEAEBERGRALABERkQGxABARERkQCwAREZEBsQAQEREZEAsAERGRAbEAEBER
GRALABERkQGxABARERkQCwAREZEBsQAQEREZEAsAERGRAbEAEBERGRALABERkQGxABARERkQCwAR
EZEBsQAQEREZEAsAERGRAbEAEBERGRALABERkQGxABARPeXSsh5g5cUELD13F0vPM0xOvONxNiQt
51Xy+FgAiIiecmGJWXjO4Tqes76C53rkxIoxbPT573UVz3W7BOvN4TmvksfHAkBE9JSLSMrCK0Nv
4m3X6xiwLRC2h+Jgwxg2Tgej0HDeLVMhtN8emfMqeXwsAERETzktAM8NvomvpwfggfdhwLoLY+RM
ccOqsyGmvQEsAEREf2LmAvD5nHDEL1sCPPccY+QU+xpzzkTguZ5XWQCIiP7MHhaA2WGIW73S8qDA
GCfflcEc73AWACKiPzsWACZPWACIiIyBBYDJExYAIiJjYAFg8oQFgIjIGFgAmDxhASAiMgYWACZP
WACIiIyBBYDJExYAIiJjYAFg8oQFgIjIGFgAmDxhASAiMgYWACZPWACIiIyBBYDJExYAIiJjYAFg
8oQFgIjIGFgAmDxhASAiMgYWACZPWACIiIyBBYDJExYAIiJjYAFg8oQFgIjIGFgAmDxhASAiMgYW
ACZPWACIiIyBBYDJExYAIiJjYAFg8oQFgIjIGFgAmDxhASAiMgYWACZPWACIiIyBBYDJExYAIiJj
YAFg8oQFgIjIGFgAmDxhASAiMgYWACZPWACIiIyBBYDJExYAIiJjYAFg8oQFgIjIGFgAmDxhASAi
MgYWACZPWACIiIyBBYDJExYAIiJjYAFg8oQFgIjIGH5JAfCRrJeslqyT3JFYupzmnmSXJF6SJPGS
ZEpyXyZNcluSmOu0X5oHkkhJYK7TcuekRJdbcyHntMeNPpadkqOSPZJHH8+TTLrkukTvM/fpus5u
SfS8A5K7EvN5uh6PSKJynZbvsAAQERnD4xYAHewGSEpL6kpqSJwlIRJLl8+Q9Jb4S85LPpU8OjBp
gdDbOJPrtF+aLMlayfhcp5mzUqLLbE4fyWHJ4wzg9yVLJbUlwyX9JckSS5d9EtHBfJRkdq7TNPsk
rpJhkn9LdkjM52k5e0WyMddp+Q4LABGRMTxuAUiV6IB0LtdpEySTc/39Y9EBvpAkOtdpGh1AR0ty
3+aviQ6OUx857aKkqURn7ebTLkm0LOhsOvdlfy76WK8+ctpvmVOS7hLdm2I+bYxksWSzpJnEU6JF
RguKjaSsZJsk9+3kKywARETG8EsLgA6e5tPmStZIDkl0d7SepoP8MUmMZKFEd8vrLvfCOafpZfSy
thId3DpKdHe2+TZ1UB4q0fPtJHMkevppid7fdIm9xLwcCRI3ic7IW0imScy3pdHb0JKR+7Tc0eXV
29P70xm0nqbLt0AyUaJ7Pfwkumu9gqSz5LhEH5vu5dDL6+EAvf5AyRKJFpvlEvPeEV+J7gXRwxNa
mtwl5vvaJDE/Vt1boqeZEyQZLLmZ83ecZKRED2doAdDHpXsk9Hb1UEAjiT5HWoT0+dJl1NvWkqDX
zX3bPwgLABGRMfySQwA6MNeS6KDdXDJOoudZS3R3v/77ikQHrWsS3e2vs/vLkiISHTBPSPQ29DKd
JDpo35CY70ePfevt6q58Hcz6SnTWPVaiu7x1Bqz3pQOhFgodONtLnCR6u4/uATAPgLlPM0cHxa4S
vT2HnH/rQK2F4HOJDrA9JDrz11m1HvboJ1kh+a9E14kWA/PjaSdpKNHPNRSXmPc66C55LSb6+YHX
JXpfensbJHrfWgr0sILeX+7DJLq+tEiY97Lo9fUyKRI9rLFK0lqiA76WMH1+9JDBXomWGF2/ut70
udK9BubbtRgWACIiY3jcAqCDkR571gFLB+cpEh20dDDU03VQ08vpbN5DorPWUhKdqWsBKCrRWeks
ibks6Oxbb0MH3dz3pXsNekl0tq0z3O0SvT8daPV8PT6us379YGEDifmDfzqb1svlvi0tJzqTz32a
OfslNXP9rQOtDuS6/Dqw6mk6IOvxdp3N6+CqxUaXt4REy4oWDt31rpeNkOjsXgtNFYkun56uy697
L3QA13Vivj89NPGlRPeEaIl5S5J7D4tG93zo/esufr0v82PRPQ06qGuR0JKgz4l+rkHvR/9fy4He
tq4n3WOhHxzMfbs/CAsAEZExPG4B0Fmnzsh1MDefprv/HSU6Y9b/19P0mwIjJI8WAB0wdZf2fInO
XvWyYRKdyecuADp7rifRXf+LJLoHQL9NoAOfeVDWy+h96DcR9PrmT8LrYPjoHgAdPPUyuU8zRz8H
oIcOzH/rnoKeEh3E9YOCepq50OjueV0GHdR1UP5GoqVAl1PXg15W/9b70gLwnUQvp6fr8psLgB6j
128s6KELK4nevw7k+gHDLZJHP1ioezn0mwu7JfrYDkr0dL2Orh/zXpA2Er1/Xb96SCJWonsYtLR0
kcyU/OSHHlkAiIiM4Zd8BkAHQt3VrAOYRmfMuotdj5freXqaDjo6qOmMU3eD64fwtATohwD1NnTA
7CDRy+pgpoNg7lKhl9cCYP5bBz0d2HWGqzNmPU0LgM5s9cOF9SU6KOtnB3RPxCSJ+boaHbh1t7wO
0ubl1pm/zqD1WHp5ie6J0D0cWiq0BOg3E3TXv15fZ/x6X3qfugx6Hf1wnu7R0PvUzyToAKu3q7vi
dY+DHvPX/9eZuPl2dQA27wHQPQf6rQXdc6CDt3lZ9W/z8X5z9HZ1Bq97FHR3vhYxPV2P7+t619ty
kWg500MaWgC02OjzsFWil9XDJnqIREtH7tvOExYAIiJjeNwCoAOWHmP+SqKzeY0OyDqr1w/JNck5
TQd3vZwOmDrb1cFdPxeg5+ngpYOt7vLWvytLdPDMPejpZXRvgp6vg6x+eFCLgu7a11muXkYHdR1U
9WuEOsiVlBST6OEAHZDNt2WODtp6nt6mRo/j654KHTy1COh9aFnpJtFBUj/MZz5MobN5HVz1vrTw
6ODvLdE9AFoAdAauew3KSdpKtBDp+tDBXi+j96dlQAdsnZl/KzF/+0D3gOh19L71seoeBku/iaB7
IfSzErrHw3ya7jHQPQBaqnS2r9fT31uYJ9HPAOhnL/Qrj1o4dG+E7oXI/W2CH4QFgIjIGB63AGh0
oNEBUT+Up9EBTE/X49O6+1lPC5XoLnktDHq+zoA1erp5ANIft9HLaknQQvDormmdyZrvQy+jA6YO
zOYPyOlt623o/+vfurfBvDyWBlCNefk0eqzefLouu87y9XT97IGepo/T/I0FXTbz49Fl0NKg0fvS
6+pj0wFaZ/86yOsgHizR65mXSx+jDs46WOv1dFZvvn89z7xc5sfzaPR0XSfm4qDR29Pkvi39tz5+
XT792/yYdY+E+bQfDQsAEZEx/JICwPwwyyQ609c9APohRT0cocXA0mWf6rAAEBEZAwvAk4nuAdA9
A5rf8pcBf/OwABARGQMLAJMnLABERMbAAsDkCQsAEZExsAAwecICQERkDCwATJ6wABARGQMLAJMn
LABERMbAAsDkCQsAEZExsAAwecICQERkDCwATJ6wABARGQMLAJMnLABERMbAAsDkCQsAEZExsAAw
ecICQERkDCwATJ6wABARGQMLAJMnLABERMbAAsDkCQsAEZExsAAwecICQERkDCwATJ6wABARGQML
AJMnLABERMbAAsDkCQsAEZExsAAwecICQERkDCwATJ6wABARGQMLAJMnLABERMbAAsDkCQsAEZEx
sAAwecICQERkDCwATJ6wABARGQMLAJMnLABERMbAAsDkCQsAEZExsAAwecICQERkDCwATJ6wABAR
GQMLAJMnLABERMbAAsDkCQsAEZExsAAwecICQERkDCwATJ5ULM0CQERkBA8LwJxw3F25zPKgwBgn
ZYpi7hkWACKiPz1zAfhykh9ir19G/LrViFvLGDWZh3Zi4fEAPGd1hQWAiOjPLFwKwEtDbuIFh2um
EqCHAj6fxRg1X88IxvseN/Bcryuw3cYCQET0pxWZnIX3Rvjir1ICdE8Aw7w01AevD7yOIbujcl4l
j48FgIjoKXf/gZSApHumQwEM8zCJWUhMv5/zKnl8LABEREQGxAJARERkQCwAREREBsQCQEREZEAs
AERERAb0zBWApKQkpKenMwzDMAzzK6Lj6TNTAMzRBWYYhmEY5pfH0vj6c/nDCwDDMAzDML9/WAAY
hmEYxoBhAWAYhmEYA4YFgGEYhmEMGBYAhmEYhjFgWAAYhmEYxoBhAWAYhmEYA+Z3LwB6h3qd5ORk
w4fliTFazK/7R98LRot5HVhaR+boD7twXeVvXel2lOsqO7oedJy1tJ4eze9aAPTOYmJi4OvrCx8f
H0YSFhaW7yeLYZ713Llzx+L7wIgJDAy0uI40uk0ICgqyeD0jxt/fXwcpi9tKPU23o5auZ8To+Krj
bH7GFb3M71YAtNEGBARg/fr12Ldvn6Fz4MABbN68GSdPnjQ1Nkvri2H+LNENTVxcHLZu3Yrdu3dj
//79Ft8XRog+9p07d2LXrl2m9WJpQ63bSr3s9u3bTduKR2/DKNF1tWfPHtO2MioqyuJYo9tP3Y7q
ZYy8rszR8VXHWX0NPbquHs3vXgB0BrB3716Eh4cjJCTEsImMjMSZM2dYABhDRDc0sbGxpsFfZ3M6
Y7P0vjBCdNunMzXdWP9UAdDB7Pr164iIiLB4O0aIvk50T4mWJd1m/lQB0O2pXsbS7Rgl+trS8VXH
2ae2AGijCw4ONj2xRk1oaChOnz7NAsAYIrkLgO6i1N3blt4XRohu+3Rgz08BuHLlimnDbul2jBB9
nWhhzE8B0O2pblct3Y5Roq8tHV9ZACQBAYEICY9CXM6bTBMfLQ0xSM6zcHnLCUBAcDhi5XoRIbLR
ktu0fLnHCwsAY6Toe+9JF4CAgCCERcUiJkbf0/I+Nb03QxAZF4mw4Cf3Xn3S+d0LQEAAgoLDEBX7
/XYwzrQdlHVm6fK/OnK7QaGmXfbR4bLscv+WL/fz+aMKgL6WgkMjEJOzvrJzFzGRoaZ1GSPrL9zi
eKCPPQQRkVGIidDH/uj52QkOi5SxKBzBFs77NTF8AQiSwT373yEIjw7A2S0zYNOwDmpWr47q1Wug
g8cynPaTF2ZY/jZAQSHhiDy/EU6j52H18esIlRd0kIXLPW5YABgjRTc0T7YAyPs79hb2THbEuNFL
4B0Qj4jQYAT4H8fi/vOw++wNBITm/72qG/XIyDAEP9x+mBP0RN7vufP7FoAAhETEIezGEcwdWFO2
gdnbwV5jluFcUBIiQ3754PyjkW1m7I1DmDrNE+M3eiNUB01Ll8tH/pgCECzLHIirh5dhSKO6qKXr
rEYN1KjRFE4z98H3wmbYDp+BFceu/XA80MfuewLzPcdh4ILDCIoKy3u+PJ7QoNu4uHseeo9bj3P+
8vxoWc19mV8RwxaAoKBg0xslVDYC2Ss8FNGJN7HN3QHNP28F5zkzMGPGBNh1rIbB01bjQkCcaYOh
y5Gd75+EoIenScKiEXdkPIrU6Y3hW84jIiZCnjC5jx9sKB4vLACMkfLkC4DMwlKuYVmHEnj3HzUw
5oAfYu9GItBvE+w/6o35By4hwDSg53ov63tW7lf/nf3+1X/LNkNmcr7e6+HhsRrePncQrDM7032Y
zw+R6z7ZjfTvVQB0+xVy9RAmOlVGlZ6OmO05DZ4zJ8O5Z204jp+Pk35xiArLtY5ytoP6/Hx/Wq7t
XZ7Tc20zc6/nsBikXFqFNu06oNH4vQiPj/zFM90/pgCEIDL+No4uGIFW7zXEoBnTMGXSREycOB1r
9pyD/81TWLlpD45e8kWwlExdDw8fe0gowv0v48Du7Vh94CKCwqQg5F438nqKCLqFE/N6492GY3DE
PwgRUiKe1OtL78NQBSAoKAQh8qSHBd/BtWNLMchxCbz0Tay7vBKuYcvw0RjcfAluAbh//z58lnRB
W8dR2HJeGn9IoGl57tyRFixPkr7YTIN/UED26boBCI9B3PGp+La5PUbvuISomHAEBtzJ2d34y8MC
wBgpv0UBiE6+iKU9HNG6YFn0Wb4Rp/3jERG4DUMK2WPJ4csIjAyX2VbOe1l3Q+t7XHfR6qw+Z6Mc
ZBrkA3B9/yQ0bjQKey77yfZEtk0hEYi+dgArl83EtN0+Mkhmb2eexGxN7/d3KQCybYwM88XhlaPR
uv0QbPKJRmpSIpKSE3Dn3F4cOnwUV/11dq7bwOztYIBpO2guAPJYTesue4B/eJqsS728Xlb/Nk2+
5DoP13NYLFKvrEO37lZoM/UAwuMinrkCEBF3C4fmT4VDpWm4hHtIT0lGcpK8hiPl9mVsiY3JOSRs
ev3I60XGBPNrzLTeo6IRq4cATK81PaSQvX6D5LmMCPaF12J7fN5mMo76+mev05z1bnl58h9jFQBZ
0cEBt+Hr44X5drXwbStHLNgtDU3f2HoMKuE6tnmMgF2dCTgULi/agCtY59wHwz3X4uzhxWheqzxK
lCiBEsXLoab9AlyQthxx/TAm9KmGQoULo2Cd7hi/7xbST89AhZaDMGnPZXivtMN3FUrDZd1lBMgL
4Ye7DPMXFgDGSPltCsB5LOjgjnFOw+HcZRimLz4J36i9cJECsPTYDXmPXcf6Me3kPV4SJb5pgH4L
D+HU5mFoVLM+nDdeQfzlZWhV8xt0nbIcM6zL4723PkTp3gtwLjB7b2JYcCCuHliAbg2KoEYPN+y6
ECoDmWzEf+Wy/14FICg0AhE3jmP6sDao5H4A8Tp50fNkQA8Ji0JkdCyiTy1C2wbfobhpO/gNvus9
BxdvXcaupW6o1LYLutUujELFm2DAoiMIS0iE767JaFWjKAoVKoTCfabh+PVgxATdxKYJHbPXc6na
6Db9CO76bkaPZ7oA+OLIwsmwKTMcuwL94HP9Gq7dvIXbQVIMveajZd/RWHDoCvwPTkWNLv1h1bQQ
ChUpiwbDNiHE/zimjhyCTlMOIir9BtY7dEbVYiVQvEgBWE3dBZ+AMFxY5YBPanVAl4ayHotUQuvR
W+AbGYYQi8uT/xioAAQhVG7j0LwuqPttTQyasREHzvmYdrlk707RAuCHA1PtUPkfH+KLIvIEFS6A
cq0csPyYD8KCbuHkvo1Ys2Ydls6egAFdy8Fz+3EsHtMXlft64tD5S9g0pRusnIdg98bZqN26Hwa7
9kcNK1dM3bAHl3xlQyDLYHnZfj4sAIyR8psVgPaDMcJ5G45sGAqrwTOx6+wOeJR0xJpDXti3ajBK
9hyFlWs3YfWUIejRrzvct17HAc92cBztALc+jdBjkAe2XwjA+c3uaFBvEJYevIg7IbpnQO4jOBSh
svG/euEsts+3QctK5WE1ZhsuBYXLtueXL//vWQBCrhzG7GHN0W7BWdOu/kePR4fc8cGpA5uxds1q
LFswE4M6l8TELUexamgrvFOkKxYfv4Ktk7vC3rk/du/bim5W1ujruR7HTx7BdKdqsPVchZ2LhuIb
65FYtnojVk9zRU+b3pi6fBls+/R6hgtAAE6vGYH6f3sfn0nZKVigAArU74eZR4OQdWoSijewwfhd
F+G3aRDe+7guXFYewJ610+HSvyaW7j6IYbadUMntAILPTId1r24YMHEt9q4fC6t+s7D3zDWcW9of
H37VHOO2nMDuJSPg1K8W5njFIjLU0vLkP8YpACHSbr0WY/LsyZi0YCfO+UXJfcTIwG6+jBaAG9g2
wh39a4zEjltXcPHiNZxZNww1bEZh2YGL2DqhLip8I621aEEULl4Eg2ctxXCrIui/xg/Jd2MREXIH
/jIbiDwxB1VLfY733n8TDZy24FpoAqLDf93yswAwRspvVwCcMHzARty6dxqTatlg3OIZcCo/HKv2
HMR063fwxscFUFJmpsWLFUKBSi0weIs/cO8y5jcvilc/bYP5p4KQEh+BW8dmo0P7aTjmEyDvzZz3
tu7S1d29iemI9T+D/VvmYaTLLGw/cg6BEY98uOsx8nsWgPDrx+Hp2gqVRx40ferctMwBsgx6XkQ4
QgL8sWlSU1QtWwIlixXBV19+iGGrjmHluN4o2mMRbmcAtzYNxHC33pgwqhc69LfC6nNxsn2MRnhw
APxunMecHm/jjY++Nq3nEsUKo2CVdhg5fy7s+/Z+hguAH44smoS+pQZjw7VLOH/GG97nr+BmYCTi
jk5GueYDMXn3Bfhuc8YXjdyxyy8e4Ze3Y7pDWczcchgjHHqgusc+JAbsxoCONVCkeDF0cZ2B9fuu
wO/2TZxaYo/Pmo3D8fBUhJxagvH25TDxcByiWADynxB5ER9f2A31K1SH7fgl2HzsCgLDzcfptABc
wxa30RjcbLHpMwCZafeR7rMUbTsMhUvvhig9dBaO3ohE2PUDmG1XGi5zlmF4z5KwWuaD9LRURN+5
iHMXLsD/gCcqt7SD29zJ6F+hMybvvYQw/eqRhWXKb1gAGCPltywAw+zX4HpGEm6udUBb6zZo8MFA
rDqwH3MGFESdwZtxKywCYXeu4fjxwzjqE4Uk/01wq18Mb35UG247ziFaBjPfQ55o02E6vO6EINxU
AHTwD0d4gA/OnTiIVdN6olnFCug9YReuhujXDC0tU/7yexUA07HoUB/sXzYCLTt5YM/taCQlyO0n
xCPwyjHTgHZ6cX98038UNp8PRcyds5hvWxgjVx/E8vH9ULz3UtxOSsflNfZwde8Lzwn90cq6J5af
jUNGagJCbnjh1KmjmNfva9RyWIcbMikLv3MDXrJdu3BoOXpZ9XymDwEcXjAF9t+Ow8mkOERLWQoP
k7ElLAoxRyblKgAu+LLFGOy5FY47ZzZiikMFzNmWXQBquO3EHSmOJ06fgk+oP3ZPbIFSbzaF5x5v
nFrriC/aTMHJkDj4HZmPMfYVMeUoC8DjxfQhFP3Q3kUsd2qAKm0GYvpGL/jKiyY4SDYQ+i0AN0e0
KdQV49etwNKlKzHbtRuqOnli0WwbdLV2xtQFq7BomgNal/8vRmw8iw0zhqBql6FYuGEzpjo1Q8eh
rji4YRrKN7HBqJ2XcHhOHTTpNAhrDt8wfWDwl35wgwWAMVJ+iwIQk3IOs5vZwanPClxJvYvoKC94
1iqMV55rjDmnL+H0qhGoULoL3Fauw5qpw9HOvi9s5qzClB5VYeU2G5sW9UWnDh0wffMF3Dw5Cy3L
d8OYuftwVd/XwSEIC7qN87tmoVPDkqjfbxwO34yTAVU/1PXrlv13KwCS4PBoBF/ai1F2FVDNZhRW
L1uKZasWYUy/unCcsAR7N45F9572GD1zJZbPc0P78v+G87IDWDqyOz7rsgB+yZm4tKIPBji0xoYD
x+Bg0xsdnCdi+cqlcOxVEXazN+DIktGoXLozXJatwRpPD1nPDhg1fwasu3ZB4wn7EB7/DBaAeF8c
nD0e1kXdcEgKTGjOdj4oNBqxh8agSL1+GLvjPHw3D8K/6w3HjptSALzXYXz/4vJ6OgjX/h1Qcfgh
XD8yHL07NYbTxNVYt3IYOpWSsWPvGZxcYYP3G43BseB4+B2aBfc+JTD+cDyiWQAeM6YSIE9YRBhu
e6+Bi8tynPK5Iy+cYMQkhMD3wCIMatIQ9evVQz1Nt/HYdSMW9+GPRZ1aoHL5cij/bQVUb9Iei7zk
yZXGttClOcqXL49v2zph3slgZFxdj76unlh2/Ia0wGOY2rIpBs05BL+g0JzPG1hYrp8JCwBjpDzp
AhAQEIy7qb44OmM1Niw/gwhkIi0lDcnXNsG2z1zsuxOP9JRo7J1uhW/lvVy+UlsMXXcQR+c5oUGj
AZjnFSTnX8HSnq3Rd8RqnL1xEJMa1Ee9+uOw/06QzPQiEH39ENasmo95RwJxN1p/ulwL/68tLr9f
AdDfg9f7SskAUkLOYImzPL6c7aDNlPXwSYC4g9V9O6J6znawSv2WWLjnHHavmIweE7fjdlwCru/1
xJxZ7th9KxNRXgtg3aKSaftYyXklLvpHIDb0Ng7MtkYFXc/fNYPNfC/cDTyMcWPHw33NKYQ++l34
x8gfUQD0B6YiYwPge3QPlrlsg19mGlKSEk33nZSSjky/3bD1mIOVx67g9pF56OS6BMd9QxFw+QBW
z+iHjUe8sXjGOAyYfwxRGXew070/Gn0r48m3FdF92jbc9A/GtZ3T0cFtFc4FReH2mS1Y5tkfq89E
ITzE8jLlN8YrAObICyU4JAyRETooB5p+E/nE8ZMY5uaB0ePGYuzYnIweCffhrnBxHoZrPrdMy64b
ptjYGITrbr2gEIRHxmSfFq1PSJDpV62iIyMQZvraRygiYmIQGfbrlp8FgDFSnnQB0MFg+/adcBvp
AXeP4fJ+doazswtchntgzJgRcHN1wdhx42Ugj9SNm9x3tLxnQxESHomYmJz3tZSI8OgYRJm2GTKJ
kG1ATIwM9Kb7yP5KXGhoWM4hgV8/8JvzexUA3cZcvnxZ1oszXIa5YcSo77eDo0Z4YJirrrNhOC+X
SZT7y94Oxsq6CTYVoBhZL6ZfEdRd+7Le9JcD9YfRomOyLxcbGW7a1po+kB0hkyfT9WV96q//6fqM
iMjeTv6Kr0z/EQVA//sDF85flLHDDR6j3TFMX1su8trS6L+HueP8uTOIjYo0/fBPjP7ehF5XHnNY
eDRCZf2Fh0fIegg2lYlQ/VXAnHUbLevU9DXLUFm/puvpoaZQhMn6CwvWr6j+cHkeJ8YtAI9Ef4ZS
76dJkyZo2rRprjQxnabx8vIyvaj0RfbornzTabn+ftJhAWCMlCddAHSgWbp06cP3cu6Y3+Pdu3c3
bW90AM39/v7Rw3YWtgO/RX6vAqCTIP0P5DxcN7m3g+bTJAcOHjRtLy1tBy0n+zDIo9vH/F8//9Hb
/L0LgBYXHRuy19n36yl39HUcHR1t8fqWkr1unlyJ/LGwAOREd39pk9P7/LHoG0svZ+n6v3VYABgj
5UkXAH3f6oBg6X1tjt6npev+0fm9CoCuI73uo+vl0ei26I/aDv5c/ogCkJ/1pmPL07jOWACekbAA
MEbKky4Az3J+rwLwZ8gfUQCe5TwzBUCfKF1Yo0Z3M3l7e7MAMIZI7gJw+/Zt06Bm6X1hhOi27+bN
m/kqANeuXTPNNi3djhGirxOdaeenAOj2VLerlm7HKNHX1lNdALSlbNiwwbSQRs7evXuxadMmnDp1
igWA+dNHNzRxcXHYtm0bdu7caXr9W3pfGCH62Ldv3276908VgP3792Pr1q2GX1c6+G/ZssX0OYUf
KwC6HdXtqZHXlTk6vuo4+9QVAL0znQVoo9PdOoy/qbFa2gAwzJ8xOkux9D4wYnR2a2kdaXSboLM5
S9czYvRQgIw3P7qudDtq6XpGjI6vOs7mZ1zRy/xuBUCjd5icnMzk5HHWHcM869FZiaX3gRHzczM0
rqvv83PrSrejlq5n1ORn8Nf87gWAYRiGYZg/PiwADMMwDGPAsAAwDMMwjAHDAsAwDMMwBgwLAMMw
DMMYMCwADMMwDGPAsAAwDMMwjAHDAsAwDMMwBsyvLgCpqammH2nQG2IYhmEY5tmITt7v37//ywqA
NIhSEA8ePDC1CIZhGIZhno3o4K9kLK+ZM6znX3R09N9l9l9Now2CYRiGYZhnJ1lZWdWkALyVM6wT
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERET2jnnvu/wGvZ9pyQ+iYqgAAAABJRU5ErkJggg==</Preview>
  <Form>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</Form>
  <Code><![CDATA[
#-------------------------------------------------------
# NOTE: When new TabPage added place the validation code
# 		in the Test-WizardPage function.
#-------------------------------------------------------
function Test-WizardPage
{
<#
	Add TabPages and place the validation code in this function
#>
	[OutputType([boolean])]
	param([System.Windows.Forms.TabPage]$tabPage)
	
	if($tabPage -eq $tabpageStep1)
	{
		#TODO: Enter Validation Code here for Step 1
		if(-not $global:vcenterConnection.IsConnected)
		{
			return $false
		}
		else
		{
			return $true
		}
		
	}
	elseif ($tabPage -eq $tabpageStep2)
	{
		#TODO: Enter Validation Code here for Step 2
		if($global:vmbuilds -ne $null)
		{
			return $true
		}
		
		return $false
	}
	elseif ($tabPage -eq $tabpageStep3)
	{
		#TODO: Enter Validation Code here for Step 2
		if ($global:vmbuilds -ne $null)
		{
			return $true
		}
		
		return $false
	}
	elseif ($tabPage -eq $tabpageStep4)
	{
		$hostnameComplete = $true
		
		foreach ($node in $treeviewVMListStep4.Nodes)
		{
			if ($node.Text -notin $global:vmWorkgroupDomain.VMName)
			{
				$hostnameComplete = $false
			}
		}
		
		if ($hostnameComplete)
		{
			return $true
		}
		
		return $false
		
	}
	elseif ($tabPage -eq $tabpageStep5)
	{
		if (($global:vmAdminPasswords -ne $null) -and ($global:vmWorkgroupDomain -ne $null))
		{
			return $true
		}
		
		return $false
	}
	elseif ($tabPage -eq $tabpageStep6)
	{
		$datetime = get-date -Format "MMddyyy_mmhhss"
		$string = ""
		if (Get-ChildItem -Path "$logDirectory\build_$datetime.html" -ErrorAction Ignore) { Remove-Item "$logDirectory\build_$datetime.html" -Force}		
		foreach ($vm in $global:vmBuilds)
		{
			#$string = "<b>This is my test page.</b>"
			$string = "
						<p>
							<font size=3><b>VMName: <font color=red>$($vm.VMName)</font></b></font><br>
							<font size=2>
							&nbsp;&nbsp;&nbsp;<b>VM Host:</b> $($vm."VM Host")<br>
							&nbsp;&nbsp;&nbsp;<b>Datacenter:</b> $($vm.Datacenter)<br>
							&nbsp;&nbsp;&nbsp;<b>Datastore:</b> $($vm.Datastore)<br>
							&nbsp;&nbsp;&nbsp;<b>CPU Count:</b> $($vm.NumCPU)<br>
							&nbsp;&nbsp;&nbsp;<b>Memory:</b> $($vm.Memory)<br>
							&nbsp;&nbsp;&nbsp;<b>Template:</b> $($vm.Template)<br>
							&nbsp;&nbsp;&nbsp;<b>Location:</b> $($vm.Location)<br>
					"
			
			$domain = $global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }
			
			$string = $string + "&nbsp;&nbsp;&nbsp;<b>Hostname:</b> $($domain.Hostname)<br>"
			$string = $string + "&nbsp;&nbsp;&nbsp;<b>Domain/Workgroup:</b> $($domain.DomainName)<br>"
			
			$roles = $global:vmRoles | ?{ $_.VMName -eq $vm.VMName }
			
			if ($roles -ne '')
			{
				$string = $string + "&nbsp;&nbsp;&nbsp;<b>Roles:</b><br>"
				
				foreach ($role in $roles.Roles)
				{
					$string = $string + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$role<br>"
				}
			}
			
			$vmKeyTemp = $global:vmOSKeys | ?{ $_.VMName -eq $vm.VMName }
			
			$tzArray = Import-Csv "$ScriptDirectory\reference\timezones.csv"
			
			$tz = ($tzArray | ?{ $_.TimeZoneCode -eq $global:vmTimeZones}).Description
			
			$string = $string + "&nbsp;&nbsp;&nbsp;<b>Time Zone:</b> $tz<br>"
			
			if ($vmKeyTemp.UseKMS -eq 'Yes')
			{
				$string = $string + "&nbsp;&nbsp;&nbsp;<b>License Type:</b> Using KMS<br>"
			}
			elseif ($vmKeyTemp.UseKMS -eq "No")
			{
				$string = $string + "
										&nbsp;&nbsp;&nbsp;<b>License Type:</b> Product Key<br>
										&nbsp;&nbsp;&nbsp;<b>License Key:</b> $($vmKeyTemp.ProductKey)<br>
									"
			}
			
			if ($vm."IP Type" -eq "Static")
			{
				$string = $string + "
										&nbsp;&nbsp;&nbsp;<b>IP Type:</b> $($vm."IP Type")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Network:</b> $($vm.Network)<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>IP Address:</b> $($vm."IP Address")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Subnet Mask:</b> $($vm."Subnet Mask")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Default Gateway:</b> $($vm."Default Gateway")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Primary DNS Server:</b> $($vm."Primary DNS Server")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Secondary DNS Server:</b> $($vm."Secondary DNS Server")<br>
										"
			}
			else
			{
				$string = $string + "&nbsp;&nbsp;&nbsp;<b>IP Type:</b> $($vm."IP Type")<br>"
				$string = $string + "&nbsp;&nbsp;&nbsp;<b>Network:</b> $($vm.Network)<br>"
			}
			
			$disks = $global:vmAdditionalDisks | ?{ $_.VMName -eq $vm.VMName }
			
			
			foreach ($disk in $disks)
			{
				$string = $string + "&nbsp;&nbsp;&nbsp;<b>Additional Disk:</b> $($disk.DriveLetter) - $($disk.DriveSize)GB <br>"				
			}
			
			foreach ($nic in ($global:vmAdditionalNICs | ?{ $_.VMName -eq $vmName }))
			{
				if ($nic."IP Type" -eq "Static")
				{
					$string = $string + "
										&nbsp;&nbsp;&nbsp;<b>Additional NIC:</b> $($nic."IP Type")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Network:</b> $($nic.VLAN)<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>IP Address:</b> $($nic."IP Address")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Subnet Mask:</b> $($nic."Subnet Mask")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Default Gateway:</b> $($nic."Default Gateway")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Primary DNS Server:</b> $($nic."Primary DNS Server")<br>
										"
				}
				else
				{
					$string = $string + "
										&nbsp;&nbsp;&nbsp;<b>Additional NIC:</b> $($nic."IP Type")<br>"					
				}
			}
			
			if ($global:vmLocalUsers -ne '')
			{
				$string = $string + "&nbsp;&nbsp;&nbsp;<b>Additional Users:</b><br>"
				
				foreach ($user in $global:vmLocalUsers)
				{
					$string = $string + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$($user.Username)<br>"
				}
			}
			
			$string = $string + "</font></p>"
			
			ConvertTo-Html -Body $string | Out-File "$logDirectory\build_$datetime.html" -Append
		}
			
		$webbrowserVMBuildSummary.Url = "$logDirectory\build_$datetime.html"
		
		return $true
	}
	#Add more pages here
	
	return $false
}



$buttonFinish_Click={
	#-------------------------------------------------------
	# TODO: Place finalization script here
	#-------------------------------------------------------
	
}

#region Events and Functions
$formVMAutomationTool_Load = {
	
	Update-NavButtons
	
	$timeZones = Import-Csv "$ScriptDirectory\reference\timezones.csv"
	
	foreach ($timeZone in $timeZones)
	{
		$comboboxTimezone.Items.Add($timeZone.Description)
	}
	
	$index = 1
	
	$comboboxTimezone.SelectedIndex = $index
	
	$Path = $env:TEMP
	
	if (Get-Item "$Path\VcenterHistory\vcenterhistory.log")
	{
		$autoCompleteArray = (Import-Csv "$Path\VcenterHistory\vcenterhistory.log").vcenter
		
		$vcenterTextbox.AutoCompleteCustomSource.AddRange($autoCompleteArray)
	}
	
}

function Update-NavButtons
{
	<# 
		.DESCRIPTION
		Validates the current tab and Updates the Next, Prev and Finish buttons.
	#>
	$enabled = Test-WizardPage $tabcontrolWizard.SelectedTab
	$buttonNext.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	$buttonBack.Enabled = $tabcontrolWizard.SelectedIndex -gt 0
	$buttonFinish.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)	
	#Uncomment to Hide Buttons
	#$buttonNext.Visible = ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	#$buttonFinish.Visible = ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)
}

$script:DeselectedIndex = -1
$tabcontrolWizard_Deselecting=[System.Windows.Forms.TabControlCancelEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
	# Store the previous tab index
	$script:DeselectedIndex = $_.TabPageIndex
}

$tabcontrolWizard_Selecting=[System.Windows.Forms.TabControlCancelEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
	# We only validate if we are moving to the Next TabPage. 
	# Users can move back without validating
	if($script:DeselectedIndex -ne -1 -and $script:DeselectedIndex -lt $_.TabPageIndex)
	{
		#Validate each page until we reach the one we want
		for($index = $script:DeselectedIndex; $index -lt $_.TabPageIndex; $index++)
		{
			$_.Cancel = -not (Test-WizardPage $tabcontrolWizard.TabPages[$index])
			
			if($_.Cancel) 
			{
				# Cancel and Return if validation failed.
				return;
			}
		}
	}
	
	Update-NavButtons
}

$buttonBack_Click={
	#Go to the previous tab page
	if($tabcontrolWizard.SelectedIndex -gt 0)
	{
		$tabcontrolWizard.SelectedIndex--
	}
}

$buttonNext_Click={	
	#Go to the next tab page
	if($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	{
		$tabcontrolWizard.SelectedIndex++
	}	
}

#endregion

#------------------------------------------------------
# NOTE: When a Control State changes you should call
# 		Update-NavButtons to trigger validation
#------------------------------------------------------

$radiobuttonOption_CheckedChanged={
	
	if($this.Checked)
	{
		Update-NavButtons
	}
}

$buttonEnterCredentials_Click={
	
	try
	{
		$pictureboxLoading.Visible = $true
		if ($global:vcenterConnection.IsConnected)
		{
			Disconnect-VIServer -Server * -Force -Confirm:$false
			$labelVCenterServerNotConn.Text = "vCenter Server: Not Connected"
			$labelUsernameNotConnected.Text = "Username: Not Connected"
			$labelConnectionStatusNotC.Text = "Connection Status: Not Connected"
		}
		$global:vcCredential = $null
		$global:vcenterConnection = $null
		$global:vcCredential = Get-Credential -ErrorAction Stop
		Connect-VIServer -Server $vcenterTextbox.Text -Credential $global:vcCredential -ErrorAction Stop
		$global:vcenterConnection = Get-VIServer -Server $vcenterTextbox.Text -ErrorAction Stop
		$buttonEnterCredentials.Enabled = $false
		$pictureboxLoading.Visible = $false
	}
	catch
	{
		"Unable to connect."
	}
	
	If ($global:vcenterConnection.IsConnected)
	{
		$labelVCenterServerNotConn.Text = "vCenter Server: $($vcenterTextbox.Text)"
		$labelUsernameNotConnected.Text = "Username: $($global:vcenterConnection.User)"
		$labelConnectionStatusNotC.Text = "Connection Status: Connected"
		$labelOKStep1.Visible = $true
		
		$Path = $env:TEMP
		
		if (-not (Get-Item "$Path\VcenterHistory" -ErrorAction SilentlyContinue))
		{
			New-Item -Name VcenterHistory -Path $Path -ItemType Directory
		}
		
		if (Get-Item "$Path\VcenterHistory\vcenterhistory.log" -ErrorAction SilentlyContinue)
		{
			$vcHistoryArray = Import-Csv "$Path\VcenterHistory\vcenterhistory.log"
			
			$vcHistoryArray = $vcHistoryArray | ?{ $_.vcenter -ne "$($vcenterTextbox.Text)" }
			
			$object = New-Object PSObject
			
			$object | Add-Member -MemberType NoteProperty -Name vcenter -Value $vcenterTextbox.Text
			
			$vcHistoryArray = [System.Array]$vcHistoryArray + $object
			
			$vcHistoryArray | Export-CSV "$Path\VcenterHistory\vcenterhistory.log" -NoTypeInformation
		}
		else
		{
			$vcHistoryArray = @()
			
			$object = New-Object PSObject
			
			$object | Add-Member -MemberType NoteProperty -Name vcenter -Value $vcenterTextbox.Text
			
			$vcHistoryArray = [System.Array]$vcHistoryArray + $object
			
			$vcHistoryArray | Export-CSV "$Path\VcenterHistory\vcenterhistory.log" -NoTypeInformation
		}
		
		Update-NavButtons
		
	}
	else
	{
		[System.Windows.Forms.MessageBox]::Show("Unable to connect to $($vcenterTextbox.Text). Please try logging on again.")
		$labelOKStep1.Visible = $false
		Update-NavButtons
	}
}

#region Control Helper Functions
function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]
		$DisplayMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}

function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}

function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	[ValidateNotNull()]
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterWMIProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)	
}

function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}


function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}


function Get-CheckedNode
{
<#
	.SYNOPSIS
		This function collects a list of checked nodes in a TreeView

	.DESCRIPTION
		This function collects a list of checked nodes in a TreeView

	.PARAMETER  $NodeCollection
		The collection of nodes to search

	.PARAMETER  $CheckedNodes
		The ArrayList that will contain the all the checked items
	
	.EXAMPLE
		$CheckedNodes = New-Object System.Collections.ArrayList
		Get-CheckedNode $treeview1.Nodes $CheckedNodes
		foreach($node in $CheckedNodes)
		{	
			Write-Host $node.Text
		}
#>
	param (
			[ValidateNotNull()]
			[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
			[ValidateNotNull()]
			[System.Collections.ArrayList]$CheckedNodes
	)
	
	foreach ($Node in $NodeCollection)
	{
		if ($Node.Checked)
		{
			[void]$CheckedNodes.Add($Node)
		}
		Get-CheckedNode $Node.Nodes $CheckedNodes
	}
}

#endregion


$vcenterTextbox_TextChanged={
	#TODO: Place custom script here
	if ($vcenterTextbox.Text -ne "")
	{
		$buttonEnterCredentials.Enabled = $true
	}
	else
	{
		$buttonEnterCredentials.Enabled = $false
	}
}

$buttonAddVirtualMachine_Click={
	#TODO: Place custom script here
	if (Show-AddVMForm_psf -eq 'OK')
	{
	}
}


$buttonOpenRolesSelection_Click={
	
	$global:vmSelectedStep4 | Out-File "$logDirectory\vmselectedstep4.log" -Append
	
	if ((Show-WindowsRoles_psf -VMName $global:vmSelectedStep4) -eq 'OK')
	{
		#$selectedRoles = $global:vmRoles | ?{ $_.VMName -eq $vm.VMName } | Select -ExpandProperty Roles		
	}
	
}

$buttonBuildAndConfigureVMs_Click={
	
	#$progressbarVMBuild.Visible = $true
	$buttonBuildAndConfigureVMs.Enabled = $false
	
	try
	{
		#$progressbarVMBuild.Maximum = ($global:vmBuilds).Count
		#$progressbarVMBuild.Value = 0
		#$progressbarVMBuild.Step = 1
		
		foreach ($vm in $global:vmbuilds)
		{
			while (@(Get-Job | ?{ $_.State -eq "Running" }).Count -ge 5)
			{
				# We're going to iterate through the running jobs and kill any that have been running for X minutes.
				# This block is ignored if there are less than 5 total builds. We'll handle that part later.
				
				foreach ($job in (Get-Job))
				{
					$runTime = ((Get-Date) - $job.PSBeginTime).Minutes
					if ($runtime -gt 30)
					{
						try
						{
							Stop-Job $job.Name -Confirm:$false
						}
						catch
						{
							"Unable to stop job."
						}
					}
				}
				
				Write-Host "Waiting for open thread...($NumJobs Maximum)"
				Start-Sleep -Seconds 3
			}
			
			# Let's combine all the OS specific data we gathered for the VM into one variable.
			$osConfigObject = New-Object PSObject
			
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "VMName" -Value $vm.VMName
			
			# Add the data for the domain/workgroup
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "Hostname" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).Hostname
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "DomainName" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).DomainName
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "DomainUser" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).DomainUser
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "DomainPassword" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).DomainPassword
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "IsWorkgroup" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).IsWorkgroup
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "LocalAdminPassword" -Value $global:vmAdminPasswords
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "Roles" -Value ($global:vmRoles | ?{ $_.VMName -eq $vm.VMName }).Roles
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "Features" -Value ($global:vmFeatures | ?{ $_.VMName -eq $vm.VMName }).Features
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "AdminPassword" -Value ($global:vmAdminPasswords | ?{ $_.VMName -eq $vm.VMName }).Password
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "LocalUsers" -Value $global:vmLocalUsers
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "Disks" -Value ($global:vmAdditionalDisks | ?{ $_.VMName -eq $vm.VMName })
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "NICs" -Value ($global:vmAdditionalNICs | ?{ $_.VMName -eq $vm.VMName })
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "OSKeys" -Value ($global:vmOSKeys | ?{ $_.VMName -eq $vm.VMName })
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "TimeZone" -Value $global:vmTimeZones
			
			if ($global:vmAdminAccount -ne "")
			{
				$osConfigObject | Add-Member -MemberType NoteProperty -Name "AdminAccount" -Value $global:vmAdminAccount
			}
			else
			{
				$osConfigObject | Add-Member -MemberType NoteProperty -Name "AdminAccount" -Value ""
			}
			
			$global:vmFullOSConfig = [System.Array]$global:vmFullOSConfig + $osConfigObject
			
			$osConfigObject | Out-File "$logDirectory\osobject.log" -Append
			
			# Define and start the build job for the VM.
			
			Start-Job -Name $vm.VMName -ArgumentList $vcenterTextbox.Text, $global:vcCredential, $vm, $ScriptDirectory, $osConfigObject, $logDirectory -ScriptBlock {
				. "$($args[3])\Functions\Get-FolderbyPath.ps1"
				
				Import-Module VMware.PowerCLI
				
				Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -ParticipateInCeip $false -DisplayDeprecationWarnings $false -Confirm:$false -ErrorAction Stop
				
				Connect-VIServer -Server $args[0] -Credential $args[1] -ErrorAction Stop
				
				if ($args[4].IsWorkgroup -eq 'No')
				{
					
					$password = ConvertTo-SecureString "$($args[4].DomainPassword)" -AsPlainText -Force
					$domainCredential = New-Object System.Management.Automation.PSCredential ("$($args[4].DomainUser)", $password)
					
					$osSpec = New-OSCustomizationSpec -OSType "Windows" -Name $args[2].VMName -Type NonPersistent `
													  -FullName "Administrator" `
													  -AdminPassword "$($args[4].LocalAdminPassword)" `
													  -AutoLogonCount 1 `
													  -OrgName "Org1" `
													  -Description "Temporary Spec for $($args[2].VMName)" `
													  -ChangeSid `
													  -Domain "$($args[4].DomainName)" `
													  -DomainCredentials $domainCredential `
													  -NamingScheme fixed `
													  -NamingPrefix $args[4].Hostname `
													  -TimeZone $args[4].TimeZone `
													  -ErrorAction Stop
					
				}
				else
				{
					
					$osSpec = New-OSCustomizationSpec -OSType "Windows" -Name $args[2].VMName -Type NonPersistent `
													  -FullName "Administrator" `
													  -AdminPassword "$($args[4].LocalAdminPassword)" `
													  -AutoLogonCount 1 `
													  -OrgName "Org1" `
													  -Description "Temporary Spec for $($args[2].VMName)" `
													  -ChangeSid `
													  -Workgroup "$($args[4].DomainName)" `
													  -NamingScheme fixed `
													  -NamingPrefix $args[4].Hostname `
													  -TimeZone $args[4].TimeZone `
													  -ErrorAction Stop
					
				}
				
				
				if ($args[2].("IP Type") -eq "DHCP")
				{
					
					Get-OSCustomizationNicMapping -OSCustomizationSpec $osSpec | Set-OSCustomizationNicMapping -IpMode UseDHCP -ErrorAction Stop					
				}
				else
				{
					Get-OSCustomizationNicMapping -OSCustomizationSpec $osSpec | Set-OSCustomizationNicMapping -IpMode UseStaticIP `
																											   -IpAddress $args[2].("IP Address") `
																											   -SubnetMask $args[2].("Subnet Mask") `
																											   -DefaultGateway $args[2].("Default Gateway") `
																											   -Dns $args[2].("Primary DNS Server"), $args[2].("Secondary DNS Server") `
																											   -ErrorAction Stop				
				}
				
				$vmTemplate = Get-Template -Name $args[2].Template
				
				$destFolder = Get-FolderbyPath -Path "$($args[2].Location)" -Separator "\"
				
				# Now, let's actually build the VM with the configuration spec we defined above.
				$invoke = New-VM -VMHost $args[2].("VM Host") -Name $args[2].VMName -Datastore $args[2].Datastore -Template $vmTemplate -Location $destFolder -OSCustomizationSpec $osSpec -ErrorAction Stop
				
				# Now that the VM is built, we need to modify the network adapter and assign it to the specified vSwitch before powering it on.
				Get-VM -Name $args[2].VMName | Set-VM -MemoryGB $args[2].Memory -NumCpu $args[2].NumCPU -Confirm:$false -ErrorAction Stop
				
				Get-NetworkAdapter -VM $args[2].VMName | Set-NetworkAdapter -NetworkName $args[2].Network -StartConnected $true -Confirm:$false -ErrorAction Stop
				
				Start-VM -VM $args[2].VMName -RunAsync
				
				# Now we wait for the VM to power up and auto log in before continuing.
				$vmstatus = (Get-VM -Name "$($args[2].VMName)").extensionData.Guest.interactiveGuestOperationsReady
				
				do
				{
					Start-Sleep -Seconds 1
					$vmstatus = (Get-VM -Name "$($args[2].VMName)").extensionData.Guest.interactiveGuestOperationsReady
					Write-Host $vmStatus -ForegroundColor Red
				}
				while ($vmStatus -ne $True)
				
				Write-Host $vmStatus -ForegroundColor Green
				
				#Get-VM $args[2].VMName -ErrorAction Stop | Restart-VMGuest -Confirm:$false -ErrorAction Stop
				
				# Now that our VM is built, let's finish customizing it. We'll start by creating the credential object to run Invoke-VMScript.
				
				$vmAdminPass = $args[4].LocalAdminPassword
				
				$localAdmin = "Administrator"
				$password = ConvertTo-SecureString $args[4].LocalAdminPassword -AsPlainText -Force
				$localAdminCred = New-Object System.Management.Automation.PSCredential ($localAdmin, $password)
				
				# Declare the array that will house each command to run.
				
				$customizeOSScripts = [System.Collections.ArrayList]@()
				
				# Now, build the commands to add the additional user accounts to the new VMs. Add the commands to the command array.
				
				foreach ($user in $args[4].LocalUsers)
				{
					if ($user.Administrator -eq "Yes")
					{
						$userCreate = New-Object PSObject
						$userCreate | Add-Member -MemberType NoteProperty -Name "Command" -Value "NET USER $($user.Username) $($user.Password) /add"
						
						$userAdmin = New-Object PSObject
						$userAdmin | Add-Member -MemberType NoteProperty -Name "Command" -Value "NET LOCALGROUP Administrators $($user.Username) /add"
						
						$date = Get-Date -Format "M-d-yyyy"
						$desc = "Admin user created on $date."
						$userTmp = $user.Username
						$userDescription = New-Object PSObject
						$userDescription | Add-Member -MemberType NoteProperty -Name "Command" -Value "Set-LocalUser -Name $userTmp -Description ""$desc"""
						
						$customizeOSScripts = [System.Array]$customizeOSScripts + $userCreate
						$customizeOSScripts = [System.Array]$customizeOSScripts + $userAdmin
						$customizeOSScripts = [System.Array]$customizeOSScripts + $userDescription
					}
					else
					{
						$userCreate = New-Object PSObject
						$userCreate | Add-Member -MemberType NoteProperty -Name "Command" -Value "NET USER $($user.Username) $($user.Password) /add"
						
						$date = Get-Date -Format "M-d-yyyy"
						$desc = "Standard user created on $date."
						$userTmp = $user.Username
						$userDescription = New-Object PSObject
						$userDescription | Add-Member -MemberType NoteProperty -Name "Command" -Value "Set-LocalUser -Name $userTmp -Description ""$desc"""
						
						$customizeOSScripts = [System.Array]$customizeOSScripts + $userCreate
						$customizeOSScripts = [System.Array]$customizeOSScripts + $userDescription
					}
				}
				
				# Build the command to install the selected Roles.
				
				foreach ($role in $args[4].Roles)
				{
					$object = New-Object PSObject
					$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Install-WindowsFeature -Name $role -IncludeManagementTools"
					$customizeOSScripts = [System.Array]$customizeOSScripts + $object
				}
				
				# Now, we add, format and partition additional specified disks.
				
				foreach ($disk in $args[4].Disks)
				{
					$driveLetter = $disk.DriveLetter
					$driveLabel = "Drive-$($disk.DriveLetter)"
					$driveSize = [int]($disk.DriveSize)
					$confirm = '$false'
					New-HardDisk -VM $args[2].VMName -CapacityGB $driveSize -Persistence persistent -Confirm:$false -ErrorAction Stop
					$object = New-Object PSObject
					$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-Disk | Where-Object PartitionStyle -eq ""RAW"" | Initialize-Disk -PartitionStyle GPT -PassThru | New-Partition -DriveLetter $driveLetter -UseMaximumSize | Format-Volume -FileSystem NTFS -NewFileSystemLabel $driveLabel -Confirm:$confirm"
					#$customizeOSScripts = [System.Array]$customizeOSScripts + $object
					Invoke-VMScript -VM $args[2].VMName -GuestCredential $localAdminCred -ScriptText "$($object.Command)" -ErrorAction Stop
				}
				
				# Let's customize additional network adapters.
				
				foreach ($nic in $args[4].NICs)
				{
					$newNic = New-NetworkAdapter -VM $nic.VMName -NetworkName $nic.VLAN -StartConnected -Type Vmxnet3
					
					$macAddress = "$($newNic.MacAddress)" -replace ":", "-"
					
					if ($nic.("IP Type") -eq "Static")
					{
						$newIP = $nic.("IP Address")
						$newMask = $nic.("Subnet Mask")
						$newGateway = $nic.("Default Gateway")
						$newDNSServer = $nic.("Primary DNS Server")
						
						# Determine the CIDR notation for subnet mask. We'll need this later.'
						$subnetMasks = Import-Csv "$($args[3])\reference\cidrlist.csv"
						
						$cidrNotation = ($subnetMasks | ?{ $_.SubnetMask -eq $newMask }).CIDR
						
						if ($newGateway -ne '')
						{
							$object = New-Object PSObject
							
							if ($newDNSServer -ne '')
							{
								$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$macAddress"" | New-NetIPAddress -IPAddress $newIP -DefaultGateway $newGateway -PrefixLength $cidrNotation | Set-DNSClientServerAddress -ServerAddresses $newDNSServer"
							}
							else
							{
								$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$macAddress"" | New-NetIPAddress -IPAddress $newIP -DefaultGateway $newGateway -PrefixLength $cidrNotation"
							}
							
							$customizeOSScripts = [System.Array]$customizeOSScripts + $object
						}
						else
						{
							$object = New-Object PSObject
							
							if ($newDNSServer -ne '')
							{
								$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$macAddress"" | New-NetIPAddress -IPAddress $newIP -PrefixLength $cidrNotation | Set-DNSClientServerAddress -ServerAddresses $newDNSServer"
							}
							else
							{
								$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$macAddress"" | New-NetIPAddress -IPAddress $newIP -PrefixLength $cidrNotation"
							}
							
							$customizeOSScripts = [System.Array]$customizeOSScripts + $object
						}
						
					}
				}
				
				# Let's set the product key and activate Windows.
				
				foreach ($key in $args[4].OSKeys)
				{
					if ($key.UseKMS -eq "Yes")
					{
						[string]$kmsServerCmd = "cscript C:\Windows\System32\slmgr.vbs /skms $($key.KMSServer):$($key.KMSServerPort)"
						
						$object = New-Object PSObject
						$object | Add-Member -MemberType NoteProperty -Name "Command" -Value $kmsServerCmd
						
						$customizeOSScripts = [System.Array]$customizeOSScripts + $object
					}
					elseif ($key.UseKMS -eq "No")
					{
						[string]$productKeyCmd = "cscript C:\Windows\System32\slmgr.vbs /ipk $($key.ProductKey)"
						[string]$activationCmd = "cscript C:\Windows\System32\slmgr.vbs /ato"
						
						$object = New-Object PSObject
						$object | Add-Member -MemberType NoteProperty -Name "Command" -Value $productKeyCmd
						
						$customizeOSScripts = [System.Array]$customizeOSScripts + $object
						
						Clear-Variable object
						
						$object = New-Object PSObject
						$object | Add-Member -MemberType NoteProperty -Name "Command" -Value $activationCmd
						
						$customizeOSScripts = [System.Array]$customizeOSScripts + $object
					}
				}
				
				if ($args[4].AdminAccount -ne "")
				{
					$newAdminCommand = "Get-LocalUser Administrator | Rename-LocalUser -NewName $($args[4].AdminAccount)"
					
					$object = New-Object PSObject
					$object | Add-Member -MemberType NoteProperty -Name "Command" -Value $newAdminCommand
					
					$customizeOSScripts = [System.Array]$customizeOSScripts + $object
				}
				
				# Let's output the commands to verify.
				$customizeOSScripts | Out-File "$($args[5])\scriptsarray_$($args[2].VMName).log"
				
				# Now, we run all the customization commands.
				
				foreach ($script in $customizeOSScripts)
				{
					$script.Command | Out-File "$($args[5])\$($args[2].VMName)_scriptcommand.log" -Append
					Invoke-VMScript -VM $args[2].VMName -GuestCredential $localAdminCred -ScriptText "$($script.Command)" -ErrorAction Ignore | Out-File "$($args[5])\$($args[2].VMName)_scriptcommand.log" -Append
					
				}
				
				Disconnect-VIServer -Server $args[0] -Force -Confirm:$false -ErrorAction Stop
			
				
			} # End job block
			
		}
		
		# Let's wait for all the build jobs to finish. We'll also kill any jobs that have been running for longer than X minutes.
		# For each job returned that has not completed, we'll check to see if it has been running longer than X minutes. If it has, kill the job.
		
		do
		{
			Start-Sleep -Milliseconds 1000
			
			foreach ($job in (Get-Job))
			{
				$runTime = ((Get-Date) - $job.PSBeginTime).Minutes
				if ($runtime -gt 30)
				{
					try
					{
						Stop-Job $job.Name -Confirm:$false
					}
					catch
					{
						"Unable to stop job."
					}
				}
			}
			
		}
		while ((Get-Job -State Running).Count -gt 0)
		
		$datetime = Get-Date -Format "MMddyyyy_HH:mm"
		
		# Get the completed jobs.
		$jobs = Get-Job | ?{ $_.State -eq "Completed" }
		
		# Get the failed jobs.
		$failedJobs = Get-Job | ?{ $_.State -ne "Completed" }
		
		# Output the job results to a separate log file for each VM.		
		$data = @()
		
		foreach ($job in $jobs)
		{
			$data += Get-Job $job.Name | Receive-Job
			Remove-Job $job
			
			Get-VM $job.Name | Restart-VMGuest -Confirm:$false
		}
		
		$failedData = @()
		
		foreach ($failedJob in $failedJobs)
		{
			$failedData += Get-Job $failedJob.Name | Receive-Job
			Remove-Job $failedJob
			
			Get-VM $job.VMName | Stop-VM -RunAsync -Confirm:$false
			
			do { Start-Sleep -Milliseconds 500 }
			while ((Get-VM $job.Name).PowerState -eq "PoweredOff")
			
			Remove-VM $job.Name -RunAsync -DeletePermanently -Confirm:$false
		}
		
		$data | Out-File "$logDirectory\jobtext.log" -Append
		
		if (-not $failedData)
		{
			[System.Windows.Forms.MessageBox]::Show("All requested virtual machines are available.")
		}
		else
		{
			$failedData | Out-File "$logDirectory\failedjobtext.log" -Append
			[System.Windows.Forms.MessageBox]::Show("The following virtual machine builds failed: $failedData")
		}
		
	}
	catch
	{
		[System.Windows.Forms.MessageBox]::Show("Unable to build virtual machines.")
	}
	
	$datetime = Get-Date -Format "MMddyyyy_HH:mm"
	$archiveName = "vmbuild__$datetime.zip"
	Compress-Archive -Path $logDirectory -DestinationPath "$archiveName"
}

$datagridviewVMQueue_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	$buttonDeleteVMFromQueue.Enabled = $true	
	
}

$buttonDeleteVMFromQueue_Click={
	
	$global:vmBuilds = $global:vmBuilds | ?{ $_.VMName -ne $listviewVMsStep2.SelectedItems.Text }
	
	$listviewVMsStep2.Clear()
	
	foreach ($item in $global:vmBuilds)
	{
		$listviewVMsStep2.Items.Add($item.VMName)
	}
	
	# Update the treeview control for Step 3
	
	$treeviewVMListStep3.BeginUpdate()
	$treeviewVMListStep3.Nodes.Clear()
	
	foreach ($vm in $global:vmbuilds)
	{
		$newNode = $treeviewVMListStep3.Nodes.Add($vm.VMName)
	}
	
	$treeviewVMListStep3.EndUpdate()
	
	# Update the treeview control for step 4.
	
	$treeviewVMListStep4.BeginUpdate()
	$treeviewVMListStep4.Nodes.Clear()
	
	foreach ($vm in $global:vmbuilds)
	{
		$newNode = $treeviewVMListStep4.Nodes.Add($vm.VMName)
	}
	
	# Determine if we should be resetting all the variables.
	if ($global:vmBuilds -eq $null)
	{
		$vmFeatures = [System.Collections.ArrayList]@()
		$vmRoles = [System.Collections.ArrayList]@()
		$vmDomainInfo = [System.Collections.ArrayList]@()
		$vmOS = [System.Collections.ArrayList]@()
		$vmAdminPasswords = [System.Collections.ArrayList]@()
		$vmLocalUsers = [System.Collections.ArrayList]@()
		$vmWorkgroupDomain = [System.Collections.ArrayList]@()
		$vmFullOSConfig = [System.Collections.ArrayList]@()
		$vmTimeZones = [System.Collections.ArrayList]@()
		$vmAdditionalDisks = [System.Collections.ArrayList]@()
		$vmAdditionalNICs = [System.Collections.ArrayList]@()
		$vmOSKeys = [System.Collections.ArrayList]@()
		$vmAdminAccount = $null
		
		foreach ($item in (Get-ChildItem -Path "$logDirectory"))
		{
			$item | Remove-Item -Force -Recurse
		}
	}
	
	$treeviewVMListStep4.EndUpdate()
	
	Update-NavButtons
	
	
}

$treeviewVMListStep4_AfterSelect=[System.Windows.Forms.TreeViewEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.TreeViewEventArgs]
	
	$global:vmSelectedStep4 = $treeviewVMListStep4.SelectedNode.Text
	
	$labelVMNameStep4.Text = "VM: $($global:vmSelectedStep4)"
	
	if ($treeviewVMListStep4.SelectedNode.Text -in $global:vmWorkgroupDomain.VMName)
	{
		$labelOK1.Visible = $true		
	}
	else
	{
		$labelOK1.Visible = $false
	}
	
	if ($treeviewVMListStep4.SelectedNode.Text -in $global:vmOSKeys.VMName)
	{
		$vmTemp = $global:vmOSKeys | ?{ $_.VMName -eq $treeviewVMListStep4.SelectedNode.Text }
		
		if ($vmTemp.UseKMS -eq "Yes")
		{
			$radiobuttonKMSKey.Checked = $true
			$buttonProductKey.Text = "KMS Key"
		}
		elseif ($vmTemp.UseKMS -eq "No")
		{
			$radiobuttonRetailKey.Checked = $true
			$buttonProductKey.Text = "Retail Key"
		}
	}
	else
	{
		$radiobuttonKMSKey.Checked = $false
		$radiobuttonRetailKey.Checked = $false
		$buttonProductKey.Text = "Product Key"
		$buttonProductKey.Enabled = $false
	}
	
}

$radiobuttonDomain_CheckedChanged={
	
	if ($radiobuttonDomain.Checked) { $buttonDomainWorkgroup.Enabled = $true; $buttonSetWorkgroup.Enabled = $false }
	elseif ($radiobuttonWorkgroup.Checked) { $buttonDomainWorkgroup.Enabled = $false; $buttonSetWorkgroup.Enabled = $true }
	
}

$buttonOpenFeatureSelection_Click={
	
	if ((Show-WindowsFeatures_psf -VMName $global:vmSelectedStep4) -eq 'OK')
	{
	}
}

$buttonAddLocalUsers_Click={
	
	if ((Show-AddLocalUsers_psf -VMName $global:vmSelectedStep4) -eq 'OK'){}
	
}

$comboboxTimezone_SelectedIndexChanged={
	
	$global:vmTimeZones = (Import-Csv "$ScriptDirectory\reference\timezones.csv" | ? { $_.Description -eq $comboboxTimezone.Text }).TimeZoneCode
	
	$global:vmTimeZones | Out-File "$logDirectory\tz.log"
		
}

$treeviewVMListStep3_AfterSelect=[System.Windows.Forms.TreeViewEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TreeViewEventArgs]
				
	$global:vmSelectedStep3 = $treeviewVMListStep3.SelectedNode.Text
	
	$labelVMStep3.Text = "VM: $($global:vmSelectedStep3)"
	
}

$listviewVMsStep2_SelectedIndexChanged={
				
	$rowTmp = $global:vmBuilds | ?{ $_.VMName -eq $listviewVMsStep2.SelectedItems.Text }
	
	$labelStep2CPU.Text = "CPU: $($rowTmp.NumCPU)"
	$labelStep2Memory.Text = "Memory: $($rowTmp.Memory)"
	$labelStep2Network.Text = "Network: $($rowTmp.Network)"
	$labelStep2VMName.Text = "VM Name: $($rowTmp.VMName)"
	
}
$buttonVDiskAdd_Click={
	
	if ((Show-AddVirtualDisk_psf -VMName $treeviewVMListStep3.SelectedNode.Text) -eq 'OK')
	{ }
	
}

$buttonVNICAdd_Click={
	
	if ((Show-AddNicCard_psf -VMName $treeviewVMListStep3.SelectedNode.Text) -eq 'OK')
	{ }
	
}



$maskedtextboxHostname_Enter={
	#TODO: Place custom script here
	$maskedtextboxHostname.Select(0,0)
}

$buttonSetHostname_Click={
	
	if ((Show-SetHostname_psf -VMName $treeviewVMListStep4.SelectedNode.Text) -eq 'OK')
	{ }
}

$buttonDomainWorkgroup_Click={
	
	if ((Show-WorkgroupDomainJoin_psf) -eq 'OK')
	{ }	
}

$buttonSet_Click={
	
	if ((Show-GetAdminPassword_psf) -eq 'OK')
	{ }
}

$buttonAdminRename_Click={
	#TODO: Place custom script here
	if ((Show-RenameAdminAccount_psf) -eq 'OK')
	{ }
}

$buttonProductKey_Click={
	
	if ($radiobuttonRetailKey.Checked)
	{
		if ((Show-EnterRetailKey_psf -VMName $treeviewVMListStep4.SelectedNode.Text) -eq 'OK')
		{ }
	}
	elseif ($radiobuttonKMSKey.Checked)
	{
		if ((Show-EnterKMSKey_psf -VMName $treeviewVMListStep4.SelectedNode.Text) -eq 'OK')
		{ }
	}
	
}

$radiobuttonRetailKey_CheckedChanged={
	
	if ($radiobuttonRetailKey.Checked)
	{
		$buttonProductKey.Text = "Retail Key"
		$buttonProductKey.Enabled = $true
	}
	
}

$radiobuttonKMSKey_CheckedChanged={
	
	if ($radiobuttonKMSKey.Checked)
	{
		$buttonProductKey.Text = "KMS Key"
		$buttonProductKey.Enabled = $true
	}
}

]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>