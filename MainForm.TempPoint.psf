<File version="3.1">
  <FileID>4dee3778-5d7e-48ff-b7fd-c671faf8b7f0</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAIJ1SURBVHhe7f0HdBxHmuWL9+6Zef9z5r2zb2dn
9830TM9MT0+P1C1PiZShvERShiIpSqL3DvTeG5AEvffeEyBAOMIQ3nvvvXeFQqHgvaG9/y+yALJI
gRKpltSU6v547gGQlRkRGRkR343IrORvCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgj51ZIlMv7t3/6t8f/8n/9jHDNmjHHixInGSZMmiyZRFEVRFPXUyhSrJ4t+
97t/Mf7N3/yNUcV0UYkK8N/Jf/tv/63pf/2v/4VPhgzB3Hnz4eDsjozcchSW1aCgtJqiKIqiqKdW
RhSUVCEqNgFr1q3Dp59+CpnM47//9/9+syfMPxoxAMZPPvkEO3ftRXxGESLSShCZXoaojDJEUhRF
URT11Ko3VkeklyKzqArHjp/C0KFD8Td/8zdtPWH+0ahlf6vZc5EgwT8yoxzhYgDCUospiqIo6gcr
PL0EUZkSoDLLe37+VDKl/3DsUgHx4WD5U0nlZZ63Kot52X46PXju4WmlyC6uxvr11vjtb3/7/QZg
9KhRxsv2LqaTkETCVSIURVEU9QMVJQExIDYXjj7xsL8eCwevn04qfSe/BAQn5CNS8o1QZZBY5h2Z
hmuBcT+LfCSv3vipyhAkZXHyTfhZzt3RNx6Bcblavqb8xRjEpmDatOnfbwAmTppkzC7QITqrQjsB
iqIoivqhUrNSv+gcXHYJx0WnEFxyCcUl559Qkv5Fp2DYukUgMD5fWxL3DE2Ck3cYrvlFiCJ7fv74
cutJ29knDNfDkrTZeGBcHuyuReDCz3jul13D4ReTc+92gKGuDbNnz/l+AzB58mRjeVUDYrJ1CFfu
iaIoiqJ+oGJzdLjsHoVLEgDTi6qQWliFlAL9TyaVflpBJU5e9oNLQDJiZDJ7ycUX0akFyCytQ0ZJ
rajmp1FprZZHVEq+lmesxFEnv0SctvNHWqGpbA+U9aHfzfXgdqm3h7b3fvbA35K+quPzV4NxxTNG
q/tIMWC66mZYWc1+PANQVlmnFVxdPLWMQFEURVE/RHHKALhF4qpHFJLz9QhMyEdwYsFPJrXcrgLm
BQmCLv5JmgG47OqHpNwKCYiVMisu71Ox2ZVIKjQiuahWVNOHauXzGm2/vo7vlcojKaccl6/5mQyA
bwIuOIZoZTKde+E9Bd0rdyHC08oQnaVW31X6FQhNLkZIknoWr8K0PVPF5HLZJscmmI4JMktLKUDS
T5J87KW+7TyitbpXKzCPbwAmiQHQ1yEhr0qruF7F5ugRlyvKfnBbfG6lViHxeQbT72bHaPtkyz7q
M6mUhz8zfV4p6Zo+f/izvqQq1KS+P/+xdC8f7W+dlLGqz/N7UsXmSDqqPh5QlXah+tq/b0m5VN3n
6X/yeqAoivpLlFhgwBWPGDh4RssstQohyUUISyn+yRQq6acVGnBegq5bUIrEMj3s3AKQlKeT3w0y
ZppilrnUOOwTmYGte89h+bq9WGV94FtS2212n8H1sFRt/77SUVJ5JOaWw849EAn5VXANSMZFp1Ct
TA+fe2hKkXafPiS5EKftvbB07W4sWrEdG7Yeg2dICvxjsrF13zksWrkdi1ftxOEzLmIi8uSYEs0g
hKp0JE3t9x7DkCL5XHGP1J4HSJT8lSGpNLY8ngFQLxEo09cjWZxQvAR8pYR8I6Lj43E9MAoh6VVI
lIClDEJ8UgLcQtMQmZoGTw9fuIXna5/dOy5P0khNhaenFzwi8xCTV61djPufVyM+Ix++/n7wjC5G
khS297NHS/LONyChz89+RKlzVPmoi5lXgqCgYLj5JyMi1/jAOTyJVFrhYYFwcnaGvZMbrrq6w8FR
fhen6B1fLp8/5vkXVCIyMQnXvWMQmqXK2Nd+FEVRf32lFNdIMIrDVTEAacVG7cn0iHT1pPxPI5V+
uuSjZt0eIekSy6ph7xGE5HzTDF+N7Q8rvawROw5exLbtB+Ds7AYHB5dvSW3fteswtuw5g7Syhj7T
UVJ5KLOh5VlkxLWgVO3+fHpRtRawVfA2l1o18IrIwJIVWxAVFYeI8BicPWcvAX8HVm08hD37TiBc
tsXEJGL1uh244hkhxkonBqI3DWUmSjQpE5Am+di7R+GqdzxSJH8Vx0wGwOrxDEC5GICUohotIGkq
qEViYgyc3H1wPbZcPqsWZyEnE+ACx6B0MQCJcDh9ARed/RGSJZ9JoFPBLrm4AiEBHjh7+DiuBGQg
Jr9GcySmdA0S8CWQxUbC9qKdNI5whOfK5715amn0/i6Sk0gU9xibliKGIhzBKh+ztBLV51rAfvAY
LZ0HPutr3/v7qLInFugRk5qs5ROSJRczX4eopGyEJhYhVu3bk/a30zFtf2R5ZHtMSiaCY5LhFxYA
u3NX4ByYgIDYTIRn6B9xjKhnu+kzqbeiSoRHB8PB1hsBmTWacfrWMRRFUU+BUktq4eAVB8frMVpg
jpQAHSWBui9FSzCMyaz4Tql9+jq2Vyr9zBKjNuv2CE3XgqDD9WDT/XIJzirGPKysiias2XwIdlcc
UVdnhE5XgYqKMlSUi+Sn+ru21ggXF3esWL8XWeWNfaajpPJIkZih8lTmx00zAGHIkDKFpfaYH2WC
NKlzrkBQfD5WbtiLC5ecoLh58yaOn7wMm22H0Nzcom27fj0Ai1ZsFVOTgpjsSu3YSCV1zj23W1T6
qo4dPKLg6J2A1GKJ3QXVqKx5QgOQJgcmScDRVFCD1LwcXHfzxrXgLCSU1MkJ5sHT0Rt+ySWIzU6F
6wV7XLnmjmvRYhDEcSUV1iItMx0evm64cNpeKkEMgBiJ5IL7aSZnFyEo0AdO3lHw9vGGZ1wlUtWx
Ktj1VGZvGVRgTirUIzohAlcvecA3zRQwk+TktACYo9NuI2jbNPUerz6rRILMnNW+iXmV2n6qYd5P
W2bncrzaTxmb5CI9ouLDe/KRdGQftSKinKR2jJZOzzHicNUx5nmqzx7O454KpS5L65CYk4prVzzh
m26UDiL1KfXSew5akNfOS/1U5ZNt9/KSxlUs5YsNg5ODP4Kya7Vjv5UPRVHUU6B0Ge+uesWLAYhG
hmYAVKBWQfzbUp+FJBZ+p77reCX1eWZJjfbU/fXQDIllNbjaawBkYts7mTJXlq4Z67cew6VLDtDr
ddi24xDmLVyPpStsMH/RBmyy2QddRTmuXnXF6k0HNcPQVzpKKg9lAK5eD0GamB/34DRtBSCrtEYL
1ubPC2hmRgyAmtGrWwuLZNZ/7PhF3L17Fy0trWI66rTg73DVHXMWbZSgHq3dZlDHPJiGSSp99TCi
MgBOPglIl9iiYpf+SQ2Aumgq4JkkQaq0Smb8HnDyikFkfhPSUsJwxSMWkTkS8LKScc3eDW7BkXB1
jUKkZJpWVo3I0DB4BgbC9Zo33APSEVskga7IlGaKNISE9HR4uvkhKLMEISHBcPXPQFKpmI/SEgR4
+4nTyUJ8sTIb2fBy9YVPXCLcHK7g3OmzOOdwHZ4xpcgoKkagvxcuX7LHZdvLcAxMR3S+CqjZuO7i
jeshobh6xR52zt7wic2Hv4+rXORLuOwagqA01TjrERUVBGdHe9jaO8HeNxkxGWlwt7fDWS0fb3gn
5CEiPBRu0oijihqRlpMhZugaLl++Isc44FpkCZLkfOLTk+DheB1uvj7ymeThEoiAlCppBCbz0KuU
4mokSJ252onBSDUgtagC4eEBsLuszuGSOMcohGXViTGQ4zJT4O7iYsrLwQkeMRVIKalGdFy4ZgCC
c2W/njqlKIp62pRZXg9HCUaOXrHIKqvTHmaLyVLPfN1XnMQRFdy37zuHeYussWDJpm9p/mKljdh1
6JK23B2XrZ5TezAdJZV+tuRzUWbd18MzZYyvlbxN9+DTtIAok8+HlKtvw4ZtxzUDUKWvxJx5a3Ds
gge8wjNwys4HM2avREVZqWYA1mw6hBx9a5/pKKWV1GsP/Kk8M6QcahXikku4ViY121fBXn3NXklb
0ZCfKqgny6TYIzgZsxday+z/Erq7u3Dn9i04OXlg+uw1sHMPRZKYiziZJJrq8L5MDw+qBwUrtDpW
z1uobx9kSN2nigF6AgMwyVheVS8FV7cBZLbZo9TSBiQlRsDVOwIhmXIiIdfgGioBuqgeSVlJcLX3
hW98Fny83OGd2oCs4nz4+gbBKzoVvt7euBaQgbjiBu0ekHJIacVy8WSW7Xw9BcmVDYhPiIPH9VCE
5jeKuyqB7zU3uPinI76kUSozHddsr8E7qQRRCeJs7GTmnFopgVCH8FAfODgGIDBNZsyZyXBzcoVb
ZAESCrPhevEyLilDklGAEH8XnLnshutxZUjJkP3kQjoGZiKxXNLPL0N0SjZCY8PhaOsBv9RSRMVH
wslW5SOusVTdyvCBk2sMYsoqEXTdGVc94xGRpUdcYiQcHdRKgcze06Jx5awdHEPzkJKZBk9nVzj4
pSFBXQTzupTAnpidIgbgOvwz9YhNknyvSL0lViE5JxPe7m5w9E1FXGkZ/NwcpfOkIkpd6LgwODh4
IUDyjUmIhLNDAELy1GrN/bQpiqKeJmVVNMh49t0GIFGCn4tfPFav3Y7amjpt5qv9fEg1xlptVu4Z
mgr1DNnD6SiZGwCviCwtCD+JAVArAOusd8Fq3lrtvvzs+euxcs22eysAj28AwjTz4xma8b0GQD1g
r17es3bzYWy02YeS0lKUlZWhWCa4VVVV2H/wNBat3GF6AFH2VcH++wyAs18SMqXu1SqEvqb1yQxA
ZnmD5hzuSU4qozAX168Hw08CvZ+PL7xjC5EsRiEpWwzAFW8EyYlERIXhmgTuqMQYePiGIqJIAqan
B64FZmjBPL1EpVUnF6MUQT4uMuNOkUqRwB4jgVQF7+gKZBvK4e+mjslEQmkT0oqy4CEB0jdVgmxG
gmY2gvObpEJLEODlDWefFCTqW6ShNSMq+BquieOKzcuFp72bzN4rkV5ZJ4E6Ak5yXEheM3KqKhHs
6yXmIwGxpY1ISYqBs6srLjtcxeWLLvDNqERCerwpn7wmZFXqERrkBxf3eMQVFuC6zPI9oguRUtmC
DJnNh/hehUd8GWJT4uAi9RCY04hsfZUc4wtn9xhEF/ecd09dppXWICknBdeuXEegWroJD4KDcxRi
dJKXrg1xMQFSh5GIzMyDu8N1eCWWIk3ySi/UyflexfVkaehiAFzEAITmNzyQNkVR1NOkbF0jnHwT
4fQ9BsDJJxZLl29CQ32tBHujBPvqB6S2GasNWLBoPTxCvscAlJsMgLcYAG0FQoJx+vcYgHU2R2Br
64iaGgMKCwuRm5uLnJwc+Zmj/W00GmQ2fg0rN+z/fgNQKAbAO0wzP55hPQZAyqTer6O+GXdfpm8g
qOcWNmw9gi3b9qOyskKCfiWOHDsHm60HNCOgnj84cuQslq3ZqRmFxAIj4uRYJfWUf+83ENSzAZoB
8IjWvgKp6l6t5utrn9AAZFU0as7hvuqQUVGDyOBAeHi5wtYtGhGZVcjQmQyACmZBuVK56RnwdXeE
nUcQPMOLkFUtQcvDA249wTxDCpNRVovkLHGEF2xhe9UZ9o5iBJyccOn8FTj5pSLJUIVADwnkQdkS
ZDuRXZgqgdXNNMvOiJPA7Iewojbk6coR6O0Jp+tJSDR0Ik/fgHA/N7iFZyGuQAyAmpmnGJCuq0Vc
clRPwBTjIA4vxN8brl7J0oiycO2qj8z6xSiUFcPbxRP+GZJPeqwpn8I25IoDC5Ng7uIRLyamCF6O
bnCPLESaoQPZJXJ+nk4SlCsQn6bKpkxGI7L0eoQFyzFiAGJKmrUXRPTWZbo6/1yTAQgS1xYVGQiH
q+FiANqRZ2hBbLi/GIBYxOTlw8PBDdfFXGRIXpmFJVK3zvBJl4aTKAbgagDCChofSJuiKOppUk5l
k8xGTQZAC4Iy5vUGrF4lSuB0D07GoqUb4ePtBy8vP5ls+j4gLy9feHp6Y8ESa/hESTwpqP5WOkoq
/RwJ+urBO5/IbC0Iq7cApheZbvmmFNV+S3n6dmzffx579x5FQECQlMEfPj4Pyt8/CAcPnsDmXafE
MLT3mY5SeqnMusUAOPmEaQFY3Ya45BKGHCmH9jVw7Svl96WeC1PvApi/2Boe7l4IDg7D0aNnsGT1
TqzadBDbth+UbaHw8wvE4qXWEtjjtQn5w+koqVspKh/NAAQka3WvVvOrlAGY9ZgGoKKqQQrepDkH
c2XIDDtdAuPV88dx/noKEookmIoBSM5JhMsldwRkN0jFS+Dzc8VZmQkHy0w4z1AGP9drcA3IQGJZ
i7aykFlSLTN1N1z2TEZSmfxdrgJmMxLjQ+Hk6oOgnAYkRnrD0T1QLnQWQkK9cemcI7zTDUjOToOb
3VW4RuQgtkBOOiEEzk7XxWxkIzwqBC7q3n6GXmbZWXC77ArvZAMy9HWITwqHk60PQgtakGuoRIiP
J5w9k8QA5MLd1RPuQfEIiQqF/SVn+GbIRclKhZutA65F5CKuqBzhQVIe1xjEiZmICvaE47UQ+EVl
IDg0AE5uMssvNSIxPQZOl68jOL9Z8hDTEOAlx0TJZ63IFFd2rx6lE6TkJUuducE/W1xjViLcnVy1
ByzDYyLhds0f3rGlSFdpiKG56h4B/+h0BAX5wckjAXEV4v4Sw+Fo54vQwuYH0qYoinqalCtju1qO
dvaKQ64Epzjt/TEPBi71ILV6iO3wWWcsXL4Vi1fu+JbU9+MXrdiG4xfdtSCvfY38oXSUVPp5Eng1
AxCVowVhF58IZBYbtVijZugPS60e+0dnYeP241i0fBuWrt71Lam8rbcdhU9EurZ/X+koZZZL0C2q
hotvhBaAvWRCausSjjz5XZVZnev9hwbVcxI1WrnP2F3Xgv6CZVuwzuawlk9IUgFsdp/Sti2W/A+f
cdLqKbmwFgkqnd708iQtkUpf5ePoGaO9f0DVvYq5T2wAcipl1irO4QFJ5WWXliAkKBKBMuNNK2+W
ipCTLshHoH8covKlIisbkJRRgIi4XCRXtkjl6xEZHoOg+BKkaPvLjLXEiCgJ1gHJOi1NzRTopKD5
BQiIiENIRg3yiwvhH+CLqy4ecAqKgp9vNCJz1WscDYgIuQ4HMQd+SVXI1xsRExsBF+drsq8vAlJ0
SJd8M0uLERwQg3AJsJmVYlKyMhEQmIRYmY3n6KvlmHgERuYhRSorXo53c3ODo3ck/IIkn3zJp1jl
4yn5BCMgrRQJSckIkAuZWN6G3PIyhARL4Hd2g5N7CMKkXOq8U3KyxT0mIEaMUY6UKzY+0XRMmZy3
ONLeesxUdVZUIHUWi4g8qWtdHRJT43HNRYK9sxe8YvKRUtEqx4jBkvMI9PeDo+Tl7BmOSJnxZ8v5
JGVmwF87n6YH0qYoinqalFfVIrNWmfB4iwGQiWV8rnofTN9KKVIPPzd8p9Q+fR3bK5V+vuSj/u8B
3+hcLQir9/9nl9ZKPFJxTWJQH1JBPbeqXcr7aKnP1X59Hd+rbF0LskpqJM8oLQB7R2TD1jUCBWqS
m29EUoFSTY/u/63MQ0aZmrGb0kkprtPePqjeUZChTIV8plYXlGFQKybJPcdqP+VvJZV+vuSjDMC1
wBQps7o13qgZgFlPYgBy9T2z9YdVoYJbq1apWT3bVIXkyP7Z4u60v6WSs8VAmD5X98NbHtg/UwqU
XflgGqbtPemIYzP9rpbfRSq/qlZJX21X6bXJick2tZ9KX9LS9hPdS7OnnFpa8rcq0/0yqmNUmUxl
vH+8pKmO+VY+kqbaXyrWPO3eY+7l8UA99OTRe8xDUl8jMd9XpX//HOSYnro05WXaruWlyqaOf+B8
KIqink7lG1q12airbwIKDW0SpHqDXx+Sme1jqa9je6TSL5I87STo+okBUEHYLSAKeToV19pkbFVB
8RFSwfv71NdxZlK3B/JkkufmH60FYHUb4opbJIqqWx997iqgazI/T9N27feinp8i9W0Bbf+eY3v/
VlLpF8q5q9WWa4GpWt2r1fyq2rYnMwB5cmCWBLZvSy37m/TtbQ/+/ej9JTj2se3BdO4fd1/f3t7X
ft9O69t/m+/b+/t9fTuf7/7su/O4/7m5HrWvSd/er1d9H09RFPU0qsDYrr0MR81Ky+s6UFrbidIa
+flTSaVvbNNeBBQQm68FQffAaGSX1UDXdBPlDTd+UumabiGrxCh5xqCguk0zIZecw6VsbVr5SoxK
7WaSv2t6fqq/1T69+2nbzfb71rEPSqVfXtuuPQPgHpwu+bdrk9CquicxAIYGFBjkQDXLpCiKoqgf
KLWKGpell6AUC3u3KLh4x8P5J5RKX824neSnWh5X+UemFcE/MhWh8ZkIS8j6SaXy8I9KQXR6sZZ3
Ul41HL1UmX6ec1evAXbwjEV8TpWWf56+VfvvgJ/IABRWdyBXLUtTFEVR1F+g/Ko2xGdXwSssC9dD
M3E97CeUpO8dno3k/Bot394yxGSWITwpH+HJBT+tJI9Yycv83JPyjVqZfo5zV3WckGO4d+7q55Mb
AKMYAL2cAEVRFEX9hVLL0cW1nT+b8g0SAFXeKhDLLFjlXyAT259H7VqeprwlCEtZ+irjTyVT/vfz
fiIDoBMDUGRU36s3LR9QFEVRFPXLk7qdb6hrfzwDMHHiRGN5VSNKaztQ39hMURRFUdQvUA1NzSg1
tqOqth0zZ856fANQJgagpaWZoiiKoqhfoFpbm1FW8wMNQHNzM0VRFEVRv0ApE0ADQFEURVEWJhoA
iqIoirJA0QBQFEVRlAWKBoCiKIqiLFA0ABRFURRlgaIBoCiKoigLFA0ARVEURVmgaAAoiqIsUC0t
LdRPqL7q/GkTDQBFUZSFSQWoqqoqlJSUoLS0lPoRperUYDCgtbX1AUPwc6mv6/0o0QBQFEVZmFSg
UMGqvr4eHR0d1I+o9vZ2Lfirem5qanpi9V6jvj77PvUe+7j6WQ2AanR1dXUoLi7WXBJFURT180sF
//z8fHR1dYH8+Ny9excZGRnw8vJCQEDAE8nf3x++vr7az74+f5R6j9Pr9Whra+szBj+sn90AGI1G
rfE1NDRQFq7GxkbodDpUVFRov/e1D/X0Sc0alYlXZr6vz6lfhtQ4rGar5MdHGYDY2FjExcWhtrZW
uyXwOFL7RkZG4vLly8jNzUVNTU2f+/UlFVuVCei9rn3F4If1VzEA5eXlf7X7I9TTI+VSlVutrKzU
fu9rH+rpk+rLahaplhzZj3+ZUtetrKzsew3AjRYD8jIzkZmbj+q2mz1bfyQ6a1CcnYmsfB3aHmsh
4i5uttehvCAXWapMPSqsrEfXnZ5dnhKUAVDBPy0tDZ2dnX1eg76k9o2Pj4ednZ12fdQthb7260vq
WoaEhPwyDID6/Vv7tLTjxu07WuXdvXUTne0Pff5DpQaq9k7cuiPp3r2Dm10yaDU/zv2SJrS0dqD7
Vm+ZbqCr7ed9urOpWQJlRxdudLejpalnm/xs67op2zrR1tIk+5i2t7R14MaNTrR3dOPOndu42dmm
7avt33kDt+/cQld7q9THg3m0dd3ALXV+ojs3utHR2nIvze+Vuu/U2ibXTY692Y12s/J8n9Qg1GsA
eu+ZPayW9q57Zbt9owttrU9+n+s7Je2wo/s2bkhd9fl5H2rt7L5Xprs3b6DzZ24TP1zqWrXfb8+3
bz7QnlVba5W2c7vn3G5J+2rt43qqwK8MgFq1+XY/Vvu3ovPGrZ48bqO743H723dLteNWs/Zg6svS
L743bfm8pU3KdBt3eo69LX25Xdp5c4upz7T1MR5p59HVhS7VNr7n/qrat72zC91Snof71082rv0F
Utftuw3AXXTWp8N++Wj0e+01vDb4NYxedgVphVWoqKpDa9etnv1+GLe7ShC9+hP0f+41vPDGB9hy
Lgx13T0fPpJ2ZDuvRL9/+iNeUWXq0bgtjijs7NnlR+MmWhuMqDS04od4C3WtlQFISUnRJjeqr/RK
rb6oa3Djxo0HtiupfdVxygCoVTY1Ln7fMb1S1zQ4OPiXagCkI3bqkeDnBgd7ezgFR6KkthvdErhu
3hQX9HCnemxJEO+Qi6kvQsR1R9g7eCCqqB7NbdLp+9y/V9Lh21XAr0BqkKlMDr4xyGvqRmeHzFb7
2L+pWQZXCaBdMuCp87l5S4KpGmB/cNkl+LfUo7I4B8lppWiQAatFbWtvQll6FJLTxZU3dcggbbqQ
DcYSJMdno6wwBUF+wYgurNaCeWt7G2pKUhEeGoWs8loxCj3BtkUNWjfQnJ8Af0d7qRsHuMWnoFwG
xa5WNag9XJ5vSxmkljoDkoNd4eofD33bHdzu/v4BU+m7DYA6z3a01uUiQMp2xeEqfBIyYWy+g1tS
x91dj5fHd0raoKrPytxwJBVUyfmqv/vYz0zKeLWVpCPU2QH29g5wiYpDYVObVl997W+uXjN366YE
1j4+/z6pINPR1a2ZwSc/d9m/7Qa62/XIDPPAVfsrsPeKQHZ9p7RnFUTFCMnPRn06vK9KfTs6ISit
UNrcTc3Umaf1XQZA9YGbNxpQmBgEJ5WHpzfSKxrFlN6SoCsGTtqp+f6PL9WOm2Asz0Copyscr0h7
tXdCcGIhjNIGVR/o+zgpe2unnFsDihL94eKgjrOHe3AcqlX7byhFUkIuKmsbHjwX9VmzAflqlpmv
l7FAmRjzdM0l17W5BmX5WUjNLEej9K/7+5rGtUQ/d20McQyKkHFNyvOt8a9n/BATrY0f0gdvSn0p
k9Ii0+Mf2mYeJXWu320AGhByeA2mf3MKhdrfmTizcB/snQ5j+sITiChq1bb+MG6hInwbhr0wHE46
oDb7FPad2Izw6p6PH0kDYh13YOJ8NzT3bPnpaEKY7R7M3xjR8/eTYW4A1NjWe9tF3T7rbWfh4eH3
tvdK7atuHSgDUFRUpO2rtqs+p26XqtsDygQ8fJySSvMXagBaZWCtQbb9Fox75328+/GHePfrz7F4
rT9S8tMRHVeAOqmY7xuc+5QMDjeby3Bl0xK88Vp/fPzeYIyY7ILY0ma0aysBfRwjapIOeKdND68T
azHq9bfx3seD8N6osZiyzR3ZxjZxag8FLJlhdDSWIzkuCekF1eIeJXD5xCCnouZ+wH1SSdlvtZUg
4Ow6fDPdFhUyCLRJXXXfbUfE9s8wevFOhFbITE1mKB2tDcj12YiR047A+9IM/J//+/f42DocN+/c
lBlTDXzWfYj/529fwAq3XMg8RQYTGbTEbRoy/LF1ymR8+toHGDz4Xbz9zXisO+yPytbuxxisW9B1
pwvF/k6Y/Mx/4ZPl1jjrkYwUGQSbpUzfd72+ywC0SNlUHfptmYkPtbK9gfe/mYmDpxOQkpsmeVSg
uU8j9rhSBkMCUlUcNnz2Txi6JwKNMlN79DlLAGprR31RJA7Om4UvXn0PH3/8vtTXKCzc5oqiRjWL
7Ou4XsnxLQ2oKk5DRFQuaqT9P1HZVftqqUJWfCSCIgvQ+Bj1ay7Vnm+3VyPwwmaMfettvP/xYHz4
1SiM3+iE1EoxFjILbjUkw2nFBLz95iAM/mwAPvx6EU45laJJDLh58Hm0AZB+LObPEH0Zq4cPxoAP
B2HQVwMxatoFRKRkIio2C5V1coyaeZul93gSY4FaxF1Yiff+7vd4bdDH+PD9z7DiZBBK22+h8xF1
3yTX9GZ7I4rCT2HJl+/j/fcGyXX7GCNGjMXyK6HITTyFMcO3wD+3Cm3mddom09GmGOxZuhSLdwVL
OLjx6AmDGIy7rdlw2L0SExe7okb6l2lfaWNdtci5uhXjZVx7RxvXPsW8VUFiGqWuzOtBrm97YxmS
YpKQWVSNlvpCRIWnoay6FsbSJHj7JEPfaBqwH8j7B0pdt+82ADUIOLEaM+YegsFseb4mYjs+ef0r
LDwahho1Y79TjnjvCzh/3hZuyToZW+6gRleAuBBfeNmfxwXnEBR3PnTr4GYNgg9OxwvLg3s2PC71
iHXag5mrQnv+7uFWOcKjs1Haov6oR7JPIsrF7OJ2OeK8VNns4J5Sjl7L0lyRCLcr53H+ggsiyppw
93YNMlOKUd+p5vp30FFfgphwTxxYMALvfmaDoPwm2X4bdXn+cLoox7mEIrv1rpbWo+g1AMnJyVpd
q8CvnplRfefWrVvYsWMH/vjHP2qBW/Uj9XmvOVAG4MqVK5oBUNdKbVe3AlTw/+1vf4vAwEDcuXNH
S6/3OCWV9i/SALRIB+pq8MTcN6fgsF+FVoFNmT44vPwgztlvxZhZznJZZealZkByXXu5rTqsHHv7
zu37yzQS8NrN8mxu78bNslDs23sclxNqZIcynHhvIvZcS4Chu/vBfe9JOu6tmzD6bcfoQTOx171K
S/pupR82DR2K8bapaOm8rbbIPxN31IpYcxjWzl6LvY45MgtOxdkjrojNr0LrDZn9mHaTQkvwlc7f
2X0Td+7euXc8bnXI+cksoP3Gg0tO3aUIPL8R42bbQ6cZALUEfRdt8QcweeE2OMQacVulWV8Gj9Vf
YsnVaCR4b8WAF4dj3qIDyFT11RCJQ7PfxN/8j2HY7ZmFjrsyQEkwaxPD4rrwAwxc6oIUVTUyyJW4
2OPwmrOIb7gtMza1zcRNdeugxVTXtx4ooB7Bp3dh6RwfuUINCLC1h0tgLppv3sTNeyctqDwfGrwe
bQDkOnc2ojj2EEa9ugyBDSqBZiQ72ePs7n1Yv20z1h+JlWH2tgSmDnTfr1x0t6mZYrd2Ze7V7Y0u
qfMHZ7EtMuC2dTYg6dgMvPXMH/HFgQQtWDwyiKsZYXs9gtd9hoGzTiK4TKV+B8YQTxxZfAxx2hjR
qc3MVbC9efumtvTdKjPfe9ypQ7r3bnw1yRYGLaDIoN99fyC5JYZGzRhvScXL+GFCZoT36rujHBGe
jjjvmIimezuYuKFdH7U83rPh7k2zVQnVnm+hNvQgpgyZBOsrZab2WBeB3SOG4pvT8Wjqqkfm9a34
euAmJGhFrkbo8RM4cDRI2t2D/eSRBqBF6r07GQenTMP8tX7SGoTmBJxcegyu7rswYsxRpNU2y7WV
ejavlxtqBt8ms185755Nqm91qwDZu3omdXrrZil8jmzFYisPdPTsJSf+nashrTduojnVDQemDsfy
c4lo7mkrrUm+WH7EHZFBRzFlzE4E5FWh/aZZf1R13hiLfStWYfXhONM2QesHKr+Om2ZlFTqz4bhv
LaYtd0eNauuStxqbuhu9MP+tKTjgVabt35p1HTsWnEVsXZNce7OOpMrVHIQV09fj+PUSoMUd47/c
ibBCA2oKA3D4WIAENS3i4va9a9wtplCtHKjblD3bFLK9XfqTFLGH2+jqaJHrdr9e1HX7vmcA6jOd
cHz2BzLj34ztO04iIt+IDIeF6P+vz+GtWReR19KIAue1WLtqJqysZmDSlrNwi4uH4/alePvlkZg6
dSS+/OgDjLrghfJWs3Ntr4LnruH4cNVhuJzajX2n3SFzpsegBalOG/Dx25Nhs3s3dms6i8Agdyyy
Go0FDqHShndj7OC98CurQq7LWqxZNUvKNhOTNh2DXXojWquC5Jw+xpBPR2Lkl19j+HBruF3bi6+/
3odInXI6ncj134vPP5iIGV+8gD/8aRwOB1ShMc8PttsmYeYcK1gtW4z5Z+KgazULRg/RawCSkpK0
+u59YFb93LhxIySU4plnntH6Uu92JbVvrwEoLCzUPlfb1XVSaanj/uEf/gEODg7amNl7nJLqj0FB
Yoh/kQbAGIIVX4/EzksBqO/t3Z3pODntHfzppXHY650jM98GFEWdwfYVi7F4vTSebCOa6nPg4eoG
230rsXTZMthcCUKlWi67l750EDWTvqXugUuad7Kx99NvsNk5TpztDbT3NeCrQHcjDycnTMLy3W5Q
lqRbKrurox3VQTZ4fdh2BKWG46qtLc5ulbIs3wr71ELoUk5gVL838N7ovQjLSkZIcCIKKhvQWZ8C
t6MrsGTpKuxxi0WjBIKM+GC4X3HA+f3rsHjZRpz0LYKh/SY6c31w3lr2XbIUKzZfQVyZHmGXbDBh
zn0DoJWvIwU7Js/DHrto1IkbbCr1wdJhC3A9t0Ac+RGM/mgR9u9fiCM5Uvb4Kzi2YwRe/nwjTjgl
o1UNHDKQ1eS7y6xoAdwL6tDR1SGznxa037iBm9J473YZkR9+FlulrpfYnEKkvlZm5Blwc7kO38sH
sXzJcqw/4CKzUXcs/+hNvPDmDJxxD0ZoQjzi06okblUg1mUX1ixbgqU7D2HHlUiU1quHxu5f90ca
AC3YSsOMP4tJn42FU0IZpFga3fn2sHrndbz+yXp4Ztfg7q0yRDttxaoli7H0oBPijM2oLo6D/SW5
NtvUtdmMc5GZEjCV8epJX9TW1oWu4mtYMnQiVs/5BGNOJaOhSUzBIwyAmv23VAVjzVezYRtXKoFF
TIW0sTZt5G1EdnQgPAOy0aDuGdfnwt8jELFZtWgs9sYe6+VYtuoUfCKiYSuG69nnv4KNSxrab7dA
l2SPvWukjtcdgl+RAZ3tefBy94bthUNYZ7MFFyIT4XHuINbvckSSvgIFSdEIS5Q6y/bBic1yzqvW
Y/OGcwjONaCjLRPep1ZrbWf9eX9kNqn2LfWtZv+3inFZBulF6+1QpOpRrkN7Rxeao3ei/2fbEaOr
Qk7QAYz/Yir8cutNhla4e1M9e/JggH2kAWiV+V9HDk6tnIK5Kw6isNGUhhq4o/aPwp+e+QAzDwTA
0NmKhiJvnJLyL162CUeD81DfrkdUsC/sjmyHzcrFWLb3CtIaGrVZuSntTtxpK4DHvuUY8sF0WG9b
BevTfsivFXPdIWXqLYO51Oz/RhWCzmzBvDmHkC3n1C0zqXsBVOjOPY9RI7cjpNCIjppY2O9dhiXL
1uNoUJaMF+k4tnEVpi7cgT3ST5dtPqn1g85bnWhIdsWxNUu0ul67yx2Z+lK4HVyP6SseNABdNWFY
NWoktp/3Q929+9RiojubUZPnjuMbTePHmbhCZIcfwdcvv4GPpu3C6d2T8frz72DMRkekFiQjODAB
GZnhcHVwhfMJGyxeuhp7riSiqEkmP53lSPTcj/XS15bsOICttlEyPtejKPIEVixZhg07XZFS0qKZ
4966eRwDoOgoDsehzfMwecQ7eHPBGcQW+mHlvOOI1nXibr0/5jz/LIYt3ok9e6wx5dN38PGwudi4
ZiNmrYgwmbSKcxg6YS2cUu41Bkm0Gj67PsFb8+Zg6/IpGD74Y6zYeBkl91wdYIy/iN3Wq7HaToz5
vWcDWpHutAZv/flDjJ8yBVM0rcHlaAmghSewfPKnGPjuAtintaFDJmtzXngGw5fskrKtx6RBb+Gj
0VtxXMbhRXP2Qa+Zo27E7z2Da7Y78PWEo4jVKwPQgSyfI5g3/yicnY9g6dYE2dYJn5Uj8e77X2LZ
nj3Ys/4r/Mf/9wkORFSZjHQfmBsA1U/U0/wq0FdXV0NiqBbI//SnP2mfqeCtPldSf8fExGgGoKCg
QDtGbVfjo1pNUMf97d/+rWZ+1Apu73FKahXgF2kATEtlTci4tAjLJn+Bz4fKDGLlacQXJuLY1IF4
9oXR2OOdiwrpdKfWTcLSTduwzWYppmx2RnjwMXzVbzS+njgLc2dPwdDRI7DQLwddUjnmy2Xq4aa6
NHdstxqI5z/YgYD8OnTelH3U4KZmHz0G9XZXmxgGiTb1QVg7ej7WHo+WmYyarcmAKZ1Wn3EFi56b
jh2nlmPAH0Zj9oqlWDRmGAavXIO9l3Zg2utv4O1v9iEs6iTGjrSGY0wKwo98jrFTvsTcKePwyeSp
2BUTCfeNE9Hvz8Mwb/1qLB3/MQZ9uR3XUmtlwh8Mu23W2CSNf8GM+Zhj4wa3izaYNNdBMza9S4sd
t7uQuHcKZu+yRarxFvQ+yzB0oSNKanRI9NiHWROscfL0Jsw7E4sIh3M4u3kupi/ejv1XksQAqAfX
mlEVdxgjvj6IOF2dzMh6lz/lPGW2WBVxENbTX8WomUsxe+TH+HS/PZLjTmHk8x/iaynXwjnTMPHz
ERg31xpWygD0n4ELTqewdNEKrD8dhzzfJZg76V1Mmr0As+d/g//4YAuiKuulYd6/7fJIAyBqkYDb
XFeAwG1fYdLYUfj6m9nYdtofWWnOmPN2f7z28Vp4ZuqR57YL29fPwapNW7DaZi2WHPJGmMwS3vj9
KMxaJtdm7DB8MGchTmbUykDZE0zEYHR0l8B7y0KsOeMJ731jMPFEPOp7DYC0CfXwoalzy+xJlVk9
65BzFqO+2gHfDD3atYfPZN9WmfW2ZuKSGMFxC11Rqw6p9sTc0Uux19UfzkvmY8JUK8ybPB6fvDkX
S6e8iWeeHwkb9yzosxywb/bL+GrGEiz8ejA+2nIKMWn2mPHGIAyfvQwzp36MARLsVmxchzGjrbD6
0Hmc3rkCU1cHoKzEF8c3rcLCkc/hv/32M+wJzkSK7Rps2LgE6zetwSJra6w6k4R6OefWdmnPTRHY
NnUBluwKRh3UKpn0OTmv2iJHzPnPObhSJINPTRo81g+VvMZgzNg52HMpFJXSMdQs0/zaPNIAqLZz
sxu6kGPYYzUYXwyfhOkzNsMrIwcB+8fhz398B9MPBqCoLAluW6dIQJV+vGkZpm44DVd/R1iPm4T3
352MBcuXYsKIDzHijA/K6ttMD1lKML3bng+3HfPxyrPjsXDRdAwZ9D4Wn/RDRdMtdPSsdtyb9d6U
8UmZhpYcXN2/FlNWeKFeruXNynic27kEU6fPxoJtDogJP46JE/YjKD0RPtvex9dTJe1JX+PjmfNw
OjkSV1dORr+BozF9zQpYjXgfQ/bZIaNGypRxHac3rYONmLtZ05Zi5X432B3biJkrPe4ZAG1c625G
1uUlEpy+wGdDp2L2oqNIqL+BprIEuGyejKU2qg6WY+bWk9i7bSW+fuMtvD9pG45tG4/+fx6I0esv
I9hrF77+ajNsT8vs+w9DYLVmFZZOG4pPhyzCsXA9SvxXYuHktzBh1kLMXzQK//HxJnjF+WLfsNHS
VuZh7AejMHnuNVTcub+S87gG4D7ZWDlyGXYfsMH0BUfFcMqsNPMoPvzf72OMMh4yIVi3aScc3M7D
Zttu2JxKNB12Iwprp26DfZTO9Leiy4DQE1Mx5Eq26W8xYavnjsfx9Pvh1BBzGltWSroXZMJ0zwD0
3gII6fnbnGLs6v8/8Zv/XIVs2f9O+kG89w/vY+xyU9nWb9oFx2snsHrNbmw6Z3qq4R6N1zB5/H7E
GVRGagXgOObMOQC7y7sw1zpKthXgyKjheO2d8VikznW5NXbtOYeIstbvNQCJiYn3DICS+l0t50+f
Ph3/8i//cm/2bv55XwZABXv1zMDf/d3f4dSpU9otABVLe49T+gUbAJF6Ura1BplhTti5cSVGjxiG
Ebtd4Oe2XwKXt7a87LNpNF784ysYJgFo/uQP8a//8zUssFmJrz6xwZV05d66kHBxPt6ZdhlVUgHm
T/aqp4cbsgNx+sAqTJk8Die9c1DTLDPhzi406fPgvPFLfDl2Hnb55OPmTXEDDUFY99VcrD4S2XP7
QT0kJQYg9RLmaAZgLYZ/cRJp6mp3JcBmyQKs2ncCuzftxlH3Qtxt8sCMMVIutxOwGjkJdllqQbQW
3kcWYuSiQ7DduRjDJ52RpiW0+mLlmPk44JqDW3fz4Hv+MOZbTcPYoe9hoJiIi8oAzDM3AOp8bqM9
7RDGW+2CW1wuvFd+iaWOaWhuq0Giy05MmXcMzg4XsGv2fGw8egCnDpzAtpUbsdvuQQPw5dcHNAPQ
3msAZBZ3t7sQlzfMlI52CtrNj6LT+GL0Gly03Y0JgxfieIxBNnYg13EjZkzdjguX98h1iJFt6di1
aD12nTyHzXMnY9OlMLFOEkLzL2D8qL0yyxSj8ZgGQBs82zrQWVuEENczsFk1DR+MmI4Nrp44vUdm
iWfSJeUc7PjkZfz5jc8w0Woupg7rh3/+x0FYv3c9hn92HMmqd3anYPfy6Zi0I1xKrJ59MLWFquht
mLzyLNJrGpF8biImnc1ER3uHZgDUg37VaR7YPUvahNUeXE834pYEtpaccxj91Xb4PGAApL7asuGw
dy1mrvY0GQCjL1ZM34DjXm7YO+xjDJ69CKeuu+HaMR/4eR0UM3cNbbKn76ElmDRzu6kNVDtj3IRl
OHJ+P+YOn4cz4eVoyr+Ir95ejnBDNdKuSz+YYoPDhzdh7lpPaZOKFviuWoiJO52RVeaPZa/8AS8P
GYeZs6fjq/eexb/8eTZ8qzvRqe7BNkdi+6S5WLQ9UHK+dd8A5F/BzD/OgW2eXoLnDXRUZcPb/hg2
LRuLgV/OxAbvInQ/9jMAaibehhsdLdCnB+HkwW1YNPETvD7vJAIjz2Ha1LMoaG1Ckf92fPiP/4r3
xks/njUSr/3hOQyfOgczJq3DhlNZ0tvkssVtwztfbkVIvszM1a0+ZdpaDMhJjoKXBD21QFFmPxNf
zV0JpyzVZpV5a0HMWSt8881ITDsZgQYxZ2jL7TEA16XObuFGVRpcz+3H5mVf4c/95+C03W5MnbYX
zm4HMUXa13W9pHynCBe2zMPU9YdxYs08jF/sBKOq7sKT+PSrVXCI0eNuZyqcj+7DHKvJ+PLjj/DJ
VBucOrEZsx4wACK1CtFai6xwZ+wUwzZmxFAM3eOJcLfN+PCf/h0fTFB1MBwv//vzGD1nCaxWHsJl
/zIZE7wxY/xBxJRWoSz2BCaN34ErZ1bjs0+3I0rNlO+m4vjixbDeexrbl06ViYoPtFBeegVTJ+yB
Z+glzHruNYw9chD2tq5wtU0UMydjYk+5vtcA1OfCyXYXDqaqvi7cTsC8L5di9+EtMracFDMvdV4X
gGVvDIZDvmmXropU+Pl54dKG1Zi8OMJ0z73kJIZMXAvnVHWPrIc77SgJOYp54721fe6kn8AKq/E4
nW12m6BPlAHYjenLA3v+vk+FTARmitEe88VkbJAxvEYM8oq3P8FVtdwldJQkwjssBf6nF2DujB0o
01Zj2hG55Qic3I9gyjs74Kadx10kOm2U67oPFy/swjwbtQLQDs+lozBv0XmxB4p6+LlGo0hi4KN4
lAFQ8U/1H/Xz4sWL2jb13f/ezx9lANTPvLw82Nraoru7+97+5vpFG4CWtk5037iFOz3LcxUpZzG2
nxX2nN+E8fOuoeVuDi7MGoM3Blphx9kTOHzwJC5ddkVEwGGMGr9HGyju3q1Hps8+jB13CrntpgHB
9BRwO7o6JX0V2IXM/Z9ixMaryKySbZ0daKopR7TTfuw/fB7uSRXoVE9q3yrBxRlTsHyHE4olkNyQ
ClUDm85nE94cux2OV7Ziwmw76NQN2u5MnBUnv2nDVqxabYM9VzLQVeeGmWM34/JFa3w5/gxSqqWj
3alC5NV9mDvdBgePbMEim0DT06xGHyyZZo0T3t64usIKy2asx4FD+2CzdCKGjtsmaXzbAGiGqSML
ByfNwm5nCWZj18E9VY8bN4yId9qKsXMdkS2D8Kkx/4V3F4hJiAjBroVrsUszAKZbALXFvljz5Sw4
ZBkloEnaEoTb1ejbmYB9K1dj5cFkCZmqfF5YOG4jzl7YinFTDyOypB53blYj1nUvZszYjpPHN0nw
80f3rQTsWLoJe/dsxsy5e3ApqFwccjeqE09g1DdPagBUoO4WM3a7515rAzwPygA7YgFW7rLB+iMJ
uNPtj3mvDsHQGeuw7/QxHDl6Fq7OLnCx24HRMy6iXNoTunNweet6zN/gLTPfG9Im2mT2XwOPhf3w
L//ZD+++/zHe/PM/4rf9h2GbdwnaxWm3dXTKzDgeHqelTZzxREJxHbqkflqNUdj8zTScjihEs3p+
RMrcppaObhbg6t41mLnOG9pCZ62/GIB1OOyahoqiINgdX4U5U6diyqxjuOK4DWNm2qO2IxOXd67D
zA3hpoG7KQTrZmzCsWNbMXX2PnglFUOvbilJW86vLUbE1d2wstqBo8oASD7qead8eytM+HIF3LM7
cLv8PEb862BM2rAdB44fxbETZ+HsGYYco3rYrBO3blfAcZEVFq+9gFxpzzelf6hzagixQb+v9iC6
rE67B3+rp48AlTi3bBGmWl2BuoodZtfl0QbAtJrWKQbqdu86e3cgZr4+G3tPrMfXU44jraoMKZeX
4/V/GYk1pw7j0MFjOHPBEdGh5zB/7mYccUmXq3QHHYVXMGnEVvjk6NHaqcyWerZCgqlWvG6oR3Da
YvbLbHgDLsZLrd9o174JkBN0BgcP7sfJgCw0qmcxbtUg/MJ2LJq1C0kyet8Qw6+V7EYIlk3bKoPw
DkyZsgN2l6wxfKIdCtulzdwshueJnVi+yAZbd23FpuNxMrUQjJ6YP3YTLodcx3krGRsWbMPhI7ux
evYkjLbaidPSDx40AFIfYmLNxzV9xnmMe22O9O95eOM/RmHd6aM9deCEGKmDudM34qhbNjr0jpj0
zXb4Z5WgOPo4Jsk4cOnyFhkHnMSUS2Itcdi3dgu2b9uMeQt34IRHkVylW2hIP4Mx3+yW8bAE2VG2
OLx9DsZIH1+yMxgVt+6PH99rANoMiLyyHEOGfIBPP/0Un37+CUbu8ERuZQxOTHsH77+7HsE1tchz
WYUJg96SfT7Bxwt3wy40Ds7752PQgPcwYYwc9+43WGgXheq23nZlorNRJi2TRmLY4E/xzjsfYL2Y
Im0C/p20Is1+MZ7/x5fwsSrTPQ3CC29PxcloI+qKHDDzvTmwiy1FpuMKjB800FS2eVtwMq4azcZI
nFkwGB99KMd9MgxffKUeAM1H0KqJeGnAx/jiy/mYN3kmpsw/jcjQNfj839/GqlOpqC8PxTGrj/HR
e3Lc2HEYtycIhfeXJr6FuQFQwVvFPXOpYK3ewvjwdrVvdHS0ZgDUmxrVfr2fPeqYXqmVBPWA4C/O
AKjleX3gPkzatgteJbW4fasF0e42+PiTlTguBmCclaN4rhaE7rPCtK+WIEGb/uTg4nFXBF0/gAlv
LcGeAAM6WyvhuWcs3lx2DY1SAWpAUN9XbU62x7KtO3E4vkZ1EXitGIgJOz2RX2OaCWu3AHrWctQT
9dr3jWUwbIo4iDEfToL1xTy03bqNskhnLHhvJJZ5JiDJYQs+fXMnfOvkoBJPLJg3EyuPn8bO5dbY
KQagu+4apo22gYOfEzaO+QA7/MUU1ObgnM0kjLA+A4cDG2C11kuCklDthUWTN4gBOI9V/abB+nye
2ioz0014d4wNLkgdqGcAHjAAarn1Rjcyj0/FuG/64eVFbsg1SGfu1iPW0QZfT3NATWeGmKahGDT2
AkokqG+atRI7ZSagDID2EGBTJa6vGoL+My8ivFgGxpsNSD9/BvtX7MXenQswZ94yxMrY2h6+Ge9O
2gAH54OYOm4XAvJrcPuGATFOuzBt2jacOGaN6Sv9xADEY7uYjO3n3HB65XAs2nsepW3daPTbhFFf
7kRMZf1jGYCWVvVEtBExtssx9uhVbVC+05aDwxuXYsKsDdi0bSPWHIiRQKHDmfEfYJG1k+mBs5pI
HD3oBH+7jfj0je3wUg8Wlfpg+bxxmHI8WYJHl+StnuavQ35cADyvOsD23DGsG98fb8zch0BlhLRn
FEy3ANQsU31lSX1XXvued3sToraNwIAJ++Ge0SbBshVFHldxcMFK2GzZjukjziNZDFRX8RXM/mYB
jnp6wmHjXlwLzEBKlD3mvvkhFu5eh2+m2cEg7Tn2wgpMGz8F/jXiDZMO49PJy3Da4SjmT9kG17gi
VCYfx1dfH0GWsRjhDjLDmbkdRw5ZY+7GUDQWu2Ha5K+w1jFFM2ldtTHYMuRNbLqQqpW6NvM69h4K
QpV6EFGdswShlvhTmPrxWCw9moYWOTl9kheWvz8UM+zT0VhTiYAzizDxvBcMcg53GuOwbu5MTFjn
hVrtlkFvu3u0AVB9rSXdDeu2LsPOyFzckDhVk30WQz5ajKMXNuObCYeRZKxHccQJzHn3E9hnqKhY
ixBXN1xzPgfrsXMxyyYSeokVFa7z8cqkvYhV5qujTRsj2svicWb/Ksy7ViQlqkPAgpmYNvsQImtv
iaExleHeQ8LqFoD83dItZc/xwXGr4Zi3PxD6tru421ICN6uh+P1/TcYZ572YPGUf3AMuYcXID2WM
0IlPj8HOVZMxdf95nF84H19beWhfhWsJtsY7k63hEiPjyR+mYo+vWhdog6+Yv8HTt+Gk9IMZZg8B
tkphqoIOYPK2HfAslj4j41qsx2a8/8V2OF/fj3kfDYNzjipsNQKc3ODmeAorF1jjkKsyAFcx/qtt
PQbgmATTLbh0cSPGzrBFmZp0NMdg7/K1Yk7ccHHj15gvM9mC1ltoD90ux9ngeow7Tiw8hKiyUnjt
W47RQxfAt0HseM+tku81AIqbjcgP94ajoyMcPUNQVK9mB7fRmBcMb9colLWr69eGjHAX2ccVfplV
0hZ1uLJ3NWYv2YsAdznOKxW1Zt8iMOdWdRJ8JG1nnxjozRYIHo0YQ2Muwq67wUmVyUzXYgrQoo3h
XSiLSEBxrWrErUgPd5bPr8E/U28y2kJrVTr83NRx3ojTaV8dABrT4evuBGeXYCQk5SG3qEYmjYVI
9vJEaM8qSHNZIrxc1DnFoEA790fTawASEhK0wK3u/T+O1L69BkDN+FVQ72u/vqRWEpQB6L2uvf3y
u/RUGAD1AptmXTiOrxqFV/u9hP6v9cNLX87B8ch8FMZtw+j/fA5fr3BHSVMmrq4dgYEv9MeADz7H
6P3+SE2yw9TPh+DrQS/j1Vdfw+ujN+N6kVHMgCmgqAdxOhqy4H5wId4b0A/9BwzC6GkHEZ1tlBmm
esvSt8up1CSm4GZHPaKcdmDSm6+hX/8BeG7IeMw7GQ1Dcz0yvTfj41ffxOhPB6D/c+9jlM01lDTk
I2DHUAz4wwjss9uDSTP3wDOpECVBKzD1i2fR78UBeG/mUSTpU+G4Zx3mrFezUqHaG0unrcMJnxTE
n9qJsa8MwIBXZXb61mC8OH4HbC9tweT5D60AiFokuLbnnMG4P7+JWeeSUN1xG3faKxHrJHU29ZLM
gJuhzy9EVk6N9AWZYVqt6bkFYPoaoHqwra4oAafmT8PgP7+GAf2lft6ahl3X0mEsD8aFtW/hzVcH
4JX+Y7DJIxmGnMsyK1HPT5gMQKzzHmk0O3DyuMzM15hWAHYuWo3N51PQXHoR8we/hpcHvIkBg9/B
7z7dhbiqBmmYj7EC0KJmrc3QpdphxdgP8edX+6N/v/54d64E6dIixJwbj4H/9i7WXM2AodgLW8a/
KXX7Gl4ZOQNrneIR77MNQwYM7Lk272HkBltkNLSiq/cBxKYWCRQ9ju9mM+KOj8Okc/dvAdwrx0Nq
bW1HU2UmrqyZj6HPS11JffV7bRw22EWjLMETK4f8Gf/16seYNGYSPh+yAucDkhF1cDW+fu5l9H/z
bUzd5YiEmAOY9sJz+GKuI/IbE+G+7SO8M2AAXntpOBbbRqOm3BWzx9nANV4ZgBMYNfqoZgAiru7B
7Nk7cfSwDZbuDkDitaXo/0//iH9/vj/eev0LbLuegYKIc1g49EX06/cKXpuwDDt8isUIS/CUsmvt
ubMRiR4HMP3dAXi1/+t44aNRmH4oEIV1nTLYNaIw6gSshr+Nl6Stv/bq6xiy4hhCC1t63mtxvx4e
ZQC0vtaYB98TC/Hhm6+g/+sD8OL7w7DkUixKK9ywccgLeGfIDkTWlCP27EJ83v9lDHh9ID5cdUEG
2WBpO6Px2Zsv46N3BuD5d2bicHguGpVRVdektUP6tB5JHjvxzUdvST9+Fe++sw4ugeXokH7R26a+
JWXuxUDoUq5iw5h3MaDf63h90DcSqOfig8+tcUWM1cQpBxGeV4jsa1b4ZvDzeO2Ft/DJskvIa0iF
7eypePlf+2Hg4AF4+bXRWj+o66hFxMYV+ELa3JuvvoQBbwzFO3P24OyJzbBadX8FQK1qNusjcXL1
6Pvj2ogZOBBUjtamCkSemItPXntFjn8bH626iKCSVFzf+gn6//EbHAm1w+5pA/Hu6/Nw0mUPpkzd
BTv1MLCVXY8BiBWjvhprjyegRe+IFV+8jhf7v4k3PhmIf/5kO0KykuEw9Su8+4r0v0FfwvpyAuqk
Dnvfl/BYBuAHkYcL22yw7mhGz9+WifkKwM9lANRtgF+kAVBq7ZAC6wqRGBWB8PAIxGbI4CXGoLWx
HAVJsUhMK0VjVyfq9QVIjA5HeHQaiupkll9wGWO+XI5Lnj6IiotFUq4B7dqSoVm+kna7DDrqO9Th
4bHILG7QZsCPfnmIklq+60RnuxFFabGICA9HZEoudK03cafTgATXzRg2ahvCkqMQFZWCgsomdHe1
ol6XheToJOTKAFlYokN1XbPMKqtRmBaF8IgYpBbWyn5N0JeXorisGk0S+FqbqlFSVIrKapl51uuQ
Gx+FSKmDxLQsZBdWoEpfjqLiKjQ+VGdqFaC1WcqXmY+K6noZJNVsrxG1BqmzIj3q1dP0XV3oVm8M
bKxGaXGp9hav5t5AKOmpF9O06PKREil1quo9vRDV6nZMZzNqK7KQINsj4vNhbJRZeXMVCvLLYVRP
87c0ST4VKCoqlwBehuJSowSAWpSXlKJcL/XbbEBahMwUPK5h3+4Z+I+FtiiS8+sweyfCIw1Ab9lk
VldTkC51IWWTuksvkmvb1YEmQy7SYuPlOlajrbsd+sIUREVIOVMKUSez+3Sv7Rj29RaEJEYgKjoZ
eboGdGkvDjJLX5PUQ1MjjBUFKNTV9v0k+UPSZqKGYmREq3YajuikXFS2duGGOvf8eESFRyEpJRs5
uWXQG6We6qu06xkREY2sqia0t+hRnBqH+JQS7QG9RkO+tBc5vxj1HXllUqStFJTBUNuAxrpKFBTo
UN/UgJqqChQXl0OnK5dgKh2+sgjZifGI1fpLLHLKa6VNt6A0W9pqRARiMktgVP3nXtnVrTDVnmtR
mhlvas9JWShv7hDj0ybXTtpKayOqclK0z8Ij45FTViMDifp2yIN18F3PAGh9Tcqdkxit1U9EQhaq
6tXqSS0qcxIQF5sDQ4v0vYYqZCZI2SPikCazsLtNYVhrtRDr99kjIS0OUcmSfmvbA9+VV++GaG+u
Qan0x3Cp5+ScSjRIWn1+k+ee1Hmr/6FN+lxBCqLVucWkIN+gR0mpHgbpW4WFOtQ2Sntr0iM3WcaI
iHhklTbgRlcj9MWFyEySepZrZOoHrdpDXE3VJciMiUCk1HVSeg5yiyugryyXfqD69P0yq3GtpbIQ
SVp7UeNakZRZ1bmMn1JPGT11kF5eg+buNjRUZMi+yciv0qOqOFUMYwaKJd0iSV+NA4VqHND6eS0q
SktRqqsXg2REZnQIvD09cGT/TPzb3PPIqmxGm7TTZOkXkQlpKJWxsrNn9q/00xmAG2hpqEdd4yOm
/RaCMgDq63zqfr76b5fV/3fyOFL7qn6jXgSkXnP8JMeqcdTPz++XaQC0YNbeiRvq++OiG+qeq+rY
0sE7b9zUXrGp3gZ4b58bNyRIyT7qa2FTDyC4qAF35J/p1aDm6ZqkVhm6JZ2bN29or/Z85IzhYan8
u9XbCOXY7i4JYO3oaqtCsud+TF/giMo7d3Hn1g0ZWCWAaeWTYHBT3WOXGYv6vrMaDLQ0THl3S97a
A27qc/W9bxlM1YNTHZ0ySMm+6un3Lq2c6lW/ErxVGlL2zkeVWd1z1crVW59qZv/t/bW3yKk8VAB+
KBC2dqjnI3rzFLMg9W56a113T113mpbGVV5Sv73GSa0gqHNUQaJTmyXKQC+D443bt5FhfxBffTAA
r8sssN8387AtskIGrgdN13caAE2SXqd6DqC37kzXVr0ZrVv+1upcynlvH2kTt8WwZfgewrS59ii/
eRt3bsv1VmX7VvDvlWp3XT1p9fX5t9Ui59vVU1+mulEzbKnfLtVOpJxyPbrEqKhrb349tW8TPNCe
TXmb6r73Gkody3XSjlX7auesrun9ulbPb6hr3HvNVJ7ak/L3yqD6zyNWM+Qadpi3Z3Vd732mDOP9
+lZL7321ue8yAEqqr/We880bXdLm1D4q7RtQr91VpuR+vaj6ugXUh2LL0q045p6r3Xq53dMOH05b
vXa6tz+qOvxuE28uU1syteduud5SRq1vmepV+9qwGIWunn5qajPSB9SzQ9Kubqiy9vYDaUvmbUD1
U5WWqR88bDS/Pa71npf5mKRWKVRdq+detPFD3QZT5dXqz1TG++OAGjNMfe3mnTvIvXYK4z56Xfra
63jly1mwDi5BnTIZ2nNPqtySXpvq0/fL9dMZAKJQT+mr/wfAw8ND+w96VGB+HKl9vb294enpee9/
BOxrv0dJHafG06fSAKhBXi1TKAOgfleN8C9WcwNqa+rRKOmrN4z1uc+PLDVYNDXWo0ZmadrrZKkH
pK5tY201KspM//Vomd6ozeYevubqqy3K4SoToH43/+yHitfmp5fqy+q6KiPw4/RjMTQtjairrUN9
Q5O2GtH3ftTDUvXfVGu819dKK6Wvicn7vuuiPqcB+OlQr+tV/UMt6T+p1IOAylz39dnjSOX7cOx9
lH5WA6AKp9yJ+k8OzL/68BdJBo0GteRU28dnP6Fq6+RC1deJ+ej7c0uXqp/GRpmpqBUOadD1fVwf
dX9LmUE1EJl/F/YvlXZtGnhtfiqpVTz1ljL180frxzW1pgGs7sdKz3L0QF9rVH3t++tQXTf1qlka
gJ8GdZtI9Q81rv1cUv2n1+D1FX/70s9iAFSBVOFUg1P/oYEyAeonRSmxPfzyxGv2y5e6b6y+U05+
fNQKi5rc9FXvP5VUfFXm7qk0AMqhqAZHCCGEkB8XdTtVfRuABoAQQgixIGgACCGEEAuEBoAQQgix
QGgACCGEEAuEBoAQQgixQGgACCGEEAuEBoAQQgixQGgACCGEEAuEBoAQQgixQGgACCGEEAuEBoAQ
QgixQGgACCGEEAuEBoAQQgixQGgACCGEEAuEBoAQQgixQGgACCGEEAuEBoAQQgixQGgACCGEEAuE
BoAQQgixQGgACCGEEAuEBoAQQgixQGgACCGEEAuEBoAQQgixQGgACCGEEAuEBoAQQgixQGgACCGE
EAuEBoAQQp5S7t69qw3SpaWlKCsro6gHpNpFa2trT2t5cmgACCHkKeXWrVsICwtDfHw8kpOTkZSU
RFGaUlJSEBwcjMLCwp7W8uTQABBCyFOKMgCxsbHaQK3Gw5qaGorS1NDQgPT0dBQVFfW0lieHBoAQ
Qp5Seg2ATqfTBmqDwUBRmpQJSE1NpQEghJBfIzQA1KNEA0AIIb9iaACoR4kGgBBCfsXQAFCPEg0A
IYT8iqEBoB4lGgBCCPkVQwNAPUo0AIQQ8iuGBoB6lGgACCHkVwwNAPUo0QAQQsivGBoA6lGiASCE
kF8xNADUo0QDQAghv2JoAKhHiQaAEEJ+xdAAUI8SDQAhhPyKoQGgHiUaAEII+RVDA0A9SjQAhBDy
K4YGgHqUaAAIIeRXDA0A9SjRABBCyK+YXgNQWVkJo9GoDdYUpVRbW4u0tDQaAEII+TWiDEBUVBSK
i4u1sbC8vJyiNClTmJCQgMLCwp7W8uTQABBCyFPK7du3kZiYiJiYGMTFxVHUA4qIiNCMwA+FBoAQ
Qp5i7t69izt37lDUt6Taxl8CDQAhhBBigdAAEEIIIRYIDQAhhBBigdAAEEIIIRYIDQAhhBBigdAA
EEIIIRYIDQAhhBBigdAAEEIIIRYIDQAhhBBigdAAEEIIIRYIDQAhhBBigdAAEEIIIRYIDQAhhBBi
gdAAEEIIIRYIDQAhhBBigdAAEEIIIRYIDQAhhPxCaC0JxN6lS7BkyRIs3eeE5IaeDwj5AdAAEELI
U89dNBdH49z4GZi5ZDVWr16NRbO+xKeb9iEkLx9RvjHILGvp2ZeQx4MGgBBCnnrake11BLPHOshv
PbSnwzPIExnl4di48AjcE2p7PiDk8aABIISQp56bqAg/gCG//xyrrxX1bDOh91qOd3//LF4acwwp
9XfQmnAEY4Z9ik8//QZzz2fKHvWIDjmBCVZWsBo8GEPGb4VbTqvpYGLR0AAQQsgvgNtteiRf2YOp
Q5/FmwMHYuCnC3AytgEt5Y6YMWwm1p6KhiH3GsbtOILzTh7wcDyLbdvX4nJkMmyXf4H/2W8WbD08
YGv9JWbt3Ifkmp6EicVCA0AIIb8Y7qKuMAaRERHwOzobgxYshmtqJA5vvIjArBbkX/4Q/98f/oyB
73+Ejz4YiFcGDMTkU9fhsGMxPraJNCWht8PXG3fgTBpXASwdGgBCCHnauXsbXW3NaOru+VtxNxpb
VlnjpO1l2Gw8D9+0RqSdfgPDlh5BZFYhCgsLkJ2djdyyZJzbvQpDj6SZjqu6hi8378fJ5GbT38Ri
oQEghJCnnS4D/E4swudr7ZBWUIACUYLzSiyx2YDQjDjsnL8Zx5zSUZNwDIPeWY2LKaXQlabgwqlN
WOngA/s9S/DuSkftuNgL0zFr6xaE6+/2JE4sFRoAQgh52rl7BzebiuG07Ru80q8f+oleGbEIZ1Jb
cAcNuL5gFAa+PA/XChpR4LMB7w1Q+7yN4duD0d5VAVebL/E//vkZ7biXx6yDc14rGP4JDQAhhPxi
uINbt26ZdKdnk8Zd3L59Wz41cadnH+3vG3k4tnEOBm4O6+M4YsnQABBCyK+ZG5XwdTyLDdcKejYQ
YoIGgBBCCLFAaAAIIYQQC4QGgBBCCLFAaAAIIYQQC4QGgBBCCLFAaAAIIYQQC4QGgBBCCLFAaAAI
IYQQC4QGgBBCCLFAaAAIIYQQC4QGgBBCCLFAaAAIIYQQC4QGgBBCCLFAaAAIIYQQC4QGgBBCCLFA
aAAIIYQQC4QGgBBCCLFAaAAIIYQQC4QGgBBCCLFAaAAIIYQQC4QGgBBCCLFAaAAIIYQQC4QGgBBC
CLFAaAAIIYQQC4QGgBBCCLFAaAAIIYQQC4QGgBBCCLFAaAAIIYQQC4QGgBBCCLFAaAAIIYQQC4QG
gBBCCLFAaAAIIYQQC4QGgBBCCLFAaAAIIYQQC4QGgBBCCLFAaAAIIYQQC4QGgBBCCLFAaAAIIYQQ
C4QGgBBCCLFAaAAIIYQQC4QGgBBCCLFAaAAIIYQQC4QGgBBCCLFAaAAIIYQQC4QGgBBCCLFAaAAI
IYQQC4QGgBBCCLFAaAAIIYQQC4QGgBBCCLFAaAAIIYQQC4QGgBBCCLFAaAAIIYQQC4QGgBBCCLFA
aAAIIYQQC4QGgBBCCLFAaAAIIYQQC4QGgBBCCLFAaAAIIYQQC4QGgBBCCLFAaAAIIYQQC4QGgBBC
CLFAaAAIIYQQC4QGgBBCCLFAaAAIIYQQC4QGgBBCnmK6bt2FQ3oLbFOaYZtKUT1KbEKyvqunlfww
aAAIIeQpxtB6C79ZmYvfzM3Cb2b1yIqyWKnrPycbv5mRgbke1T2t5IdBA0AIIU8xxrZb+L/W5+Mf
NuVhhVsxll0rxlLKYrXWowTDzxVqhnCZd01PK/lh0AAQQshTjDIAv1mbjz/vy8eNeh0663Ror6Us
VWiphGNsmbYSQANACCG/YnoNwDN78mGorEClrkIbFynLVItRh7PhpdrtABoAQgj5FUMDQJmLBoAQ
QiwEGgDKXDQAhBBiIdAAUOaiASCEEAuBBoAyFw0AIYRYCDQAlLloAAghxEKgAaDMRQNACCEWAg0A
ZS4aAEIIsRBoAChz0QAQQoiFQANAmYsGgBBCLAQaAMpcNACEEGIh0ABQ5qIBIIQQC4EGgDIXDQAh
hFgINACUuWgACCHEQqABoMxFA0AIIRYCDQBlLhoAQgixEGgAKHPRABBCiIVAA0CZiwaAEEIsBBoA
ylw0AIQQYiHQAFDmogEghBALgQaAMhcNACGEWAg0AJS5aAAIIcRCoAGgzEUDQAghFgINAGUuGgBC
CLEQaAAoc9EAEEKIhUADQJmLBoAQQiwEGgDKXDQAhBBiIdAAUOaiASCEEAuBBoAyFw0AIYRYCDQA
lLloAAghxEKgAaDMRQNACCEWAg0AZS4aAEIIsRCe2ADoqlDT2IimpiaTGuph1OtQ3te+SvpqNNRW
Q6/TQW8woqHGAJ355+XlqDTUwlhtlH3KH53OY6lcyleJKmM9qvUPfSb56KpqUN/QU25RrUEvZZFj
zPd7DFXVNKKxsQl1tZJeTdWD5/NjqrwCukoDahpqUGV+XWS7vlrVWQ1qJI411hu1z8vlHCsqdHL+
sq2h9sFjHlM0AIQQYiE8iQHQSRCvKMtEmOMlnDp+DEePHsVJW1fEFNSitkoCUB/7l6WH4rJnJDKL
ipCXEgn30FQUy/beoKnTG1CYEoSouBjklBr+ohUInQT/8pJ8pEZ5IC5HAr4qr/pMAqO+phnVuRFw
v2wq97FjJ+CXWgGDBChlPB5Oq29JuSWPrNgruHz2OFzcfWHnl4jiyvvn82OqUkxMUU4iQhxDkFVa
ee98dIYqFCT6ITzKHyFeXrjqG4WsYp1cv0pUiqHJiQ+Es1sw0op6rtlD6X6XaAAIIcRCeHwDoGbw
lSjJdoDV3z+DV975AIM+GYR3Bn2AhbsvI6O0Fno5/t7+EngqJTAWh57GpI12iMtKg8+R2fj3cceR
qtdrKwJqP0N9O2KPDcNC6xXwym7TjMT9PJ9MlTLDL00PwYkFf8A6zxLoJR81w9dV1cOQF4mjmz/H
hx++h8+GDMJHH72JKQtXwSmqAOU62e8xjIdOX4WKkiQcHP4CPhj8PpZa78a0PdeRV6WXenuyQPv9
UjP5SuRG2mHV219iR2gJqvWVUq961DcUwn7teCzePB+L3/sQ//iHqbiUWIS6hjoYSlNwatzv8bf/
MAJnkvQwqGP6TL9v0QAQQoiF8GQGQIeCVGesen4DfMtq0HHnNgyxp7F++oew9qtFV3Md6sQklKkZ
t7ERtWp2XdOE291taKvMgdeR+Xh26mmkyUxVX2VEfVM7bkgZ8q6Mx5ptq+Gd3XrPAOgMtWhta0N7
ezva21rRVFuF8go9amrr0KyW8Ftle2sDjFU6bem7Smb47V230axLg8Pa57HRq8cAyIy9tlYHv/1W
+HTGMjjnNOJOVztamivgf3AOTnjGoaCiGsa6JlNerc1oqNahTFeFOi0viRkqr5YG1BirxdT4YeOz
WxCkb0T7jS7caatDZXkZKvRyPs2yn0pD1FQn++qrpdxGVEm9lldUwlDbDKPUj6G6Dq0Sg1pbm1Av
dVpWWY2Gpp5zbVa3L8RMlEs9VBpgLEmD58k5GLslCBXVMsM31KM+6yrWrNiIfV7eODt6GT793Quw
8Q1GcW0jytOdMO3V/0S/V0fjfLIextp6NPWUqblBTJqu7Dtvs9AAEEKIhfCDDMALmxCgq5fgfQe1
iW7YtXgWjvjGwt3HA1ej8lBfW4t0v6O4FhSG9Fg/7L3kj6y8DPgeX4g/TT2FdAmENfkRcNhthZlW
8zFu8DP4avlWBBeIAZA81EpCYfhlLJw7E9OnT8eM2Sux0yUD9ZVpuO7lhF2HdmLroqmYteo8/NPK
UdPYgByvLVg+bzamTRyFoR89i83eZRKAZGZuEFOSbo+ZcxZj1YUUCbo1puAqAblagn6tBHVlItLc
d2Pm9GmYscQGp6KqcEOXhKtuTthzwAbWC6Zh1sariMpLhPPaCRjw969ilJWcX6AT9l4NR5GYHENu
KK7stML0qdNhNX8JDjiFIS8lFIevBSEhrwJVZXmIcNsL39gsxIXbY/3WdVi2aBNORuvQVRKBM9vm
Y9q06Zi50RbReeUSOPVaGY3GUsR5nsT8MdYIKa+Wc61Hup0NVq62hlt5Gs59sRGrh72A949dQWxO
JbI8VmHw2BVYNXYqruTpURTjgX2zZ2DadCtsOeOCDF0Tqr/jlgcNACGEWAhPfgvACQt+1x/vDxuJ
0eO+xmfDv8baI6Foz3fHhGWLMPlCEm7IbDNw66uYv+c4guy24N+HboJ3SioCTi7Cn6afR5GhEG7H
VuL9z4Zh0dpF+Pqtf8Pns7chtKjHAEgZCqOuYt26DbDevBWr503D1MULEJ4YirXjBuEfB3yN1Rs3
YPIX72PlGVfkpAZj5rghGClBbt6MEXj35Wew2atcMwB6YxN0gQcxfflcmSUXo6VGBdb751RdWYbs
4IsYPX4CJi9eAavJ32DM6nWIDXfDrOEf4ffvjcbq9WsxftiH2Gh/Cec3zMW7/99bmLbgAI7sno5/
nXgGpdUFcD68DO99NhyL1y3Gl/3+HoNn70KU5xG8MH8PXBIrUFeciDMLfw8bx3Bc3jAGf/e7IZi9
+RBcg8Nhd3kPJi9djV3bt2LJnKlYddEPGaUGVFXqUFltREm8Fw4tHAXrwEp0Nmbh0uZ1WLXuCopv
ZeDI4NU4umMjho/eCwfvEFyVtBccPo3tE+fiSlyUmKwZ+Hr8WuxeOxmfj7TCfpdsMT6PfnCRBoAQ
QiyEJzUAxVnOWPz7IZi8bDU2SHDeunE1lhw8gYv2Z7FYAtMcuxR0tbUhZM/7WHH4LEIdd+OlMTvh
n2oyAH+eaYf8zOvYvnoaJp/P18qQduYbLN2wBj65PbcAKqtgMNYi9cocTJ44CaMk0H8w+B1c9IvE
phmj8N6ya1ChKffsECzbvRfup9di0LJziKvqQrs+DmfmP49N1023ANStiMrgQ5i0eDY2XC9Ea23V
vXPS6atRVZQO+3Vv4j1rH9TcBO4UeWPT2vGYc+A0Vkwcg2FbAtCoynjoTSw5dAEJJfHY+eoWhOSm
w0fO54XZ9ijKdMfmlTLLvlSgnU/KyS+xbIsYGo9TGLjiMNyTK1BbnIyLq17GLtdwXNo4Gy9NsEWl
7NsSuRefvPsM/vOdEZg2ZTJGvvnP+J+jtsI/XYe6anXP3wCjLh2el22wZGMEjPmu2Lx+CTZcyUPH
7Xgc+HgF9p/0xMUFC3HY+TTWT9kKp+sO2DltHpzCgnB02SD84YMxsD5wFK4h2YiLz0SFGCMaABoA
QoiF86S3APJ7bgEEVjag87YkUJ+KY1uXYbbVGszauRFz7dNxs6MT4fs/wMoj3zYAL8x2QFz4WexZ
9RmORDejrbUbSefHYOX2taZnAMRk6CvKEGW/AR/NssLO/Sewb8McTJ34MWx9Q2G9fA6G7w5AXfcN
RB/6BCv2H8EJ68+x6qwbsio7YMiNxsXVYgB6ngGorKpFfa4blixYipUnolHfoh5WrERlpR6Gmkbo
C1JwYu6/YNrpKG214EZxKLbs24IJW/Zg+ZLFmHwiAg2d7QjZ+TaWH7uIqPQgWL+0Bh7xcfA8sQgv
z3NCfNgJ7Fz1BY7HtqCtpQsJZ7/Cqr3bEXrtBN5YeRSeqXo0lKXh8loxAM5huLRrAfotskd5x01k
Oi3C+OEvYtr6ozh+eD8OHjuNcz4xyCupkHKqBwt1MNRVIyPYHcc2WOPS5aPYtHQFrua0oL09Bvs/
Xo79xyKQ7r8OM+aMwvD13kiIdMfuiVNhl1KKnFh/XDh/BNtWjceoQdOx60ocShqqpY77usY0AIQQ
YjE88TMAaU5Y/uwKOKUXQFdTj5pMX2xcOxszdh7Hns3WWH4oDPU38nHqy+cxbfV5RLjuwvOjtsNP
DID/iQV4Zrot8nO8sWvFWHy1NxL1t8pxddZAjJu4HgHaLQCZtZcXwm/PCHy0MxDG9puoSjiPzdPe
wwXvUKxfNAOfbpXZepcYgIODsHTvQVy/sA4fz9oJj6xyFMq+i195BtaepdotAJ2Uu6auBtGn52PQ
pCk4Fl6CJvXd/fJUOGwYhQNXA+B+cDr6zzmL9OomVESexcrFX2DLGfUMwmyMOxyCuo52BG9/E0uP
XkBkeiDWP78K7mIAPI4vwJ9nXUFRtie2Lh2HUfvFYNwsg/2MtzBJyhMR44JJ07bBKSYPpdlOWNH/
WWyzFwOwcy5enGOLwuZWNCadxfTPRmHGoQQ04y4MYUcxfb8twjLKYKzqeYJfTIwxKwJuRyfgzZFL
sGaDA/IbmtHQEo19HyzF3iPBKDZ4YNGfP8Wqq0nITPLCnomzcOK6G87stcLFxGZ01nhjzYCRmLvQ
Cdnt9aj61vU1iQaAEEIshCczAHqU5jpjwe/+iD8+9zxefOllvPj8QHy6+iKSaisQeWIhPvnTf+HF
Vyfjqw//iAWn7BHlshevjt+NADEAgaeX4IUZ55BX34B0n8MY+8F/4KXXhuCNZ/4Zo9fuRFihugUg
+YjyE85irqT/wksv4bn/+h2effMzOAZGYJNaAdjppxmAmMOfYcW+g4jJq8b5lW/ixReew3PPvoeP
P3weW33LUaV9DVDKXmlEdUU+3I+Ox6A3nkO/l1+SfZ/F1I3HEZ6tR2VuPA4sGYo/SX7PvfY+xh7x
QkOmB6xmz8XkY2GaAQjd/R5WnriE6PRgbHp1HTwT4nH91BK8NOs8ChsbkeZzBBMGPYv+b03GiIHP
YPrO3YgoKsXlOe/g5Wefw/PPT8DEcS9ir3sk7HYvRP8FV1BQW406owHJV/dgxHuyT79+eO69idjg
EoWiyvtflayoqEJdQxGCj83E0FdG4ERUjRxXjZrmWBwcvAL7jwSioEWPrNBE5JdVIDfBE7snWcEu
PQ0+B6fhg39/Aa+9/gpeH7YYlwMKYazlLQAaAEKIxfP4BkCkPpPZeUZcJEKCghAUGIjAkEgkZcts
tcaA8oIMJEQEIzAgDokpCcguKkRJYS6S0nNRXFaG4vwsJGbko6zSIDPQQmQlhMi+EYiKjUV6fi5K
yitNgUkCn66yFJmRoVoeQSFhiEpIRWFxCXKyMpGWWwydBPeSvFRk5eahRAK8Li8W4cFSpuAYJGUk
IqfYrNwVprcNGkqykBAZhECVZlAwUgoqJUhJWSSt8px4BKvtYbFIKTKgtrIIGRmZyMgrkbJUoiQ3
BVn5BSgpK0ZOUjaKSktRJOeTlKneI6BDUVYcQryc4Ox2DXvnTMKGgxeRUNkIXXZvuZKQnpOEvKIS
FORm9hwnZZO6qJa80hPCTOcanYGSikro1VcB75VfPa+gk/PNRGZCCgp1BlSqbVJHeSlZyM0rRrm6
pVFrhEG9lbG0CLnpGbKfHhXFeUgIkXMOCEJEcjqKZNujlv+VaAAIIcRCeCIDoKkShpoa1NyTzK7V
UrV6ba1egpm2rVoGfvX9dwnoEpiMBtOLctSLdNTv2ut3JRAZ1Kts5XijsQYGbbne/OtpD+WjvoMv
aaiArb0QR73aVz3Ep83yJcBXGXv2lfJoeZuXWUn2V8FW8upNUwVL7fXBFTo5XmbUPcdrQVTlbzCY
9rmXl+ltfFXGKq0slXI+NXUNqM4OxaHFQ/Byv9fwWv9X8N6UjXBPqEBNtQRbQ2+5qiU9o3ZfXx13
b3n/gboQGQ3atyAeLLuop34NUg/33lxYroO+uspkFrSvNvZIJwZCym4yCRKEe863pvr737RIA0AI
IRbCkxsA6kGp4FuGooJcZGdna8orKtWC8KOW2Z9m0QAQQoiFQAPwY8g0q1cBT5NaKehzv6dfNACE
EGIh0ABQ5qIBIIQQC4EGgDIXDQAhhFgINACUuWgACCHEQqABoMxFA0AIIRYCDQBlLhoAQgixEGgA
KHPRABBCiIVAA0CZiwaAEEIsBBoAylw0AIQQYiHQAFDmogEghBALgQaAMhcNACGEWAg0AJS5aAAI
IcRCoAGgzEUDQAghFgINAGUuGgBCCLEQaAAoc9EAEEKIhUADQJmLBoAQQiwEGgDKXDQAhBBiIdAA
UOaiASCEEAuBBoAyFw0AIYRYCDQAlLloAAghxEKgAaDMRQNACCEWAg0AZS4aAEIIsRBoAChz0QAQ
QoiFQANAmYsGgBBCLAQaAMpcNACEEGIh0ABQ5qIBIIQQC4EGgDIXDQAhhFgINACUuWgACCHEQqAB
oMxFA0AIIRYCDQBlLhoAQgixEGgAKHPRABBCiIVAA0CZiwaAEEIsBHMDYNRXoKrHBFCWqbYaHc5F
0AAQQsivnl4D8KwYgLqqCs0EqJUAyjLVWavDhUgaAEII+dVTLQbgb9bl47+vytFMgJJaDaAsU8/t
zcdvt+bhN3OysMSLBoAQQn611LTfwj9tK8LfiQlQKwEU9TfrC/D/rMjFOv/anlbyw6ABIISQp5g7
d8UEtN3WbgVQ1D213kJr952eVvLDoAEghBBCLBAaAEIIIcQCoQEghBBCLBAaAEIIIcQCoQEghBBC
LBAaAEIIIcQCeeoNgE6n6ykqIYQQQn4sDAbD02sA6uvrUVRUpBWSoiiKoqgfTyq+Go3Gp88AKDU1
NWmF66vgFEVRFEX9cKnZf2NjY5/x91H62QyAUmtrK0VRFEVRP4H6irvfpZ/VAFAURVEU9XSIBoCi
KIqiLFA0ABRFURRlgaIBoCiKoigL1M9qANTXEzo6OtDe3m7xUvXwQx7aoKhfqnrb/cN9wdLUWwd9
1VGv2traWFeix6krNY6yrkxS9fBUfg3Q/F0ABQUFlEh9deNJLhZF/ZJVVlbWZz+wRKm3ovZVR0pq
TFAvTevrOEtUaWmp9jXyvsZKtU2No30dZ4lS8VXF2ceNKz+bAVCOtry8HK6urggKCrJohYSEwMPD
A7GxsZpj66u+KOrXIjUYqe8nX79+Hf7+/ggODu6zX1iC1Ln7+vrCz89Pq5e+Bmo1Vqp9vb29tbHi
4TQsRaquAgICtLGytra2zxVTNX6qcVTtY8l11SsVX1WcVW3o4brqSz+rAVAzgMDAQO2FBXq93mJV
U1ODpKQkGgDKIqSCXENDgxb81WxOzdj66heWIDX2qZmaGqy/ywCoYJabm6u9PK2vdCxBqp2olRJl
ltSY+V0GQI2nap++0rEUqbal4quKs0+tAVCOrrKyUruwlir1nzYkJCTQAFAWIXMDoJYo1fJ2X/3C
EqTGPhXYH8cAZGVlaQN7X+lYglQ7UYbxcQyAGk/VuNpXOpYi1bZUfKUBEJWXV0BfXYvGnk6m1FQn
DlEnn/Wxf98qR3llNRrkOKNeBi1Js+/9nkw0AJQl6acwAOXlOhhqG1Bfr/q09FOtb+pR01gDQ+WP
11d/bP3sBqC8HLpKA2ob7o+Djdo4KHXW1/5/sSRdXZW2ZF9XLWWX/Pve7/v11zIAqi1VVhlR31Nf
JjWjvqZKq8t6qb/qPuOBOnc9jDW1qDeqc3/4c5MqDTUSi6pR2cdnf4ks3gDoJLibftejuq4cyZ7H
sXj4ZxgyaBAGDRqMSVvtkFAsDdPweAOQTl+NmlQ3rNl5Fo7RuaiSBq3rY78nFQ0AZUlSA+iPawCk
fzcUIuDgauzZeRmJ5U0wVlWivDQalxadhX9yHsqrHr+vqkG9psaAynvjR690P0p/N9fPawDKoTc2
wpAXgTMrhsgYaBoH5+yyQ4quDTX6Hx6cHykZMxvywnD4yFHsdUtElQqafe33GPrrGIBKKXMFssPt
sG7E5/hE1dngwRg8+CusORGEojQPLNl8HPZROd+OB+rci2Jw7ugerDgfDl2t4cHP5XyqdCVI9z+L
eXtckVIq10eZVfN9/gJZrAHQ6Sq1jlIlg4CpwqtQ15oPry0r8c1/jcGG08dx/Pg+LJ38MdYecURa
eaM2YKhymHT/IujubRMZ6tAYsRcvfTYPmz1TYaw3ygWTPL41UDyZaAAoS9KPbwBkFtaRA7tJr+If
/8dg7AopRkNzDSqK3bHs3+bhXEgGyrWAbtaXVZ+VfNXvpv6rfpcxQ2ZyRYmu2LrVEYkFZahUMzst
j97P9XLsjztI/1wGQI1f+uww7F/zAT6cvRqnjh7B0RMHsWH2p1i99xxiixtRazCro55xUF2f+9vM
xrsHtpuNmeb1bKhHR8ZVjJswCSP2BqK6qeYHz3T/OgZAj5qmEkSe34Yx/zQcq44fwaED+7F//zE4
BaSgND8eDu4BiMwoQqWYTFUP985dX4Xq0kyE+HvDMSQdOoMYBPO6kfZk1BUi5uw8/OPwXYgo1cEo
JuLHal8qD4syADqdHnq56IbKMuRE2WLV6suIU51YLXm15MBz806s/eYyCgHcuXMHBZenYfzqHfBM
Fcevr9DKU1YmLlgukmpsWvDXlZu2qwGguh6N0Yfx9jfLsNMnA7X11agoL+tZbvzhogGgLEk/hQGo
a0+H7azVGPv8m5h/xQ0JpU0wVnhh3QvLcDk8ExU11TLb6unLahla9XG1RKtm9T2Dsk4L8uXIDT6A
L0fsQEBmsYwnMjbpjajLCYGD3Qkc8S+QIGkaZ36M2ZrK92cxADI21hiKEO6wE2MnroN7QR0621rR
1t6CspRAhIVHIrtUzc7VGGgaB8u1cbDXAMi5anVnCvD3tkldqv3VvupvbfIlx9yrZ0MDOrNcMGOm
FcYdDkF1o/EXZwCMjYUIO3cYK98/ggzcRndHO9rbpA3XSPoSWxrqe24Ja+1H2ovEhN42ptV7bR0a
1C0Ara2pWwqm+tXJtTRWFiHu0jL817iDiCwqNdVpT733XZ7Hl2UZAKnoyvISFBXE4dzST/D2mNU4
7y8OTXVsdQ+qJRdeW7dh6Wf7EFYtjbY8Cy4b5mPzUWckh1/CN58MxKuvvopX+72FIcvOI03csjE3
HPvmf4wXXnwRz382E3uDCtGdcBzvjF6FAwGZSHRYivfeeR3WLpkol4bw7SXDxxMNAGVJ+mkMQCrO
T9qCPWs2Y8O0TTh2KRZFtYGwFgNgG5UnfSwXrrsmSB9/Da8OGIaFF8IQ77EJI4Z8gQ1uWWjKtMOY
IQMw/dAVHJ87EP/0v36H1+edR0qFaTXRUFmB7JDzmDHsJQyeZQO/tCoJZDKI/4Vl/7kMgK7KCGNe
NI5tGof3t4SgSU1e1GcS0PWGWtTUNaAu/iLGD3sP/bRxcADem3ca6YWZ8LO1wfvjp2HGpy/ihX4j
sfxiBAwtrSjyO4gxg1/GCy+8gBfnH0F0biXqdflw3zfZVM/9P8WMYxFoLvLArF+0AShCxIWDWPzG
ZvhVFKMgNwc5+YUo0YkxjDuH0Qt24nxYFkpDD2PwtEWw+uoFvPDSmxi2yR360mgc3r4OUw6ForY7
D64rp+KjV15Fv5eeg9VhPxSUG5B2dSV+/8kkTBsu9fjS+xi70xNFNQbo+yzP48uCDIAOVZJG2Nlp
+PztIVh13A0hKQXakotpOUUZgGKEHF6KD/7H7/DMS3KBXnwOb41ZiStRBTDoChEb5AYnJxfYntqH
5dPfwlHvaFzatQAfLDiKsNQMuB+aAasN6+Dvdgqfjl2ItRsXYbDVRhy+FoCMIhkIpAx9l+37RQNA
WZJ+MgMwcS22bfBCxLX1sFp7An7JPtj62mo4hcUh6OpavDZ7Bxyc3eF4aB1mLZyJLddzEXJ0Albv
XAmb+SMwa9VWeKeVI9VjC4YNXQXb0HSU6dXKgORRWYUqGfyz05LhfW4xRr8/EFa7vJChq5ax54eX
/+c0APqscJza9A0mnE/Wlvofvh+tLytAfIgHnJ0cYXf+BFZNfQ37PSNxdf0Y/O+XpuNSdBauH5yO
ZRsWwT/oOmZYzcWCo66Ijo3AsTUfY8nRq/C9uB4D5m6HnaMbHI9sxOzF83D4ih2WzJ/zCzYA5Uhw
2oYv/u/f4o9idp5/7jk898VCnIjU4Vb8AfQbthh7/dJR7L4K//Tvn8PaIQQBzsdgvWgIbP1DsWnJ
FLxvE4LKpGOYO2cGlu93RqDrblgtPInApByk2C7C7/70DfZ4xsD/8jasWfgJTsc1oKaqr/I8vizH
AOjF3cZdwsFTB3HgvC9Simslj3oJ7L37KAOQB69tW7Bo8Hb4FGYhPT0HSS6bMHjxDtiFpOP6vs/x
zgBxrS8/jxf7vYS1J22x2eolLHIqRntzA4z6MpTKbKAm5jQ+6v9f+Kff/j2GrfFETlUL6qr/svLT
AFCWpJ/OAKzB5uVuKLydgAOfLMaeS8exZuBmXA0IxbG5/xv/778/h9dkZtrvlRfw3PujsNazFLid
iXPfvIz/33+Ow7l4HTqajCiMOoVJE48gqqBc+mZP31ZLumq5t7UbDaVJCPY8i+3WJ+EdkYIK40MP
dz2Bfk4DUJ0bjaMbx+CD7aHaU+damculDOozYzX05aVwP/AVPnrzVbz2ykv407O/w6arUXDYMw8v
z7qIkhtAofsKbLaZh3075mDSIis4pjTK+FiH6spyFOel4vSsf8D/+29/1ur51VdexPMfTsD2c2ew
bMG8X7ABKEbExQNY0H8truVkIDUpEYmpWcivqEFj5EG89c0KHPRPQ5HXBjwzYgv8iptQnemNYyvf
xAnPcGxbOQuDtgahtdwfyycPxkv9XsG0jcfhGpSF4pJ8xF9ehj9+vQfR1Z3Qx1/G3mVvYX94I2pp
AB5femnE0Rdm4It3BmHJ3svwiMpCRXXvfTplAHLgabMTa7++pD0DcLPrDroLbDF+0npYzxuO19ef
RGReDQy5ITi19HVYn7bD5tmvwcquAN1dnagrS0dKWhpKQ47ig9FLYXPmIBa9MxUHAzNgUF896qNM
jysaAMqS9FMagE3LnJB7ow35zisxfu44DPuXFbgaEozTy5/HZ2s9UGgwwlCWg+jocEQW1KKt1B02
X7yCv/+3T2Hjk4I6CWZFYUcxbtIxxJXpUa0ZABX8q1FdXoCUmFBcPTIbX7/7Dubt80O2Xn3NsK8y
PZ5+LgOg3YuuKkCw3TaMnrIVASV1aJPBvrmlCRVZUVpAS7i0CAMW7YBHahXqy5JxbsmL2O4Yiit7
F6LfPFuUtHUj02kZNm5ZgKP7FmHM3Nm4ktyIG50t0OfFIT4+EmcX/hmfrHRBnkzKqsvyECfjWlrY
Fcyxmv2LvgUQfv4Qlr29B7FtjagTs1RtkNhiqEV9xAEzA2CNZ0ftQkBhNcqS3HBo5Ts47WUyAINt
fFEmxjEmIR4FVaXw3z8K/f/+KxwNSES882o8M+4QYvWNKI44h13L3sWhSBqAJ5P2EIp6aC8dV9YM
w4fjVuCYWxyKpNFU6mSAUN8CsFmNcS9Mx14Xe9jaOuDUxhn4aM1RXDy1GNPnbsDh81dx8chKjB34
H9jmloxrx9fho2nrceGaBw6v+RqT129E6LUjGDhyMXb4ZiD89GcYOWUVnMLztAcGf+iDGzQAlCXp
pzAA9R0pOPX1UqyZb4+szmbU1cbh6Ccv4v/6zZc4nZCBhKvb8M7r02Dj4AKnw5sxYdkCLD59FYdm
fQQrm1Nwv7gAUyZNwjGPNOTHnsTogTOw60wQslW/rtTDoCtBqt9JTBn+Gr5YuAfh+Y0SUNVDXX9Z
2X82AyCqrK5DZUYgdix9Bx8v3gFHO1vYXb2IXQs/x+p9lxHothszZy/DzhMOuHLWBhMH/jM22IXA
dvtM/HHaeRS330SG/XwsXzkW10KisHLxPEzasB9XHGyxes67WHrqGiIu78QHr0+FtZ0TnI5ulXpe
iR3njmPu9Gn4cl8Qqpt+gQagqQihp/Zi7ss2CBMDU9Uzzuuq6tAQtgsvDV2I3T6pKPJYhX8euhk+
+WIAEl2wd1E/aU+h2LhoEt7dHIbciM2YN+VLrNnvCBeHTZjSX2JHYBJi7RfjtyN2IaqyCcVhJ7Fl
/qvYG96EOhqAJ5RmAuSCGQ0oSXSCtfUVxBeUScOpRH2LHkUhF7Fq5HB8MXQohirN2Au/vAbcQSku
ThmFDwa+hYFvv4NBIyfiYpxcXHFsF6y/wcCBA/H2+DU4G1uJG9muWLDxKOyi88QFRuHw6K+w6nQY
inVVPc8b9FGu7xENAGVJ+rENQHl5JZo7ixB53BHXriTBiJvo6uhCe447lsw/g6CyJnR31CHwmBXe
lr488P3xWO8SisizazBsxHKcjdPJ51mwnT0WC7Y5IjkvFAeGfYGhX+xBcJlOZnpG1OWGwenqOZyN
qEBznXp1uTL8f6lx+fkMgHofvMqr4wbQoU/C5Q1yfj3j4OJDrihogVAGxwWTMahnHPzwi9G4EJAC
f/uDmLXfGyWNLcgNPIrTJ7fAv/AmauPOY+6o97Xx8f0NDkgvNaKhqgQhp+biHVXP732Nxefi0FwR
jj2792KLU7wElh9+u+SvYQDUC6ZqGspRFBkAO2svFN/sQkdbq5Z3W0c3bhb7Y8nW03CIykJJxFlM
2XgZ0UVVKM8MgePxhXCLSMSl43uw/FwUam+UwXfLIox4W+LJ2+9i5hEv5JdWIsf3GCbZXEWKrhYl
SZ6wO7oIjkm1qNb3XabHleUZgF5JQ6nUG1BjVEG5Qnsnckx0LDbZbMXOPbuxe3ePdm7Hls0bYb1h
E3IKCrWLqgamhoZ6VKtlPZ0e1TX1pm116oLotLda1dUYYdC+9lEFY309agx/WflpAChL0o9tAFQw
8Pb2hc32rdiydbP05w3YsMEa1pu3YteubbDZaI3de/ZKIK/R/he5hoY66bNV0FfXoL6+p1+Liaiu
q0etNmbIJELGgPp6CfRaHqavxFVVGXpuCfzlgb9XP5cBUGNMZmam1MsGWG+ywbYd98fBHdu2YtNG
VWebkCr7tEp+pnGwQeqmUjNA9VIv2lsE1dK+1Jt6c6B6MVpdvWm/hppqbazVHsg2yuRJO17qU739
T9Wn0WgaJ/+Cr0z/NQyA+v8H0lLTJXbYYOvOLdik2pa1tC0l9fumLUhNSUJDbY324p969b4Jdayc
s6G6DlVSf9XVRqmHSs1MVKm3AvbUbZ3UqfY1yyqpX+04daupCgapP0Ol+orqt8vzJLJcA/CQ1Gso
VT4jR47EV199ZaaR2jaluLg4rVGpRvbwUr62zezvH1s0AJQl6cc2ACrQ2Nra3uvL5urt4zNnztTG
GxVAzfv3I2/b9TEO/BT6uQyAmgSp/yDnXt2Yj4O920QhoaHaeNnXONi3TLdBHh4fH//4x5dK8+c2
AMq4qNhgqrP79WQu1Y7r6ur6PL4vmermxzORjxINQI/U8pdycirPR0l1LLVfX8f/1KIBoCxJP7YB
UP1WBYS++nWvVJ59HfvX1s9lAFQdqWMfrpeHpcaiv9Y4+H36axiAx6k3FVuexjqjAfiFiAaAsiT9
2Abgl6yfywD8GvTXMAC/ZP1iDIC6UKqwliq1zJSYmEgDQFmEzA1ASUmJFtT66heWIDX25efnP5YB
yMnJ0WabfaVjCVLtRM20H8cAqPFUjat9pWMpUm3rqTYAyqVcu3ZNK6QlKzAwEO7u7oiPj6cBoH71
UkGusbERXl5e8PX11dp/X/3CEqTO3dvbW/v9uwxAcHAwrl+/bvF1pYK/p6en9pzCowyAGkfVeGrJ
ddUrFV9VnH3qDIBq6GoWoBydWtahSjXH2tcAQFG/RqlZSl/9wBKlZrd91ZGSGhPUbK6v4yxR6laA
+jbHo+pKjaN9HWeJUvFVxdnHjSs/mwFQUoVqb2+netSXo6WoX6vUrKSvfmCJ+r4ZGuvqvr6vrtQ4
2tdxlqonmVT+rAaAoiiKoqinQzQAFEVRFGWBogGgKIqiKAsUDQBFURRFWaBoACiKoijKAkUDQFEU
RVEWKBoAiqIoirJA0QBQFEVRlAWKBoCiKIqiLFB/kQFQB1MURVEU9ctTa+sPMACVxiaU1nVrB1IU
RVEU9ctTuai4phPGhs7HMwATJkxo0IsBqGns1lwDRVEURVG/TKngX9vYgRkzZnb3hPlHM3z48JKZ
s6zaZomUY6AoiqIo6pepWbNEVrPbRowYYewJ84QQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGE/Kr4zW/+/9DZoZJJOTt2AAAAAElFTkSuQmCC</Preview>
  <Form>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</Form>
  <Code><![CDATA[
#-------------------------------------------------------
# NOTE: When new TabPage added place the validation code
# 		in the Test-WizardPage function.
#-------------------------------------------------------
function Test-WizardPage
{
<#
	Add TabPages and place the validation code in this function
#>
	[OutputType([boolean])]
	param([System.Windows.Forms.TabPage]$tabPage)
	
	if($tabPage -eq $tabpageStep1)
	{
		#TODO: Enter Validation Code here for Step 1
		if(-not $global:vcenterConnection.IsConnected)
		{
			return $false
		}
		else
		{
			return $true
		}
		
	}
	elseif ($tabPage -eq $tabpageStep2)
	{
		#TODO: Enter Validation Code here for Step 2
		if($global:vmbuilds -ne $null)
		{
			return $true
		}
		
		return $false
	}
	elseif ($tabPage -eq $tabpageStep3)
	{
		#TODO: Enter Validation Code here for Step 2
		if ($global:vmbuilds -ne $null)
		{
			return $true
		}
		
		return $false
	}
	elseif ($tabPage -eq $tabpageStep4)
	{
		$hostnameComplete = $true
		
		foreach ($node in $treeviewVMListStep4.Nodes)
		{
			if ($node.Text -notin $global:vmWorkgroupDomain.VMName)
			{
				$hostnameComplete = $false
			}
		}
		
		if ($hostnameComplete)
		{
			return $true
		}
		
		return $false
		
	}
	elseif ($tabPage -eq $tabpageStep5)
	{
		if (($global:vmAdminPasswords -ne $null) -and ($global:vmWorkgroupDomain -ne $null))
		{
			return $true
		}
		
		return $false
	}
	elseif ($tabPage -eq $tabpageStep6)
	{
		$string = ""
		if (Get-ChildItem -Path "$ScriptDirectory\logs\test.html" -ErrorAction Ignore) { Remove-Item "$ScriptDirectory\logs\test.html" -Force}		
		foreach ($vm in $global:vmBuilds)
		{
			#$string = "<b>This is my test page.</b>"
			$string = "
						<p>
							<font size=3><b>VMName: <font color=red>$($vm.VMName)</font></b></font><br>
							<font size=2>
							&nbsp;&nbsp;&nbsp;<b>VM Host:</b> $($vm."VM Host")<br>
							&nbsp;&nbsp;&nbsp;<b>Datacenter:</b> $($vm.Datacenter)<br>
							&nbsp;&nbsp;&nbsp;<b>Datastore:</b> $($vm.Datastore)<br>
							&nbsp;&nbsp;&nbsp;<b>CPU Count:</b> $($vm.NumCPU)<br>
							&nbsp;&nbsp;&nbsp;<b>Memory:</b> $($vm.Memory)<br>
							&nbsp;&nbsp;&nbsp;<b>Network:</b> $($vm.Network)<br>
							&nbsp;&nbsp;&nbsp;<b>Template:</b> $($vm.Template)<br>
							&nbsp;&nbsp;&nbsp;<b>Location:</b> $($vm.Location)<br>
							&nbsp;&nbsp;&nbsp;<b>IP Type:</b> $($vm."IP Type")<br>
					"
			if ($vm."IP Type" -eq "Static")
			{
				$string = $string + "
										&nbsp;&nbsp;&nbsp;<b>IP Address:</b> $($vm."IP Address")<br>
										&nbsp;&nbsp;&nbsp;<b>Subnet Mask:</b> $($vm."Subnet Mask")<br>
										&nbsp;&nbsp;&nbsp;<b>Default Gateway:</b> $($vm."Default Gateway")<br>
										&nbsp;&nbsp;&nbsp;<b>Primary DNS Server:</b> $($vm."Primary DNS Server")<br>
										</font>
									</p>
								"
			}
			else
			{
				$string = $string + "</font></p>"
			}
			
			ConvertTo-Html -Body $string | Out-File "$ScriptDirectory\logs\test.html" -Append
		}
			
		$webbrowserVMBuildSummary.Url = "$ScriptDirectory\logs\test.html"
		
		return $true
	}
	#Add more pages here
	
	return $false
}



$buttonFinish_Click={
	#-------------------------------------------------------
	# TODO: Place finalization script here
	#-------------------------------------------------------
	
}

#region Events and Functions
$formVMAutomationTool_Load = {
	
	Update-NavButtons
	
	$timeZones = Get-TimeZone -ListAvailable | select DisplayName
	
	foreach ($timeZone in $timeZones)
	{
		$comboboxTimezone.Items.Add($timeZone.DisplayName)
	}
	
	$Path = $env:TEMP
	
	$autoCompleteArray = (Import-Csv "$Path\VcenterHistory\vcenterhistory.log").vcenter
	
	$vcenterTextbox.AutoCompleteCustomSource.AddRange($autoCompleteArray)
	
}

function Update-NavButtons
{
	<# 
		.DESCRIPTION
		Validates the current tab and Updates the Next, Prev and Finish buttons.
	#>
	$enabled = Test-WizardPage $tabcontrolWizard.SelectedTab
	$buttonNext.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	$buttonBack.Enabled = $tabcontrolWizard.SelectedIndex -gt 0
	$buttonFinish.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)	
	#Uncomment to Hide Buttons
	#$buttonNext.Visible = ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	#$buttonFinish.Visible = ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)
}

$script:DeselectedIndex = -1
$tabcontrolWizard_Deselecting=[System.Windows.Forms.TabControlCancelEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
	# Store the previous tab index
	$script:DeselectedIndex = $_.TabPageIndex
}

$tabcontrolWizard_Selecting=[System.Windows.Forms.TabControlCancelEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
	# We only validate if we are moving to the Next TabPage. 
	# Users can move back without validating
	if($script:DeselectedIndex -ne -1 -and $script:DeselectedIndex -lt $_.TabPageIndex)
	{
		#Validate each page until we reach the one we want
		for($index = $script:DeselectedIndex; $index -lt $_.TabPageIndex; $index++)
		{
			$_.Cancel = -not (Test-WizardPage $tabcontrolWizard.TabPages[$index])
			
			if($_.Cancel) 
			{
				# Cancel and Return if validation failed.
				return;
			}
		}
	}
	
	Update-NavButtons
}

$buttonBack_Click={
	#Go to the previous tab page
	if($tabcontrolWizard.SelectedIndex -gt 0)
	{
		$tabcontrolWizard.SelectedIndex--
	}
}

$buttonNext_Click={	
	#Go to the next tab page
	if($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	{
		$tabcontrolWizard.SelectedIndex++
	}	
}

#endregion

#------------------------------------------------------
# NOTE: When a Control State changes you should call
# 		Update-NavButtons to trigger validation
#------------------------------------------------------

$radiobuttonOption_CheckedChanged={
	
	if($this.Checked)
	{
		Update-NavButtons
	}
}

$buttonEnterCredentials_Click={
	
	try
	{
		$pictureboxLoading.Visible = $true
		if ($global:vcenterConnection.IsConnected)
		{
			Disconnect-VIServer -Server * -Force -Confirm:$false
			$labelVCenterServerNotConn.Text = "vCenter Server: Not Connected"
			$labelUsernameNotConnected.Text = "Username: Not Connected"
			$labelConnectionStatusNotC.Text = "Connection Status: Not Connected"
		}
		$global:vcCredential = $null
		$global:vcenterConnection = $null
		$global:vcCredential = Get-Credential -ErrorAction Stop
		Connect-VIServer -Server $vcenterTextbox.Text -Credential $global:vcCredential -ErrorAction Stop
		$global:vcenterConnection = Get-VIServer -Server $vcenterTextbox.Text -ErrorAction Stop
		$buttonEnterCredentials.Enabled = $false
		$pictureboxLoading.Visible = $false
	}
	catch
	{
		"Unable to connect."
	}
	
	If ($global:vcenterConnection.IsConnected)
	{
		$labelVCenterServerNotConn.Text = "vCenter Server: $($vcenterTextbox.Text)"
		$labelUsernameNotConnected.Text = "Username: $($global:vcenterConnection.User)"
		$labelConnectionStatusNotC.Text = "Connection Status: Connected"
		$labelOKStep1.Visible = $true
		
		$Path = $env:TEMP
		
		if (-not (Get-Item "$Path\VcenterHistory" -ErrorAction SilentlyContinue))
		{
			New-Item -Name VcenterHistory -Path $Path -ItemType Directory
		}
		
		if (Get-Item "$Path\VcenterHistory\vcenterhistory.log" -ErrorAction SilentlyContinue)
		{
			$vcHistoryArray = Import-Csv "$Path\VcenterHistory\vcenterhistory.log"
			
			$vcHistoryArray = $vcHistoryArray | ?{ $_.vcenter -ne "$($vcenterTextbox.Text)" }
			
			$object = New-Object PSObject
			
			$object | Add-Member -MemberType NoteProperty -Name vcenter -Value $vcenterTextbox.Text
			
			$vcHistoryArray = [System.Array]$vcHistoryArray + $object
			
			$vcHistoryArray | Export-CSV "$Path\VcenterHistory\vcenterhistory.log" -NoTypeInformation
		}
		else
		{
			$vcHistoryArray = @()
			
			$object = New-Object PSObject
			
			$object | Add-Member -MemberType NoteProperty -Name vcenter -Value $vcenterTextbox.Text
			
			$vcHistoryArray = [System.Array]$vcHistoryArray + $object
			
			$vcHistoryArray | Export-CSV "$Path\VcenterHistory\vcenterhistory.log" -NoTypeInformation
		}
		
		Update-NavButtons
		
	}
	else
	{
		[System.Windows.Forms.MessageBox]::Show("Unable to connect to $($vcenterTextbox.Text). Please try logging on again.")
		$labelOKStep1.Visible = $false
		Update-NavButtons
	}
}

#region Control Helper Functions
function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]
		$DisplayMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}

function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}

function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	[ValidateNotNull()]
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterWMIProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)	
}

function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}


function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}


function Get-CheckedNode
{
<#
	.SYNOPSIS
		This function collects a list of checked nodes in a TreeView

	.DESCRIPTION
		This function collects a list of checked nodes in a TreeView

	.PARAMETER  $NodeCollection
		The collection of nodes to search

	.PARAMETER  $CheckedNodes
		The ArrayList that will contain the all the checked items
	
	.EXAMPLE
		$CheckedNodes = New-Object System.Collections.ArrayList
		Get-CheckedNode $treeview1.Nodes $CheckedNodes
		foreach($node in $CheckedNodes)
		{	
			Write-Host $node.Text
		}
#>
	param (
			[ValidateNotNull()]
			[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
			[ValidateNotNull()]
			[System.Collections.ArrayList]$CheckedNodes
	)
	
	foreach ($Node in $NodeCollection)
	{
		if ($Node.Checked)
		{
			[void]$CheckedNodes.Add($Node)
		}
		Get-CheckedNode $Node.Nodes $CheckedNodes
	}
}

#endregion


$vcenterTextbox_TextChanged={
	#TODO: Place custom script here
	if ($vcenterTextbox.Text -ne "")
	{
		$buttonEnterCredentials.Enabled = $true
	}
	else
	{
		$buttonEnterCredentials.Enabled = $false
	}
}

$buttonAddVirtualMachine_Click={
	#TODO: Place custom script here
	if (Show-AddVMForm_psf -eq 'OK')
	{
	}
}


$buttonOpenRolesSelection_Click={
	
	$global:vmSelectedStep4 | Out-File "$ScriptDirectory\logs\vmselectedstep4.log" -Append
	
	if ((Show-WindowsRoles_psf -VMName $global:vmSelectedStep4) -eq 'OK')
	{
		#$selectedRoles = $global:vmRoles | ?{ $_.VMName -eq $vm.VMName } | Select -ExpandProperty Roles		
	}
	
}

$buttonBuildAndConfigureVMs_Click={
	
	#$progressbarVMBuild.Visible = $true
	
	try
	{
		#$progressbarVMBuild.Maximum = ($global:vmBuilds).Count
		#$progressbarVMBuild.Value = 0
		#$progressbarVMBuild.Step = 1
		
		foreach ($vm in $global:vmbuilds)
		{
			while (@(Get-Job | ?{ $_.State -eq "Running" }).Count -ge 5)
			{
				Write-Host "Waiting for open thread...($NumJobs Maximum)"
				Start-Sleep -Seconds 3
			}
			
			# Let's combine all the OS specific data we gathered for the VM into one variable.
			$osConfigObject = New-Object PSObject
			
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "VMName" -Value $vm.VMName
			
			# Add the data for the domain/workgroup
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "Hostname" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).Hostname
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "DomainName" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).DomainName
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "DomainUser" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).DomainUser
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "DomainPassword" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).DomainPassword
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "IsWorkgroup" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).IsWorkgroup
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "LocalAdminPassword" -Value ($global:vmAdminPasswords | ?{ $_.VMName -eq $vm.VMName }).Password
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "Roles" -Value ($global:vmRoles | ?{ $_.VMName -eq $vm.VMName }).Roles
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "Features" -Value ($global:vmFeatures | ?{ $_.VMName -eq $vm.VMName }).Features
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "Timezone" -Value ($global:vmTimeZones | ?{$_.VMName -eq $vm.VMName}).Timezone
			
			$global:vmFullOSConfig = [System.Array]$global:vmFullOSConfig + $osConfigObject
			
			$osConfigObject | Out-File "$ScriptDirectory\logs\osobject.log" -Append
			
			Start-Job -Name $vm.VMName -ArgumentList $vcenterTextbox.Text, $global:vcCredential, $vm, $ScriptDirectory, $osConfigObject -ScriptBlock {
				
				. "$($args[3])\Functions\Get-FolderbyPath.ps1"
				
				Import-Module VMware.PowerCLI
				
				Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -ParticipateInCeip $false -DisplayDeprecationWarnings $false -Confirm:$false
				
				Connect-VIServer -Server $args[0] -Credential $args[1]
				
				$password = ConvertTo-SecureString "$($args[4].DomainPassword)" -AsPlainText -Force
				$domainCredential = New-Object System.Management.Automation.PSCredential ("$($args[4].DomainUser)", $password)
				
				if ($args[4].IsWorkgroup -eq 'No')
				{
					$osSpec = New-OSCustomizationSpec -OSType "Windows" -Name $args[2].VMName -Type NonPersistent `
													  -FullName "Administrator" `
													  -AdminPassword "$($args[4].LocalAdminPassword)" `
													  -AutoLogonCount 1 `
													  -OrgName "Org1" `
													  -Description "Temporary Spec for $($args[2].VMName)" `
													  -ChangeSid `
													  -DeleteAccounts `
													  -Domain "$($args[4].DomainName)" `
													  -DomainCredentials $domainCredential `
													  -NamingScheme fixed `
													  -NamingPrefix $args[4].Hostname `
													  -ErrorAction Stop
				}
				else
				{
					$osSpec = New-OSCustomizationSpec -OSType "Windows" -Name $args[2].VMName -Type NonPersistent `
													  -FullName "Administrator" `
													  -AdminPassword "$($args[4].LocalAdminPassword)" `
													  -AutoLogonCount 1 `
													  -OrgName "Org1" `
													  -Description "Temporary Spec for $($args[2].VMName)" `
													  -ChangeSid `
													  -DeleteAccounts `
													  -Workgroup "$($args[4].DomainName)" `
													  -NamingScheme fixed `
													  -NamingPrefix $args[4].Hostname `
													  -ErrorAction Stop
				}
				
				if ($args[2].("IP Type") -eq "DHCP")
				{
					Get-OSCustomizationNicMapping -OSCustomizationSpec $osSpec | Set-OSCustomizationNicMapping -IpMode UseDHCP
				}
				else
				{
					Get-OSCustomizationNicMapping -OSCustomizationSpec $osSpec | Set-OSCustomizationNicMapping -IpMode UseStaticIP `
																											   -IpAddress $args[2].("IP Address") `
																											   -SubnetMask $args[2].("Subnet Mask") `
																											   -DefaultGateway $args[2].("Default Gateway") `
																											   -Dns $args[2].("Primary DNS Server")
				}
				
				$vmTemplate = Get-Template -Name $args[2].Template
				
				$destFolder = Get-FolderbyPath -Path "$($args[2].Location)" -Separator "\"
				
				$invoke = New-VM -VMHost $args[2].("VM Host") -Name $args[2].VMName -Datastore $args[2].Datastore -Template $vmTemplate -Location $destFolder -OSCustomizationSpec $osSpec -ErrorAction Stop
				$invoke | Out-File "$ScriptDirectory\logs\invoke.log"
				
				Disconnect-VIServer -Server $args[0]
				
			}
			
		}
		
		do
		{
			Start-Sleep -Milliseconds 5000
		}
		while ((Get-Job -State Running).Count -gt 0)
		
		foreach ($item in $global:vmbuilds)
		{
			Get-VM -Name $item.VMName | Set-VM -MemoryGB $item.Memory -NumCpu $item.NumCPU -Confirm:$false -ErrorAction Stop
			
			Get-NetworkAdapter -VM $item.VMName | Set-NetworkAdapter -NetworkName $item.Network -StartConnected $true -Confirm:$false -ErrorAction Stop
			
			Start-VM -VM $item.VMName -RunAsync
			
			Start-Sleep -Seconds 10
		}
		
		#Start-Sleep -Seconds 90
		
		foreach ($item in $global:vmbuilds)
		{
			$vm = Get-VM -Name $item.VMName
			
			do
			{
				Start-Sleep -Seconds 5
				$vmStatus = (Get-VM -Name "$($item.VMName)").extensionData.Guest.InteractiveGuestOperationsReady
				Write-Host $vmStatus -ForegroundColor Red
			}
			while ($vmStatus -ne $True)
			
			Write-Host $vmStatus -ForegroundColor Green
		}
		
		foreach ($admin in $global:vmAdminPasswords)
		{
			# First, let's create the PSCredential object
			
			$password = ConvertTo-SecureString $admin.Password -AsPlainText -Force
			$localAdminCred = New-Object System.Management.Automation.PSCredential ("Administrator", $password)
			
			# Declare the array that will house each command to run.
			
			$customizeOSScripts = [System.Collections.ArrayList]@()
			
			# Now, let's build the scripts.
			# We'll start with creating the users.
			
			foreach ($user in $global:vmLocalUsers)
			{
				#if ($user.VMName -eq $admin.VMName)
				#{
				if ($user.Administrator -eq "Yes")
				{
					$userCreate = New-Object PSObject
					$userCreate | Add-Member -MemberType NoteProperty -Name "Command" -Value "NET USER $($user.Username) $($user.Password) /add"
					
					$userAdmin = New-Object PSObject
					$userAdmin | Add-Member -MemberType NoteProperty -Name "Command" -Value "NET LOCALGROUP Administrators $($user.Username) /add"
					
					$date = Get-Date -Format "M-d-yyyy"
					$desc = "Admin user created on $date."
					$userTmp = $user.Username
					$userDescription = New-Object PSObject
					$userDescription | Add-Member -MemberType NoteProperty -Name "Command" -Value "Set-LocalUser -Name $userTmp -Description ""$desc"""
					
					$customizeOSScripts = [System.Array]$customizeOSScripts + $userCreate
					$customizeOSScripts = [System.Array]$customizeOSScripts + $userAdmin
					$customizeOSScripts = [System.Array]$customizeOSScripts + $userDescription
				}
				else
				{
					$userCreate = New-Object PSObject
					$userCreate | Add-Member -MemberType NoteProperty -Name "Command" -Value "NET USER $($user.Username) $($user.Password) /add"
					
					$date = Get-Date -Format "M-d-yyyy"
					$desc = "Standard user created on $date."
					$userTmp = $user.Username
					$userDescription = New-Object PSObject
					$userDescription | Add-Member -MemberType NoteProperty -Name "Command" -Value "Set-LocalUser -Name $userTmp -Description ""$desc"""
					
					$customizeOSScripts = [System.Array]$customizeOSScripts + $userCreate
					$customizeOSScripts = [System.Array]$customizeOSScripts + $userDescription
				}
				
				#}
				
			}
			
			# Let's install all selected roles.
			
			foreach ($vm in ($global:vmRoles | ?{ $_.VMName -eq $admin.VMName }))
			{
				foreach ($role in $vm.Roles)
				{
					$object = New-Object PSObject
					$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Install-WindowsFeature -Name $role -IncludeManagementTools"
					$customizeOSScripts = [System.Array]$customizeOSScripts + $object
				}
			}
			
			# Let's customize additional disks.
			
			foreach ($disk in ($global:vmAdditionalDisks | ?{ $_.VMName -eq $admin.VMName }))
			{
				$driveLetter = $disk.DriveLetter
				$driveLabel = "Drive-$($disk.DriveLetter)"
				$driveSize = [int]($disk.DriveSize)
				New-HardDisk -VM $admin.VMName -CapacityGB $driveSize -Persistence persistent -Confirm:$false
				$object = New-Object PSObject
				$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-Disk | Where-Object PartitionStyle -eq ""RAW"" | Initialize-Disk -PartitionStyle GPT -PassThru | New-Partition -DriveLetter $driveLetter -UseMaximumSize | Format-Volume -FileSystem NTFS -NewFileSystemLabel $driveLabel -Confirm:$false"
				#$customizeOSScripts = [System.Array]$customizeOSScripts + $object
				Invoke-VMScript -VM $admin.VMName -GuestCredential $localAdminCred -ScriptText "$($object.Command)" | Out-File "$ScriptDirectory\logs\$($admin.VMName)_scriptcommand.log" -Append
			}
			
			# Let's customize additional network adapters.
			
			foreach ($nic in ($global:vmAdditionalNICs | ?{ $_.VMName -eq $admin.VMName }))
			{
				$newNic = New-NetworkAdapter -VM $nic.VMName -NetworkName $nic.VLAN -StartConnected -Type Vmxnet3
				
				$newNic | Out-File "$ScriptDirectory\logs\newnic.log" -Append
				$macAddress = "$($newNic.MacAddress)" -replace ":", "-"
				
				if ($nic.("IP Type") -eq "Static")
				{
					$newIP = $nic.("IP Address")
					$newMask = $nic.("Subnet Mask")
					$newGateway = $nic.("Default Gateway")
					$newDNSServer = $nic.("Primary DNS Server")
					
					# Determine the CIDR notation for subnet mask
					$subnetMasks = Import-Csv "$ScriptDirectory\reference\cidrlist.csv"
					
					$cidrNotation = ($subnetMasks | ?{ $_.SubnetMask -eq $newMask }).CIDR
					
					if ($newGateway -ne '')
					{
						$object = New-Object PSObject
						$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$macAddress"" | New-NetIPAddress -IPAddress $newIP -DefaultGateway $newGateway -PrefixLength $cidrNotation | Set-DNSClientServerAddress -ServerAddresses $newDNSServer"
						$customizeOSScripts = [System.Array]$customizeOSScripts + $object
					}
					else
					{
						$object = New-Object PSObject
						$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$macAddress"" | New-NetIPAddress -IPAddress $newIP -DefaultGateway $newGateway -PrefixLength $cidrNotation | Set-DNSClientServerAddress -ServerAddresses $newDNSServer"
						$customizeOSScripts = [System.Array]$customizeOSScripts + $object
					}
					
				}
			}
			
			$customizeOSScripts | Out-File "$ScriptDirectory\logs\scriptsarray_$($admin.VMName).log"
			#Customize-OS -VMName $admin.VMName -GuestCredential $localAdminCred -Scripts $customizeOSScripts
			
			foreach ($script in $customizeOSScripts)
			{
				$script.Command | Out-File "$ScriptDirectory\logs\$($admin.VMName)_scriptcommand.log" -Append
				Invoke-VMScript -VM $admin.VMName -GuestCredential $localAdminCred -ScriptText "$($script.Command)" | Out-File "$ScriptDirectory\logs\$($admin.VMName)_scriptcommand.log" -Append
				
				sleep -Seconds 3
			}
			
		}
		
		Start-Sleep -Seconds 10
		
		foreach ($vm in $global:vmbuilds)
		{
			Get-VM $vm.VMName | Restart-VMGuest -Confirm:$false
		}
		
		[System.Windows.Forms.MessageBox]::Show("All requested virtual machines are available.")
		
	}
	catch
	{
		[System.Windows.Forms.MessageBox]::Show("Unable to build virtual machines.")
	}
}

$datagridviewVMQueue_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	$buttonDeleteVMFromQueue.Enabled = $true	
	
}

$buttonDeleteVMFromQueue_Click={
	
	$global:vmBuilds = $global:vmBuilds | ?{ $_.VMName -ne $listviewVMsStep2.SelectedItems.Text }
	
	$listviewVMsStep2.Clear()
	
	foreach ($item in $global:vmBuilds)
	{
		$listviewVMsStep2.Items.Add($item.VMName)
	}
	
	# Update the treeview control for Step 3
	
	$treeviewVMListStep3.BeginUpdate()
	$treeviewVMListStep3.Nodes.Clear()
	
	foreach ($vm in $global:vmbuilds)
	{
		$newNode = $treeviewVMListStep3.Nodes.Add($vm.VMName)
	}
	
	$treeviewVMListStep3.EndUpdate()
	
	# Update the treeview control for step 4.
	
	$treeviewVMListStep4.BeginUpdate()
	$treeviewVMListStep4.Nodes.Clear()
	
	foreach ($vm in $global:vmbuilds)
	{
		$newNode = $treeviewVMListStep4.Nodes.Add($vm.VMName)
	}
	
	# Determine if we should be resetting all the variables.
	if ($global:vmBuilds -eq $null)
	{
		$vmFeatures = [System.Collections.ArrayList]@()
		$vmRoles = [System.Collections.ArrayList]@()
		$vmDomainInfo = [System.Collections.ArrayList]@()
		$vmOS = [System.Collections.ArrayList]@()
		$vmAdminPasswords = [System.Collections.ArrayList]@()
		$vmLocalUsers = [System.Collections.ArrayList]@()
		$vmWorkgroupDomain = [System.Collections.ArrayList]@()
		$vmFullOSConfig = [System.Collections.ArrayList]@()
		$vmTimeZones = [System.Collections.ArrayList]@()
		$vmAdditionalDisks = [System.Collections.ArrayList]@()
		$vmAdditionalNICs = [System.Collections.ArrayList]@()
		$vmOSKeys = [System.Collections.ArrayList]@()
		
		foreach ($item in (Get-ChildItem -Path "$ScriptDirectory\logs\"))
		{
			$item | Remove-Item -Force -Recurse
		}
	}
	
	$treeviewVMListStep4.EndUpdate()
	
	Update-NavButtons
	
	
}

$treeviewVMListStep4_AfterSelect=[System.Windows.Forms.TreeViewEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.TreeViewEventArgs]
	
	$global:vmSelectedStep4 = $treeviewVMListStep4.SelectedNode.Text
	
	$labelVMNameStep4.Text = "VM: $($global:vmSelectedStep4)"
	
	if ($treeviewVMListStep4.SelectedNode.Text -in $global:vmWorkgroupDomain.VMName)
	{
		$labelOK1.Visible = $true		
	}
	else
	{
		$labelOK1.Visible = $false		
	}
	
}

$radiobuttonDomain_CheckedChanged={
	
	if ($radiobuttonDomain.Checked) { $buttonDomainWorkgroup.Enabled = $true; $buttonSetWorkgroup.Enabled = $false }
	elseif ($radiobuttonWorkgroup.Checked) { $buttonDomainWorkgroup.Enabled = $false; $buttonSetWorkgroup.Enabled = $true }
	
}

$buttonOpenFeatureSelection_Click={
	
	if ((Show-WindowsFeatures_psf -VMName $global:vmSelectedStep4) -eq 'OK')
	{
	}
}

$buttonAddLocalUsers_Click={
	
	if ((Show-AddLocalUsers_psf -VMName $global:vmSelectedStep4) -eq 'OK'){}
	
}

$comboboxTimezone_SelectedIndexChanged={
	
	if ($global:vmSelectedStep4 -in $global:vmTimeZones.VMName)
	{
		$global:vmTimeZones = $global:vmTimeZones | ?{ $_.VMName -ne $global:vmTimeZones.VMName }
		$tzobject = New-Object PSOBject
		
		$tzobject | Add-Member -MemberType NoteProperty -Name "VMName" -Value $treeviewVMListStep4.SelectedNode.Text
		$tzobject | Add-Member -MemberType NoteProperty -Name "Timezone" -Value $comboboxTimezone.Text
	}
	else
	{
		$tzobject = New-Object PSOBject
		
		$tzobject | Add-Member -MemberType NoteProperty -Name "VMName" -Value $treeviewVMListStep4.SelectedNode.Text
		$tzobject | Add-Member -MemberType NoteProperty -Name "Timezone" -Value $comboboxTimezone.Text
	}
}

$treeviewVMListStep3_AfterSelect=[System.Windows.Forms.TreeViewEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TreeViewEventArgs]
				
	$global:vmSelectedStep3 = $treeviewVMListStep3.SelectedNode.Text
	
	$labelVMStep3.Text = "VM: $($global:vmSelectedStep3)"
}

$listviewVMsStep2_SelectedIndexChanged={
				
	$rowTmp = $global:vmBuilds | ?{ $_.VMName -eq $listviewVMsStep2.SelectedItems.Text }
	
	$labelStep2CPU.Text = "CPU: $($rowTmp.NumCPU)"
	$labelStep2Memory.Text = "Memory: $($rowTmp.Memory)"
	$labelStep2Network.Text = "Network: $($rowTmp.Network)"
	$labelStep2VMName.Text = "VM Name: $($rowTmp.VMName)"
	
}
$buttonVDiskAdd_Click={
	
	if ((Show-AddVirtualDisk_psf -VMName $treeviewVMListStep3.SelectedNode.Text) -eq 'OK')
	{}
	
}

$buttonVNICAdd_Click={
	
	if ((Show-AddNicCard_psf -VMName $treeviewVMListStep3.SelectedNode.Text) -eq 'OK')
	{}
}



$maskedtextboxHostname_Enter={
	#TODO: Place custom script here
	$maskedtextboxHostname.Select(0,0)
}

$buttonSetHostname_Click={
	
	if ((Show-SetHostname_psf -VMName $treeviewVMListStep4.SelectedNode.Text) -eq 'OK')
	{ }
}

$button2_Click={
	
	if ((Show-WorkgroupDomainJoin_psf) -eq 'OK')
	{ }	
}

$buttonSet_Click={
	
	if ((Show-GetAdminPassword_psf) -eq 'OK')
	{ }
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>