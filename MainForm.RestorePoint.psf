<File version="3.1">
  <FileID>4dee3778-5d7e-48ff-b7fd-c671faf8b7f0</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAKtqSURBVHhe7J0FeFVX1oYZ6T/ecatN2+m0pZS2
FKeCSynu7u4huCQEQgjBIThEibu7u7u737i7fP/a595ACKGlVIYO6+X5HpIj284+e317n3Nv+jEM
wzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAM
wzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAM
wzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAM
wzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAM
wzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAM
wzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAM
wzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAM
wzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAM
wzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAM
wzAMwzAMwzAMwzAMwzAMwzAMwzDM/ywJJNkLL7wg++tf/ypbuHChbNmyZbLly1eQlrNYLBaLxXpm
JY/VK0ivvPKy7Oc//7lMxHRSlgjwX8lPfvKT6j/96U+YPGkSNm/ZCmNzG8Ql5yI9pxRp2SUsFovF
YrGeWcmQllWEgOAwHDh0CFOmTAFN5vHTn/60TRHmHw8ZANnkyZNxSvMMQuMy4BeTBf/YHATE5cCf
xWKxWCzWM6vuWO0Xm434jCJoX72BL7/8Ej//+c/rFWH+8Yhl/w0bNyOMgr9/XC58yQD4RGeyWCwW
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</Preview>
  <Form>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
DwXyQf5arwAA</Form>
  <Code><![CDATA[
#-------------------------------------------------------
# NOTE: When new TabPage added place the validation code
# 		in the Test-WizardPage function.
#-------------------------------------------------------
function Test-WizardPage
{
<#
	Add TabPages and place the validation code in this function
#>
	[OutputType([boolean])]
	param([System.Windows.Forms.TabPage]$tabPage)
	
	if($tabPage -eq $tabpageStep1)
	{
		#TODO: Enter Validation Code here for Step 1
		if(-not $global:vcenterConnection.IsConnected)
		{
			return $false
		}
		else
		{
			return $true
		}
		
	}
	elseif ($tabPage -eq $tabpageStep2)
	{
		#TODO: Enter Validation Code here for Step 2
		if($global:vmbuilds -ne $null)
		{
			return $true
		}
		
		return $false
	}
	elseif ($tabPage -eq $tabpageStep3)
	{
		#TODO: Enter Validation Code here for Step 2
		if ($global:vmbuilds -ne $null)
		{
			return $true
		}
		
		return $false
	}
	elseif ($tabPage -eq $tabpageStep4)
	{
		$hostnameComplete = $true
		
		foreach ($node in $treeviewVMListStep4.Nodes)
		{
			if ($node.Text -notin $global:vmWorkgroupDomain.VMName)
			{
				$hostnameComplete = $false
			}
		}
		
		if ($hostnameComplete)
		{
			return $true
		}
		
		return $false
		
	}
	elseif ($tabPage -eq $tabpageStep5)
	{
		if (($global:vmAdminPasswords -ne $null) -and ($global:vmWorkgroupDomain -ne $null))
		{
			return $true
		}
		
		return $false
	}
	elseif ($tabPage -eq $tabpageStep6)
	{
		$string = ""
		if (Get-ChildItem -Path "$ScriptDirectory\logs\test.html" -ErrorAction Ignore) { Remove-Item "$ScriptDirectory\logs\test.html" -Force}		
		foreach ($vm in $global:vmBuilds)
		{
			#$string = "<b>This is my test page.</b>"
			$string = "
						<p>
							<font size=3><b>VMName: <font color=red>$($vm.VMName)</font></b></font><br>
							<font size=2>
							&nbsp;&nbsp;&nbsp;<b>VM Host:</b> $($vm."VM Host")<br>
							&nbsp;&nbsp;&nbsp;<b>Datacenter:</b> $($vm.Datacenter)<br>
							&nbsp;&nbsp;&nbsp;<b>Datastore:</b> $($vm.Datastore)<br>
							&nbsp;&nbsp;&nbsp;<b>CPU Count:</b> $($vm.NumCPU)<br>
							&nbsp;&nbsp;&nbsp;<b>Memory:</b> $($vm.Memory)<br>
							&nbsp;&nbsp;&nbsp;<b>Network:</b> $($vm.Network)<br>
							&nbsp;&nbsp;&nbsp;<b>Template:</b> $($vm.Template)<br>
							&nbsp;&nbsp;&nbsp;<b>Location:</b> $($vm.Location)<br>
							&nbsp;&nbsp;&nbsp;<b>IP Type:</b> $($vm."IP Type")<br>
					"
			if ($vm."IP Type" -eq "Static")
			{
				$string = $string + "
										&nbsp;&nbsp;&nbsp;<b>IP Address:</b> $($vm."IP Address")<br>
										&nbsp;&nbsp;&nbsp;<b>Subnet Mask:</b> $($vm."Subnet Mask")<br>
										&nbsp;&nbsp;&nbsp;<b>Default Gateway:</b> $($vm."Default Gateway")<br>
										&nbsp;&nbsp;&nbsp;<b>Primary DNS Server:</b> $($vm."Primary DNS Server")<br>
										</font>
									</p>
								"
			}
			else
			{
				$string = $string + "</font></p>"
			}
			
			ConvertTo-Html -Body $string | Out-File "$ScriptDirectory\logs\test.html" -Append
		}
			
		$webbrowserVMBuildSummary.Url = "$ScriptDirectory\logs\test.html"
		
		return $true
	}
	#Add more pages here
	
	return $false
}



$buttonFinish_Click={
	#-------------------------------------------------------
	# TODO: Place finalization script here
	#-------------------------------------------------------
	
}

#region Events and Functions
$formVMAutomationTool_Load={
	Update-NavButtons
	
	$timeZones = Get-TimeZone -ListAvailable | select DisplayName
	
	foreach ($timeZone in $timeZones)
	{
		$comboboxTimezone.Items.Add($timeZone.DisplayName)
	}
	
}

function Update-NavButtons
{
	<# 
		.DESCRIPTION
		Validates the current tab and Updates the Next, Prev and Finish buttons.
	#>
	$enabled = Test-WizardPage $tabcontrolWizard.SelectedTab
	$buttonNext.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	$buttonBack.Enabled = $tabcontrolWizard.SelectedIndex -gt 0
	$buttonFinish.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)	
	#Uncomment to Hide Buttons
	#$buttonNext.Visible = ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	#$buttonFinish.Visible = ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)
}

$script:DeselectedIndex = -1
$tabcontrolWizard_Deselecting=[System.Windows.Forms.TabControlCancelEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
	# Store the previous tab index
	$script:DeselectedIndex = $_.TabPageIndex
}

$tabcontrolWizard_Selecting=[System.Windows.Forms.TabControlCancelEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
	# We only validate if we are moving to the Next TabPage. 
	# Users can move back without validating
	if($script:DeselectedIndex -ne -1 -and $script:DeselectedIndex -lt $_.TabPageIndex)
	{
		#Validate each page until we reach the one we want
		for($index = $script:DeselectedIndex; $index -lt $_.TabPageIndex; $index++)
		{
			$_.Cancel = -not (Test-WizardPage $tabcontrolWizard.TabPages[$index])
			
			if($_.Cancel) 
			{
				# Cancel and Return if validation failed.
				return;
			}
		}
	}
	
	Update-NavButtons
}

$buttonBack_Click={
	#Go to the previous tab page
	if($tabcontrolWizard.SelectedIndex -gt 0)
	{
		$tabcontrolWizard.SelectedIndex--
	}
}

$buttonNext_Click={	
	#Go to the next tab page
	if($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	{
		$tabcontrolWizard.SelectedIndex++
	}	
}

#endregion

#------------------------------------------------------
# NOTE: When a Control State changes you should call
# 		Update-NavButtons to trigger validation
#------------------------------------------------------

$radiobuttonOption_CheckedChanged={
	
	if($this.Checked)
	{
		Update-NavButtons
	}
}

$buttonEnterCredentials_Click={
	
	try
	{
		$pictureboxLoading.Visible = $true
		if ($global:vcenterConnection.IsConnected)
		{
			Disconnect-VIServer -Server * -Force -Confirm:$false
			$labelVCenterServerNotConn.Text = "vCenter Server: Not Connected"
			$labelUsernameNotConnected.Text = "Username: Not Connected"
			$labelConnectionStatusNotC.Text = "Connection Status: Not Connected"
		}
		$global:vcCredential = $null
		$global:vcenterConnection = $null
		$global:vcCredential = Get-Credential -ErrorAction Stop
		Connect-VIServer -Server $vcenterTextbox.Text -Credential $global:vcCredential -ErrorAction Stop
		$global:vcenterConnection = Get-VIServer -Server $vcenterTextbox.Text -ErrorAction Stop
		$buttonEnterCredentials.Enabled = $false
		$pictureboxLoading.Visible = $false
	}
	catch
	{
		"Unable to connect."
	}
	
	If ($global:vcenterConnection.IsConnected)
	{
		$labelVCenterServerNotConn.Text = "vCenter Server: $($vcenterTextbox.Text)"
		$labelUsernameNotConnected.Text = "Username: $($global:vcenterConnection.User)"
		$labelConnectionStatusNotC.Text = "Connection Status: Connected"
		$labelOKStep1.Visible = $true
		
		Update-NavButtons
		
	}
	else
	{
		[System.Windows.Forms.MessageBox]::Show("Unable to connect to $($vcenterTextbox.Text). Please try logging on again.")
		$labelOKStep1.Visible = $false
		Update-NavButtons
	}
}

#region Control Helper Functions
function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]
		$DisplayMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}

function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}

function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	[ValidateNotNull()]
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterWMIProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)	
}

function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}


function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}


function Get-CheckedNode
{
<#
	.SYNOPSIS
		This function collects a list of checked nodes in a TreeView

	.DESCRIPTION
		This function collects a list of checked nodes in a TreeView

	.PARAMETER  $NodeCollection
		The collection of nodes to search

	.PARAMETER  $CheckedNodes
		The ArrayList that will contain the all the checked items
	
	.EXAMPLE
		$CheckedNodes = New-Object System.Collections.ArrayList
		Get-CheckedNode $treeview1.Nodes $CheckedNodes
		foreach($node in $CheckedNodes)
		{	
			Write-Host $node.Text
		}
#>
	param (
			[ValidateNotNull()]
			[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
			[ValidateNotNull()]
			[System.Collections.ArrayList]$CheckedNodes
	)
	
	foreach ($Node in $NodeCollection)
	{
		if ($Node.Checked)
		{
			[void]$CheckedNodes.Add($Node)
		}
		Get-CheckedNode $Node.Nodes $CheckedNodes
	}
}

#endregion


$vcenterTextbox_TextChanged={
	#TODO: Place custom script here
	if ($vcenterTextbox.Text -ne "")
	{
		$buttonEnterCredentials.Enabled = $true
	}
	else
	{
		$buttonEnterCredentials.Enabled = $false
	}
}

$buttonAddVirtualMachine_Click={
	#TODO: Place custom script here
	if (Show-AddVMForm_psf -eq 'OK')
	{
	}
}


$buttonOpenRolesSelection_Click={
	
	$global:vmSelectedStep4 | Out-File "$ScriptDirectory\logs\vmselectedstep4.log" -Append
	
	if ((Show-WindowsRoles_psf -VMName $global:vmSelectedStep4) -eq 'OK')
	{
		#$selectedRoles = $global:vmRoles | ?{ $_.VMName -eq $vm.VMName } | Select -ExpandProperty Roles		
	}
	
}

$buttonBuildVMs_Click={
	
	try
	{
		foreach ($vm in $global:vmbuilds)
		{
			while (@(Get-Job | ?{ $_.State -eq "Running" }).Count -ge 5)
			{
				Write-Host "Waiting for open thread...($NumJobs Maximum)"
				Start-Sleep -Seconds 3
			}
			
			# Let's combine all the OS specific data we gathered for the VM into one variable.
			$osConfigObject = New-Object PSObject
			
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "VMName" -Value $vm.VMName
			
			# Add the data for the domain/workgroup
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "Hostname" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).Hostname
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "DomainName" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).DomainName
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "DomainUser" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).DomainUser
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "DomainPassword" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).DomainPassword
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "IsWorkgroup" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).IsWorkgroup
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "LocalAdminPassword" -Value ($global:vmAdminPasswords | ?{ $_.VMName -eq $vm.VMName }).Password
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "Roles" -Value ($global:vmRoles | ?{ $_.VMName -eq $vm.VMName }).Roles
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "Features" -Value ($global:vmFeatures | ?{ $_.VMName -eq $vm.VMName }).Features
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "Timezone" -Value ($global:vmTimeZones | ?{$_.VMName -eq $vm.VMName}).Timezone
			
			$global:vmFullOSConfig = [System.Array]$global:vmFullOSConfig + $osConfigObject
			
			$osConfigObject | Out-File "$ScriptDirectory\logs\osobject.log" -Append
			
			Start-Job -Name $vm.VMName -ArgumentList $vcenterTextbox.Text, $global:vcCredential, $vm, $ScriptDirectory, $osConfigObject -ScriptBlock {
				
				. "$($args[3])\Functions\Get-FolderbyPath.ps1"
				
				Import-Module VMware.PowerCLI
				
				Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -ParticipateInCeip $false -DisplayDeprecationWarnings $false -Confirm:$false
				
				Connect-VIServer -Server $args[0] -Credential $args[1]
				
				$password = ConvertTo-SecureString "$($args[4].DomainPassword)" -AsPlainText -Force
				$domainCredential = New-Object System.Management.Automation.PSCredential ("$($args[4].DomainUser)", $password)
				
				if ($args[4].IsWorkgroup -eq 'No')
				{
					$osSpec = New-OSCustomizationSpec -OSType "Windows" -Name $args[2].VMName -Type NonPersistent `
													  -FullName "Administrator" `
													  -AdminPassword "$($args[4].LocalAdminPassword)" `
													  -AutoLogonCount 1 `
													  -OrgName "Org1" `
													  -Description "Temporary Spec for $($args[2].VMName)" `
													  -ChangeSid `
													  -DeleteAccounts `
													  -Domain "$($args[4].DomainName)" `
													  -DomainCredentials $domainCredential `
													  -NamingScheme fixed `
													  -NamingPrefix $args[4].Hostname `
													  -ErrorAction Stop
				}
				else
				{
					$osSpec = New-OSCustomizationSpec -OSType "Windows" -Name $args[2].VMName -Type NonPersistent `
													  -FullName "Administrator" `
													  -AdminPassword "$($args[4].LocalAdminPassword)" `
													  -AutoLogonCount 1 `
													  -OrgName "Org1" `
													  -Description "Temporary Spec for $($args[2].VMName)" `
													  -ChangeSid `
													  -DeleteAccounts `
													  -Workgroup "$($args[4].DomainName)" `
													  -NamingScheme fixed `
													  -NamingPrefix $args[4].Hostname `
													  -ErrorAction Stop
				}
				
				if ($args[2].("IP Type") -eq "DHCP")
				{
					Get-OSCustomizationNicMapping -OSCustomizationSpec $osSpec | Set-OSCustomizationNicMapping -IpMode UseDHCP
				}
				else
				{
					Get-OSCustomizationNicMapping -OSCustomizationSpec $osSpec | Set-OSCustomizationNicMapping -IpMode UseStaticIP `
																											   -IpAddress $args[2].("IP Address") `
																											   -SubnetMask $args[2].("Subnet Mask") `
																											   -DefaultGateway $args[2].("Default Gateway") `
																											   -Dns $args[2].("Primary DNS Server")
				}
				
				$vmTemplate = Get-Template -Name $args[2].Template
				
				$destFolder = Get-FolderbyPath -Path "$($args[2].Location)" -Separator "\"
				
				$invoke = New-VM -VMHost $args[2].("VM Host") -Name $args[2].VMName -Datastore $args[2].Datastore -Template $vmTemplate -Location $destFolder -OSCustomizationSpec $osSpec -ErrorAction Stop
				$invoke | Out-File "$ScriptDirectory\logs\invoke.log"
				
				Disconnect-VIServer -Server $args[0]
				
			}
			
		}
		
		do
		{
			Start-Sleep -Milliseconds 5000
		}
		while ((Get-Job -State Running).Count -gt 0)
		
		foreach ($item in $global:vmbuilds)
		{
			Get-VM -Name $item.VMName | Set-VM -MemoryGB $item.Memory -NumCpu $item.NumCPU -Confirm:$false -ErrorAction Stop
			
			Get-NetworkAdapter -VM $item.VMName | Set-NetworkAdapter -NetworkName $item.Network -StartConnected $true -Confirm:$false -ErrorAction Stop
			
			Start-VM -VM $item.VMName | Wait-Tools
		}
		
		#Start-Sleep -Seconds 300
		
		#[System.Windows.Forms.MessageBox]::Show("5 minute timer passed.")
		
	}
	catch
	{
		[System.Windows.Forms.MessageBox]::Show("Unable to build virtual machines.")
	}
}

$datagridviewVMQueue_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	$buttonDeleteVMFromQueue.Enabled = $true	
	
}

$buttonDeleteVMFromQueue_Click={
	
	$global:vmBuilds = $global:vmBuilds | ?{ $_.VMName -ne $listviewVMsStep2.SelectedItems.Text }
	
	$listviewVMsStep2.Clear()
	
	foreach ($item in $global:vmBuilds)
	{
		$listviewVMsStep2.Items.Add($item.VMName)
	}
	
	# Update the treeview control for Step 3
	
	$treeviewVMListStep3.BeginUpdate()
	$treeviewVMListStep3.Nodes.Clear()
	
	foreach ($vm in $global:vmbuilds)
	{
		$newNode = $treeviewVMListStep3.Nodes.Add($vm.VMName)
	}
	
	$treeviewVMListStep3.EndUpdate()
	
	# Update the treeview control for step 4.
	
	$treeviewVMListStep4.BeginUpdate()
	$treeviewVMListStep4.Nodes.Clear()
	
	foreach ($vm in $global:vmbuilds)
	{
		$newNode = $treeviewVMListStep4.Nodes.Add($vm.VMName)
	}
	
	# Determine if we should be resetting all the variables.
	if ($global:vmBuilds -eq $null)
	{
		$vmFeatures = [System.Collections.ArrayList]@()
		$vmRoles = [System.Collections.ArrayList]@()
		$vmDomainInfo = [System.Collections.ArrayList]@()
		$vmOS = [System.Collections.ArrayList]@()
		$vmAdminPasswords = [System.Collections.ArrayList]@()
		$vmLocalUsers = [System.Collections.ArrayList]@()
		$vmWorkgroupDomain = [System.Collections.ArrayList]@()
		$vmFullOSConfig = [System.Collections.ArrayList]@()
		$vmTimeZones = [System.Collections.ArrayList]@()
		$vmAdditionalDisks = [System.Collections.ArrayList]@()
		$vmAdditionalNICs = [System.Collections.ArrayList]@()
		$vmOSKeys = [System.Collections.ArrayList]@()
		
		foreach ($item in (Get-ChildItem -Path "$ScriptDirectory\logs\"))
		{
			$item | Remove-Item -Force -Recurse
		}
	}
	
	$treeviewVMListStep4.EndUpdate()
	
	Update-NavButtons
	
	
}

$treeviewVMListStep4_AfterSelect=[System.Windows.Forms.TreeViewEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.TreeViewEventArgs]
	
	$global:vmSelectedStep4 = $treeviewVMListStep4.SelectedNode.Text
	
	$labelVMNameStep4.Text = "VM: $($global:vmSelectedStep4)"
	
	if ($treeviewVMListStep4.SelectedNode.Text -in $global:vmWorkgroupDomain.VMName)
	{
		$labelOK1.Visible = $true		
	}
	else
	{
		$labelOK1.Visible = $false		
	}
	
}

$radiobuttonDomain_CheckedChanged={
	
	if ($radiobuttonDomain.Checked) { $buttonDomainWorkgroup.Enabled = $true; $buttonSetWorkgroup.Enabled = $false }
	elseif ($radiobuttonWorkgroup.Checked) { $buttonDomainWorkgroup.Enabled = $false; $buttonSetWorkgroup.Enabled = $true }
	
}

$buttonOpenFeatureSelection_Click={
	
	if ((Show-WindowsFeatures_psf -VMName $global:vmSelectedStep4) -eq 'OK')
	{
	}
}

$buttonAddLocalUsers_Click={
	
	if ((Show-AddLocalUsers_psf -VMName $global:vmSelectedStep4) -eq 'OK'){}
	
}

$comboboxTimezone_SelectedIndexChanged={
	
	if ($global:vmSelectedStep4 -in $global:vmTimeZones.VMName)
	{
		$global:vmTimeZones = $global:vmTimeZones | ?{ $_.VMName -ne $global:vmTimeZones.VMName }
		$tzobject = New-Object PSOBject
		
		$tzobject | Add-Member -MemberType NoteProperty -Name "VMName" -Value $treeviewVMListStep4.SelectedNode.Text
		$tzobject | Add-Member -MemberType NoteProperty -Name "Timezone" -Value $comboboxTimezone.Text
	}
	else
	{
		$tzobject = New-Object PSOBject
		
		$tzobject | Add-Member -MemberType NoteProperty -Name "VMName" -Value $treeviewVMListStep4.SelectedNode.Text
		$tzobject | Add-Member -MemberType NoteProperty -Name "Timezone" -Value $comboboxTimezone.Text
	}
}

$buttonCustomizeOS_Click={
	
	foreach ($admin in $global:vmAdminPasswords)
	{
		# First, let's create the PSCredential object
		
		$password = ConvertTo-SecureString $admin.Password -AsPlainText -Force
		$localAdminCred = New-Object System.Management.Automation.PSCredential ("Administrator", $password)
		
		# Declare the array that will house each command to run.
		
		$customizeOSScripts = [System.Collections.ArrayList]@()
		
		# Now, let's build the scripts.
		# We'll start with creating the users.
		
		foreach ($user in $global:vmLocalUsers)
		{
			#if ($user.VMName -eq $admin.VMName)
			#{
				if ($user.Administrator -eq "Yes")
				{
					$userCreate = New-Object PSObject
					$userCreate | Add-Member -MemberType NoteProperty -Name "Command" -Value "NET USER $($user.Username) $($user.Password) /add"					
					
					$userAdmin = New-Object PSObject
					$userAdmin | Add-Member -MemberType NoteProperty -Name "Command" -Value "NET LOCALGROUP Administrators $($user.Username) /add"
					
					$date = Get-Date -Format "M-d-yyyy"
					$desc = "Admin user created on $date."
					$userTmp = $user.Username
					$userDescription = New-Object PSObject
					$userDescription | Add-Member -MemberType NoteProperty -Name "Command" -Value "Set-LocalUser -Name $userTmp -Description ""$desc"""
					
					$customizeOSScripts = [System.Array]$customizeOSScripts + $userCreate
					$customizeOSScripts = [System.Array]$customizeOSScripts + $userAdmin
					$customizeOSScripts = [System.Array]$customizeOSScripts + $userDescription
				}
				else
				{
					$userCreate = New-Object PSObject
					$userCreate | Add-Member -MemberType NoteProperty -Name "Command" -Value "NET USER $($user.Username) $($user.Password) /add"
					
					$date = Get-Date -Format "M-d-yyyy"
					$desc = "Standard user created on $date."
					$userTmp = $user.Username
					$userDescription = New-Object PSObject
					$userDescription | Add-Member -MemberType NoteProperty -Name "Command" -Value "Set-LocalUser -Name $userTmp -Description ""$desc"""
					
					$customizeOSScripts = [System.Array]$customizeOSScripts + $userCreate
					$customizeOSScripts = [System.Array]$customizeOSScripts + $userDescription
				}
				
			#}
			
		}
		
		# Let's install all selected roles.
		
		foreach ($vm in ($global:vmRoles | ?{ $_.VMName -eq $admin.VMName }))
		{
			foreach ($role in $vm.Roles)
			{
				$object = New-Object PSObject
				$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Install-WindowsFeature -Name $role -IncludeManagementTools"
				$customizeOSScripts = [System.Array]$customizeOSScripts + $object
			}
		}
		
		# Let's customize additional disks.
		
		foreach ($disk in ($global:vmAdditionalDisks | ?{ $_.VMName -eq $admin.VMName }))
		{
			$driveLetter = $disk.DriveLetter
			$driveLabel = "Drive-$($disk.DriveLetter)"
			$driveSize = [int]($disk.DriveSize)
			New-HardDisk -VM $admin.VMName -CapacityGB $driveSize -Persistence persistent
			$object = New-Object PSObject
			$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-Disk | Where-Object PartitionStyle -eq ""RAW"" | Initialize-Disk -PartitionStyle GPT -PassThru | New-Partition -DriveLetter $driveLetter -UseMaximumSize | Format-Volume -FileSystem NTFS -NewFileSystemLabel $driveLabel"
			#$customizeOSScripts = [System.Array]$customizeOSScripts + $object
			Invoke-VMScript -VM $admin.VMName -GuestCredential $localAdminCred -ScriptText "$($object.Command)" | Out-File "$ScriptDirectory\logs\$($admin.VMName)_scriptcommand.log" -Append
		}
		
		# Let's customize additional network adapters.
		
		foreach ($nic in ($global:vmAdditionalNICs | ?{ $_.VMName -eq $admin.VMName }))
		{
			$newNic = New-NetworkAdapter -VM $nic.VMName -NetworkName $nic.VLAN -StartConnected -Type Vmxnet3
			
			$newNic | Out-File "$ScriptDirectory\logs\newnic.log" -Append
			$macAddress = "$($newNic.MacAddress)" -replace ":", "-"
			
			if ($nic.("IP Type") -eq "Static")
			{
				$newIP = $nic.("IP Address")
				$newMask = $nic.("Subnet Mask")
				$newGateway = $nic.("Default Gateway")
				$newDNSServer = $nic.("Primary DNS Server")
				
				# Determine the CIDR notation for subnet mask
				$subnetMasks = Import-Csv "$ScriptDirectory\reference\cidrlist.csv"
				
				$cidrNotation = ($subnetMasks | ?{$_.SubnetMask -eq $newMask}).CIDR
				
				if ($newGateway -ne '')
				{
					$object = New-Object PSObject
					$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$macAddress"" | New-NetIPAddress -IPAddress $newIP -DefaultGateway $newGateway -PrefixLength $cidrNotation | Set-DNSClientServerAddress -ServerAddresses $newDNSServer"
					$customizeOSScripts = [System.Array]$customizeOSScripts + $object
				}
				else
				{
					$object = New-Object PSObject
					$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$macAddress"" | New-NetIPAddress -IPAddress $newIP -DefaultGateway $newGateway -PrefixLength $cidrNotation | Set-DNSClientServerAddress -ServerAddresses $newDNSServer"
					$customizeOSScripts = [System.Array]$customizeOSScripts + $object
				}
				
			}
		}
		
		$customizeOSScripts | Out-File "$ScriptDirectory\logs\scriptsarray_$($admin.VMName).log"
		#Customize-OS -VMName $admin.VMName -GuestCredential $localAdminCred -Scripts $customizeOSScripts
		
		foreach ($script in $customizeOSScripts)
		{
			$script.Command | Out-File "$ScriptDirectory\logs\$($admin.VMName)_scriptcommand.log" -Append
			Invoke-VMScript -VM $admin.VMName -GuestCredential $localAdminCred -ScriptText "$($script.Command)" | Out-File "$ScriptDirectory\logs\$($admin.VMName)_scriptcommand.log" -Append
			
			sleep -Seconds 3
		}
		
	}
	
}


$treeviewVMListStep3_AfterSelect=[System.Windows.Forms.TreeViewEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TreeViewEventArgs]
				
	$global:vmSelectedStep3 = $treeviewVMListStep3.SelectedNode.Text
	
	$labelVMStep3.Text = "VM: $($global:vmSelectedStep3)"
}

$listviewVMsStep2_SelectedIndexChanged={
				
	$rowTmp = $global:vmBuilds | ?{ $_.VMName -eq $listviewVMsStep2.SelectedItems.Text }
	
	$labelStep2CPU.Text = "CPU: $($rowTmp.NumCPU)"
	$labelStep2Memory.Text = "Memory: $($rowTmp.Memory)"
	$labelStep2Network.Text = "Network: $($rowTmp.Network)"
	$labelStep2VMName.Text = "VM Name: $($rowTmp.VMName)"
	
}
$buttonVDiskAdd_Click={
	
	if ((Show-AddVirtualDisk_psf -VMName $treeviewVMListStep3.SelectedNode.Text) -eq 'OK')
	{}
	
}

$buttonVNICAdd_Click={
	
	if ((Show-AddNicCard_psf -VMName $treeviewVMListStep3.SelectedNode.Text) -eq 'OK')
	{}
}



$maskedtextboxHostname_Enter={
	#TODO: Place custom script here
	$maskedtextboxHostname.Select(0,0)
}

$buttonSetHostname_Click={
	
	if ((Show-SetHostname_psf -VMName $treeviewVMListStep4.SelectedNode.Text) -eq 'OK')
	{ }
}

$button2_Click={
	
	if ((Show-WorkgroupDomainJoin_psf) -eq 'OK')
	{ }	
}

$buttonSet_Click={
	
	if ((Show-GetAdminPassword_psf) -eq 'OK')
	{ }
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>