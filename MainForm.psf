<File version="3.1">
  <FileID>4dee3778-5d7e-48ff-b7fd-c671faf8b7f0</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAGfxSURBVHhe7d0HdBT3mib8u3tm9jtnvj27387s
nJ07c3d2dndu9nWOXPs6R2xjHHAgmJxNNMnknHM2GYGQEMpCOeecc845oCyRnu99S2qQRGMDBi64
np/Pc5C6q6uqq7vr/1R1q/0LIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiKin600SfXf/u3fVv/jP/5j9eeff149YsSI
6pEjR0lGMgzDMAzzwKZnrB4l+dWv/qX6b/7mb6p1TJcU6AD/g/7Df/gPTX//93+Pt996C1OmToPt
WWekZBYjt6gGOYVVDMMwDMM8sKlGTkEFwiJjsPC77/DOO+9ADubxH//jf7zYO8zfnBSA6rfffhvr
N2xGdEoeQpIKEJpchLCUIoQyDMMwDPPAxjJWhyQXIjWvAnv2HsDgwYPxN3/zN629w/zN6Wn/iZOm
IEYG/9CUYgRLAQhKzGcYhmGYO05wcgHCUmWASi3u/fdepWf+A8cuHRAHDpb3KrqsvsvWdem7bvcu
/e97cFIh0vOrsHjxUvzyl7/88QIw7LPPqk+cdui5EzKTYJ0JwzAMw9xhwmRA9InMhN35aJx2i4St
+72Lzt/eKwb+MdkIleWG6DrIWOYRmgRH36j7kvOyLMv4qevgJ+ti7xlzX+67nWc0fKMyjeX2LF+K
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
DHsVzzz7HJ55+X2MPBqMrHr9xkx5bvUuVx/nvut07woAKRYAZmB0P5OcnAwXFxfjf9CjA/OtRKf1
8PCAq6vrtf8joLXpbha9nb7WH8gCoDsiPU2hA4r+rC+Yn5wLDaitqUejzF+/bc/qNMwdR//8RB8v
fdzu1mOmg1pjfR1q6xrlMbtLzwMTRLf/hcZ6VJQU9fyvfovLUdOo5UD/5NX6bTT6GOr/IpQF4N6w
FIC7tk9jfhbRMU9P6d9u9IOA+tcA1q67lehfGQwce2+W+1oAdOW0nej/5EB3RpY/X/hJqdVvWKpH
Xa2V65ifHH0PSh8vyxGktWluP7UyX32yXv/7V+YWI8/3etk56Iu8Sf5t0P9Zj7Xp+kQfQx2g9Ge6
+7QA6Le23b3XB/NziD4f9LV3v6Lja9/ycSu5LwVAV0hXTr/bWP+HBjqY6L/MwxE+Xg9/LG+70d2n
b7tY2+YMcz+j46sWjweyAGhD0Q8qEBER0d2lHxjUvwZgASAiIjIRFgAiIiITYgEgIiIyIRYAIiIi
E2IBICIiMiEWACIiIhNiASAiIjIhFgAiIiITYgEgIiIyIRYAIiIiE2IBICIiMiEWACIiIhNiASAi
IjIhFgAiIiITYgEgIiIyIRYAIiIiE2IBICIiMiEWACIiIhNiASAiIjIhFgAiIiITYgEgIiIyIRYA
IiIiE2IBICIiMiEWACIiIhNiASAiIjIhFgAiIiITYgEgIiIyIRYAIiIiE2IBICIiMiEWACIiIhNi
ASAiIjIhFgAiIiITYgEgIiIyIRYAIiIiE2IBICIiMiEWACIiIhNiASAiIjIhFgAiIiITYgEgIiIy
IRYAIiIiE2IBICIiMiEWACIiIhNiASAiIjIhFgAiIiITYgEgIiIyIRYAIiIiE2IBICIiMiEWACIi
IhNiASAiIjIhFgAiIiITYgEgIiIyIRYAIiIiE2IBICIiMiEWACIiIhNiASAiIjIhFgAiIiITYgEg
IiIyIRYAIiIiE2IBICIiMiEWACIiIhNiASAiIjIhFgAiIiITYgEgIiIyIRYAIiIiE2IBICIiMiEW
ACIiIhNiASAiIjIhFgAiIiITYgEgIiIyIRYAIiIiE2IBICIiMiEWACIiIhNiASAiIjIhFgAiIiIT
YgEgIiIyIRYAIiIiE2IBICIiMiEWACIiIhNiASAiIjIhFgAiIiITYgEgIiIyIRYAIiIiE2IBICIi
MiEWACIiIhNiASAiIjIhFgAiIiITYgEgIiIyIRYAIiIiE2IBICIiMiEWACIiIhNiASAiIjIhFgAi
IiITYgEgIiIyIRYAIiIiE2IBICIiMiEWACIiIhNiASAiIjIhFgAiIiITYgEgIiIyIRYAIiIiE2IB
ICIiMiEWACIiIhNiASAiIjIhFgAiIiITYgEgIiIyIRYAIiIiE2IBICIiMiEWACIiIhNiASAiIjIh
FgAiIiITYgEgIiIyIRYAIiIiE2IBICIiMiEWACIiIhNiASAiIjIhFgAiIiITYgEgIiIyIRYAIiIi
E2IBICIiMiEWACIiIhNiASAiIjIhFgAiIiITYgEgIiIyIRYAIiIiE2IBICIiMiEWACIiIhNiASAi
IjIhFgAiIiITYgEgIiIyIRYAIiIiE2IBICIiMiEWACIiIhNiASAiIjIhFgAiIiITYgEgIiIyIRYA
IiIiE2IBICIiMiEWACIiIhNiASAiIjIhFgAiIiITYgEgInqAdV66CtvkZpxMuICTiQzTm9gmxJd3
9j5L7gwLABHRA6yy5RJ+MS8Tv5iShl9M6M1ExrTRx39yOn4xLgVTXKp6nyV3hgWAiOgBVt16Cf9p
cTb+YVkm5rqXYFZQI2Yyps3CwFp8eCjXKIRzPGp6nyV3hgWAiOgBpgXgF4uy8fs9xbgaGwxMGcOY
OTtW4kx8uXE2gAWAiOhnzFIAfn2wCk02J4Bf/IIxcx7/PQ7GVeMXk9JZAIiIfs6uFYADlWi0s7U+
KDDmyV+ew8HYKhYAIqKfOxYApl9YAIiIzIEFgOkXFgAiInNgAWD6hQWAiMgcWACYfmEBICIyBxYA
pl9YAIiIzIEFgOkXFgAiInNgAWD6hQWAiMgcWACYfmEBICIyBxYApl9YAIiIzIEFgOkXFgAiInNg
AWD6hQWAiMgcWACYfmEBICIyBxYApl9YAIiIzIEFgOkXFgAiInNgAWD6hQWAiMgcWACYfmEBICIy
BxYApl9YAIiIzIEFgOkXFgAiInNgAWD6hQWAiMgcWACYfmEBICIyBxYApl9YAIiIzIEFgOkXFgAi
InNgAWD6hQWAiMgcWACYfmEBICIyBxYApl9YAIiIzIEFgOkXFgAiInNgAWD6hQWAiMgcWACYfmEB
ICIyBxYApl9YAIiIzIEFgOkXFgAiInNgAWD6hQWAiMgc7qQA5EjOSewkDpIiibXpNJclXpImiezN
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
jS5Lb6v3TQdoPfrXQV4H8TKJ3s6yXnofdXDWwVpvp0f1luXrdZb1styfgdHLdZtYioNG56fpOy/9
We+/rp/+brnPekbCctlNwwJARGQOd1IAmBtjI9EjfT0DoB9S1LcjtBhYm/aBDgsAEZE5sADcnegZ
AD0zoLmX3wx4z8MCQERkDiwATL+wABARmQMLANMvLABERObAAsD0CwsAEZE5sAAw/cICQERkDiwA
TL+wABARmQMLANMvLABERObAAsD0CwsAEZE5sAAw/cICQERkDiwATL+wABARmQMLANMvLABERObA
AsD0CwsAEZE5sAAw/cICQERkDiwATL+wABARmQMLANMvLABERObAAsD0CwsAEZE5sAAw/cICQERk
DiwATL+wABARmQMLANMvLABERObAAsD0CwsAEZE5sAAw/cICQERkDiwATL+wABARmQMLANMvLABE
RObAAsD0CwsAEZE5sAAw/cICQERkDiwATL+wABARmQMLANMvLABERObAAsD0CwsAEZE5sAAw/cIC
QERkDiwATL+wABARmQMLANMvLABERObAAsD0CwsAEZE5sAAw/fLSsywARERmcK0AHKzCBVsb64MC
Y5489xi+j2MBICL62bMUgN9uy0dDZiqaHOzQeJYxay4GeeJoeDF+MTGNBYCI6OesSgrA33yXjf84
L8MoAfpWwK/3M2bN7/eW4Zers/CLyWmY5c4CQET0s1XTdgn/tCYPfyclQM8EMMzfLM7Bf/42E995
1/Y+S+4MCwAR0QPsylUpAa2XjbcCGOZaWi6hpetK77PkzrAAEBERmRALABERkQmxABAREZkQCwAR
EZEJsQAQERGZEAsAERGRCT3wBaC0tLR3VYmIiOhuqaysfHALQH19PfLy8oyVZBiGYRjm7kXH1+rq
6gevAGiampqMlbO24gzDMAzD3Hn06L+xsdHq+Huz3LcCoGlpaWEYhmEY5h7E2rj7Q7mvBYBhGIZh
mAcjLAAMwzAMY8KwADAMwzCMCcMCwDAMwzAmzH0tAPrnCe3t7WhrazN9dDvcyYc2GOZhjeV5P/C1
YLZYtoG1bWRJa2srt5XkVraV7ke5rXqi2+GB/DPAvt8FkJOTw0j0Tzdu58FimIc5RUVFVl8HZox+
K6q1baTRfYJ+aZq125kxhYWFxp+RW9tX6mW6H7V2OzNGx1cdZ291XLlvBUAbbXFxMc6dOwc/Pz9T
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
VJ5bGv15+SokJsShobbG+OKfev2+Cb2t3OfKqjpUyParqqqW7VBmlIkK/VbA3m1bJ9vU+DPLCtm+
xu30raYKVMr2qyzTP1G9cX1uJ+YtAAOiX0Opyxk6dCg+/vjjPhlqXKaJiooynlT6JBt4Kt+4rM/v
dzssAIyZcrcLgA40J0+evPZa7hvLa3z8+PHG/kYH0L6v75u+bWdlP3Avcr8KgB4E6f8g59q26bsf
tFwmCQgMNPaX1vaD1tPzNsjA/eOt3/7Wo/O83wVAi4uODT3b7Pp26ht9HtfV1Vm9vbX0bJu7VyJv
FhaA3ujpL21yusybRV9YOp2129/rsAAwZsrdLgD6utUBwdrr2hJdprXb/rVzvwqAbiO97cDtMjC6
L/pr7Qd/LH+NAnAr203Hlgdxm7EAPCRhAWDMlLtdAB7m3K8C8HPIX6MAPMx5aAqAPlC6smaNnmaK
jY1lAWBMkb4FoKCgwBjUrL0uzBDd92VnZ99SAcjIyDCONq3NxwzR54kead9KAdD9qe5Xrc3HLNHn
1gNdALSlODo6Gitp5vj6+sLZ2RnR0dEsAMzPPjrINTY2wt3dHZ6ensbz39rrwgzR++7h4WH8/EMF
wN/fH25ubqbfVjr4u7q6Gp9TuFkB0P2o7k/NvK0s0fFVx9kHrgDoE12PArTR6WkdptBorNZ2AAzz
c4wepVh7HZgxenRrbRtpdJ+gR3PWbmfG6FsB+tccN9tWuh+1djszRsdXHWdvdVy5bwVAoyvV1tbG
9MZao2WYn2v0qMTa68CM+bEjNG6r6/mxbaX7UWu3M2tu56DyvhYAhmEYhmEejLAAMAzDMIwJwwLA
MAzDMCYMCwDDMAzDmDAsAAzDMAxjwrAAMAzDMIwJwwLAMAzDMCYMCwDDMAzDmDAsAAzDMAxjwvyk
AqA3ZhiGYRjm4UtLyx0UgLLqJhTWdRk3ZBiGYRjm4UuxJL+mA9UNHbdWAIYPH95QLgWgprHLaA0M
wzAMwzyc0cG/trEd48aN7+od5m/uww8/LBg/YWLrBIk2BoZhGIZhHs5MmCCZOKl1yJAh1b3DPBER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERER0c/KL37x/wNhcMoue1dMGgAAAABJRU5ErkJggg==</Preview>
  <Form>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
+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
0D768PjX+Nv/AX3trgY6xgAA</Form>
  <Code><![CDATA[
#-------------------------------------------------------
# NOTE: When new TabPage added place the validation code
# 		in the Test-WizardPage function.
#-------------------------------------------------------
function Test-WizardPage
{
<#
	Add TabPages and place the validation code in this function
#>
	[OutputType([boolean])]
	param([System.Windows.Forms.TabPage]$tabPage)
	
	if($tabPage -eq $tabpageStep1)
	{
		#TODO: Enter Validation Code here for Step 1
		if(-not $global:vcenterConnection.IsConnected)
		{
			return $false
		}
		else
		{
			return $true
		}
		
	}
	elseif ($tabPage -eq $tabpageStep2)
	{
		#TODO: Enter Validation Code here for Step 2
		if($global:vmbuilds -ne $null)
		{
			return $true
		}
		
		return $false
	}
	elseif ($tabPage -eq $tabpageStep3)
	{
		#TODO: Enter Validation Code here for Step 2
		if ($global:vmbuilds -ne $null)
		{
			return $true
		}
		
		return $false
	}
	elseif ($tabPage -eq $tabpageStep4)
	{
		$hostnameComplete = $true
		
		foreach ($node in $treeviewVMListStep4.Nodes)
		{
			if ($node.Text -notin $global:vmWorkgroupDomain.VMName)
			{
				$hostnameComplete = $false
			}
		}
		
		if ($hostnameComplete)
		{
			return $true
		}
		
		return $false
		
	}
	elseif ($tabPage -eq $tabpageStep5)
	{
		[System.Array]$timeZones = (Get-TimeZone -ListAvailable).DisplayName
		
		foreach ($timeZone in $timeZones)
		{
			$comboboxTimezone.Items.Add($timeZone)
		}
		
		if ($global:vmAdminPasswords)
		{
			return $false
		}
		
		return $true
	}
	elseif ($tabPage -eq $tabpageStep6)
	{
		$datetime = get-date -Format "MMddyyy_mmhhss"
		$string = ""
		if (Get-ChildItem -Path "$logDirectory\build_$datetime.html" -ErrorAction Ignore) { Remove-Item "$logDirectory\build_$datetime.html" -Force}		
		foreach ($vm in $global:vmBuilds)
		{
			#$string = "<b>This is my test page.</b>"
			$string = "
						<p>
							<font size=3><b>VMName: <font color=red>$($vm.VMName)</font></b></font><br>
							<font size=2>
							&nbsp;&nbsp;&nbsp;<b>VM Host:</b> $($vm."VM Host")<br>
							&nbsp;&nbsp;&nbsp;<b>Datacenter:</b> $($vm.Datacenter)<br>
							&nbsp;&nbsp;&nbsp;<b>Datastore:</b> $($vm.Datastore)<br>
							&nbsp;&nbsp;&nbsp;<b>CPU Count:</b> $($vm.NumCPU)<br>
							&nbsp;&nbsp;&nbsp;<b>Memory:</b> $($vm.Memory)<br>
							&nbsp;&nbsp;&nbsp;<b>Template:</b> $($vm.Template)<br>
							&nbsp;&nbsp;&nbsp;<b>Location:</b> $($vm.Location)<br>
					"
			
			$domain = $global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }
			
			$string = $string + "&nbsp;&nbsp;&nbsp;<b>Hostname:</b> $($domain.Hostname)<br>"
			$string = $string + "&nbsp;&nbsp;&nbsp;<b>Domain/Workgroup:</b> $($domain.DomainName)<br>"
			
			$roles = $global:vmRoles | ?{ $_.VMName -eq $vm.VMName }
			
			if ($roles -ne '')
			{
				$string = $string + "&nbsp;&nbsp;&nbsp;<b>Roles:</b><br>"
				
				foreach ($role in $roles.Roles)
				{
					$string = $string + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$role<br>"
				}
			}
			
			$vmKeyTemp = $global:vmOSKeys | ?{ $_.VMName -eq $vm.VMName }
			
			$tzArray = Import-Csv "$ScriptDirectory\reference\timezones.csv"
			
			$tz = ($tzArray | ?{ $_.TimeZoneCode -eq $global:vmTimeZones}).Description
			
			$string = $string + "&nbsp;&nbsp;&nbsp;<b>Time Zone:</b> $tz<br>"
			
			if ($vmKeyTemp.UseKMS -eq 'Yes')
			{
				$string = $string + "&nbsp;&nbsp;&nbsp;<b>License Type:</b> Using KMS<br>"
			}
			elseif ($vmKeyTemp.UseKMS -eq "No")
			{
				$string = $string + "
										&nbsp;&nbsp;&nbsp;<b>License Type:</b> Product Key<br>
										&nbsp;&nbsp;&nbsp;<b>License Key:</b> $($vmKeyTemp.ProductKey)<br>
									"
			}
			
			if ($vm."IP Type" -eq "Static")
			{
				$string = $string + "
										&nbsp;&nbsp;&nbsp;<b>IP Type:</b> $($vm."IP Type")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Network:</b> $($vm.Network)<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>IP Address:</b> $($vm."IP Address")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Subnet Mask:</b> $($vm."Subnet Mask")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Default Gateway:</b> $($vm."Default Gateway")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Primary DNS Server:</b> $($vm."Primary DNS Server")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Secondary DNS Server:</b> $($vm."Secondary DNS Server")<br>
										"
			}
			else
			{
				$string = $string + "&nbsp;&nbsp;&nbsp;<b>IP Type:</b> $($vm."IP Type")<br>"
				$string = $string + "&nbsp;&nbsp;&nbsp;<b>Network:</b> $($vm.Network)<br>"
			}
			
			$disks = $global:vmAdditionalDisks | ?{ $_.VMName -eq $vm.VMName }
			
			
			foreach ($disk in $disks)
			{
				$string = $string + "&nbsp;&nbsp;&nbsp;<b>Additional Disk:</b> $($disk.DriveLetter) - $($disk.DriveSize)GB <br>"				
			}
			
			foreach ($nic in ($global:vmAdditionalNICs | ?{ $_.VMName -eq $vmName }))
			{
				if ($nic."IP Type" -eq "Static")
				{
					$string = $string + "
										&nbsp;&nbsp;&nbsp;<b>Additional NIC:</b> $($nic."IP Type")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Network:</b> $($nic.VLAN)<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>IP Address:</b> $($nic."IP Address")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Subnet Mask:</b> $($nic."Subnet Mask")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Default Gateway:</b> $($nic."Default Gateway")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Primary DNS Server:</b> $($nic."Primary DNS Server")<br>
										"
				}
				else
				{
					$string = $string + "
										&nbsp;&nbsp;&nbsp;<b>Additional NIC:</b> $($nic."IP Type")<br>"					
				}
			}
			
			if ($global:vmLocalUsers -ne '')
			{
				$string = $string + "&nbsp;&nbsp;&nbsp;<b>Additional Users:</b><br>"
				
				foreach ($user in $global:vmLocalUsers)
				{
					$string = $string + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$($user.Username)<br>"
				}
			}
			
			$string = $string + "</font></p>"
			
			ConvertTo-Html -Body $string | Out-File "$logDirectory\build_$datetime.html" -Append
		}
			
		$webbrowserVMBuildSummary.Url = "$logDirectory\build_$datetime.html"
		
		return $true
	}
	#Add more pages here
	
	return $false
}



$buttonFinish_Click={
	#-------------------------------------------------------
	# TODO: Place finalization script here
	#-------------------------------------------------------
	
}

#region Events and Functions
$formVMAutomationTool_Load = {
	
	Update-NavButtons
	
	<#
	$timeZones = Import-Csv "$ScriptDirectory\reference\timezones.csv"
	
	foreach ($timeZone in $timeZones)
	{
		$comboboxTimezone.Items.Add($timeZone.Description)
	}
	
	$index = 1
	
	$comboboxTimezone.SelectedIndex = $index
	/#>
	$Path = $env:TEMP
	
	if (Get-Item "$Path\VcenterHistory\vcenterhistory.log")
	{
		$autoCompleteArray = (Import-Csv "$Path\VcenterHistory\vcenterhistory.log").vcenter
		
		$vcenterTextbox.AutoCompleteCustomSource.AddRange($autoCompleteArray)
	}
	
}

function Update-NavButtons
{
	<# 
		.DESCRIPTION
		Validates the current tab and Updates the Next, Prev and Finish buttons.
	#>
	$enabled = Test-WizardPage $tabcontrolWizard.SelectedTab
	$buttonNext.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	$buttonBack.Enabled = $tabcontrolWizard.SelectedIndex -gt 0
	$buttonFinish.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)	
	#Uncomment to Hide Buttons
	#$buttonNext.Visible = ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	#$buttonFinish.Visible = ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)
}

$script:DeselectedIndex = -1
$tabcontrolWizard_Deselecting=[System.Windows.Forms.TabControlCancelEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
	# Store the previous tab index
	$script:DeselectedIndex = $_.TabPageIndex
}

$tabcontrolWizard_Selecting=[System.Windows.Forms.TabControlCancelEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
	# We only validate if we are moving to the Next TabPage. 
	# Users can move back without validating
	if($script:DeselectedIndex -ne -1 -and $script:DeselectedIndex -lt $_.TabPageIndex)
	{
		#Validate each page until we reach the one we want
		for($index = $script:DeselectedIndex; $index -lt $_.TabPageIndex; $index++)
		{
			$_.Cancel = -not (Test-WizardPage $tabcontrolWizard.TabPages[$index])
			
			if($_.Cancel) 
			{
				# Cancel and Return if validation failed.
				return;
			}
		}
	}
	
	Update-NavButtons
}

$buttonBack_Click={
	#Go to the previous tab page
	if($tabcontrolWizard.SelectedIndex -gt 0)
	{
		$tabcontrolWizard.SelectedIndex--
	}
}

$buttonNext_Click={	
	#Go to the next tab page
	if($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	{
		$tabcontrolWizard.SelectedIndex++
	}	
}

#endregion

#------------------------------------------------------
# NOTE: When a Control State changes you should call
# 		Update-NavButtons to trigger validation
#------------------------------------------------------

$radiobuttonOption_CheckedChanged={
	
	if($this.Checked)
	{
		Update-NavButtons
	}
}

$buttonEnterCredentials_Click={
	
	try
	{
		$pictureboxLoading.Visible = $true
		if ($global:vcenterConnection.IsConnected)
		{
			Disconnect-VIServer -Server * -Force -Confirm:$false
			$labelVCenterServerNotConn.Text = "vCenter Server: Not Connected"
			$labelUsernameNotConnected.Text = "Username: Not Connected"
			$labelConnectionStatusNotC.Text = "Connection Status: Not Connected"
		}
		$global:vcCredential = $null
		$global:vcenterConnection = $null
		$global:vcCredential = Get-Credential -ErrorAction Stop
		$global:vcenterConnection = Connect-VIServer -Server $vcenterTextbox.Text -Credential $global:vcCredential -ErrorAction Stop
		$buttonEnterCredentials.Enabled = $false
		$pictureboxLoading.Visible = $false
	}
	catch
	{
		"Unable to connect."
	}
	
	If ($global:vcenterConnection.IsConnected)
	{
		$labelVCenterServerNotConn.Text = "vCenter Server: $($vcenterTextbox.Text)"
		$labelUsernameNotConnected.Text = "Username: $($global:vcenterConnection.User)"
		$labelConnectionStatusNotC.Text = "Connection Status: Connected"
		$labelOKStep1.Visible = $true
		
		$Path = $env:TEMP
		
		if (-not (Get-Item "$Path\VcenterHistory" -ErrorAction SilentlyContinue))
		{
			New-Item -Name VcenterHistory -Path $Path -ItemType Directory
		}
		
		if (Get-Item "$Path\VcenterHistory\vcenterhistory.log" -ErrorAction SilentlyContinue)
		{
			$vcHistoryArray = Import-Csv "$Path\VcenterHistory\vcenterhistory.log"
			
			$vcHistoryArray = $vcHistoryArray | ?{ $_.vcenter -ne "$($vcenterTextbox.Text)" }
			
			$object = New-Object PSObject
			
			$object | Add-Member -MemberType NoteProperty -Name vcenter -Value $vcenterTextbox.Text
			
			$vcHistoryArray = [System.Array]$vcHistoryArray + $object
			
			$vcHistoryArray | Export-CSV "$Path\VcenterHistory\vcenterhistory.log" -NoTypeInformation
		}
		else
		{
			$vcHistoryArray = @()
			
			$object = New-Object PSObject
			
			$object | Add-Member -MemberType NoteProperty -Name vcenter -Value $vcenterTextbox.Text
			
			$vcHistoryArray = [System.Array]$vcHistoryArray + $object
			
			$vcHistoryArray | Export-CSV "$Path\VcenterHistory\vcenterhistory.log" -NoTypeInformation
		}
		
		Update-NavButtons
		
	}
	else
	{
		[System.Windows.Forms.MessageBox]::Show("Unable to connect to $($vcenterTextbox.Text). Please try logging on again.")
		$labelOKStep1.Visible = $false
		Update-NavButtons
	}
}

#region Control Helper Functions
function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]
		$DisplayMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}

function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}

function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	[ValidateNotNull()]
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterWMIProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)	
}

function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}


function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}


function Get-CheckedNode
{
<#
	.SYNOPSIS
		This function collects a list of checked nodes in a TreeView

	.DESCRIPTION
		This function collects a list of checked nodes in a TreeView

	.PARAMETER  $NodeCollection
		The collection of nodes to search

	.PARAMETER  $CheckedNodes
		The ArrayList that will contain the all the checked items
	
	.EXAMPLE
		$CheckedNodes = New-Object System.Collections.ArrayList
		Get-CheckedNode $treeview1.Nodes $CheckedNodes
		foreach($node in $CheckedNodes)
		{	
			Write-Host $node.Text
		}
#>
	param (
			[ValidateNotNull()]
			[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
			[ValidateNotNull()]
			[System.Collections.ArrayList]$CheckedNodes
	)
	
	foreach ($Node in $NodeCollection)
	{
		if ($Node.Checked)
		{
			[void]$CheckedNodes.Add($Node)
		}
		Get-CheckedNode $Node.Nodes $CheckedNodes
	}
}

#endregion


$vcenterTextbox_TextChanged={
	#TODO: Place custom script here
	if ($vcenterTextbox.Text -ne "")
	{
		$buttonEnterCredentials.Enabled = $true
	}
	else
	{
		$buttonEnterCredentials.Enabled = $false
	}
}

$buttonAddVirtualMachine_Click={
	#TODO: Place custom script here
	if (Show-AddVMForm_psf -eq 'OK')
	{
	}
}


$buttonOpenRolesSelection_Click={
	
	$global:vmSelectedStep4 | Out-File "$logDirectory\vmselectedstep4.log" -Append
	
	if ((Show-WindowsRoles_psf -VMName $global:vmSelectedStep4) -eq 'OK')
	{
		#$selectedRoles = $global:vmRoles | ?{ $_.VMName -eq $vm.VMName } | Select -ExpandProperty Roles		
	}
	
}

$buttonBuildAndConfigureVMs_Click={
	
	#$progressbarVMBuild.Visible = $true
	$buttonBuildAndConfigureVMs.Enabled = $false
	
	try
	{
		#$progressbarVMBuild.Maximum = ($global:vmBuilds).Count
		#$progressbarVMBuild.Value = 0
		#$progressbarVMBuild.Step = 1
		
		foreach ($vm in $global:vmbuilds)
		{
			while (@(Get-Job | ?{ $_.State -eq "Running" }).Count -ge 5)
			{
				# We're going to iterate through the running jobs and kill any that have been running for X minutes.
				# This block is ignored if there are less than 5 total builds. We'll handle that part later.
				
				foreach ($job in (Get-Job))
				{
					$runTime = ((Get-Date) - $job.PSBeginTime).Minutes
					if ($runtime -gt 30)
					{
						try
						{
							Stop-Job $job.Name -Confirm:$false
						}
						catch
						{
							"Unable to stop job."
						}
					}
				}
				
				Write-Host "Waiting for open thread...($NumJobs Maximum)"
				Start-Sleep -Seconds 3
			}
			
			# Let's combine all the OS specific data we gathered for the VM into one variable.
			$osConfigObject = New-Object PSObject
			
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "VMName" -Value $vm.VMName
			
			# Add the data for the domain/workgroup
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "Hostname" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).Hostname
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "DomainName" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).DomainName
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "DomainUser" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).DomainUser
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "DomainPassword" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).DomainPassword
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "IsWorkgroup" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).IsWorkgroup
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "LocalAdminPassword" -Value $global:vmAdminPasswords
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "Roles" -Value ($global:vmRoles | ?{ $_.VMName -eq $vm.VMName }).Roles
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "Features" -Value ($global:vmFeatures | ?{ $_.VMName -eq $vm.VMName }).Features
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "AdminPassword" -Value ($global:vmAdminPasswords | ?{ $_.VMName -eq $vm.VMName }).Password
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "LocalUsers" -Value $global:vmLocalUsers
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "Disks" -Value ($global:vmAdditionalDisks | ?{ $_.VMName -eq $vm.VMName })
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "NICs" -Value ($global:vmAdditionalNICs | ?{ $_.VMName -eq $vm.VMName })
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "OSKeys" -Value ($global:vmOSKeys | ?{ $_.VMName -eq $vm.VMName })
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "TimeZone" -Value $global:vmTimeZones
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "PostInstallScripts" -Value $global:postInstallScripts
			
			if ($global:vmAdminAccount -ne "")
			{
				$osConfigObject | Add-Member -MemberType NoteProperty -Name "AdminAccount" -Value $global:vmAdminAccount
			}
			else
			{
				$osConfigObject | Add-Member -MemberType NoteProperty -Name "AdminAccount" -Value ""
			}
			
			$global:vmFullOSConfig = [System.Array]$global:vmFullOSConfig + $osConfigObject
			
			$osConfigObject | Out-File "$logDirectory\osobject.log" -Append
			
			# Define and start the build job for the VM.
			
			Start-Job -Name $vm.VMName -ArgumentList $vcenterTextbox.Text, $global:vcCredential, $vm, $ScriptDirectory, $osConfigObject, $logDirectory -ScriptBlock {
				. "$($args[3])\Functions\Get-FolderbyPath.ps1"
				
				Import-Module VMware.PowerCLI
				
				Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -ParticipateInCeip $false -DisplayDeprecationWarnings $false -Confirm:$false -WebOperationTimeoutSeconds 3600 -ErrorAction Stop
				
				$connection = Connect-VIServer -Server $args[0] -Credential $args[1] -ErrorAction Stop
				
				if ($args[4].IsWorkgroup -eq 'No')
				{
					
					$password = ConvertTo-SecureString "$($args[4].DomainPassword)" -AsPlainText -Force
					$domainCredential = New-Object System.Management.Automation.PSCredential ("$($args[4].DomainUser)", $password)
					
					$osSpec = New-OSCustomizationSpec -OSType "Windows" -Name $args[2].VMName -Type NonPersistent `
													  -FullName "Administrator" `
													  -AdminPassword "$($args[4].LocalAdminPassword)" `
													  -AutoLogonCount 1 `
													  -OrgName "Org1" `
													  -Description "Temporary Spec for $($args[2].VMName)" `
													  -ChangeSid `
													  -Domain "$($args[4].DomainName)" `
													  -DomainCredentials $domainCredential `
													  -NamingScheme fixed `
													  -NamingPrefix $args[4].Hostname `
													  -ErrorAction Stop
					
				}
				else
				{
					
					$osSpec = New-OSCustomizationSpec -OSType "Windows" -Name $args[2].VMName -Type NonPersistent `
													  -FullName "Administrator" `
													  -AdminPassword "$($args[4].LocalAdminPassword)" `
													  -AutoLogonCount 1 `
													  -OrgName "Org1" `
													  -Description "Temporary Spec for $($args[2].VMName)" `
													  -ChangeSid `
													  -Workgroup "$($args[4].DomainName)" `
													  -NamingScheme fixed `
													  -NamingPrefix $args[4].Hostname `
													  -ErrorAction Stop
					
				}
				
				
				if ($args[2].("IP Type") -eq "DHCP")
				{
					
					Get-OSCustomizationNicMapping -OSCustomizationSpec $osSpec | Set-OSCustomizationNicMapping -IpMode UseDHCP -ErrorAction Stop					
				}
				else
				{
					Get-OSCustomizationNicMapping -OSCustomizationSpec $osSpec | Set-OSCustomizationNicMapping -IpMode UseStaticIP `
																											   -IpAddress $args[2].("IP Address") `
																											   -SubnetMask $args[2].("Subnet Mask") `
																											   -DefaultGateway $args[2].("Default Gateway") `
																											   -Dns $args[2].("Primary DNS Server"), $args[2].("Secondary DNS Server") `
																											   -ErrorAction Stop				
				}
				
				# Here, we pull in the template depending on if it's in vCenter or in a Content Library.
				
				if ($args[2].TemplateLocation -eq "vCenter")
				{
					$vmTemplate = Get-Template -Name $args[2].Template
					
					$destFolder = Get-FolderbyPath -Path "$($args[2].Location)" -Separator "\"
					
					# Now, let's actually build the VM with the configuration spec we defined above.
					$invoke = New-VM -VMHost $args[2].("VM Host") -Name $args[2].VMName -Datastore $args[2].Datastore -Template $vmTemplate -Location $destFolder -OSCustomizationSpec $osSpec -ErrorAction Stop -Verbose | Out-File "VMBuild.log" -Append
					
				}
				elseif ($args[2].TemplateLocation -eq "Content Library")
				{
					if ($connection.Version -ge 6.5)
					{
						$vmTemplate = Get-ContentLibraryItem -Name $args[2].Template
						
						$destFolder = Get-FolderbyPath -Path "$($args[2].Location)" -Separator "\"
						
						# Now, let's actually build the VM with the configuration spec we defined above.
						$invokeTask = New-VM -VMHost $args[2].("VM Host") -Name $args[2].VMName -Datastore $args[2].Datastore -Location $destFolder -ContentLibraryItem $vmTemplate -RunAsync -ErrorAction Stop
						
						do
						{
							Write-Host $invokeTask
							Start-Sleep -Seconds 5
						}
						while ($invokeTask.State -eq "Running")
						
						
						$applySpec = Get-VM -Name $args[2].VMName | Set-VM -OSCustomizationSpec $osSpec -Confirm:$false -ErrorAction Stop
					}
					else
					{
						$vmTemplate = Get-ContentLibraryItem -Name $args[2].Template
					}
					
				}
				
				# Now that the VM is built, we need to modify the network adapter and assign it to the specified vSwitch before powering it on.
				Get-VM -Name $args[2].VMName | Set-VM -MemoryGB $args[2].Memory -NumCpu $args[2].NumCPU -Confirm:$false -ErrorAction Stop
				
				Get-NetworkAdapter -VM $args[2].VMName | Set-NetworkAdapter -NetworkName $args[2].Network -StartConnected $true -Confirm:$false -ErrorAction Stop
				
				Start-VM -VM $args[2].VMName -RunAsync
				
				# Now we wait for the VM to power up and auto log in before continuing.
				$vmstatus = (Get-VM -Name "$($args[2].VMName)").extensionData.Guest.interactiveGuestOperationsReady
				
				do
				{
					Start-Sleep -Seconds 1
					$vmstatus = (Get-VM -Name "$($args[2].VMName)").extensionData.Guest.interactiveGuestOperationsReady
					Write-Host $vmStatus -ForegroundColor Red
				}
				while ($vmStatus -ne $True)
				
				Write-Host $vmStatus -ForegroundColor Green
				
				#Get-VM $args[2].VMName -ErrorAction Stop | Restart-VMGuest -Confirm:$false -ErrorAction Stop
				
				# Now that our VM is built, let's finish customizing it. We'll start by creating the credential object to run Invoke-VMScript.
				
				$vmAdminPass = $args[4].LocalAdminPassword
				
				$localAdmin = "Administrator"
				$password = ConvertTo-SecureString $args[4].LocalAdminPassword -AsPlainText -Force
				$localAdminCred = New-Object System.Management.Automation.PSCredential ($localAdmin, $password)
				
				# Declare the array that will house each command to run.
				
				$customizeOSScripts = [System.Collections.ArrayList]@()
				
				# Now, build the commands to add the additional user accounts to the new VMs. Add the commands to the command array.
				
				foreach ($user in $args[4].LocalUsers)
				{
					if ($user.Administrator -eq "Yes")
					{
						$userCreate = New-Object PSObject
						$userCreate | Add-Member -MemberType NoteProperty -Name "Command" -Value "NET USER $($user.Username) $($user.Password) /add"
						
						$userAdmin = New-Object PSObject
						$userAdmin | Add-Member -MemberType NoteProperty -Name "Command" -Value "NET LOCALGROUP Administrators $($user.Username) /add"
						
						$date = Get-Date -Format "M-d-yyyy"
						$desc = "Admin user created on $date."
						$userTmp = $user.Username
						$userDescription = New-Object PSObject
						$userDescription | Add-Member -MemberType NoteProperty -Name "Command" -Value "Set-LocalUser -Name $userTmp -Description ""$desc"""
						
						$customizeOSScripts = [System.Array]$customizeOSScripts + $userCreate
						$customizeOSScripts = [System.Array]$customizeOSScripts + $userAdmin
						$customizeOSScripts = [System.Array]$customizeOSScripts + $userDescription
					}
					else
					{
						$userCreate = New-Object PSObject
						$userCreate | Add-Member -MemberType NoteProperty -Name "Command" -Value "NET USER $($user.Username) $($user.Password) /add"
						
						$date = Get-Date -Format "M-d-yyyy"
						$desc = "Standard user created on $date."
						$userTmp = $user.Username
						$userDescription = New-Object PSObject
						$userDescription | Add-Member -MemberType NoteProperty -Name "Command" -Value "Set-LocalUser -Name $userTmp -Description ""$desc"""
						
						$customizeOSScripts = [System.Array]$customizeOSScripts + $userCreate
						$customizeOSScripts = [System.Array]$customizeOSScripts + $userDescription
					}
				}
				
				# Build the command to install the selected Roles.
				
				foreach ($role in $args[4].Roles)
				{
					$object = New-Object PSObject
					$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Install-WindowsFeature -Name $role -IncludeManagementTools"
					$customizeOSScripts = [System.Array]$customizeOSScripts + $object
				}
				
				# Now, we add, format and partition additional specified disks.
				
				foreach ($disk in $args[4].Disks)
				{
					$driveLetter = $disk.DriveLetter
					$driveLabel = "Drive-$($disk.DriveLetter)"
					$driveSize = [int]($disk.DriveSize)
					$confirm = '$false'
					New-HardDisk -VM $args[2].VMName -CapacityGB $driveSize -Persistence persistent -Confirm:$false -ErrorAction Stop
					$object = New-Object PSObject
					$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-Disk | Where-Object PartitionStyle -eq ""RAW"" | Initialize-Disk -PartitionStyle GPT -PassThru | New-Partition -DriveLetter $driveLetter -UseMaximumSize | Format-Volume -FileSystem NTFS -NewFileSystemLabel $driveLabel -AllocationUnitSize 65536 -Confirm:$confirm"
					#$customizeOSScripts = [System.Array]$customizeOSScripts + $object
					Invoke-VMScript -VM $args[2].VMName -GuestCredential $localAdminCred -ScriptText "$($object.Command)" -ErrorAction Stop
				}
				
				# Let's customize additional network adapters.
				
				foreach ($nic in $args[4].NICs)
				{
					$newNic = New-NetworkAdapter -VM $nic.VMName -NetworkName $nic.VLAN -StartConnected -Type Vmxnet3
					
					$macAddress = "$($newNic.MacAddress)" -replace ":", "-"
					
					if ($nic.("IP Type") -eq "Static")
					{
						$newIP = $nic.("IP Address")
						$newMask = $nic.("Subnet Mask")
						$newGateway = $nic.("Default Gateway")
						$newDNSServer = $nic.("Primary DNS Server")
						
						# Determine the CIDR notation for subnet mask. We'll need this later.'
						$subnetMasks = Import-Csv "$($args[3])\reference\cidrlist.csv"
						
						$cidrNotation = ($subnetMasks | ?{ $_.SubnetMask -eq $newMask }).CIDR
						
						if ($newGateway -ne '')
						{
							$object = New-Object PSObject
							
							if ($newDNSServer -ne '')
							{
								$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$macAddress"" | New-NetIPAddress -IPAddress $newIP -DefaultGateway $newGateway -PrefixLength $cidrNotation | Set-DNSClientServerAddress -ServerAddresses $newDNSServer"
							}
							else
							{
								$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$macAddress"" | New-NetIPAddress -IPAddress $newIP -DefaultGateway $newGateway -PrefixLength $cidrNotation"
							}
							
							$customizeOSScripts = [System.Array]$customizeOSScripts + $object
						}
						else
						{
							$object = New-Object PSObject
							
							if ($newDNSServer -ne '')
							{
								$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$macAddress"" | New-NetIPAddress -IPAddress $newIP -PrefixLength $cidrNotation | Set-DNSClientServerAddress -ServerAddresses $newDNSServer"
							}
							else
							{
								$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$macAddress"" | New-NetIPAddress -IPAddress $newIP -PrefixLength $cidrNotation"
							}
							
							$customizeOSScripts = [System.Array]$customizeOSScripts + $object
						}
						
					}
				}
				
				# Let's set the product key and activate Windows.
				
				foreach ($key in $args[4].OSKeys)
				{
					if ($key.UseKMS -eq "Yes")
					{
						[string]$kmsServerCmd = "cscript C:\Windows\System32\slmgr.vbs /skms $($key.KMSServer):$($key.KMSServerPort)"
						
						$object = New-Object PSObject
						$object | Add-Member -MemberType NoteProperty -Name "Command" -Value $kmsServerCmd
						
						$customizeOSScripts = [System.Array]$customizeOSScripts + $object
					}
					elseif ($key.UseKMS -eq "No")
					{
						[string]$productKeyCmd = "cscript C:\Windows\System32\slmgr.vbs /ipk $($key.ProductKey)"
						[string]$activationCmd = "cscript C:\Windows\System32\slmgr.vbs /ato"
						
						$object = New-Object PSObject
						$object | Add-Member -MemberType NoteProperty -Name "Command" -Value $productKeyCmd
						
						$customizeOSScripts = [System.Array]$customizeOSScripts + $object
						
						Clear-Variable object
						
						$object = New-Object PSObject
						$object | Add-Member -MemberType NoteProperty -Name "Command" -Value $activationCmd
						
						$customizeOSScripts = [System.Array]$customizeOSScripts + $object
					}
				}
				
				# Now we'll set the time zone
				
				foreach ($tz in $args[4].TimeZone)
				{
					$setTZID = (Get-TimeZone -ListAvailable | Where-Object DisplayName -eq $tz).Id
					
					$newTZCommand = "Set-TimeZone -Id '$setTZID'"
					
					$object = New-Object PSObject
					$object | Add-Member -MemberType NoteProperty -Name "Command" -Value $newTZCommand
					
					$customizeOSScripts = [System.Array]$customizeOSScripts + $object
				}
				
				if ($args[4].AdminAccount -ne "")
				{
					$newAdminCommand = "Get-LocalUser Administrator | Rename-LocalUser -NewName $($args[4].AdminAccount)"
					
					$object = New-Object PSObject
					$object | Add-Member -MemberType NoteProperty -Name "Command" -Value $newAdminCommand
					
					$customizeOSScripts = [System.Array]$customizeOSScripts + $object
				}
				
				# Let's output the commands to verify.
				$customizeOSScripts | Out-File "$($args[5])\scriptsarray_$($args[2].VMName).log"
				
				# Now, we run all the customization commands.
				
				foreach ($script in $customizeOSScripts)
				{
					$script.Command | Out-File "$($args[5])\$($args[2].VMName)_scriptcommand.log" -Append
					Invoke-VMScript -VM $args[2].VMName -GuestCredential $localAdminCred -ScriptText "$($script.Command)" -ErrorAction Ignore | Out-File "$($args[5])\$($args[2].VMName)_scriptcommand.log" -Append
					
				}
				
				$newLocalAdmin = $($args[4].AdminAccount)
				$password = ConvertTo-SecureString $args[4].LocalAdminPassword -AsPlainText -Force
				$newLocalAdminCred = New-Object System.Management.Automation.PSCredential ($newLocalAdmin, $password)
				
				foreach ($postInstallScript in $args[4].PostInstallScripts)
				{
					$postInstallScript.Script | Out-File "$($args[5])\$($args[2].VMName)_scriptcommand.log" -Append
					Invoke-VMScript -VM $args[2].VMName -GuestCredential $newLocalAdminCred -ScriptText "$($postInstallScript.Script)" -ErrorAction Ignore | Out-File "$($args[5])\$($args[2].VMName)_scriptcommand.log" -Append
				}
				
				Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -ParticipateInCeip $false -DisplayDeprecationWarnings $false -Confirm:$false -WebOperationTimeoutSeconds 300 -ErrorAction Stop
				
				Disconnect-VIServer -Server $args[0] -Force -Confirm:$false -ErrorAction Stop
			
				
			} # End job block
			
		} # End foreach statement
		
		# Let's wait for all the build jobs to finish. We'll also kill any jobs that have been running for longer than X minutes.
		# For each job returned that has not completed, we'll check to see if it has been running longer than X minutes. If it has, kill the job.
		
		do
		{
			Start-Sleep -Milliseconds 1000
			
			foreach ($job in (Get-Job))
			{
				$runTime = ((Get-Date) - $job.PSBeginTime).Minutes
				if ($runtime -gt 30)
				{
					try
					{
						Stop-Job $job.Name -Confirm:$false
					}
					catch
					{
						"Unable to stop job."
					}
				}
			}
			
		}
		while ((Get-Job -State Running).Count -gt 0)
		
		$datetime = Get-Date -Format "MMddyyyy_HHmmss"
		
		# Get the completed jobs.
		$jobs = Get-Job | ?{ $_.State -eq "Completed" }
		
		# Get the failed jobs.
		$failedJobs = Get-Job | ?{ $_.State -ne "Completed" }
		
		# Output the job results to a separate log file for each VM.		
		$data = @()
		
		foreach ($job in $jobs)
		{
			$data += Get-Job $job.Name | Receive-Job
			Remove-Job $job
			
			Get-VM $job.Name | Restart-VMGuest -Confirm:$false
		}
		
		$failedData = @()
		
		foreach ($failedJob in $failedJobs)
		{
			$failedData += Get-Job $failedJob.Name | Receive-Job
			Remove-Job $failedJob
			
			Get-VM $job.VMName | Stop-VM -RunAsync -Confirm:$false
			
			do { Start-Sleep -Milliseconds 500 }
			while ((Get-VM $job.Name).PowerState -eq "PoweredOff")
			
			Remove-VM $job.Name -RunAsync -DeletePermanently -Confirm:$false
		}
		
		$data | Out-File "$logDirectory\jobtext.log" -Append
		
		if (-not $failedData)
		{
			[System.Windows.Forms.MessageBox]::Show("All requested virtual machines are available.")
		}
		else
		{
			$failedData | Out-File "$logDirectory\failedjobtext.log" -Append
			[System.Windows.Forms.MessageBox]::Show("The following virtual machine builds failed: $failedData")
		}
		
		$datetime = Get-Date -Format "MMddyyyy_HH_mm_ss"
		$userName = $env:USERNAME
		[string]$archiveName = "vmbuild__$userName_$datetime.zip"
		Compress-Archive -Path $logDirectory -DestinationPath "$logParentDirectory\$archiveName" -Verbose
		Remove-Item -Path $logDirectory -Recurse -Confirm:$false
		
	} # End try statement
	catch
	{
		[System.Windows.Forms.MessageBox]::Show("Unable to build virtual machines.")
	}
}

$datagridviewVMQueue_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	$buttonDeleteVMFromQueue.Enabled = $true	
	
}

$buttonDeleteVMFromQueue_Click={
	
	$global:vmBuilds = $global:vmBuilds | ?{ $_.VMName -ne $listviewVMsStep2.SelectedItems.Text }
	
	$listviewVMsStep2.Clear()
	
	foreach ($item in $global:vmBuilds)
	{
		$listviewVMsStep2.Items.Add($item.VMName)
	}
	
	# Update the treeview control for Step 3
	
	$treeviewVMListStep3.BeginUpdate()
	$treeviewVMListStep3.Nodes.Clear()
	
	foreach ($vm in $global:vmbuilds)
	{
		$newNode = $treeviewVMListStep3.Nodes.Add($vm.VMName)
	}
	
	$treeviewVMListStep3.EndUpdate()
	
	# Update the treeview control for step 4.
	
	$treeviewVMListStep4.BeginUpdate()
	$treeviewVMListStep4.Nodes.Clear()
	
	foreach ($vm in $global:vmbuilds)
	{
		$newNode = $treeviewVMListStep4.Nodes.Add($vm.VMName)
	}
	
	# Determine if we should be resetting all the variables.
	if ($global:vmBuilds -eq $null)
	{
		$vmFeatures = [System.Collections.ArrayList]@()
		$vmRoles = [System.Collections.ArrayList]@()
		$vmDomainInfo = [System.Collections.ArrayList]@()
		$vmOS = [System.Collections.ArrayList]@()
		$vmAdminPasswords = [System.Collections.ArrayList]@()
		$vmLocalUsers = [System.Collections.ArrayList]@()
		$vmWorkgroupDomain = [System.Collections.ArrayList]@()
		$vmFullOSConfig = [System.Collections.ArrayList]@()
		$vmTimeZones = [System.Collections.ArrayList]@()
		$vmAdditionalDisks = [System.Collections.ArrayList]@()
		$vmAdditionalNICs = [System.Collections.ArrayList]@()
		$vmOSKeys = [System.Collections.ArrayList]@()
		$vmAdminAccount = $null
		
		foreach ($item in (Get-ChildItem -Path "$logDirectory"))
		{
			$item | Remove-Item -Force -Recurse
		}
	}
	
	$treeviewVMListStep4.EndUpdate()
	
	Update-NavButtons
	
	
}

$treeviewVMListStep4_AfterSelect=[System.Windows.Forms.TreeViewEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.TreeViewEventArgs]
	
	$global:vmSelectedStep4 = $treeviewVMListStep4.SelectedNode.Text
	
	$labelVMNameStep4.Text = "VM: $($global:vmSelectedStep4)"
	
	if ($treeviewVMListStep4.SelectedNode.Text -in $global:vmWorkgroupDomain.VMName)
	{
		$labelOK1.Visible = $true		
	}
	else
	{
		$labelOK1.Visible = $false
	}
	
	if ($treeviewVMListStep4.SelectedNode.Text -in $global:vmOSKeys.VMName)
	{
		$vmTemp = $global:vmOSKeys | ?{ $_.VMName -eq $treeviewVMListStep4.SelectedNode.Text }
		
		if ($vmTemp.UseKMS -eq "Yes")
		{
			$radiobuttonKMSKey.Checked = $true
			$buttonProductKey.Text = "KMS Key"
		}
		elseif ($vmTemp.UseKMS -eq "No")
		{
			$radiobuttonRetailKey.Checked = $true
			$buttonProductKey.Text = "Retail Key"
		}
	}
	else
	{
		$radiobuttonKMSKey.Checked = $false
		$radiobuttonRetailKey.Checked = $false
		$buttonProductKey.Text = "Product Key"
		$buttonProductKey.Enabled = $false
	}
	
}

$radiobuttonDomain_CheckedChanged={
	
	if ($radiobuttonDomain.Checked) { $buttonDomainWorkgroup.Enabled = $true; $buttonSetWorkgroup.Enabled = $false }
	elseif ($radiobuttonWorkgroup.Checked) { $buttonDomainWorkgroup.Enabled = $false; $buttonSetWorkgroup.Enabled = $true }
	
}

$buttonOpenFeatureSelection_Click={
	
	if ((Show-WindowsFeatures_psf -VMName $global:vmSelectedStep4) -eq 'OK')
	{
	}
}

$buttonAddLocalUsers_Click={
	
	if ((Show-AddLocalUsers_psf -VMName $global:vmSelectedStep4) -eq 'OK'){}
	
}

$comboboxTimezone_SelectedIndexChanged={
	
	$global:vmTimeZones = $comboboxTimezone.Text
	
	$global:vmTimeZones | Out-File "$logDirectory\tz.log"
		
}

$treeviewVMListStep3_AfterSelect=[System.Windows.Forms.TreeViewEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TreeViewEventArgs]
				
	$global:vmSelectedStep3 = $treeviewVMListStep3.SelectedNode.Text
	
	$labelVMStep3.Text = "VM: $($global:vmSelectedStep3)"
	
}

$listviewVMsStep2_SelectedIndexChanged={
				
	$rowTmp = $global:vmBuilds | ?{ $_.VMName -eq $listviewVMsStep2.SelectedItems.Text }
	
	$labelStep2CPU.Text = "CPU: $($rowTmp.NumCPU)"
	$labelStep2Memory.Text = "Memory: $($rowTmp.Memory)"
	$labelStep2Network.Text = "Network: $($rowTmp.Network)"
	$labelStep2VMName.Text = "VM Name: $($rowTmp.VMName)"
	
}
$buttonVDiskAdd_Click={
	
	if ((Show-AddVirtualDisk_psf -VMName $treeviewVMListStep3.SelectedNode.Text) -eq 'OK')
	{ }
	
}

$buttonVNICAdd_Click={
	
	if ((Show-AddNicCard_psf -VMName $treeviewVMListStep3.SelectedNode.Text) -eq 'OK')
	{ }
	
}



$maskedtextboxHostname_Enter={
	#TODO: Place custom script here
	$maskedtextboxHostname.Select(0,0)
}

$buttonSetHostname_Click={
	
	if ((Show-SetHostname_psf -VMName $treeviewVMListStep4.SelectedNode.Text) -eq 'OK')
	{ }
}

$buttonDomainWorkgroup_Click={
	
	if ((Show-WorkgroupDomainJoin_psf) -eq 'OK')
	{ }	
}

$buttonSet_Click={
	
	if ((Show-GetAdminPassword_psf) -eq 'OK')
	{ }
}

$buttonAdminRename_Click={
	#TODO: Place custom script here
	if ((Show-RenameAdminAccount_psf) -eq 'OK')
	{ }
}

$buttonProductKey_Click={
	
	if ($radiobuttonRetailKey.Checked)
	{
		if ((Show-EnterRetailKey_psf -VMName $treeviewVMListStep4.SelectedNode.Text) -eq 'OK')
		{ }
	}
	elseif ($radiobuttonKMSKey.Checked)
	{
		if ((Show-EnterKMSKey_psf -VMName $treeviewVMListStep4.SelectedNode.Text) -eq 'OK')
		{ }
	}
	
}

$radiobuttonRetailKey_CheckedChanged={
	
	if ($radiobuttonRetailKey.Checked)
	{
		$buttonProductKey.Text = "Retail Key"
		$buttonProductKey.Enabled = $true
	}
	
}

$radiobuttonKMSKey_CheckedChanged={
	
	if ($radiobuttonKMSKey.Checked)
	{
		$buttonProductKey.Text = "KMS Key"
		$buttonProductKey.Enabled = $true
	}
}


$buttonSelectScripts_Click={
	
	if ((Show-AddPostInstallScripts_psf) -eq 'OK')
	{ }
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>