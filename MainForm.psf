<File version="3.1">
  <FileID>4dee3778-5d7e-48ff-b7fd-c671faf8b7f0</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAOaaSURBVHhe7J0FeBVH18epv7W37vbWaQvFKbS0
xd3d3d2dBElwQnBIkBjxhLi7u7u7u/v/O7P3BhIIlOrXlvN7nvOQOzs7Mzt7ds5/ZudeOjEMwzAM
wzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAM
wzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAM
wzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAM
wzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAM
wzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAM
wzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAM
wzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAM
wzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAM
wzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAM
wzAMwzAMwzAMwzAMwzAMwzDMv5ZIsrynnnoq74033sibMWNG3ty5c/PmzZtPNo+NjY2NjY3tb2uy
WD2f7P3338t78skn80RMJ0sWAf6BPPbYY6WvvvoqRgwfjlWr10DX8BbCY9KQkJqP+JRcNjY2NjY2
tr+t5SE+ORuePv7YuXs3Ro4cCZrM4/HHH2+Qh/n7QwIgb8SIEThy9AT8whPhHpoMj7BUeIanwoON
jY2NjY3tb2utsdo9LAURidk4f+EyxowZgyeffLJSHubvj1j2X75iFfwp+HuEp8GNBIBrSBIbGxsb
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
txslzR2IL2tDfEU7VUUbpO1dyps+jdFez9ZLCwC8+Ae7v7+fSlVjJVoqqp9q8T3bsb4H6li8LcZq
o5GitnpS39ZWXV3duNvfg4d3qUaKd/5dY7TVWPVSAwAVFRUVFRXV61EUAKioqKioqNSwKABQUVFR
UVGpYVEAoKKioqKiUsOiAEBFRUVFRaWGRQGAioqKiopKDYsCABUVFRUVlRoWBQAqKioqKio1LAoA
VFRUVFRUaljfKwDwiamoqKioqKh+fNXb+wIBQNzahYb2e8KEVFRUVFRUVD++amJVJx9Ea8fg8wWA
LVu2dEhYAJB33hNSAxUVFRUVFdWPs3jn39Y5gF27dt9TdfPfbPny5fW7Nfb0abDiiYGKioqKiorq
x1kaGqz2aPatWLGiVdXNE0IIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBDyk/LGG/8/uQ06T0gH1OYAAAAASUVORK5CYII=</Preview>
  <Form>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
8MPj/0bf/h8xEU3cNckAAA==</Form>
  <Code><![CDATA[
#-------------------------------------------------------
# NOTE: When new TabPage added place the validation code
# 		in the Test-WizardPage function.
#-------------------------------------------------------
function Test-WizardPage
{
<#
	Add TabPages and place the validation code in this function
#>
	[OutputType([boolean])]
	param([System.Windows.Forms.TabPage]$tabPage)
	
	if($tabPage -eq $tabpageStep1)
	{
		#TODO: Enter Validation Code here for Step 1
		if(-not $global:vcenterConnection.IsConnected)
		{
			return $false
		}
		else
		{
			return $true
		}
		
	}
	elseif ($tabPage -eq $tabpageStep2)
	{
		#TODO: Enter Validation Code here for Step 2
		if($global:vmbuilds -ne $null)
		{
			return $true
		}
		
		return $false
	}
	elseif ($tabPage -eq $tabpageStep3)
	{
		#TODO: Enter Validation Code here for Step 2
		if ($global:vmbuilds -ne $null)
		{
			return $true
		}
		
		return $false
	}
	elseif ($tabPage -eq $tabpageStep4)
	{
		$hostnameComplete = $true
		
		foreach ($node in $treeviewVMListStep4.Nodes)
		{
			if ($node.Text -notin $global:vmWorkgroupDomain.VMName)
			{
				$hostnameComplete = $false
			}
		}
		
		if ($hostnameComplete)
		{
			return $true
		}
		
		return $false
		
	}
	elseif ($tabPage -eq $tabpageStep5)
	{
		[System.Array]$timeZones = (Get-TimeZone -ListAvailable).DisplayName
		
		foreach ($timeZone in $timeZones)
		{
			$comboboxTimezone.Items.Add($timeZone)
		}
		
		if ($global:vmAdminPasswords)
		{
			return $false
		}
		
		return $true
	}
	elseif ($tabPage -eq $tabpageStep6)
	{
		$datetime = get-date -Format "MMddyyy_mmhhss"
		$string = ""
		if (Get-ChildItem -Path "$logDirectory\build_$datetime.html" -ErrorAction Ignore) { Remove-Item "$logDirectory\build_$datetime.html" -Force}		
		foreach ($vm in $global:vmBuilds)
		{
			#$string = "<b>This is my test page.</b>"
			$string = "
						<p>
							<font size=3><b>VMName: <font color=red>$($vm.VMName)</font></b></font><br>
							<font size=2>
							&nbsp;&nbsp;&nbsp;<b>VM Host:</b> $($vm."VM Host")<br>
							&nbsp;&nbsp;&nbsp;<b>Datacenter:</b> $($vm.Datacenter)<br>
							&nbsp;&nbsp;&nbsp;<b>Datastore:</b> $($vm.Datastore)<br>
							&nbsp;&nbsp;&nbsp;<b>CPU Count:</b> $($vm.NumCPU)<br>
							&nbsp;&nbsp;&nbsp;<b>Memory:</b> $($vm.Memory)<br>
							&nbsp;&nbsp;&nbsp;<b>Template:</b> $($vm.Template)<br>
							&nbsp;&nbsp;&nbsp;<b>Location:</b> $($vm.Location)<br>
					"
			
			$domain = $global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }
			
			$string = $string + "&nbsp;&nbsp;&nbsp;<b>Hostname:</b> $($domain.Hostname)<br>"
			$string = $string + "&nbsp;&nbsp;&nbsp;<b>Domain/Workgroup:</b> $($domain.DomainName)<br>"
			
			$roles = $global:vmRoles | ?{ $_.VMName -eq $vm.VMName }
			
			if ($roles -ne '')
			{
				$string = $string + "&nbsp;&nbsp;&nbsp;<b>Roles:</b><br>"
				
				foreach ($role in $roles.Roles)
				{
					$string = $string + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$role<br>"
				}
			}
			
			$vmKeyTemp = $global:vmOSKeys | ?{ $_.VMName -eq $vm.VMName }
			
			$tzArray = Import-Csv "$ScriptDirectory\reference\timezones.csv"
			
			$tz = ($tzArray | ?{ $_.TimeZoneCode -eq $global:vmTimeZones}).Description
			
			$string = $string + "&nbsp;&nbsp;&nbsp;<b>Time Zone:</b> $tz<br>"
			
			if ($vmKeyTemp.UseKMS -eq 'Yes')
			{
				$string = $string + "&nbsp;&nbsp;&nbsp;<b>License Type:</b> Using KMS<br>"
			}
			elseif ($vmKeyTemp.UseKMS -eq "No")
			{
				$string = $string + "
										&nbsp;&nbsp;&nbsp;<b>License Type:</b> Product Key<br>
										&nbsp;&nbsp;&nbsp;<b>License Key:</b> $($vmKeyTemp.ProductKey)<br>
									"
			}
			
			if ($vm."IP Type" -eq "Static")
			{
				$string = $string + "
										&nbsp;&nbsp;&nbsp;<b>IP Type:</b> $($vm."IP Type")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Network:</b> $($vm.Network)<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>IP Address:</b> $($vm."IP Address")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Subnet Mask:</b> $($vm."Subnet Mask")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Default Gateway:</b> $($vm."Default Gateway")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Primary DNS Server:</b> $($vm."Primary DNS Server")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Secondary DNS Server:</b> $($vm."Secondary DNS Server")<br>
										"
			}
			else
			{
				$string = $string + "&nbsp;&nbsp;&nbsp;<b>IP Type:</b> $($vm."IP Type")<br>"
				$string = $string + "&nbsp;&nbsp;&nbsp;<b>Network:</b> $($vm.Network)<br>"
			}
			
			$disks = $global:vmAdditionalDisks | ?{ $_.VMName -eq $vm.VMName }
			
			
			foreach ($disk in $disks)
			{
				$string = $string + "&nbsp;&nbsp;&nbsp;<b>Additional Disk:</b> $($disk.DriveLetter) - $($disk.DriveSize)GB <br>"				
			}
			
			foreach ($nic in ($global:vmAdditionalNICs | ?{ $_.VMName -eq $vmName }))
			{
				if ($nic."IP Type" -eq "Static")
				{
					$string = $string + "
										&nbsp;&nbsp;&nbsp;<b>Additional NIC:</b> $($nic."IP Type")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Network:</b> $($nic.VLAN)<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>IP Address:</b> $($nic."IP Address")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Subnet Mask:</b> $($nic."Subnet Mask")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Default Gateway:</b> $($nic."Default Gateway")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Primary DNS Server:</b> $($nic."Primary DNS Server")<br>
										"
				}
				else
				{
					$string = $string + "
										&nbsp;&nbsp;&nbsp;<b>Additional NIC:</b> $($nic."IP Type")<br>"					
				}
			}
			
			if ($global:vmLocalUsers -ne '')
			{
				$string = $string + "&nbsp;&nbsp;&nbsp;<b>Additional Users:</b><br>"
				
				foreach ($user in $global:vmLocalUsers)
				{
					$string = $string + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$($user.Username)<br>"
				}
			}
			
			$string = $string + "</font></p>"
			
			ConvertTo-Html -Body $string | Out-File "$logDirectory\build_$datetime.html" -Append
		}
			
		$webbrowserVMBuildSummary.Url = "$logDirectory\build_$datetime.html"
		
		return $true
	}
	#Add more pages here
	
	return $false
}



$buttonFinish_Click={
	#-------------------------------------------------------
	# TODO: Place finalization script here
	#-------------------------------------------------------
	
}

#region Events and Functions
$formVMAutomationTool_Load = {
	
	Update-NavButtons
	
	$Path = $env:TEMP
	
	if (Get-Item "$Path\VcenterHistory\vcenterhistory.log")
	{
		$autoCompleteArray = (Import-Csv "$Path\VcenterHistory\vcenterhistory.log").vcenter
		
		$vcenterTextbox.AutoCompleteCustomSource.AddRange($autoCompleteArray)
	}
	
}

function Update-NavButtons
{
	<# 
		.DESCRIPTION
		Validates the current tab and Updates the Next, Prev and Finish buttons.
	#>
	$enabled = Test-WizardPage $tabcontrolWizard.SelectedTab
	$buttonNext.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	$buttonBack.Enabled = $tabcontrolWizard.SelectedIndex -gt 0
	$buttonFinish.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)	
	#Uncomment to Hide Buttons
	#$buttonNext.Visible = ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	#$buttonFinish.Visible = ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)
}

$script:DeselectedIndex = -1
$tabcontrolWizard_Deselecting=[System.Windows.Forms.TabControlCancelEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
	# Store the previous tab index
	$script:DeselectedIndex = $_.TabPageIndex
}

$tabcontrolWizard_Selecting=[System.Windows.Forms.TabControlCancelEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
	# We only validate if we are moving to the Next TabPage. 
	# Users can move back without validating
	if($script:DeselectedIndex -ne -1 -and $script:DeselectedIndex -lt $_.TabPageIndex)
	{
		#Validate each page until we reach the one we want
		for($index = $script:DeselectedIndex; $index -lt $_.TabPageIndex; $index++)
		{
			$_.Cancel = -not (Test-WizardPage $tabcontrolWizard.TabPages[$index])
			
			if($_.Cancel) 
			{
				# Cancel and Return if validation failed.
				return;
			}
		}
	}
	
	Update-NavButtons
}

$buttonBack_Click={
	#Go to the previous tab page
	if($tabcontrolWizard.SelectedIndex -gt 0)
	{
		$tabcontrolWizard.SelectedIndex--
	}
}

$buttonNext_Click={	
	#Go to the next tab page
	if($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	{
		$tabcontrolWizard.SelectedIndex++
	}	
}

#endregion

#------------------------------------------------------
# NOTE: When a Control State changes you should call
# 		Update-NavButtons to trigger validation
#------------------------------------------------------

$radiobuttonOption_CheckedChanged={
	
	if($this.Checked)
	{
		Update-NavButtons
	}
}

$buttonEnterCredentials_Click={
	
	try
	{
		$pictureboxLoading.Visible = $true
		if ($global:vcenterConnection.IsConnected)
		{
			Disconnect-VIServer -Server * -Force -Confirm:$false
			$labelVCenterServerNotConn.Text = "vCenter Server: Not Connected"
			$labelUsernameNotConnected.Text = "Username: Not Connected"
			$labelConnectionStatusNotC.Text = "Connection Status: Not Connected"
		}
		$global:vcCredential = $null
		$global:vcenterConnection = $null
		$global:vcCredential = Get-Credential -ErrorAction Stop
		$global:vcenterConnection = Connect-VIServer -Server $vcenterTextbox.Text -Credential $global:vcCredential -ErrorAction Stop
		$buttonEnterCredentials.Enabled = $false
		$pictureboxLoading.Visible = $false
	}
	catch
	{
		"Unable to connect."
	}
	
	If ($global:vcenterConnection.IsConnected)
	{
		$labelVCenterServerNotConn.Text = "vCenter Server: $($vcenterTextbox.Text)"
		$labelUsernameNotConnected.Text = "Username: $($global:vcenterConnection.User)"
		$labelConnectionStatusNotC.Text = "Connection Status: Connected"
		$labelOKStep1.Visible = $true
		
		$Path = $env:TEMP
		
		if (-not (Get-Item "$Path\VcenterHistory" -ErrorAction SilentlyContinue))
		{
			New-Item -Name VcenterHistory -Path $Path -ItemType Directory
		}
		
		if (Get-Item "$Path\VcenterHistory\vcenterhistory.log" -ErrorAction SilentlyContinue)
		{
			$vcHistoryArray = Import-Csv "$Path\VcenterHistory\vcenterhistory.log"
			
			$vcHistoryArray = $vcHistoryArray | ?{ $_.vcenter -ne "$($vcenterTextbox.Text)" }
			
			$object = New-Object PSObject
			
			$object | Add-Member -MemberType NoteProperty -Name vcenter -Value $vcenterTextbox.Text
			
			$vcHistoryArray = [System.Array]$vcHistoryArray + $object
			
			$vcHistoryArray | Export-CSV "$Path\VcenterHistory\vcenterhistory.log" -NoTypeInformation
		}
		else
		{
			$vcHistoryArray = @()
			
			$object = New-Object PSObject
			
			$object | Add-Member -MemberType NoteProperty -Name vcenter -Value $vcenterTextbox.Text
			
			$vcHistoryArray = [System.Array]$vcHistoryArray + $object
			
			$vcHistoryArray | Export-CSV "$Path\VcenterHistory\vcenterhistory.log" -NoTypeInformation
		}
		
		Update-NavButtons
		
	}
	else
	{
		[System.Windows.Forms.MessageBox]::Show("Unable to connect to $($vcenterTextbox.Text). Please try logging on again.")
		$labelOKStep1.Visible = $false
		Update-NavButtons
	}
}

#region Control Helper Functions
function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]
		$DisplayMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}

function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}

function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	[ValidateNotNull()]
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterWMIProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)	
}

function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}


function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}


function Get-CheckedNode
{
<#
	.SYNOPSIS
		This function collects a list of checked nodes in a TreeView

	.DESCRIPTION
		This function collects a list of checked nodes in a TreeView

	.PARAMETER  $NodeCollection
		The collection of nodes to search

	.PARAMETER  $CheckedNodes
		The ArrayList that will contain the all the checked items
	
	.EXAMPLE
		$CheckedNodes = New-Object System.Collections.ArrayList
		Get-CheckedNode $treeview1.Nodes $CheckedNodes
		foreach($node in $CheckedNodes)
		{	
			Write-Host $node.Text
		}
#>
	param (
			[ValidateNotNull()]
			[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
			[ValidateNotNull()]
			[System.Collections.ArrayList]$CheckedNodes
	)
	
	foreach ($Node in $NodeCollection)
	{
		if ($Node.Checked)
		{
			[void]$CheckedNodes.Add($Node)
		}
		Get-CheckedNode $Node.Nodes $CheckedNodes
	}
}

#endregion


$vcenterTextbox_TextChanged={
	#TODO: Place custom script here
	if ($vcenterTextbox.Text -ne "")
	{
		$buttonEnterCredentials.Enabled = $true
	}
	else
	{
		$buttonEnterCredentials.Enabled = $false
	}
}

$buttonAddVirtualMachine_Click={
	#TODO: Place custom script here
	if ((Show-AddVMForm_psf) -eq 'OK')
	{
	}
}


$buttonOpenRolesSelection_Click={
	
	$global:vmSelectedStep4 | Out-File "$logDirectory\vmselectedstep4.log" -Append
	
	if ((Show-WindowsRoles_psf -VMName $global:vmSelectedStep4) -eq 'OK')
	{
		#$selectedRoles = $global:vmRoles | ?{ $_.VMName -eq $vm.VMName } | Select -ExpandProperty Roles		
	}
	
}

$buttonBuildAndConfigureVMs_Click={
	
	#$progressbarVMBuild.Visible = $true
	$buttonBuildAndConfigureVMs.Enabled = $false
	
	try
	{
		#$progressbarVMBuild.Maximum = ($global:vmBuilds).Count
		#$progressbarVMBuild.Value = 0
		#$progressbarVMBuild.Step = 1
		
		foreach ($vm in $global:vmbuilds)
		{
			while (@(Get-Job | ?{ $_.State -eq "Running" }).Count -ge 5)
			{
				# We're going to iterate through the running jobs and kill any that have been running for X minutes.
				# This block is ignored if there are less than 5 total builds. We'll handle that part later.
				
				foreach ($job in (Get-Job))
				{
					$runTime = ((Get-Date) - $job.PSBeginTime).Minutes
					if ($runtime -gt 30)
					{
						try
						{
							Stop-Job $job.Name -Confirm:$false
						}
						catch
						{
							"Unable to stop job."
						}
					}
				}
				
				Write-Host "Waiting for open thread...($NumJobs Maximum)"
				Start-Sleep -Seconds 3
			}
			
			# Let's combine all the OS specific data we gathered for the VM into one variable.
			$osConfigObject = New-Object PSObject
			
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "VMName" -Value $vm.VMName
			
			# Add the data for the domain/workgroup
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "Hostname" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).Hostname
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "DomainName" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).DomainName
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "DomainUser" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).DomainUser
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "DomainPassword" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).DomainPassword
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "IsWorkgroup" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).IsWorkgroup
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "LocalAdminPassword" -Value $global:vmAdminPasswords
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "Roles" -Value ($global:vmRoles | ?{ $_.VMName -eq $vm.VMName }).Roles
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "Features" -Value ($global:vmFeatures | ?{ $_.VMName -eq $vm.VMName }).Features
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "AdminPassword" -Value ($global:vmAdminPasswords | ?{ $_.VMName -eq $vm.VMName }).Password
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "LocalUsers" -Value $global:vmLocalUsers
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "Disks" -Value ($global:vmAdditionalDisks | ?{ $_.VMName -eq $vm.VMName })
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "NICs" -Value ($global:vmAdditionalNICs | ?{ $_.VMName -eq $vm.VMName })
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "OSKeys" -Value ($global:vmOSKeys | ?{ $_.VMName -eq $vm.VMName })
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "TimeZone" -Value $global:vmTimeZones
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "PostInstallScripts" -Value $global:postInstallScripts
			
			if ($global:vmAdminAccount -ne "")
			{
				$osConfigObject | Add-Member -MemberType NoteProperty -Name "AdminAccount" -Value $global:vmAdminAccount
			}
			else
			{
				$osConfigObject | Add-Member -MemberType NoteProperty -Name "AdminAccount" -Value ""
			}
			
			$global:vmFullOSConfig = [System.Array]$global:vmFullOSConfig + $osConfigObject
			
			$osConfigObject | Out-File "$logDirectory\osobject.log" -Append
			
			# Define and start the build job for the VM.
			
			Start-Job -Name $vm.VMName -ArgumentList $vcenterTextbox.Text, $global:vcCredential, $vm, $ScriptDirectory, $osConfigObject, $logDirectory -ScriptBlock {
				. "$($args[3])\Functions\Get-FolderbyPath.ps1"
				
				Import-Module VMware.PowerCLI
				
				Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -ParticipateInCeip $false -DisplayDeprecationWarnings $false -Confirm:$false -WebOperationTimeoutSeconds 3600 -ErrorAction Stop
				
				$connection = Connect-VIServer -Server $args[0] -Credential $args[1] -ErrorAction Stop
				
				if ($args[4].IsWorkgroup -eq 'No')
				{
					
					$password = ConvertTo-SecureString "$($args[4].DomainPassword)" -AsPlainText -Force
					$domainCredential = New-Object System.Management.Automation.PSCredential ("$($args[4].DomainUser)", $password)
					
					$osSpec = New-OSCustomizationSpec -OSType "Windows" -Name $args[2].VMName -Type NonPersistent `
													  -FullName "Administrator" `
													  -AdminPassword "$($args[4].LocalAdminPassword)" `
													  -AutoLogonCount 1 `
													  -OrgName "Org1" `
													  -Description "Temporary Spec for $($args[2].VMName)" `
													  -ChangeSid `
													  -Domain "$($args[4].DomainName)" `
													  -DomainCredentials $domainCredential `
													  -NamingScheme fixed `
													  -NamingPrefix $args[4].Hostname `
													  -ErrorAction Stop
					
				}
				else
				{
					
					$osSpec = New-OSCustomizationSpec -OSType "Windows" -Name $args[2].VMName -Type NonPersistent `
													  -FullName "Administrator" `
													  -AdminPassword "$($args[4].LocalAdminPassword)" `
													  -AutoLogonCount 1 `
													  -OrgName "Org1" `
													  -Description "Temporary Spec for $($args[2].VMName)" `
													  -ChangeSid `
													  -Workgroup "$($args[4].DomainName)" `
													  -NamingScheme fixed `
													  -NamingPrefix $args[4].Hostname `
													  -ErrorAction Stop
					
				}
				
				
				if ($args[2].("IP Type") -eq "DHCP")
				{
					
					Get-OSCustomizationNicMapping -OSCustomizationSpec $osSpec | Set-OSCustomizationNicMapping -IpMode UseDHCP -ErrorAction Stop					
				}
				else
				{
					Get-OSCustomizationNicMapping -OSCustomizationSpec $osSpec | Set-OSCustomizationNicMapping -IpMode UseStaticIP `
																											   -IpAddress $args[2].("IP Address") `
																											   -SubnetMask $args[2].("Subnet Mask") `
																											   -DefaultGateway $args[2].("Default Gateway") `
																											   -Dns $args[2].("Primary DNS Server"), $args[2].("Secondary DNS Server") `
																											   -ErrorAction Stop				
				}
				
				# Here, we pull in the template depending on if it's in vCenter or in a Content Library.
				
				#if ($args[2].TemplateLocation -eq "vCenter")
				#{
					$vmTemplate = Get-Template -Name $args[2].Template
					
					$destFolder = Get-FolderbyPath -Path "$($args[2].Location)" -Separator "\"
					
					# Now, let's actually build the VM with the configuration spec we defined above.
					$invoke = New-VM -VMHost $args[2].("VM Host") -Name $args[2].VMName -Datastore $args[2].Datastore -Template $vmTemplate -Location $destFolder -OSCustomizationSpec $osSpec -ErrorAction Stop
					
				#}
				<#
				elseif ($args[2].TemplateLocation -eq "Content Library")
				{					
					if ($connection.Version -ge 6.5)
					{
						$vmTemplate = Get-ContentLibraryItem -Name $args[2].Template
						
						$destFolder = Get-FolderbyPath -Path "$($args[2].Location)" -Separator "\"
						
						# Now, let's actually build the VM with the configuration spec we defined above.
						$invokeTask = New-VM -VMHost $args[2].("VM Host") -Name $args[2].VMName -Datastore $args[2].Datastore -Location $destFolder -ContentLibraryItem $vmTemplate -RunAsync -ErrorAction Stop
						
						do
						{
							Write-Host $invokeTask
							Start-Sleep -Seconds 5
						}
						while ($invokeTask.State -eq "Running")
						
						
						$applySpec = Get-VM -Name $args[2].VMName | Set-VM -OSCustomizationSpec $osSpec -Confirm:$false -ErrorAction Stop
					}
					else
					{
						$vmTemplate = Get-ContentLibraryItem -Name $args[2].Template
					}					
				} /#>
				
				# Now that the VM is built, we need to modify the network adapter and assign it to the specified vSwitch before powering it on.
				Get-VM -Name $args[2].VMName | Set-VM -MemoryGB $args[2].Memory -NumCpu $args[2].NumCPU -Confirm:$false -ErrorAction Stop
				
				Get-NetworkAdapter -VM $args[2].VMName | Set-NetworkAdapter -NetworkName $args[2].Network -StartConnected $true -Confirm:$false -ErrorAction Stop
				
				Start-VM -VM $args[2].VMName -RunAsync
				
				# Now we wait for the VM to power up and auto log in before continuing.
				$vmstatus = (Get-VM -Name "$($args[2].VMName)").extensionData.Guest.interactiveGuestOperationsReady
				
				do
				{
					Start-Sleep -Seconds 1
					$vmstatus = (Get-VM -Name "$($args[2].VMName)").extensionData.Guest.interactiveGuestOperationsReady
					Write-Host $vmStatus -ForegroundColor Red
				}
				while ($vmStatus -ne $True)
				
				Write-Host $vmStatus -ForegroundColor Green
				
				#Get-VM $args[2].VMName -ErrorAction Stop | Restart-VMGuest -Confirm:$false -ErrorAction Stop
				
				# Now that our VM is built, let's finish customizing it. We'll start by creating the credential object to run Invoke-VMScript.
				
				$vmAdminPass = $args[4].LocalAdminPassword
				
				$localAdmin = "Administrator"
				$password = ConvertTo-SecureString $args[4].LocalAdminPassword -AsPlainText -Force
				$localAdminCred = New-Object System.Management.Automation.PSCredential ($localAdmin, $password)
				
				# Declare the array that will house each command to run.
				
				$customizeOSScripts = [System.Collections.ArrayList]@()
				
				# Now, build the commands to add the additional user accounts to the new VMs. Add the commands to the command array.
				
				foreach ($user in $args[4].LocalUsers)
				{
					if ($user.Administrator -eq "Yes")
					{
						$userCreate = New-Object PSObject
						$userCreate | Add-Member -MemberType NoteProperty -Name "Command" -Value "NET USER $($user.Username) $($user.Password) /add"
						
						$userAdmin = New-Object PSObject
						$userAdmin | Add-Member -MemberType NoteProperty -Name "Command" -Value "NET LOCALGROUP Administrators $($user.Username) /add"
						
						$date = Get-Date -Format "M-d-yyyy"
						$desc = "Admin user created on $date."
						$userTmp = $user.Username
						$userDescription = New-Object PSObject
						$userDescription | Add-Member -MemberType NoteProperty -Name "Command" -Value "Set-LocalUser -Name $userTmp -Description ""$desc"""
						
						$customizeOSScripts = [System.Array]$customizeOSScripts + $userCreate
						$customizeOSScripts = [System.Array]$customizeOSScripts + $userAdmin
						$customizeOSScripts = [System.Array]$customizeOSScripts + $userDescription
					}
					else
					{
						$userCreate = New-Object PSObject
						$userCreate | Add-Member -MemberType NoteProperty -Name "Command" -Value "NET USER $($user.Username) $($user.Password) /add"
						
						$date = Get-Date -Format "M-d-yyyy"
						$desc = "Standard user created on $date."
						$userTmp = $user.Username
						$userDescription = New-Object PSObject
						$userDescription | Add-Member -MemberType NoteProperty -Name "Command" -Value "Set-LocalUser -Name $userTmp -Description ""$desc"""
						
						$customizeOSScripts = [System.Array]$customizeOSScripts + $userCreate
						$customizeOSScripts = [System.Array]$customizeOSScripts + $userDescription
					}
				}
				
				# Build the command to install the selected Roles.
				
				foreach ($role in $args[4].Roles)
				{
					$object = New-Object PSObject
					$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Install-WindowsFeature -Name $role -IncludeManagementTools"
					$customizeOSScripts = [System.Array]$customizeOSScripts + $object
				}
				
				# Now, we add, format and partition additional specified disks.
				
				foreach ($disk in $args[4].Disks)
				{
					$driveLetter = $disk.DriveLetter
					$driveLabel = "Drive-$($disk.DriveLetter)"
					$driveSize = [int]($disk.DriveSize)
					$confirm = '$false'
					New-HardDisk -VM $args[2].VMName -CapacityGB $driveSize -Persistence persistent -Confirm:$false -ErrorAction Stop
					$object = New-Object PSObject
					$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-Disk | Where-Object PartitionStyle -eq ""RAW"" | Initialize-Disk -PartitionStyle GPT -PassThru | New-Partition -DriveLetter $driveLetter -UseMaximumSize | Format-Volume -FileSystem NTFS -NewFileSystemLabel $driveLabel -AllocationUnitSize 65536 -Confirm:$confirm"
					#$customizeOSScripts = [System.Array]$customizeOSScripts + $object
					Invoke-VMScript -VM $args[2].VMName -GuestCredential $localAdminCred -ScriptText "$($object.Command)" -ErrorAction Stop
				}
				
				# Let's customize additional network adapters.
				
				foreach ($nic in $args[4].NICs)
				{
					$newNic = New-NetworkAdapter -VM $nic.VMName -NetworkName $nic.VLAN -StartConnected -Type Vmxnet3
					
					$macAddress = "$($newNic.MacAddress)" -replace ":", "-"
					
					if ($nic.("IP Type") -eq "Static")
					{
						$newIP = $nic.("IP Address")
						$newMask = $nic.("Subnet Mask")
						$newGateway = $nic.("Default Gateway")
						$newDNSServer = $nic.("Primary DNS Server")
						
						# Determine the CIDR notation for subnet mask. We'll need this later.'
						$subnetMasks = Import-Csv "$($args[3])\reference\cidrlist.csv"
						
						$cidrNotation = ($subnetMasks | ?{ $_.SubnetMask -eq $newMask }).CIDR
						
						if ($newGateway -ne '')
						{
							$object = New-Object PSObject
							
							if ($newDNSServer -ne '')
							{
								$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$macAddress"" | New-NetIPAddress -IPAddress $newIP -DefaultGateway $newGateway -PrefixLength $cidrNotation | Set-DNSClientServerAddress -ServerAddresses $newDNSServer"
							}
							else
							{
								$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$macAddress"" | New-NetIPAddress -IPAddress $newIP -DefaultGateway $newGateway -PrefixLength $cidrNotation"
							}
							
							$customizeOSScripts = [System.Array]$customizeOSScripts + $object
						}
						else
						{
							$object = New-Object PSObject
							
							if ($newDNSServer -ne '')
							{
								$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$macAddress"" | New-NetIPAddress -IPAddress $newIP -PrefixLength $cidrNotation | Set-DNSClientServerAddress -ServerAddresses $newDNSServer"
							}
							else
							{
								$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$macAddress"" | New-NetIPAddress -IPAddress $newIP -PrefixLength $cidrNotation"
							}
							
							$customizeOSScripts = [System.Array]$customizeOSScripts + $object
						}
						
					}
				}
				
				# Let's set the product key and activate Windows.
				
				foreach ($key in $args[4].OSKeys)
				{
					if ($key.UseKMS -eq "Yes")
					{
						[string]$kmsServerCmd = "cscript C:\Windows\System32\slmgr.vbs /skms $($key.KMSServer):$($key.KMSServerPort)"
						
						$object = New-Object PSObject
						$object | Add-Member -MemberType NoteProperty -Name "Command" -Value $kmsServerCmd
						
						$customizeOSScripts = [System.Array]$customizeOSScripts + $object
					}
					elseif ($key.UseKMS -eq "No")
					{
						[string]$productKeyCmd = "cscript C:\Windows\System32\slmgr.vbs /ipk $($key.ProductKey)"
						[string]$activationCmd = "cscript C:\Windows\System32\slmgr.vbs /ato"
						
						$object = New-Object PSObject
						$object | Add-Member -MemberType NoteProperty -Name "Command" -Value $productKeyCmd
						
						$customizeOSScripts = [System.Array]$customizeOSScripts + $object
						
						Clear-Variable object
						
						$object = New-Object PSObject
						$object | Add-Member -MemberType NoteProperty -Name "Command" -Value $activationCmd
						
						$customizeOSScripts = [System.Array]$customizeOSScripts + $object
					}
				}
				
				# Now we'll set the time zone
				
				foreach ($tz in $args[4].TimeZone)
				{
					$setTZID = (Get-TimeZone -ListAvailable | Where-Object DisplayName -eq $tz).Id
					
					$newTZCommand = "Set-TimeZone -Id '$setTZID'"
					
					$object = New-Object PSObject
					$object | Add-Member -MemberType NoteProperty -Name "Command" -Value $newTZCommand
					
					$customizeOSScripts = [System.Array]$customizeOSScripts + $object
				}
				
				if ($args[4].AdminAccount -ne "")
				{
					$newAdminCommand = "Get-LocalUser Administrator | Rename-LocalUser -NewName $($args[4].AdminAccount)"
					
					$object = New-Object PSObject
					$object | Add-Member -MemberType NoteProperty -Name "Command" -Value $newAdminCommand
					
					$customizeOSScripts = [System.Array]$customizeOSScripts + $object
				}
				
				# Let's output the commands to verify.
				$customizeOSScripts | Out-File "$($args[5])\scriptsarray_$($args[2].VMName).log"
				
				# Now, we run all the customization commands.
				
				foreach ($script in $customizeOSScripts)
				{
					$script.Command | Out-File "$($args[5])\$($args[2].VMName)_scriptcommand.log" -Append
					Invoke-VMScript -VM $args[2].VMName -GuestCredential $localAdminCred -ScriptText "$($script.Command)" -ErrorAction Ignore | Out-File "$($args[5])\$($args[2].VMName)_scriptcommand.log" -Append
					
				}
				
				$newLocalAdmin = $($args[4].AdminAccount)
				$password = ConvertTo-SecureString $args[4].LocalAdminPassword -AsPlainText -Force
				$newLocalAdminCred = New-Object System.Management.Automation.PSCredential ($newLocalAdmin, $password)
				
				foreach ($postInstallScript in $args[4].PostInstallScripts)
				{
					$postInstallScript.Script | Out-File "$($args[5])\$($args[2].VMName)_scriptcommand.log" -Append
					Invoke-VMScript -VM $args[2].VMName -GuestCredential $newLocalAdminCred -ScriptText "$($postInstallScript.Script)" -ErrorAction Ignore | Out-File "$($args[5])\$($args[2].VMName)_scriptcommand.log" -Append
				}
				
				Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -ParticipateInCeip $false -DisplayDeprecationWarnings $false -Confirm:$false -WebOperationTimeoutSeconds 300 -ErrorAction Stop
				
				Disconnect-VIServer -Server $args[0] -Force -Confirm:$false -ErrorAction Stop
			
				
			} # End job block
			
		} # End foreach statement
		
		# Let's wait for all the build jobs to finish. We'll also kill any jobs that have been running for longer than X minutes.
		# For each job returned that has not completed, we'll check to see if it has been running longer than X minutes. If it has, kill the job.
		
		do
		{
			Start-Sleep -Milliseconds 1000
			
			foreach ($job in (Get-Job))
			{
				$runTime = ((Get-Date) - $job.PSBeginTime).Minutes
				if ($runtime -gt 30)
				{
					try
					{
						Stop-Job $job.Name -Confirm:$false
					}
					catch
					{
						"Unable to stop job."
					}
				}
			}
			
		}
		while ((Get-Job -State Running).Count -gt 0)
		
		$datetime = Get-Date -Format "MMddyyyy_HHmmss"
		
		# Get the completed jobs.
		$jobs = Get-Job | ?{ $_.State -eq "Completed" }
		
		# Get the failed jobs.
		$failedJobs = Get-Job | ?{ $_.State -ne "Completed" }
		
		# Output the job results to a separate log file for each VM.		
		$data = @()
		
		foreach ($job in $jobs)
		{
			$data += Get-Job $job.Name | Receive-Job
			Remove-Job $job
			
			Get-VM $job.Name | Restart-VMGuest -Confirm:$false
		}
		
		$failedData = @()
		
		foreach ($failedJob in $failedJobs)
		{
			$failedData += Get-Job $failedJob.Name | Receive-Job
			Remove-Job $failedJob
			
			Get-VM $job.VMName | Stop-VM -RunAsync -Confirm:$false
			
			do { Start-Sleep -Milliseconds 500 }
			while ((Get-VM $job.Name).PowerState -eq "PoweredOff")
			
			Remove-VM $job.Name -RunAsync -DeletePermanently -Confirm:$false
		}
		
		$data | Out-File "$logDirectory\jobtext.log" -Append
		
		if (-not $failedData)
		{
			[System.Windows.Forms.MessageBox]::Show("All requested virtual machines are available.")
		}
		else
		{
			$failedData | Out-File "$logDirectory\failedjobtext.log" -Append
			[System.Windows.Forms.MessageBox]::Show("The following virtual machine builds failed: $failedData")
		}
		
		$datetime = Get-Date -Format "MMddyyyy_HH_mm_ss"
		$userName = $env:USERNAME
		[string]$archiveName = "vmbuild__$userName_$datetime.zip"
		Compress-Archive -Path $logDirectory -DestinationPath "$logParentDirectory\$archiveName" -Verbose
		Remove-Item -Path $logDirectory -Recurse -Confirm:$false
		
	} # End try statement
	catch
	{
		[System.Windows.Forms.MessageBox]::Show("Unable to build virtual machines.")
	}
}

$datagridviewVMQueue_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	$buttonDeleteVMFromQueue.Enabled = $true	
	
}

$buttonDeleteVMFromQueue_Click={
	
	$global:vmBuilds = $global:vmBuilds | ?{ $_.VMName -ne $listviewVMsStep2.SelectedItems.Text }
	
	$listviewVMsStep2.Clear()
	$buttonDuplicateVMBuild.Enabled = $false
	
	$labelStep2CPU.Text = "CPU:"
	$labelStep2Memory.Text = "Memory:"
	$labelStep2Network.Text = "Network:"
	$labelStep2VMName.Text = "VM Name:"
	
	foreach ($item in $global:vmBuilds)
	{
		$listviewVMsStep2.Items.Add($item.VMName)
	}
	
	# Update the treeview control for Step 3
	
	$treeviewVMListStep3.BeginUpdate()
	$treeviewVMListStep3.Nodes.Clear()
	
	foreach ($vm in $global:vmbuilds)
	{
		$newNode = $treeviewVMListStep3.Nodes.Add($vm.VMName)
	}
	
	$treeviewVMListStep3.EndUpdate()
	
	# Update the treeview control for step 4.
	
	$treeviewVMListStep4.BeginUpdate()
	$treeviewVMListStep4.Nodes.Clear()
	
	foreach ($vm in $global:vmbuilds)
	{
		$newNode = $treeviewVMListStep4.Nodes.Add($vm.VMName)
	}
	
	# Determine if we should be resetting all the variables.
	if ($global:vmBuilds -eq $null)
	{
		$vmFeatures = [System.Collections.ArrayList]@()
		$vmRoles = [System.Collections.ArrayList]@()
		$vmDomainInfo = [System.Collections.ArrayList]@()
		$vmOS = [System.Collections.ArrayList]@()
		$vmAdminPasswords = [System.Collections.ArrayList]@()
		$vmLocalUsers = [System.Collections.ArrayList]@()
		$vmWorkgroupDomain = [System.Collections.ArrayList]@()
		$vmFullOSConfig = [System.Collections.ArrayList]@()
		$vmTimeZones = [System.Collections.ArrayList]@()
		$vmAdditionalDisks = [System.Collections.ArrayList]@()
		$vmAdditionalNICs = [System.Collections.ArrayList]@()
		$vmOSKeys = [System.Collections.ArrayList]@()
		$vmAdminAccount = $null
		
		$buttonDeleteVMFromQueue.Enabled = $false
		$buttonDuplicateVMBuild.Enabled = $false
		
		foreach ($item in (Get-ChildItem -Path "$logDirectory"))
		{
			$item | Remove-Item -Force -Recurse
		}
	}
	
	$treeviewVMListStep4.EndUpdate()
	
	Update-NavButtons
	
	
}

$treeviewVMListStep4_AfterSelect=[System.Windows.Forms.TreeViewEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.TreeViewEventArgs]
	
	$global:vmSelectedStep4 = $treeviewVMListStep4.SelectedNode.Text
	
	$labelVMNameStep4.Text = "VM: $($global:vmSelectedStep4)"
	
	if ($treeviewVMListStep4.SelectedNode.Text -in $global:vmWorkgroupDomain.VMName)
	{
		$labelOK1.Visible = $true		
	}
	else
	{
		$labelOK1.Visible = $false
	}
	
	if ($treeviewVMListStep4.SelectedNode.Text -in $global:vmOSKeys.VMName)
	{
		$vmTemp = $global:vmOSKeys | ?{ $_.VMName -eq $treeviewVMListStep4.SelectedNode.Text }
		
		if ($vmTemp.UseKMS -eq "Yes")
		{
			$radiobuttonKMSKey.Checked = $true
			$buttonProductKey.Text = "KMS Key"
		}
		elseif ($vmTemp.UseKMS -eq "No")
		{
			$radiobuttonRetailKey.Checked = $true
			$buttonProductKey.Text = "Retail Key"
		}
	}
	else
	{
		$radiobuttonKMSKey.Checked = $false
		$radiobuttonRetailKey.Checked = $false
		$buttonProductKey.Text = "Product Key"
		$buttonProductKey.Enabled = $false
	}
	
}

$radiobuttonDomain_CheckedChanged={
	
	if ($radiobuttonDomain.Checked) { $buttonDomainWorkgroup.Enabled = $true; $buttonSetWorkgroup.Enabled = $false }
	elseif ($radiobuttonWorkgroup.Checked) { $buttonDomainWorkgroup.Enabled = $false; $buttonSetWorkgroup.Enabled = $true }
	
}

$buttonOpenFeatureSelection_Click={
	
	if ((Show-WindowsFeatures_psf -VMName $global:vmSelectedStep4) -eq 'OK')
	{
	}
}

$buttonAddLocalUsers_Click={
	
	if ((Show-AddLocalUsers_psf -VMName $global:vmSelectedStep4) -eq 'OK'){}
	
}

$comboboxTimezone_SelectedIndexChanged={
	
	$global:vmTimeZones = $comboboxTimezone.Text
	
	$global:vmTimeZones | Out-File "$logDirectory\tz.log"
		
}

$treeviewVMListStep3_AfterSelect=[System.Windows.Forms.TreeViewEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TreeViewEventArgs]
				
	$global:vmSelectedStep3 = $treeviewVMListStep3.SelectedNode.Text
	
	$labelVMStep3.Text = "VM: $($global:vmSelectedStep3)"
	
}

$listviewVMsStep2_SelectedIndexChanged={
				
	$rowTmp = $global:vmBuilds | ?{ $_.VMName -eq $listviewVMsStep2.SelectedItems.Text }
	
	$labelStep2CPU.Text = "CPU: $($rowTmp.NumCPU)"
	$labelStep2Memory.Text = "Memory: $($rowTmp.Memory)"
	$labelStep2Network.Text = "Network: $($rowTmp.Network)"
	$labelStep2VMName.Text = "VM Name: $($rowTmp.VMName)"
	
	$buttonDuplicateVMBuild.Enabled = $true
	
}
$buttonVDiskAdd_Click={
	
	if ((Show-AddVirtualDisk_psf -VMName $treeviewVMListStep3.SelectedNode.Text) -eq 'OK')
	{ }
	
}

$buttonVNICAdd_Click={
	
	if ((Show-AddNicCard_psf -VMName $treeviewVMListStep3.SelectedNode.Text) -eq 'OK')
	{ }
	
}



$maskedtextboxHostname_Enter={
	#TODO: Place custom script here
	$maskedtextboxHostname.Select(0,0)
}

$buttonSetHostname_Click={
	
	if ((Show-SetHostname_psf -VMName $treeviewVMListStep4.SelectedNode.Text) -eq 'OK')
	{ }
}

$buttonDomainWorkgroup_Click={
	
	if ((Show-WorkgroupDomainJoin_psf) -eq 'OK')
	{ }	
}

$buttonSet_Click={
	
	if ((Show-GetAdminPassword_psf) -eq 'OK')
	{ }
}

$buttonAdminRename_Click={
	#TODO: Place custom script here
	if ((Show-RenameAdminAccount_psf) -eq 'OK')
	{ }
}

$buttonProductKey_Click={
	
	if ($radiobuttonRetailKey.Checked)
	{
		if ((Show-EnterRetailKey_psf -VMName $treeviewVMListStep4.SelectedNode.Text) -eq 'OK')
		{ }
	}
	elseif ($radiobuttonKMSKey.Checked)
	{
		if ((Show-EnterKMSKey_psf -VMName $treeviewVMListStep4.SelectedNode.Text) -eq 'OK')
		{ }
	}
	
}

$radiobuttonRetailKey_CheckedChanged={
	
	if ($radiobuttonRetailKey.Checked)
	{
		$buttonProductKey.Text = "Retail Key"
		$buttonProductKey.Enabled = $true
	}
	
}

$radiobuttonKMSKey_CheckedChanged={
	
	if ($radiobuttonKMSKey.Checked)
	{
		$buttonProductKey.Text = "KMS Key"
		$buttonProductKey.Enabled = $true
	}
}


$buttonSelectScripts_Click={
	
	if ((Show-AddPostInstallScripts_psf) -eq 'OK')
	{ }
}

$buttonDuplicateVMBuild_Click={
	
	$listviewVMsStep2.SelectedItems.Text | Out-File "$logDirectory\step2.txt"
	
	if ((Show-DuplicateVM_psf -VMName $listviewVMsStep2.SelectedItems.Text) -eq 'OK')
	{ }
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>