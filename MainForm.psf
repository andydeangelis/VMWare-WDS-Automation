<File version="3.1">
  <FileID>4dee3778-5d7e-48ff-b7fd-c671faf8b7f0</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAMrsSURBVHhe7J0FeBbH1sep221v773trbuXtrRI
vbi7u7tDcIKE4ASChOCWEHd3d3d3e+PuRvL/zuz7BkIIFFroRy/n9zznSbK7ozsz5z+zs5suDMMw
DMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMw
DMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMw
DMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMw
DMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMw
DMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMw
DMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMw
DMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMw
DMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMw
DMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMw
DMMwDMMwDMMwDMMwDMMwDMMwDPM/SwxZwVNPPVXw6quvFkyZMqVg5syZBbNmzSabxcbGxsbGxvbQ
mtxXzyZ7++23Cp588skC4dPJ0oSDvyOPPfZY+b///W8MGTwYy5avgL6xBaLiM5GcUYik9Hw2NjY2
Nja2h9YKkJSWCx//IGxRVsbQoUNBk3k8/vjjTQo3f3tIABQMGTIEBw4eRmBUCrwi0uAdmQGfqAx4
s7GxsbGxsT201uarvSLTEZ2SC81TZzFixAg8+eST1Qo3f3vEsv/iJcsQRM7fOyoTniQAPMJT2djY
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
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERG9Vn7xi/8PRb7sUieu
nykAAAAASUVORK5CYII=</Preview>
  <Form>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
8MPj/0bf/h8xEU3cNckAAA==</Form>
  <Code><![CDATA[
#-------------------------------------------------------
# NOTE: When new TabPage added place the validation code
# 		in the Test-WizardPage function.
#-------------------------------------------------------
function Test-WizardPage
{
<#
	Add TabPages and place the validation code in this function
#>
	[OutputType([boolean])]
	param([System.Windows.Forms.TabPage]$tabPage)
	
	if($tabPage -eq $tabpageStep1)
	{
		#TODO: Enter Validation Code here for Step 1
		if(-not $global:vcenterConnection.IsConnected)
		{
			return $false
		}
		else
		{
			return $true
		}
		
	}
	elseif ($tabPage -eq $tabpageStep2)
	{
		#TODO: Enter Validation Code here for Step 2
		if($global:vmbuilds -ne $null)
		{
			return $true
		}
		
		return $false
	}
	elseif ($tabPage -eq $tabpageStep3)
	{
		#TODO: Enter Validation Code here for Step 2
		if ($global:vmbuilds -ne $null)
		{
			return $true
		}
		
		return $false
	}
	elseif ($tabPage -eq $tabpageStep4)
	{
		$hostnameComplete = $true
		
		foreach ($node in $treeviewVMListStep4.Nodes)
		{
			if ($node.Text -notin $global:vmWorkgroupDomain.VMName)
			{
				$hostnameComplete = $false
			}
		}
		
		if ($hostnameComplete)
		{
			return $true
		}
		
		return $false
		
	}
	elseif ($tabPage -eq $tabpageStep5)
	{
		[System.Array]$timeZones = (Get-TimeZone -ListAvailable).DisplayName
		
		foreach ($timeZone in $timeZones)
		{
			$comboboxTimezone.Items.Add($timeZone)
		}
		
		if ($global:vmAdminPasswords)
		{
			return $false
		}
		
		return $true
	}
	elseif ($tabPage -eq $tabpageStep6)
	{
		$datetime = get-date -Format "MMddyyy_mmhhss"
		$string = ""
		if (Get-ChildItem -Path "$logDirectory\build_$datetime.html" -ErrorAction Ignore) { Remove-Item "$logDirectory\build_$datetime.html" -Force}		
		foreach ($vm in $global:vmBuilds)
		{
			#$string = "<b>This is my test page.</b>"
			$string = "
						<p>
							<font size=3><b>VMName: <font color=red>$($vm.VMName)</font></b></font><br>
							<font size=2>
							&nbsp;&nbsp;&nbsp;<b>VM Host:</b> $($vm."VM Host")<br>
							&nbsp;&nbsp;&nbsp;<b>Datacenter:</b> $($vm.Datacenter)<br>
							&nbsp;&nbsp;&nbsp;<b>Datastore:</b> $($vm.Datastore)<br>
							&nbsp;&nbsp;&nbsp;<b>CPU Count:</b> $($vm.NumCPU)<br>
							&nbsp;&nbsp;&nbsp;<b>Memory:</b> $($vm.Memory)<br>
							&nbsp;&nbsp;&nbsp;<b>Template:</b> $($vm.Template)<br>
							&nbsp;&nbsp;&nbsp;<b>Location:</b> $($vm.Location)<br>
					"
			
			$domain = $global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }
			
			$string = $string + "&nbsp;&nbsp;&nbsp;<b>Hostname:</b> $($domain.Hostname)<br>"
			$string = $string + "&nbsp;&nbsp;&nbsp;<b>Domain/Workgroup:</b> $($domain.DomainName)<br>"
			
			$roles = $global:vmRoles | ?{ $_.VMName -eq $vm.VMName }
			
			if ($roles -ne '')
			{
				$string = $string + "&nbsp;&nbsp;&nbsp;<b>Roles:</b><br>"
				
				foreach ($role in $roles.Roles)
				{
					$string = $string + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$role<br>"
				}
			}
			
			$vmKeyTemp = $global:vmOSKeys | ?{ $_.VMName -eq $vm.VMName }
			
			$tzArray = Import-Csv "$ScriptDirectory\reference\timezones.csv"
			
			$tz = ($tzArray | ?{ $_.TimeZoneCode -eq $global:vmTimeZones}).Description
			
			$string = $string + "&nbsp;&nbsp;&nbsp;<b>Time Zone:</b> $tz<br>"
			
			if ($vmKeyTemp.UseKMS -eq 'Yes')
			{
				$string = $string + "&nbsp;&nbsp;&nbsp;<b>License Type:</b> Using KMS<br>"
			}
			elseif ($vmKeyTemp.UseKMS -eq "No")
			{
				$string = $string + "
										&nbsp;&nbsp;&nbsp;<b>License Type:</b> Product Key<br>
										&nbsp;&nbsp;&nbsp;<b>License Key:</b> $($vmKeyTemp.ProductKey)<br>
									"
			}
			
			if ($vm."IP Type" -eq "Static")
			{
				$string = $string + "
										&nbsp;&nbsp;&nbsp;<b>IP Type:</b> $($vm."IP Type")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Network:</b> $($vm.Network)<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>IP Address:</b> $($vm."IP Address")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Subnet Mask:</b> $($vm."Subnet Mask")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Default Gateway:</b> $($vm."Default Gateway")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Primary DNS Server:</b> $($vm."Primary DNS Server")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Secondary DNS Server:</b> $($vm."Secondary DNS Server")<br>
										"
			}
			else
			{
				$string = $string + "&nbsp;&nbsp;&nbsp;<b>IP Type:</b> $($vm."IP Type")<br>"
				$string = $string + "&nbsp;&nbsp;&nbsp;<b>Network:</b> $($vm.Network)<br>"
			}
			
			$disks = $global:vmAdditionalDisks | ?{ $_.VMName -eq $vm.VMName }
			
			
			foreach ($disk in $disks)
			{
				$string = $string + "&nbsp;&nbsp;&nbsp;<b>Additional Disk:</b> $($disk.DriveLetter) - $($disk.DriveSize)GB <br>"				
			}
			
			foreach ($nic in ($global:vmAdditionalNICs | ?{ $_.VMName -eq $vmName }))
			{
				if ($nic."IP Type" -eq "Static")
				{
					$string = $string + "
										&nbsp;&nbsp;&nbsp;<b>Additional NIC:</b> $($nic."IP Type")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Network:</b> $($nic.VLAN)<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>IP Address:</b> $($nic."IP Address")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Subnet Mask:</b> $($nic."Subnet Mask")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Default Gateway:</b> $($nic."Default Gateway")<br>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Primary DNS Server:</b> $($nic."Primary DNS Server")<br>
										"
				}
				else
				{
					$string = $string + "
										&nbsp;&nbsp;&nbsp;<b>Additional NIC:</b> $($nic."IP Type")<br>"					
				}
			}
			
			if ($global:vmLocalUsers -ne '')
			{
				$string = $string + "&nbsp;&nbsp;&nbsp;<b>Additional Users:</b><br>"
				
				foreach ($user in $global:vmLocalUsers)
				{
					$string = $string + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$($user.Username)<br>"
				}
			}
			
			$string = $string + "</font></p>"
			
			ConvertTo-Html -Body $string | Out-File "$logDirectory\build_$datetime.html" -Append
		}
			
		$webbrowserVMBuildSummary.Url = "$logDirectory\build_$datetime.html"
		
		return $true
	}
	#Add more pages here
	
	return $false
}



$buttonFinish_Click={
	#-------------------------------------------------------
	# TODO: Place finalization script here
	#-------------------------------------------------------
	
}

#region Events and Functions
$formVMAutomationTool_Load = {
	
	Update-NavButtons
	
	<#
	$timeZones = Import-Csv "$ScriptDirectory\reference\timezones.csv"
	
	foreach ($timeZone in $timeZones)
	{
		$comboboxTimezone.Items.Add($timeZone.Description)
	}
	
	$index = 1
	
	$comboboxTimezone.SelectedIndex = $index
	/#>
	$Path = $env:TEMP
	
	if (Get-Item "$Path\VcenterHistory\vcenterhistory.log")
	{
		$autoCompleteArray = (Import-Csv "$Path\VcenterHistory\vcenterhistory.log").vcenter
		
		$vcenterTextbox.AutoCompleteCustomSource.AddRange($autoCompleteArray)
	}
	
}

function Update-NavButtons
{
	<# 
		.DESCRIPTION
		Validates the current tab and Updates the Next, Prev and Finish buttons.
	#>
	$enabled = Test-WizardPage $tabcontrolWizard.SelectedTab
	$buttonNext.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	$buttonBack.Enabled = $tabcontrolWizard.SelectedIndex -gt 0
	$buttonFinish.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)	
	#Uncomment to Hide Buttons
	#$buttonNext.Visible = ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	#$buttonFinish.Visible = ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)
}

$script:DeselectedIndex = -1
$tabcontrolWizard_Deselecting=[System.Windows.Forms.TabControlCancelEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
	# Store the previous tab index
	$script:DeselectedIndex = $_.TabPageIndex
}

$tabcontrolWizard_Selecting=[System.Windows.Forms.TabControlCancelEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
	# We only validate if we are moving to the Next TabPage. 
	# Users can move back without validating
	if($script:DeselectedIndex -ne -1 -and $script:DeselectedIndex -lt $_.TabPageIndex)
	{
		#Validate each page until we reach the one we want
		for($index = $script:DeselectedIndex; $index -lt $_.TabPageIndex; $index++)
		{
			$_.Cancel = -not (Test-WizardPage $tabcontrolWizard.TabPages[$index])
			
			if($_.Cancel) 
			{
				# Cancel and Return if validation failed.
				return;
			}
		}
	}
	
	Update-NavButtons
}

$buttonBack_Click={
	#Go to the previous tab page
	if($tabcontrolWizard.SelectedIndex -gt 0)
	{
		$tabcontrolWizard.SelectedIndex--
	}
}

$buttonNext_Click={	
	#Go to the next tab page
	if($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	{
		$tabcontrolWizard.SelectedIndex++
	}	
}

#endregion

#------------------------------------------------------
# NOTE: When a Control State changes you should call
# 		Update-NavButtons to trigger validation
#------------------------------------------------------

$radiobuttonOption_CheckedChanged={
	
	if($this.Checked)
	{
		Update-NavButtons
	}
}

$buttonEnterCredentials_Click={
	
	try
	{
		$pictureboxLoading.Visible = $true
		if ($global:vcenterConnection.IsConnected)
		{
			Disconnect-VIServer -Server * -Force -Confirm:$false
			$labelVCenterServerNotConn.Text = "vCenter Server: Not Connected"
			$labelUsernameNotConnected.Text = "Username: Not Connected"
			$labelConnectionStatusNotC.Text = "Connection Status: Not Connected"
		}
		$global:vcCredential = $null
		$global:vcenterConnection = $null
		$global:vcCredential = Get-Credential -ErrorAction Stop
		$global:vcenterConnection = Connect-VIServer -Server $vcenterTextbox.Text -Credential $global:vcCredential -ErrorAction Stop
		$buttonEnterCredentials.Enabled = $false
		$pictureboxLoading.Visible = $false
	}
	catch
	{
		"Unable to connect."
	}
	
	If ($global:vcenterConnection.IsConnected)
	{
		$labelVCenterServerNotConn.Text = "vCenter Server: $($vcenterTextbox.Text)"
		$labelUsernameNotConnected.Text = "Username: $($global:vcenterConnection.User)"
		$labelConnectionStatusNotC.Text = "Connection Status: Connected"
		$labelOKStep1.Visible = $true
		
		$global:existingVMList = (Get-VM).Name
		
		$Path = $env:TEMP
		
		if (-not (Get-Item "$Path\VcenterHistory" -ErrorAction SilentlyContinue))
		{
			New-Item -Name VcenterHistory -Path $Path -ItemType Directory
		}
		
		if (Get-Item "$Path\VcenterHistory\vcenterhistory.log" -ErrorAction SilentlyContinue)
		{
			$vcHistoryArray = Import-Csv "$Path\VcenterHistory\vcenterhistory.log"
			
			$vcHistoryArray = $vcHistoryArray | ?{ $_.vcenter -ne "$($vcenterTextbox.Text)" }
			
			$object = New-Object PSObject
			
			$object | Add-Member -MemberType NoteProperty -Name vcenter -Value $vcenterTextbox.Text
			
			$vcHistoryArray = [System.Array]$vcHistoryArray + $object
			
			$vcHistoryArray | Export-CSV "$Path\VcenterHistory\vcenterhistory.log" -NoTypeInformation
		}
		else
		{
			$vcHistoryArray = @()
			
			$object = New-Object PSObject
			
			$object | Add-Member -MemberType NoteProperty -Name vcenter -Value $vcenterTextbox.Text
			
			$vcHistoryArray = [System.Array]$vcHistoryArray + $object
			
			$vcHistoryArray | Export-CSV "$Path\VcenterHistory\vcenterhistory.log" -NoTypeInformation
		}
		
		Update-NavButtons
		
	}
	else
	{
		[System.Windows.Forms.MessageBox]::Show("Unable to connect to $($vcenterTextbox.Text). Please try logging on again.")
		$labelOKStep1.Visible = $false
		Update-NavButtons
	}
}

#region Control Helper Functions
function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]
		$DisplayMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}

function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}

function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	[ValidateNotNull()]
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterWMIProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)	
}

function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}


function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}


function Get-CheckedNode
{
<#
	.SYNOPSIS
		This function collects a list of checked nodes in a TreeView

	.DESCRIPTION
		This function collects a list of checked nodes in a TreeView

	.PARAMETER  $NodeCollection
		The collection of nodes to search

	.PARAMETER  $CheckedNodes
		The ArrayList that will contain the all the checked items
	
	.EXAMPLE
		$CheckedNodes = New-Object System.Collections.ArrayList
		Get-CheckedNode $treeview1.Nodes $CheckedNodes
		foreach($node in $CheckedNodes)
		{	
			Write-Host $node.Text
		}
#>
	param (
			[ValidateNotNull()]
			[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
			[ValidateNotNull()]
			[System.Collections.ArrayList]$CheckedNodes
	)
	
	foreach ($Node in $NodeCollection)
	{
		if ($Node.Checked)
		{
			[void]$CheckedNodes.Add($Node)
		}
		Get-CheckedNode $Node.Nodes $CheckedNodes
	}
}

#endregion


$vcenterTextbox_TextChanged={
	#TODO: Place custom script here
	if ($vcenterTextbox.Text -ne "")
	{
		$buttonEnterCredentials.Enabled = $true
	}
	else
	{
		$buttonEnterCredentials.Enabled = $false
	}
}

$buttonAddVirtualMachine_Click={
	#TODO: Place custom script here
	if ((Show-AddVMForm_psf) -eq 'OK')
	{
	}
}


$buttonOpenRolesSelection_Click={
	
	$global:vmSelectedStep4 | Out-File "$logDirectory\vmselectedstep4.log" -Append
	
	if ((Show-WindowsRoles_psf -VMName $global:vmSelectedStep4) -eq 'OK')
	{
		#$selectedRoles = $global:vmRoles | ?{ $_.VMName -eq $vm.VMName } | Select -ExpandProperty Roles		
	}
	
}

$buttonBuildAndConfigureVMs_Click={
	
	#$progressbarVMBuild.Visible = $true
	$buttonBuildAndConfigureVMs.Enabled = $false
	
	try
	{
		#$progressbarVMBuild.Maximum = ($global:vmBuilds).Count
		#$progressbarVMBuild.Value = 0
		#$progressbarVMBuild.Step = 1
		
		foreach ($vm in $global:vmbuilds)
		{
			while (@(Get-Job | ?{ $_.State -eq "Running" }).Count -ge 5)
			{
				# We're going to iterate through the running jobs and kill any that have been running for X minutes.
				# This block is ignored if there are less than 5 total builds. We'll handle that part later.
				
				foreach ($job in (Get-Job))
				{
					$runTime = ((Get-Date) - $job.PSBeginTime).Minutes
					if ($runtime -gt 30)
					{
						try
						{
							Stop-Job $job.Name -Confirm:$false
						}
						catch
						{
							"Unable to stop job."
						}
					}
				}
				
				Write-Host "Waiting for open thread...($NumJobs Maximum)"
				Start-Sleep -Seconds 3
			}
			
			# Let's combine all the OS specific data we gathered for the VM into one variable.
			$osConfigObject = New-Object PSObject
			
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "VMName" -Value $vm.VMName
			
			# Add the data for the domain/workgroup
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "Hostname" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).Hostname
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "DomainName" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).DomainName
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "DomainUser" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).DomainUser
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "DomainPassword" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).DomainPassword
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "IsWorkgroup" -Value ($global:vmWorkgroupDomain | ?{ $_.VMName -eq $vm.VMName }).IsWorkgroup
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "LocalAdminPassword" -Value $global:vmAdminPasswords
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "Roles" -Value ($global:vmRoles | ?{ $_.VMName -eq $vm.VMName }).Roles
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "Features" -Value ($global:vmFeatures | ?{ $_.VMName -eq $vm.VMName }).Features
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "AdminPassword" -Value ($global:vmAdminPasswords | ?{ $_.VMName -eq $vm.VMName }).Password
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "LocalUsers" -Value $global:vmLocalUsers
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "Disks" -Value ($global:vmAdditionalDisks | ?{ $_.VMName -eq $vm.VMName })
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "NICs" -Value ($global:vmAdditionalNICs | ?{ $_.VMName -eq $vm.VMName })
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "OSKeys" -Value ($global:vmOSKeys | ?{ $_.VMName -eq $vm.VMName })
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "TimeZone" -Value $global:vmTimeZones
			$osConfigObject | Add-Member -MemberType NoteProperty -Name "PostInstallScripts" -Value $global:postInstallScripts
			
			if ($global:vmAdminAccount -ne "")
			{
				$osConfigObject | Add-Member -MemberType NoteProperty -Name "AdminAccount" -Value $global:vmAdminAccount
			}
			else
			{
				$osConfigObject | Add-Member -MemberType NoteProperty -Name "AdminAccount" -Value ""
			}
			
			$global:vmFullOSConfig = [System.Array]$global:vmFullOSConfig + $osConfigObject
			
			$osConfigObject | Out-File "$logDirectory\osobject.log" -Append
			
			# Define and start the build job for the VM.
			
			Start-Job -Name $vm.VMName -ArgumentList $vcenterTextbox.Text, $global:vcCredential, $vm, $ScriptDirectory, $osConfigObject, $logDirectory -ScriptBlock {
				. "$($args[3])\Functions\Get-FolderbyPath.ps1"
				
				Import-Module VMware.PowerCLI
				
				Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -ParticipateInCeip $false -DisplayDeprecationWarnings $false -Confirm:$false -WebOperationTimeoutSeconds 3600 -ErrorAction Stop
				
				$connection = Connect-VIServer -Server $args[0] -Credential $args[1] -ErrorAction Stop
				
				if ($args[4].IsWorkgroup -eq 'No')
				{
					
					$password = ConvertTo-SecureString "$($args[4].DomainPassword)" -AsPlainText -Force
					$domainCredential = New-Object System.Management.Automation.PSCredential ("$($args[4].DomainUser)", $password)
					
					$osSpec = New-OSCustomizationSpec -OSType "Windows" -Name $args[2].VMName -Type NonPersistent `
													  -FullName "Administrator" `
													  -AdminPassword "$($args[4].LocalAdminPassword)" `
													  -AutoLogonCount 1 `
													  -OrgName "Org1" `
													  -Description "Temporary Spec for $($args[2].VMName)" `
													  -ChangeSid `
													  -Domain "$($args[4].DomainName)" `
													  -DomainCredentials $domainCredential `
													  -NamingScheme fixed `
													  -NamingPrefix $args[4].Hostname `
													  -ErrorAction Stop
					
				}
				else
				{
					
					$osSpec = New-OSCustomizationSpec -OSType "Windows" -Name $args[2].VMName -Type NonPersistent `
													  -FullName "Administrator" `
													  -AdminPassword "$($args[4].LocalAdminPassword)" `
													  -AutoLogonCount 1 `
													  -OrgName "Org1" `
													  -Description "Temporary Spec for $($args[2].VMName)" `
													  -ChangeSid `
													  -Workgroup "$($args[4].DomainName)" `
													  -NamingScheme fixed `
													  -NamingPrefix $args[4].Hostname `
													  -ErrorAction Stop
					
				}
				
				
				if ($args[2].("IP Type") -eq "DHCP")
				{
					
					Get-OSCustomizationNicMapping -OSCustomizationSpec $osSpec | Set-OSCustomizationNicMapping -IpMode UseDHCP -ErrorAction Stop					
				}
				else
				{
					Get-OSCustomizationNicMapping -OSCustomizationSpec $osSpec | Set-OSCustomizationNicMapping -IpMode UseStaticIP `
																											   -IpAddress $args[2].("IP Address") `
																											   -SubnetMask $args[2].("Subnet Mask") `
																											   -DefaultGateway $args[2].("Default Gateway") `
																											   -Dns $args[2].("Primary DNS Server"), $args[2].("Secondary DNS Server") `
																											   -ErrorAction Stop				
				}
				
				# Here, we pull in the template depending on if it's in vCenter or in a Content Library.
				
				#if ($args[2].TemplateLocation -eq "vCenter")
				#{
					$vmTemplate = Get-Template -Name $args[2].Template
					
					$destFolder = Get-FolderbyPath -Path "$($args[2].Location)" -Separator "\"
					
					# Now, let's actually build the VM with the configuration spec we defined above.
					$invoke = New-VM -VMHost $args[2].("VM Host") -Name $args[2].VMName -Datastore $args[2].Datastore -Template $vmTemplate -Location $destFolder -OSCustomizationSpec $osSpec -ErrorAction Stop
					
				#}
				<#
				elseif ($args[2].TemplateLocation -eq "Content Library")
				{					
					if ($connection.Version -ge 6.5)
					{
						$vmTemplate = Get-ContentLibraryItem -Name $args[2].Template
						
						$destFolder = Get-FolderbyPath -Path "$($args[2].Location)" -Separator "\"
						
						# Now, let's actually build the VM with the configuration spec we defined above.
						$invokeTask = New-VM -VMHost $args[2].("VM Host") -Name $args[2].VMName -Datastore $args[2].Datastore -Location $destFolder -ContentLibraryItem $vmTemplate -RunAsync -ErrorAction Stop
						
						do
						{
							Write-Host $invokeTask
							Start-Sleep -Seconds 5
						}
						while ($invokeTask.State -eq "Running")
						
						
						$applySpec = Get-VM -Name $args[2].VMName | Set-VM -OSCustomizationSpec $osSpec -Confirm:$false -ErrorAction Stop
					}
					else
					{
						$vmTemplate = Get-ContentLibraryItem -Name $args[2].Template
					}					
				} /#>
				
				# Now that the VM is built, we need to modify the network adapter and assign it to the specified vSwitch before powering it on.
				Get-VM -Name $args[2].VMName | Set-VM -MemoryGB $args[2].Memory -NumCpu $args[2].NumCPU -Confirm:$false -ErrorAction Stop
				
				Get-NetworkAdapter -VM $args[2].VMName | Set-NetworkAdapter -NetworkName $args[2].Network -StartConnected $true -Confirm:$false -ErrorAction Stop
				
				Start-VM -VM $args[2].VMName -RunAsync
				
				# Now we wait for the VM to power up and auto log in before continuing.
				$vmstatus = (Get-VM -Name "$($args[2].VMName)").extensionData.Guest.interactiveGuestOperationsReady
				
				do
				{
					Start-Sleep -Seconds 1
					$vmstatus = (Get-VM -Name "$($args[2].VMName)").extensionData.Guest.interactiveGuestOperationsReady
					Write-Host $vmStatus -ForegroundColor Red
				}
				while ($vmStatus -ne $True)
				
				Write-Host $vmStatus -ForegroundColor Green
				
				#Get-VM $args[2].VMName -ErrorAction Stop | Restart-VMGuest -Confirm:$false -ErrorAction Stop
				
				# Now that our VM is built, let's finish customizing it. We'll start by creating the credential object to run Invoke-VMScript.
				
				$vmAdminPass = $args[4].LocalAdminPassword
				
				$localAdmin = "Administrator"
				$password = ConvertTo-SecureString $args[4].LocalAdminPassword -AsPlainText -Force
				$localAdminCred = New-Object System.Management.Automation.PSCredential ($localAdmin, $password)
				
				# Declare the array that will house each command to run.
				
				$customizeOSScripts = [System.Collections.ArrayList]@()
				
				# Now, build the commands to add the additional user accounts to the new VMs. Add the commands to the command array.
				
				foreach ($user in $args[4].LocalUsers)
				{
					if ($user.Administrator -eq "Yes")
					{
						$userCreate = New-Object PSObject
						$userCreate | Add-Member -MemberType NoteProperty -Name "Command" -Value "NET USER $($user.Username) $($user.Password) /add"
						
						$userAdmin = New-Object PSObject
						$userAdmin | Add-Member -MemberType NoteProperty -Name "Command" -Value "NET LOCALGROUP Administrators $($user.Username) /add"
						
						$date = Get-Date -Format "M-d-yyyy"
						$desc = "Admin user created on $date."
						$userTmp = $user.Username
						$userDescription = New-Object PSObject
						$userDescription | Add-Member -MemberType NoteProperty -Name "Command" -Value "Set-LocalUser -Name $userTmp -Description ""$desc"""
						
						$customizeOSScripts = [System.Array]$customizeOSScripts + $userCreate
						$customizeOSScripts = [System.Array]$customizeOSScripts + $userAdmin
						$customizeOSScripts = [System.Array]$customizeOSScripts + $userDescription
					}
					else
					{
						$userCreate = New-Object PSObject
						$userCreate | Add-Member -MemberType NoteProperty -Name "Command" -Value "NET USER $($user.Username) $($user.Password) /add"
						
						$date = Get-Date -Format "M-d-yyyy"
						$desc = "Standard user created on $date."
						$userTmp = $user.Username
						$userDescription = New-Object PSObject
						$userDescription | Add-Member -MemberType NoteProperty -Name "Command" -Value "Set-LocalUser -Name $userTmp -Description ""$desc"""
						
						$customizeOSScripts = [System.Array]$customizeOSScripts + $userCreate
						$customizeOSScripts = [System.Array]$customizeOSScripts + $userDescription
					}
				}
				
				# Build the command to install the selected Roles.
				
				foreach ($role in $args[4].Roles)
				{
					$object = New-Object PSObject
					$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Install-WindowsFeature -Name $role -IncludeManagementTools"
					$customizeOSScripts = [System.Array]$customizeOSScripts + $object
				}
				
				# Now, we add, format and partition additional specified disks.
				
				foreach ($disk in $args[4].Disks)
				{
					$driveLetter = $disk.DriveLetter
					$driveLabel = "Drive-$($disk.DriveLetter)"
					$driveSize = [int]($disk.DriveSize)
					$confirm = '$false'
					New-HardDisk -VM $args[2].VMName -CapacityGB $driveSize -Persistence persistent -Confirm:$false -ErrorAction Stop
					$object = New-Object PSObject
					$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-Disk | Where-Object PartitionStyle -eq ""RAW"" | Initialize-Disk -PartitionStyle GPT -PassThru | New-Partition -DriveLetter $driveLetter -UseMaximumSize | Format-Volume -FileSystem NTFS -NewFileSystemLabel $driveLabel -AllocationUnitSize 65536 -Confirm:$confirm"
					#$customizeOSScripts = [System.Array]$customizeOSScripts + $object
					Invoke-VMScript -VM $args[2].VMName -GuestCredential $localAdminCred -ScriptText "$($object.Command)" -ErrorAction Stop
				}
				
				# Let's customize additional network adapters.
				
				foreach ($nic in $args[4].NICs)
				{
					$newNic = New-NetworkAdapter -VM $nic.VMName -NetworkName $nic.VLAN -StartConnected -Type Vmxnet3
					
					$macAddress = "$($newNic.MacAddress)" -replace ":", "-"
					
					if ($nic.("IP Type") -eq "Static")
					{
						$newIP = $nic.("IP Address")
						$newMask = $nic.("Subnet Mask")
						$newGateway = $nic.("Default Gateway")
						$newDNSServer = $nic.("Primary DNS Server")
						
						# Determine the CIDR notation for subnet mask. We'll need this later.'
						$subnetMasks = Import-Csv "$($args[3])\reference\cidrlist.csv"
						
						$cidrNotation = ($subnetMasks | ?{ $_.SubnetMask -eq $newMask }).CIDR
						
						if ($newGateway -ne '')
						{
							$object = New-Object PSObject
							
							if ($newDNSServer -ne '')
							{
								$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$macAddress"" | New-NetIPAddress -IPAddress $newIP -DefaultGateway $newGateway -PrefixLength $cidrNotation | Set-DNSClientServerAddress -ServerAddresses $newDNSServer"
							}
							else
							{
								$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$macAddress"" | New-NetIPAddress -IPAddress $newIP -DefaultGateway $newGateway -PrefixLength $cidrNotation"
							}
							
							$customizeOSScripts = [System.Array]$customizeOSScripts + $object
						}
						else
						{
							$object = New-Object PSObject
							
							if ($newDNSServer -ne '')
							{
								$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$macAddress"" | New-NetIPAddress -IPAddress $newIP -PrefixLength $cidrNotation | Set-DNSClientServerAddress -ServerAddresses $newDNSServer"
							}
							else
							{
								$object | Add-Member -MemberType NoteProperty -Name "Command" -Value "Get-NetAdapter |  Where-Object MacAddress -eq ""$macAddress"" | New-NetIPAddress -IPAddress $newIP -PrefixLength $cidrNotation"
							}
							
							$customizeOSScripts = [System.Array]$customizeOSScripts + $object
						}
						
					}
				}
				
				# Let's set the product key and activate Windows.
				
				foreach ($key in $args[4].OSKeys)
				{
					if ($key.UseKMS -eq "Yes")
					{
						[string]$kmsServerCmd = "cscript C:\Windows\System32\slmgr.vbs /skms $($key.KMSServer):$($key.KMSServerPort)"
						
						$object = New-Object PSObject
						$object | Add-Member -MemberType NoteProperty -Name "Command" -Value $kmsServerCmd
						
						$customizeOSScripts = [System.Array]$customizeOSScripts + $object
					}
					elseif ($key.UseKMS -eq "No")
					{
						[string]$productKeyCmd = "cscript C:\Windows\System32\slmgr.vbs /ipk $($key.ProductKey)"
						[string]$activationCmd = "cscript C:\Windows\System32\slmgr.vbs /ato"
						
						$object = New-Object PSObject
						$object | Add-Member -MemberType NoteProperty -Name "Command" -Value $productKeyCmd
						
						$customizeOSScripts = [System.Array]$customizeOSScripts + $object
						
						Clear-Variable object
						
						$object = New-Object PSObject
						$object | Add-Member -MemberType NoteProperty -Name "Command" -Value $activationCmd
						
						$customizeOSScripts = [System.Array]$customizeOSScripts + $object
					}
				}
				
				# Now we'll set the time zone
				
				foreach ($tz in $args[4].TimeZone)
				{
					$setTZID = (Get-TimeZone -ListAvailable | Where-Object DisplayName -eq $tz).Id
					
					$newTZCommand = "Set-TimeZone -Id '$setTZID'"
					
					$object = New-Object PSObject
					$object | Add-Member -MemberType NoteProperty -Name "Command" -Value $newTZCommand
					
					$customizeOSScripts = [System.Array]$customizeOSScripts + $object
				}
				
				if ($args[4].AdminAccount -ne "")
				{
					$newAdminCommand = "Get-LocalUser Administrator | Rename-LocalUser -NewName $($args[4].AdminAccount)"
					
					$object = New-Object PSObject
					$object | Add-Member -MemberType NoteProperty -Name "Command" -Value $newAdminCommand
					
					$customizeOSScripts = [System.Array]$customizeOSScripts + $object
				}
				
				# Let's output the commands to verify.
				$customizeOSScripts | Out-File "$($args[5])\scriptsarray_$($args[2].VMName).log"
				
				# Now, we run all the customization commands.
				
				foreach ($script in $customizeOSScripts)
				{
					$script.Command | Out-File "$($args[5])\$($args[2].VMName)_scriptcommand.log" -Append
					Invoke-VMScript -VM $args[2].VMName -GuestCredential $localAdminCred -ScriptText "$($script.Command)" -ErrorAction Ignore | Out-File "$($args[5])\$($args[2].VMName)_scriptcommand.log" -Append
					
				}
				
				$newLocalAdmin = $($args[4].AdminAccount)
				$password = ConvertTo-SecureString $args[4].LocalAdminPassword -AsPlainText -Force
				$newLocalAdminCred = New-Object System.Management.Automation.PSCredential ($newLocalAdmin, $password)
				
				foreach ($postInstallScript in $args[4].PostInstallScripts)
				{
					$postInstallScript.Script | Out-File "$($args[5])\$($args[2].VMName)_scriptcommand.log" -Append
					Invoke-VMScript -VM $args[2].VMName -GuestCredential $newLocalAdminCred -ScriptText "$($postInstallScript.Script)" -ErrorAction Ignore | Out-File "$($args[5])\$($args[2].VMName)_scriptcommand.log" -Append
				}
				
				Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -ParticipateInCeip $false -DisplayDeprecationWarnings $false -Confirm:$false -WebOperationTimeoutSeconds 300 -ErrorAction Stop
				
				Disconnect-VIServer -Server $args[0] -Force -Confirm:$false -ErrorAction Stop
			
				
			} # End job block
			
		} # End foreach statement
		
		# Let's wait for all the build jobs to finish. We'll also kill any jobs that have been running for longer than X minutes.
		# For each job returned that has not completed, we'll check to see if it has been running longer than X minutes. If it has, kill the job.
		
		do
		{
			Start-Sleep -Milliseconds 1000
			
			foreach ($job in (Get-Job))
			{
				$runTime = ((Get-Date) - $job.PSBeginTime).Minutes
				if ($runtime -gt 30)
				{
					try
					{
						Stop-Job $job.Name -Confirm:$false
					}
					catch
					{
						"Unable to stop job."
					}
				}
			}
			
		}
		while ((Get-Job -State Running).Count -gt 0)
		
		$datetime = Get-Date -Format "MMddyyyy_HHmmss"
		
		# Get the completed jobs.
		$jobs = Get-Job | ?{ $_.State -eq "Completed" }
		
		# Get the failed jobs.
		$failedJobs = Get-Job | ?{ $_.State -ne "Completed" }
		
		# Output the job results to a separate log file for each VM.		
		$data = @()
		
		foreach ($job in $jobs)
		{
			$data += Get-Job $job.Name | Receive-Job
			Remove-Job $job
			
			Get-VM $job.Name | Restart-VMGuest -Confirm:$false
		}
		
		$failedData = @()
		
		foreach ($failedJob in $failedJobs)
		{
			$failedData += Get-Job $failedJob.Name | Receive-Job
			Remove-Job $failedJob
			
			Get-VM $job.VMName | Stop-VM -RunAsync -Confirm:$false
			
			do { Start-Sleep -Milliseconds 500 }
			while ((Get-VM $job.Name).PowerState -eq "PoweredOff")
			
			Remove-VM $job.Name -RunAsync -DeletePermanently -Confirm:$false
		}
		
		$data | Out-File "$logDirectory\jobtext.log" -Append
		
		if (-not $failedData)
		{
			[System.Windows.Forms.MessageBox]::Show("All requested virtual machines are available.")
		}
		else
		{
			$failedData | Out-File "$logDirectory\failedjobtext.log" -Append
			[System.Windows.Forms.MessageBox]::Show("The following virtual machine builds failed: $failedData")
		}
		
		$datetime = Get-Date -Format "MMddyyyy_HH_mm_ss"
		$userName = $env:USERNAME
		[string]$archiveName = "vmbuild__$userName_$datetime.zip"
		Compress-Archive -Path $logDirectory -DestinationPath "$logParentDirectory\$archiveName" -Verbose
		Remove-Item -Path $logDirectory -Recurse -Confirm:$false
		
	} # End try statement
	catch
	{
		[System.Windows.Forms.MessageBox]::Show("Unable to build virtual machines.")
	}
}

$datagridviewVMQueue_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	$buttonDeleteVMFromQueue.Enabled = $true	
	
}

$buttonDeleteVMFromQueue_Click={
	
	$global:vmBuilds = $global:vmBuilds | ?{ $_.VMName -ne $listviewVMsStep2.SelectedItems.Text }
	
	$listviewVMsStep2.Clear()
	$buttonDuplicateVMBuild.Enabled = $false
	
	$labelStep2CPU.Text = "CPU:"
	$labelStep2Memory.Text = "Memory:"
	$labelStep2Network.Text = "Network:"
	$labelStep2VMName.Text = "VM Name:"
	
	foreach ($item in $global:vmBuilds)
	{
		$listviewVMsStep2.Items.Add($item.VMName)
	}
	
	# Update the treeview control for Step 3
	
	$treeviewVMListStep3.BeginUpdate()
	$treeviewVMListStep3.Nodes.Clear()
	
	foreach ($vm in $global:vmbuilds)
	{
		$newNode = $treeviewVMListStep3.Nodes.Add($vm.VMName)
	}
	
	$treeviewVMListStep3.EndUpdate()
	
	# Update the treeview control for step 4.
	
	$treeviewVMListStep4.BeginUpdate()
	$treeviewVMListStep4.Nodes.Clear()
	
	foreach ($vm in $global:vmbuilds)
	{
		$newNode = $treeviewVMListStep4.Nodes.Add($vm.VMName)
	}
	
	# Determine if we should be resetting all the variables.
	if ($global:vmBuilds -eq $null)
	{
		$vmFeatures = [System.Collections.ArrayList]@()
		$vmRoles = [System.Collections.ArrayList]@()
		$vmDomainInfo = [System.Collections.ArrayList]@()
		$vmOS = [System.Collections.ArrayList]@()
		$vmAdminPasswords = [System.Collections.ArrayList]@()
		$vmLocalUsers = [System.Collections.ArrayList]@()
		$vmWorkgroupDomain = [System.Collections.ArrayList]@()
		$vmFullOSConfig = [System.Collections.ArrayList]@()
		$vmTimeZones = [System.Collections.ArrayList]@()
		$vmAdditionalDisks = [System.Collections.ArrayList]@()
		$vmAdditionalNICs = [System.Collections.ArrayList]@()
		$vmOSKeys = [System.Collections.ArrayList]@()
		$vmAdminAccount = $null
		
		$buttonDeleteVMFromQueue.Enabled = $false
		$buttonDuplicateVMBuild.Enabled = $false
		
		foreach ($item in (Get-ChildItem -Path "$logDirectory"))
		{
			$item | Remove-Item -Force -Recurse
		}
	}
	
	$treeviewVMListStep4.EndUpdate()
	
	Update-NavButtons
	
	
}

$treeviewVMListStep4_AfterSelect=[System.Windows.Forms.TreeViewEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.TreeViewEventArgs]
	
	$global:vmSelectedStep4 = $treeviewVMListStep4.SelectedNode.Text
	
	$labelVMNameStep4.Text = "VM: $($global:vmSelectedStep4)"
	
	if ($treeviewVMListStep4.SelectedNode.Text -in $global:vmWorkgroupDomain.VMName)
	{
		$labelOK1.Visible = $true		
	}
	else
	{
		$labelOK1.Visible = $false
	}
	
	if ($treeviewVMListStep4.SelectedNode.Text -in $global:vmOSKeys.VMName)
	{
		$vmTemp = $global:vmOSKeys | ?{ $_.VMName -eq $treeviewVMListStep4.SelectedNode.Text }
		
		if ($vmTemp.UseKMS -eq "Yes")
		{
			$radiobuttonKMSKey.Checked = $true
			$buttonProductKey.Text = "KMS Key"
		}
		elseif ($vmTemp.UseKMS -eq "No")
		{
			$radiobuttonRetailKey.Checked = $true
			$buttonProductKey.Text = "Retail Key"
		}
	}
	else
	{
		$radiobuttonKMSKey.Checked = $false
		$radiobuttonRetailKey.Checked = $false
		$buttonProductKey.Text = "Product Key"
		$buttonProductKey.Enabled = $false
	}
	
}

$radiobuttonDomain_CheckedChanged={
	
	if ($radiobuttonDomain.Checked) { $buttonDomainWorkgroup.Enabled = $true; $buttonSetWorkgroup.Enabled = $false }
	elseif ($radiobuttonWorkgroup.Checked) { $buttonDomainWorkgroup.Enabled = $false; $buttonSetWorkgroup.Enabled = $true }
	
}

$buttonOpenFeatureSelection_Click={
	
	if ((Show-WindowsFeatures_psf -VMName $global:vmSelectedStep4) -eq 'OK')
	{
	}
}

$buttonAddLocalUsers_Click={
	
	if ((Show-AddLocalUsers_psf -VMName $global:vmSelectedStep4) -eq 'OK'){}
	
}

$comboboxTimezone_SelectedIndexChanged={
	
	$global:vmTimeZones = $comboboxTimezone.Text
	
	$global:vmTimeZones | Out-File "$logDirectory\tz.log"
		
}

$treeviewVMListStep3_AfterSelect=[System.Windows.Forms.TreeViewEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TreeViewEventArgs]
				
	$global:vmSelectedStep3 = $treeviewVMListStep3.SelectedNode.Text
	
	$labelVMStep3.Text = "VM: $($global:vmSelectedStep3)"
	
}

$listviewVMsStep2_SelectedIndexChanged={
				
	$rowTmp = $global:vmBuilds | ?{ $_.VMName -eq $listviewVMsStep2.SelectedItems.Text }
	
	$labelStep2CPU.Text = "CPU: $($rowTmp.NumCPU)"
	$labelStep2Memory.Text = "Memory: $($rowTmp.Memory)"
	$labelStep2Network.Text = "Network: $($rowTmp.Network)"
	$labelStep2VMName.Text = "VM Name: $($rowTmp.VMName)"
	
	$buttonDuplicateVMBuild.Enabled = $true
	
}
$buttonVDiskAdd_Click={
	
	if ((Show-AddVirtualDisk_psf -VMName $treeviewVMListStep3.SelectedNode.Text) -eq 'OK')
	{ }
	
}

$buttonVNICAdd_Click={
	
	if ((Show-AddNicCard_psf -VMName $treeviewVMListStep3.SelectedNode.Text) -eq 'OK')
	{ }
	
}



$maskedtextboxHostname_Enter={
	#TODO: Place custom script here
	$maskedtextboxHostname.Select(0,0)
}

$buttonSetHostname_Click={
	
	if ((Show-SetHostname_psf -VMName $treeviewVMListStep4.SelectedNode.Text) -eq 'OK')
	{ }
}

$buttonDomainWorkgroup_Click={
	
	if ((Show-WorkgroupDomainJoin_psf) -eq 'OK')
	{ }	
}

$buttonSet_Click={
	
	if ((Show-GetAdminPassword_psf) -eq 'OK')
	{ }
}

$buttonAdminRename_Click={
	#TODO: Place custom script here
	if ((Show-RenameAdminAccount_psf) -eq 'OK')
	{ }
}

$buttonProductKey_Click={
	
	if ($radiobuttonRetailKey.Checked)
	{
		if ((Show-EnterRetailKey_psf -VMName $treeviewVMListStep4.SelectedNode.Text) -eq 'OK')
		{ }
	}
	elseif ($radiobuttonKMSKey.Checked)
	{
		if ((Show-EnterKMSKey_psf -VMName $treeviewVMListStep4.SelectedNode.Text) -eq 'OK')
		{ }
	}
	
}

$radiobuttonRetailKey_CheckedChanged={
	
	if ($radiobuttonRetailKey.Checked)
	{
		$buttonProductKey.Text = "Retail Key"
		$buttonProductKey.Enabled = $true
	}
	
}

$radiobuttonKMSKey_CheckedChanged={
	
	if ($radiobuttonKMSKey.Checked)
	{
		$buttonProductKey.Text = "KMS Key"
		$buttonProductKey.Enabled = $true
	}
}


$buttonSelectScripts_Click={
	
	if ((Show-AddPostInstallScripts_psf) -eq 'OK')
	{ }
}

$buttonDuplicateVMBuild_Click={
	
	$listviewVMsStep2.SelectedItems.Text | Out-File "$logDirectory\step2.txt"
	
	if ((Show-DuplicateVM_psf -VMName $listviewVMsStep2.SelectedItems.Text) -eq 'OK')
	{ }
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>